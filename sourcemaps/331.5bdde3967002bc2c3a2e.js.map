{"version":3,"file":"js/331.b05a353baf3394a51051.js","mappings":"yQAYMA,EAAc,SAAC,GAAgB,MAAdC,EAAc,EAAdA,QACfC,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,eACXC,GAAOC,EAAAA,EAAAA,cAAY,qBAAGC,aAAgCF,QACtDG,GAAkBF,EAAAA,EAAAA,cACtB,qBAAGC,aAAgCC,mBAE/BC,EAAQ,WAAGC,EAAAA,EAAAA,eAAcC,gBAAjB,aAAG,EAAwBC,MAAM,KAC/C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,GAAmBC,EAAAA,EAAAA,cAAY,WACnC,IAAMC,EAAS,GAEfA,EAAOC,KAAK,CACVC,MAAO,GAAF,OAAKnB,EAAKoB,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoDb,EAAS,IAClEc,SAAU,IAAF,OAAMd,EAAS,MAIL,oBAAhBA,EAAS,IAAgD,IAApBA,EAASe,QAChDN,EAAOC,KAAK,CACVC,MAAOf,EAAKoB,YACZF,SAAU,IAAF,OAAMd,EAAS,GAAf,YAAqBA,EAAS,MAI1CM,EAASG,KACR,CAACjB,EAAMQ,EAAUJ,EAAKoB,cAmBzB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAqBC,EAEL,oBAAhBlB,EAAS,IAAgD,IAApBA,EAASe,QAFzBG,EAGL,CAAEC,QAASnB,EAAS,IAHRN,GAAS0B,EAAAA,EAAAA,IAAUF,KAI3CX,MAEH,KAEHU,EAAAA,EAAAA,YAAU,WACgB,cAApBlB,GACFQ,MAID,CAACR,IAGF,kBAAC,aAAD,MACwB,cAApBA,GAAmCM,EAAMU,OAAS,IAClD,kBAAC,IAAD,CAAYM,OAAO,UAChBhB,EAAMiB,KAAI,SAACC,EAASC,GAAV,OACT,kBAAC,IAAD,CAAgBA,IAAKA,GACnB,kBAAC,EAAAC,KAAD,CAAMC,GAAIH,EAAQT,UAAWS,EAAQZ,WAGzC,kBAAC,IAAD,CAAgBgB,UAAQ,GAAEpC,IAGT,YAApBQ,GAAiCP,EAAKoB,cAAcC,EAAAA,EAAAA,WAK3DvB,EAAYsC,UAAY,CACtBrC,QAASsC,IAAAA,QAGX","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchRule } from '../../Store/AppActions';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const rule = useSelector(({ AdvisorStore }) => AdvisorStore.rule);\n  const ruleFetchStatus = useSelector(\n    ({ AdvisorStore }) => AdvisorStore.ruleFetchStatus\n  );\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n      navigate: `/${location[1]}`,\n    });\n\n    // if applicable, add :id breadcrumb\n    if (location[1] === 'recommendations' && location.length === 4) {\n      crumbs.push({\n        title: rule.description,\n        navigate: `/${location[1]}/${location[2]}`,\n      });\n    }\n\n    setItems(crumbs);\n  }, [intl, location, rule.description]);\n\n  useEffect(() => {\n    const getRuleName = (id) => dispatch(fetchRule(id));\n\n    location[1] === 'recommendations' && location.length === 4\n      ? getRuleName({ rule_id: location[2] })\n      : buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (ruleFetchStatus === 'fulfilled') {\n      buildBreadcrumbs();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ruleFetchStatus]);\n\n  return (\n    <React.Fragment>\n      {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n      {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n"],"names":["Breadcrumbs","current","intl","useIntl","dispatch","useDispatch","rule","useSelector","AdvisorStore","ruleFetchStatus","location","useLocation","pathname","split","useState","items","setItems","buildBreadcrumbs","useCallback","crumbs","push","title","formatMessage","messages","navigate","length","description","useEffect","id","rule_id","fetchRule","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes"],"sourceRoot":""}