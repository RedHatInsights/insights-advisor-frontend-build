{"version":3,"sources":["webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/Modals/ViewHostAcks.js","webpack:///./src/PresentationalComponents/RuleRating/RuleRating.js","webpack:///./src/PresentationalComponents/RuleDetails/RuleDetails.js","webpack:///./src/Utilities/BarDividedList.js","webpack:///./src/PresentationalComponents/RuleLabels/RuleLabels.js","webpack:///./src/Utilities/Debounce.js"],"names":["DisableRule","handleModalToggle","isModalOpen","host","hosts","rule","afterFn","intl","useIntl","dispatch","useDispatch","notification","data","addNotification","useState","justification","setJustificaton","undefined","length","singleSystem","setSingleSystem","bulkHostActions","systems","API","BASE_URL","rule_id","variant","dismissable","timeout","title","formatMessage","messages","description","disableRule","rule_status","options","type","system_uuid","id","AppActions","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","isChecked","onChange","label","name","aria-describedby","value","text","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","system","ViewHostAcks","fetchHostAcks","hostAcksFetchStatus","hostAcks","columns","rows","setRows","unclean","setUnclean","deleteAck","limit","hosts_acked_count","useEffect","map","item","cells","display_name","date","Date","updated_at","isInline","size","asMutable","width","Table","aria-label","TableHeader","TableBody","props","colSpan","injectIntl","connect","AdvisorStore","ownProps","setAck","RuleRating","rating","setRating","submitted","setSubmitted","thankYou","setThankYou","updateRuleRating","newRating","calculatedRating","AppConstants","setTimeout","console","error","className","RuleDetails","list","children","resolutionRisk","topics","header","isDetailsPage","topicLinks","topic","tag","split","tags","slug","Link","to","ruleDescription","isGeneric","Boolean","rehypePlugins","rehypeRaw","rehypeSanitize","Split","hasGutter","SplitItem","Stack","StackItem","generic","summary","node_id","rel","target","href","element","index","impacted_systems_count","gutter","InsightsLabel","total_risk","TextContent","Text","component","TextVariants","risk","TOTAL_RISK_LABEL_LOWER","strong","str","SeverityLine","level","LIKELIHOOD_LABEL","likelihood","tooltipMessage","LIKELIHOOD_LABEL_LOWER","IMPACT_LABEL","impact","IMPACT_LABEL_LOWER","RISK_OF_CHANGE_LABEL","hideIcon","RISK_OF_CHANGE_DESC","reboot_required","status","RuleLabels","search","Tooltip","content","position","TooltipPosition","color","delay","debouncedValue","setDebouncedValue","handler","clearTimeout"],"mappings":"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","file":"js/660.eb450d3c71c741ce0ab6.js","sourcesContent":["import * as AppActions from '../../AppActions';\n\nimport React, { useState } from 'react';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const setAck = (data) => dispatch(AppActions.setAck(data));\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await API.post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForSystem),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options);\n        singleSystem\n          ? notification({\n              variant: 'success',\n              timeout: true,\n              dismissable: true,\n              title: intl.formatMessage(\n                messages.recSuccessfullyDisabledForSystem\n              ),\n            })\n          : notification({\n              variant: 'success',\n              timeout: true,\n              dismissable: true,\n              title: intl.formatMessage(messages.recSuccessfullyDisabled),\n            });\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { fetchHostAcks, setAck } from '../../AppActions';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { List } from 'react-content-loader';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport PropTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst ViewHostAcks = ({\n  fetchHostAcks,\n  hostAcksFetchStatus,\n  handleModalToggle,\n  intl,\n  isModalOpen,\n  hostAcks,\n  rule,\n  afterFn,\n}) => {\n  const columns = [\n    intl.formatMessage(messages.systemName),\n    intl.formatMessage(messages.justificationNote),\n    intl.formatMessage(messages.dateDisabled),\n    '',\n  ];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const deleteAck = async (host) => {\n    try {\n      await API.delete(`${BASE_URL}/hostack/${host.id}/`);\n      fetchHostAcks({ rule_id: rule.rule_id, limit: rule.hosts_acked_count });\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (hostAcks.data) {\n      const rows = hostAcks.data\n        .map((item) => ({\n          cells: [\n            item.display_name || item.system_uuid,\n            item.justification || intl.formatMessage(messages.none),\n            {\n              title: (\n                <DateFormat date={new Date(item.updated_at)} type=\"onlyDate\" />\n              ),\n            },\n            {\n              title: (\n                <Button\n                  key={item.system_uuid}\n                  isInline\n                  variant=\"link\"\n                  onClick={() => deleteAck(item)}\n                >\n                  <OutlinedBellIcon size=\"sm\" /> &nbsp;{' '}\n                  {intl.formatMessage(messages.enable)}\n                </Button>\n              ),\n            },\n          ],\n        }))\n        .asMutable();\n\n      if (!rows.length) {\n        afterFn();\n        handleModalToggle(false);\n      }\n\n      setRows(rows);\n    }\n  }, [hostAcks]);\n\n  useEffect(() => {\n    fetchHostAcks({ rule_id: rule.rule_id, limit: rule.hosts_acked_count });\n  }, [fetchHostAcks, rule.hosts_acked_count, rule.rule_id]);\n\n  return (\n    <Modal\n      width={'50%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {hostAcksFetchStatus === 'fulfilled' && (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n      {hostAcksFetchStatus !== 'fulfilled' && (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  intl: PropTypes.any,\n  rule: PropTypes.object,\n  fetchHostAcks: PropTypes.func,\n  hostAcks: PropTypes.object,\n  hostAcksFetchStatus: PropTypes.string,\n  addNotification: PropTypes.func,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  rule: {},\n  afterFn: () => undefined,\n};\n\nconst mapStateToProps = ({ AdvisorStore, ownProps }) => ({\n  hostAcks: AdvisorStore.hostAcks,\n  hostAcksFetchStatus: AdvisorStore.hostAcksFetchStatus,\n  ...ownProps,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAck: (data) => dispatch(setAck(data)),\n  fetchHostAcks: (data) => dispatch(fetchHostAcks(data)),\n  addNotification: (data) => dispatch(addNotification(data)),\n});\n\nexport default injectIntl(\n  connect(mapStateToProps, mapDispatchToProps)(ViewHostAcks)\n);\n","import './_RuleRating.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport React, { useState } from 'react';\n\nimport API from '../../Utilities/Api';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport OutlinedThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-down-icon';\nimport OutlinedThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-up-icon';\nimport PropTypes from 'prop-types';\nimport ThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/thumbs-down-icon';\nimport ThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/thumbs-up-icon';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleRating = ({ intl, rule }) => {\n  const [rating, setRating] = useState(rule.rating);\n  const [submitted, setSubmitted] = useState(false);\n  const [thankYou, setThankYou] = useState(\n    intl.formatMessage(messages.feedbackThankyou)\n  );\n  const updateRuleRating = async (newRating) => {\n    const calculatedRating = rating === newRating ? 0 : newRating;\n    try {\n      await API.post(\n        `${AppConstants.BASE_URL}/rating/`,\n        {},\n        { rule: rule.rule_id, rating: calculatedRating }\n      );\n      setRating(calculatedRating);\n      setSubmitted(true);\n      setTimeout(() => setThankYou(''), 3000);\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n  };\n\n  return (\n    <span className=\"ratingSpanOverride\">\n      {intl.formatMessage(messages.ruleHelpful)}\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-up\"\n        onClick={() => updateRuleRating(1)}\n        ouiaId=\"thumbsUp\"\n      >\n        {rating === 1 ? (\n          <ThumbsUpIcon className=\"like\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsUpIcon size=\"sm\" />\n        )}\n      </Button>\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-down\"\n        onClick={() => updateRuleRating(-1)}\n        ouiaId=\"thumbsDown\"\n      >\n        {rating === -1 ? (\n          <ThumbsDownIcon className=\"dislike\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsDownIcon size=\"sm\" />\n        )}\n      </Button>\n      {submitted && thankYou}\n    </span>\n  );\n};\n\nRuleRating.propTypes = {\n  intl: PropTypes.any,\n  rule: PropTypes.object,\n};\n\nexport default injectIntl(RuleRating);\n","/* eslint max-len: 0 */\nimport './_RuleDetails.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport {\n  Split,\n  SplitItem,\n} from '@patternfly/react-core/dist/js/layouts/Split/index';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/js/layouts/Stack/index';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { compact, intersection } from 'lodash';\n\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport Markdown from 'react-markdown';\nimport PowerOffIcon from '@patternfly/react-icons/dist/js/icons/power-off-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport RuleRating from '../RuleRating/RuleRating';\nimport { SeverityLine } from '@redhat-cloud-services/frontend-components-charts/esm/SeverityLine';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport barDividedList from '../../Utilities/BarDividedList';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeSanitize from 'rehype-sanitize';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst RuleDetails = ({\n  children,\n  rule,\n  resolutionRisk,\n  intl,\n  topics,\n  header,\n  isDetailsPage,\n}) => {\n  const topicLinks = () =>\n    topics &&\n    compact(\n      topics.map(\n        (topic) =>\n          intersection(topic.tag.split(' '), rule.tags.split(' ')).length && (\n            <React.Fragment key={topic.slug}>\n              <Link to={`/topics/${topic.slug}`}>{`${topic.name}`}</Link>\n            </React.Fragment>\n          )\n      )\n    );\n\n  const ruleDescription = (data, isGeneric) =>\n    typeof data === 'string' &&\n    Boolean(data) && (\n      <span className={isGeneric && 'genericOverride'}>\n        <Markdown rehypePlugins={[rehypeRaw, rehypeSanitize]}>{data}</Markdown>\n      </span>\n    );\n\n  return (\n    <Split className=\"ins-c-rule-details__split\" hasGutter>\n      <SplitItem>\n        <Stack hasGutter>\n          {header && <StackItem>{header}</StackItem>}\n          <StackItem>\n            {isDetailsPage\n              ? ruleDescription(rule.generic, true)\n              : ruleDescription(rule.summary)}\n          </StackItem>\n          {rule.node_id && (\n            <StackItem>\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={`https://access.redhat.com/node/${rule.node_id}`}\n              >\n                {intl.formatMessage(messages.knowledgebaseArticle)}&nbsp;\n                <ExternalLinkAltIcon size=\"sm\" />\n              </a>\n            </StackItem>\n          )}\n          {topics && rule.tags && topicLinks().length > 0 && (\n            <StackItem>\n              <strong>{intl.formatMessage(messages.topicRelatedToRule)}</strong>\n              <br />\n              {barDividedList(topicLinks())}\n            </StackItem>\n          )}\n          {isDetailsPage && <RuleRating rule={rule} />}\n          {!isDetailsPage && rule.impacted_systems_count > 0 && (\n            <StackItem>\n              <Link\n                key={`${rule.rule_id}-link`}\n                to={`/recommendations/${rule.rule_id}`}\n              >\n                {intl.formatMessage(messages.viewAffectedSystems, {\n                  systems: rule.impacted_systems_count,\n                })}\n              </Link>\n            </StackItem>\n          )}\n        </Stack>\n      </SplitItem>\n      <SplitItem>\n        <Stack gutter=\"sm\">\n          {children && <StackItem>{children}</StackItem>}\n          <StackItem>\n            <Stack className=\"ins-c-rule-details__stack\">\n              <StackItem>\n                <strong>{intl.formatMessage(messages.totalRisk)}</strong>\n              </StackItem>\n              <StackItem className=\"pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm\">\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel value={rule.total_risk} />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {intl.formatMessage(\n                            messages.rulesDetailsTotalriskBody,\n                            {\n                              risk:\n                                AppConstants.TOTAL_RISK_LABEL_LOWER[\n                                  rule.total_risk\n                                ] || intl.formatMessage(messages.undefined),\n                              strong: (str) => strong(str),\n                            }\n                          )}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <Stack>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.likelihoodLevel, {\n                            level:\n                              AppConstants.LIKELIHOOD_LABEL[rule.likelihood],\n                          })}\n                          value={rule.likelihood}\n                          tooltipMessage={intl.formatMessage(\n                            messages.likelihoodDescription,\n                            {\n                              level:\n                                AppConstants.LIKELIHOOD_LABEL_LOWER[\n                                  rule.likelihood\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.impactLevel, {\n                            level:\n                              AppConstants.IMPACT_LABEL[rule.impact.impact],\n                          })}\n                          value={rule.impact.impact}\n                          tooltipMessage={intl.formatMessage(\n                            messages.impactDescription,\n                            {\n                              level:\n                                AppConstants.IMPACT_LABEL_LOWER[\n                                  rule.impact.impact\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                    </Stack>\n                  </Stack>\n                </span>\n              </StackItem>\n              <hr></hr>\n              <StackItem>\n                <strong>{intl.formatMessage(messages.riskofchange)}</strong>\n              </StackItem>\n              <StackItem\n                className={`pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm`}\n              >\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel\n                      text={AppConstants.RISK_OF_CHANGE_LABEL[resolutionRisk]}\n                      value={resolutionRisk}\n                      hideIcon\n                    />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {resolutionRisk\n                            ? AppConstants.RISK_OF_CHANGE_DESC[resolutionRisk]\n                            : intl.formatMessage(messages.undefined)}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <StackItem>\n                      <span className=\"system-reboot-message\">\n                        <PowerOffIcon\n                          className={\n                            rule.reboot_required\n                              ? 'reboot-required-icon'\n                              : 'no-reboot-required-icon'\n                          }\n                        />\n                        <TextContent className=\"system-reboot-message__content\">\n                          <Text component={TextVariants.p}>\n                            {intl.formatMessage(messages.systemReboot, {\n                              strong: (str) => strong(str),\n                              status: rule.reboot_required\n                                ? intl.formatMessage(messages.is)\n                                : intl.formatMessage(messages.isNot),\n                            })}\n                          </Text>\n                        </TextContent>\n                      </span>\n                    </StackItem>\n                  </Stack>\n                </span>\n              </StackItem>\n            </Stack>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRuleDetails.propTypes = {\n  children: PropTypes.any,\n  rule: PropTypes.object,\n  resolutionRisk: PropTypes.number,\n  intl: PropTypes.any,\n  topics: PropTypes.array,\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool,\n};\n\nexport default injectIntl(RuleDetails);\n","import React from 'react';\nimport './_BarDividedList.scss';\n\nconst BarDividedList = (list) =>\n  list.map((element, index) => (\n    <React.Fragment key={index}>\n      {element}\n      {index + 1 !== list.length && (\n        <strong className=\"verticalDivider\">&nbsp;&#124;&nbsp;</strong>\n      )}\n    </React.Fragment>\n  ));\n\nexport default BarDividedList;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ intl, rule }) => (\n  <React.Fragment>\n    {rule.tags.search('incident') !== -1 && (\n      <Tooltip\n        content={intl.formatMessage(messages.incidentTooltip)}\n        position={TooltipPosition.right}\n      >\n        <Label color=\"red\" className=\"incidentLabel\">\n          {intl.formatMessage(messages.incident)}\n        </Label>\n      </Tooltip>\n    )}\n    {rule.rule_status === 'disabled' && (\n      <Tooltip\n        content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n        position={TooltipPosition.right}\n      >\n        <Label color=\"gray\">{intl.formatMessage(messages.disabled)}</Label>\n      </Tooltip>\n    )}\n    {rule.rule_status === 'rhdisabled' && (\n      <Tooltip\n        content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n        position={TooltipPosition.right}\n      >\n        <Label color=\"gray\">\n          {intl.formatMessage(messages.redhatDisabled)}\n        </Label>\n      </Tooltip>\n    )}\n  </React.Fragment>\n);\n\nRuleLabels.propTypes = {\n  intl: PropTypes.any,\n  rule: PropTypes.object,\n};\n\nexport default injectIntl(RuleLabels);\n","import { useEffect, useState } from 'react';\n\nconst Debounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n};\n\nexport default Debounce;\n"],"sourceRoot":""}