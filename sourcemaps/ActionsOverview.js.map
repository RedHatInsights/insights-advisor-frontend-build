{"version":3,"sources":["webpack:///./src/SmartComponents/Actions/ActionsOverview.js"],"names":["SummaryChart","asyncComponent","__webpack_require__","e","then","bind","SummaryChartItem","ConditionalLink","ActionsOverviewDonut","ActionsOverview","severity","total","category","sevNames","insights","chrome","auth","getUser","this","props","fetchStats","setBreadcrumbs","title","navigate","prevProps","stats","rules","setState","Info","Warn","Error","Critical","Availability","Security","Stability","Performance","_this2","statsFetchStatus","SummaryChartItems","state","map","value","key","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","condition","wrap","children","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","to","concat","toLowerCase","name","numIssues","totalIssues","Fragment","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_20__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_15__","gutter","xl","sm","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_16__","lg","md","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_17__","className","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_18__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_19__","_PresentationalComponents_Loading_Loading__WEBPACK_IMPORTED_MODULE_22__","Component","propTypes","breadcrumbs","PropTypes","array","func","string","object","routerParams","connect","ownProps","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","AdvisorStore","dispatch","url","AppActions","obj"],"mappings":"0ZAYMA,UAAeC,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cACpCC,EAAmBL,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aACxCE,EAAkBN,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aACvCG,EAAuBP,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAE5CI,4MACK,CACJC,SAAU,GACVC,MAAO,EACPC,SAAU,GACVC,SAAU,CAAE,MAAO,SAAU,OAAQ,iMAI/BC,SAASC,OAAOC,KAAKC,iBAC3BC,KAAKC,MAAMC,aACXF,KAAKC,MAAME,eAAe,CAAC,CAAEC,MAAO,UAAWC,SAAU,2JAGzCC,GAChB,GAAIN,KAAKC,MAAMM,QAAUD,EAAUC,MAAO,CACtC,IAAMC,EAAQR,KAAKC,MAAMM,MAAMC,MAC/BR,KAAKS,SAAS,CAAEjB,SAAU,CAAEgB,EAAMhB,SAASkB,KAAMF,EAAMhB,SAASmB,KAAMH,EAAMhB,SAASoB,MAAOJ,EAAMhB,SAASqB,YAC3Gb,KAAKS,SAAS,CACVf,SAAU,CAAEc,EAAMd,SAASoB,aAAcN,EAAMd,SAASqB,SAAUP,EAAMd,SAASsB,UAAWR,EAAMd,SAASuB,eAE/GjB,KAAKS,SAAS,CAAEhB,MAAOe,EAAMf,0CAI3B,IAAAyB,EAAAlB,KAEFmB,EACAnB,KAAKC,MADLkB,iBAGEC,EAAoBpB,KAAKqB,MAAM7B,SAAS8B,IAAI,SAACC,EAAOC,GAAR,OAC9CC,EAAAC,EAAAC,cAACtC,EAAD,CACImC,IAAMA,EACNI,UAAYL,EACZM,KAAO,SAAAC,GAAQ,OACXL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,YAAAC,OAAef,EAAKG,MAAM1B,SAAS6B,GAAKU,cAAxC,UACFJ,KAGVL,EAAAC,EAAAC,cAACvC,EAAD,CACI+C,KAAOjB,EAAKG,MAAM1B,SAAS6B,GAC3BY,UAAYb,EACZc,YAAcnB,EAAKG,MAAM5B,WAIrC,OACIgC,EAAAC,EAAAC,cAACF,EAAAC,EAAMY,SAAP,KACIb,EAAAC,EAAAC,cAACY,EAAA,WAAD,KACId,EAAAC,EAAAC,cAACY,EAAA,gBAAD,CAAiBnC,MAAM,aAE3BqB,EAAAC,EAAAC,cAACY,EAAA,KAAD,KACId,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,OAAO,KAAKC,GAAK,EAAIC,GAAK,GAC5BlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAUF,GAAK,EAAIG,GAAK,EAAIC,GAAK,GAAKH,GAAK,IACvClB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,UAAU,+BACZvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,yBACAxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAC2B,cAArB/B,GACEM,EAAAC,EAAAC,cAACrC,EAAD,CAAsBI,SAAWM,KAAKqB,MAAM3B,WAEzB,YAArByB,GAAmCM,EAAAC,EAAAC,cAACwB,EAAA,EAAD,SAIjD1B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAUF,GAAK,EAAIG,GAAK,EAAIC,GAAK,IAC7BrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,UAAU,+BACZvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,qBACAxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAC2B,cAArB/B,GACEM,EAAAC,EAAAC,cAAC7C,EAAD,KACMsC,GAGa,YAArBD,GAAmCM,EAAAC,EAAAC,cAACwB,EAAA,EAAD,mBAzE1CC,aAoF9B7D,EAAgB8D,UAAY,CACxBC,YAAaC,IAAUC,MACvBtD,WAAYqD,IAAUE,KACtBtD,eAAgBoD,IAAUE,KAC1BtC,iBAAkBoC,IAAUG,OAC5BnD,MAAOgD,IAAUI,QAeNC,iCAAaC,kBAZJ,SAACxC,EAAOyC,GAAR,OAAAC,IAAA,CACpBT,YAAajC,EAAM2C,aAAaV,YAChC/C,MAAOc,EAAM2C,aAAazD,MAC1BY,iBAAkBE,EAAM2C,aAAa7C,kBAClC2C,IAGoB,SAAAG,GAAQ,MAAK,CACpC/D,WAAY,SAACgE,GAAD,OAASD,EAASE,IAAsBD,KACpD/D,eAAgB,SAACiE,GAAD,OAASH,EAASE,IAA0BC,OAGpCP,CAG1BtE","file":"js/ActionsOverview.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardHeader, Grid, GridItem } from '@patternfly/react-core';\nimport { Main, PageHeader, PageHeaderTitle, routerParams } from '@red-hat-insights/insights-frontend-components';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport '../../App.scss';\n\nconst SummaryChart = asyncComponent(() => import('../../PresentationalComponents/SummaryChart/SummaryChart'));\nconst SummaryChartItem = asyncComponent(() => import('../../PresentationalComponents/SummaryChartItem/SummaryChartItem'));\nconst ConditionalLink = asyncComponent(() => import('../../PresentationalComponents/ConditionalLink/ConditionalLink'));\nconst ActionsOverviewDonut = asyncComponent(() => import('../../PresentationalComponents/Charts/ActionsOverviewDonut'));\n\nclass ActionsOverview extends Component {\n   state = {\n       severity: [],\n       total: 0,\n       category: [],\n       sevNames: [ 'Low', 'Medium', 'High', 'Critical' ]\n   };\n\n   async componentDidMount () {\n       await insights.chrome.auth.getUser();\n       this.props.fetchStats();\n       this.props.setBreadcrumbs([{ title: 'Actions', navigate: '/actions' }]);\n   }\n\n   componentDidUpdate (prevProps) {\n       if (this.props.stats !== prevProps.stats) {\n           const rules = this.props.stats.rules;\n           this.setState({ severity: [ rules.severity.Info, rules.severity.Warn, rules.severity.Error, rules.severity.Critical ]});\n           this.setState({\n               category: [ rules.category.Availability, rules.category.Security, rules.category.Stability, rules.category.Performance ]\n           });\n           this.setState({ total: rules.total });\n       }\n   }\n\n   render () {\n       const {\n           statsFetchStatus\n       } = this.props;\n\n       const SummaryChartItems = this.state.severity.map((value, key) =>\n           <ConditionalLink\n               key={ key }\n               condition={ value }\n               wrap={ children =>\n                   <Link to={ `/actions/${this.state.sevNames[key].toLowerCase()}-risk` }>\n                       { children }\n                   </Link>\n               }>\n               <SummaryChartItem\n                   name={ this.state.sevNames[key] }\n                   numIssues={ value }\n                   totalIssues={ this.state.total }/>\n           </ConditionalLink>\n       );\n\n       return (\n           <React.Fragment>\n               <PageHeader>\n                   <PageHeaderTitle title='Actions'/>\n               </PageHeader>\n               <Main>\n                   <Grid gutter='md' xl={ 4 } sm={ 6 }>\n                       <GridItem xl={ 6 } lg={ 7 } md={ 10 } sm={ 10 }>\n                           <Card className='pf-t-light  pf-m-opaque-100'>\n                               <CardHeader>Category Summary</CardHeader>\n                               <CardBody>\n                                   { statsFetchStatus === 'fulfilled' && (\n                                       <ActionsOverviewDonut category={ this.state.category }/>\n                                   ) }\n                                   { statsFetchStatus === 'pending' && (<Loading/>) }\n                               </CardBody>\n                           </Card>\n                       </GridItem>\n                       <GridItem xl={ 6 } lg={ 5 } md={ 10 }>\n                           <Card className='pf-t-light  pf-m-opaque-100'>\n                               <CardHeader>Risk Summary</CardHeader>\n                               <CardBody>\n                                   { statsFetchStatus === 'fulfilled' && (\n                                       <SummaryChart>\n                                           { SummaryChartItems }\n                                       </SummaryChart>\n                                   ) }\n                                   { statsFetchStatus === 'pending' && (<Loading/>) }\n                               </CardBody>\n                           </Card>\n                       </GridItem>\n                   </Grid>\n               </Main>\n           </React.Fragment>\n       );\n   }\n}\n\nActionsOverview.propTypes = {\n    breadcrumbs: PropTypes.array,\n    fetchStats: PropTypes.func,\n    setBreadcrumbs: PropTypes.func,\n    statsFetchStatus: PropTypes.string,\n    stats: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    breadcrumbs: state.AdvisorStore.breadcrumbs,\n    stats: state.AdvisorStore.stats,\n    statsFetchStatus: state.AdvisorStore.statsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchStats: (url) => dispatch(AppActions.fetchStats(url)),\n    setBreadcrumbs: (obj) => dispatch(AppActions.setBreadcrumbs(obj))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ActionsOverview));\n"],"sourceRoot":""}