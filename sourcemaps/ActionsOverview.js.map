{"version":3,"sources":["webpack:///./src/SmartComponents/Actions/ActionsOverview.js"],"names":["SummaryChart","asyncComponent","__webpack_require__","e","then","bind","ActionsOverviewDonut","Promise","all","ActionsOverview","rulesTotalRisk","reportsTotalRisk","total","category","insights","chrome","auth","getUser","this","props","fetchStats","setBreadcrumbs","title","navigate","prevProps","stats","rules","setState","total_risk","reports","Availability","Stability","Performance","Security","statsFetchStatus","_this$state","state","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","Fragment","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_17__","className","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_14__","gutter","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_15__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_16__","size","headingLevel","_PresentationalComponents_Loading_Loading__WEBPACK_IMPORTED_MODULE_19__","Component","propTypes","match","PropTypes","object","breadcrumbs","array","func","string","routerParams","connect","ownProps","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","AdvisorStore","dispatch","url","AppActions","obj"],"mappings":"qXAWMA,UAAeC,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cACpCC,EAAuBL,YAAe,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAE5CI,uMACM,CACJC,eAAgB,GAChBC,iBAAkB,GAClBC,MAAO,EACPC,SAAU,wLAIJC,SAASC,OAAOC,KAAKC,iBAC3BC,KAAKC,MAAMC,aACXF,KAAKC,MAAME,eAAe,CAAC,CAAEC,MAAO,WAAYC,SAAU,2JAG1CC,GAChB,GAAIN,KAAKC,MAAMM,QAAUD,EAAUC,MAAO,CACtC,IAAMC,EAAQR,KAAKC,MAAMM,MAAMC,MAC/BR,KAAKS,SAAS,CAAEjB,eAAgBgB,EAAME,WAAYjB,iBAAkBO,KAAKC,MAAMM,MAAMI,QAAQD,aAC7FV,KAAKS,SAAS,CACVd,SAAU,CAAEa,EAAMb,SAASiB,aAAcJ,EAAMb,SAASkB,UAAWL,EAAMb,SAASmB,YAAaN,EAAMb,SAASoB,YAElHf,KAAKS,SAAS,CAAEf,MAAOc,EAAMd,0CAI3B,IAEFsB,EACAhB,KAAKC,MADLe,iBAFEC,EAIiDjB,KAAKkB,MAApD1B,EAJFyB,EAIEzB,eAAgBC,EAJlBwB,EAIkBxB,iBAAkBE,EAJpCsB,EAIoCtB,SAC1C,OAAOwB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAACE,EAAA,WAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,gBAAD,CAAiBnB,MAAM,cAE3Be,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMC,UAAU,cACZL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,OAAO,MACZP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,KAAKC,aAAa,MAA9B,yBACuB,cAArBd,GACEG,EAAAC,EAAAC,cAACvC,EAAD,CAAcU,eAAiBA,EAAiBC,iBAAmBA,IAEhD,YAArBuB,GAAmCG,EAAAC,EAAAC,cAACU,EAAA,EAAD,OAEzCZ,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,KAAKC,aAAa,MAA9B,yBACuB,cAArBd,GACEG,EAAAC,EAAAC,cAACjC,EAAD,CAAsBO,SAAWA,EAAW6B,UAAU,eAEnC,YAArBR,GAAmCG,EAAAC,EAAAC,cAACU,EAAA,EAAD,SAIjDZ,EAAAC,EAAAC,cAACE,EAAA,KAAD,kBApDkBS,aAyD9BzC,EAAgB0C,UAAY,CACxBC,MAAOC,IAAUC,OACjBC,YAAaF,IAAUG,MACvBpC,WAAYiC,IAAUI,KACtBpC,eAAgBgC,IAAUI,KAC1BvB,iBAAkBmB,IAAUK,OAC5BjC,MAAO4B,IAAUC,QAeNK,iCAAaC,kBAZJ,SAACxB,EAAOyB,GAAR,OAAAC,IAAA,CACpBP,YAAanB,EAAM2B,aAAaR,YAChC9B,MAAOW,EAAM2B,aAAatC,MAC1BS,iBAAkBE,EAAM2B,aAAa7B,kBAClC2B,IAGoB,SAAAG,GAAQ,MAAK,CACpC5C,WAAY,SAAC6C,GAAD,OAASD,EAASE,IAAsBD,KACpD5C,eAAgB,SAAC8C,GAAD,OAASH,EAASE,IAA0BC,OAGpCP,CAG1BnD","file":"js/ActionsOverview.js","sourcesContent":["import React, { Component } from 'react';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Gallery, GalleryItem, Title } from '@patternfly/react-core';\nimport { Main, PageHeader, PageHeaderTitle, routerParams } from '@red-hat-insights/insights-frontend-components';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport '../../App.scss';\n\nconst SummaryChart = asyncComponent(() => import('../../PresentationalComponents/Charts/SummaryChart/SummaryChart'));\nconst ActionsOverviewDonut = asyncComponent(() => import('../../PresentationalComponents/Charts/ActionsOverviewDonut'));\n\nclass ActionsOverview extends Component {\n    state = {\n        rulesTotalRisk: {},\n        reportsTotalRisk: {},\n        total: 0,\n        category: []\n    };\n\n    async componentDidMount () {\n        await insights.chrome.auth.getUser();\n        this.props.fetchStats();\n        this.props.setBreadcrumbs([{ title: 'Overview', navigate: '/actions' }]);\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.stats !== prevProps.stats) {\n            const rules = this.props.stats.rules;\n            this.setState({ rulesTotalRisk: rules.total_risk, reportsTotalRisk: this.props.stats.reports.total_risk });\n            this.setState({\n                category: [ rules.category.Availability, rules.category.Stability, rules.category.Performance, rules.category.Security ]\n            });\n            this.setState({ total: rules.total });\n        }\n    }\n\n    render () {\n        const {\n            statsFetchStatus\n        } = this.props;\n        const { rulesTotalRisk, reportsTotalRisk, category } = this.state;\n        return <>\n            <PageHeader>\n                <PageHeaderTitle title='Overview'/>\n            </PageHeader>\n            <Main className='pf-m-light'>\n                <Gallery gutter=\"lg\">\n                    <GalleryItem>\n                        <Title size='lg' headingLevel='h3'>Rule hits by severity</Title>\n                        { statsFetchStatus === 'fulfilled' && (\n                            <SummaryChart rulesTotalRisk={ rulesTotalRisk } reportsTotalRisk={ reportsTotalRisk }/>\n                        ) }\n                        { statsFetchStatus === 'pending' && (<Loading/>) }\n                    </GalleryItem>\n                    <GalleryItem>\n                        <Title size='lg' headingLevel='h3'>Rule hits by category</Title>\n                        { statsFetchStatus === 'fulfilled' && (\n                            <ActionsOverviewDonut category={ category } className='pf-u-mt-md'/>\n                        ) }\n                        { statsFetchStatus === 'pending' && (<Loading/>) }\n                    </GalleryItem>\n                </Gallery>\n            </Main>\n            <Main>&nbsp;</Main>\n        </>;\n    }\n}\n\nActionsOverview.propTypes = {\n    match: PropTypes.object,\n    breadcrumbs: PropTypes.array,\n    fetchStats: PropTypes.func,\n    setBreadcrumbs: PropTypes.func,\n    statsFetchStatus: PropTypes.string,\n    stats: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    breadcrumbs: state.AdvisorStore.breadcrumbs,\n    stats: state.AdvisorStore.stats,\n    statsFetchStatus: state.AdvisorStore.statsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchStats: (url) => dispatch(AppActions.fetchStats(url)),\n    setBreadcrumbs: (obj) => dispatch(AppActions.setBreadcrumbs(obj))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ActionsOverview));\n"],"sourceRoot":""}