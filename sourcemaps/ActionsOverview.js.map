{"version":3,"sources":["webpack:///./src/SmartComponents/Actions/ActionsOverview.js"],"names":["SummaryChart","asyncComponent","__webpack_require__","e","then","bind","SummaryChartItem","ConditionalLink","sevNames","typeNames","ActionsOverview","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","state","severity","total","category","fetchStats","setBreadcrumbs","title","navigate","prevProps","stats","rules","reports","setState","Info","Warn","Error","Critical","Availability","Security","Stability","Performance","_this2","statsFetchStatus","donutValues","map","value","key","SummaryChartItems","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","condition","wrap","children","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","concat","toLowerCase","name","numIssues","totalIssues","Fragment","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_16__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_11__","gutter","xl","sm","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_12__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_13__","className","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_14__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_15__","values","link","totalLabel","identifier","withLegend","renderDonut","_PresentationalComponents_Loading_Loading__WEBPACK_IMPORTED_MODULE_18__","Component","propTypes","breadcrumbs","PropTypes","array","func","string","object","routerParams","connect","ownProps","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","AdvisorStore","dispatch","url","AppActions","obj"],"mappings":"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","file":"js/ActionsOverview.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardHeader, Grid, GridItem } from '@patternfly/react-core';\nimport { Donut, Main, PageHeader, PageHeaderTitle, routerParams } from '@red-hat-insights/insights-frontend-components';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport '../../App.scss';\n\nconst SummaryChart = asyncComponent(() => import('../../PresentationalComponents/SummaryChart/SummaryChart.js'));\nconst SummaryChartItem = asyncComponent(() => import('../../PresentationalComponents/SummaryChartItem/SummaryChartItem.js'));\nconst ConditionalLink = asyncComponent(() => import('../../PresentationalComponents/ConditionalLink/ConditionalLink.js'));\n\nconst sevNames = [ 'Low', 'Medium', 'High', 'Critical' ];\nconst typeNames = [ 'Availability', 'Security', 'Stability', 'Performance' ];\nconst typeLink = '/actions/';\n\nclass ActionsOverview extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            severity: [],\n            total: 0,\n            category: []\n        };\n    }\n\n    componentDidMount () {\n        this.props.fetchStats();\n        this.props.setBreadcrumbs([{ title: 'Actions', navigate: '/actions' }]);\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.stats !== prevProps.stats) {\n            const rules = this.props.stats.reports;\n            this.setState({ severity: [ rules.severity.Info, rules.severity.Warn, rules.severity.Error, rules.severity.Critical ]});\n            this.setState({\n                category: [ rules.category.Availability, rules.category.Security, rules.category.Stability, rules.category.Performance ]\n            });\n            this.setState({ total: rules.total });\n        }\n    }\n\n    render () {\n        const {\n            statsFetchStatus\n        } = this.props;\n\n        const donutValues = this.state.category.map((value, key) => [ typeNames[key], value ]);\n        const renderDonut = (donutValues) =>\n            <Donut key='advisor-donut' values={ donutValues } link={ typeLink } totalLabel='issues' identifier='advisor-donut' withLegend/>;\n\n        const SummaryChartItems = this.state.severity.map((value, key) =>\n            <ConditionalLink\n                key={ key }\n                condition={ value }\n                wrap={ children =>\n                    <Link to={ `/actions/${sevNames[key].toLowerCase()}-risk` }>\n                        { children }\n                    </Link>\n                }>\n                <SummaryChartItem\n                    name={ sevNames[key] }\n                    numIssues={ value }\n                    totalIssues={ this.state.total }/>\n            </ConditionalLink>\n        );\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Actions'/>\n                </PageHeader>\n                <Main>\n                    <Grid gutter='md' xl={ 4 } sm={ 6 }>\n                        <GridItem>\n                            <Card className='pf-t-light  pf-m-opaque-100'>\n                                <CardHeader>Category Summary</CardHeader>\n                                <CardBody>\n                                    { statsFetchStatus === 'fulfilled' && (\n                                        renderDonut(donutValues)\n                                    ) }\n                                    { statsFetchStatus === 'pending' && (<Loading/>) }\n                                </CardBody>\n                            </Card>\n                        </GridItem>\n                        <GridItem>\n                            <Card className='pf-t-light  pf-m-opaque-100'>\n                                <CardHeader>Risk Summary</CardHeader>\n                                <CardBody>\n                                    { statsFetchStatus === 'fulfilled' && (\n                                        <SummaryChart>\n                                            { SummaryChartItems }\n                                        </SummaryChart>\n                                    ) }\n                                    { statsFetchStatus === 'pending' && (<Loading/>) }\n                                </CardBody>\n                            </Card>\n                        </GridItem>\n                    </Grid>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nActionsOverview.propTypes = {\n    breadcrumbs: PropTypes.array,\n    fetchStats: PropTypes.func,\n    setBreadcrumbs: PropTypes.func,\n    statsFetchStatus: PropTypes.string,\n    stats: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    breadcrumbs: state.AdvisorStore.breadcrumbs,\n    stats: state.AdvisorStore.stats,\n    statsFetchStatus: state.AdvisorStore.statsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchStats: (url) => dispatch(AppActions.fetchStats(url)),\n    setBreadcrumbs: (obj) => dispatch(AppActions.setBreadcrumbs(obj))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ActionsOverview));\n\n"],"sourceRoot":""}