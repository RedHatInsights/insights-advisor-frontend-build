{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/SmartComponents/Actions/ActionsOverview.js"],"names":["Loading","SummaryChart","asyncComponent","SummaryChartItem","ConditionalLink","sevNames","typeNames","typeLink","ActionsOverview","props","state","severity","total","category","fetchStats","setBreadcrumbs","title","navigate","prevProps","stats","rules","setState","Info","Warn","Error","Critical","Availability","Security","Stability","Performance","statsFetchStatus","renderDonut","donutValues","SummaryChartItems","map","value","key","push","children","toLowerCase","Component","propTypes","breadcrumbs","PropTypes","array","func","string","object","mapStateToProps","ownProps","AdvisorStore","mapDispatchToProps","dispatch","url","AppActions","obj","routerParams","connect"],"mappings":"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","file":"js/ActionsOverview.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div> Loading... </div>;\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardHeader, Grid, GridItem } from '@patternfly/react-core';\nimport { Donut, Main, PageHeader, PageHeaderTitle, routerParams } from '@red-hat-insights/insights-frontend-components';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport '../../App.scss';\n\nconst SummaryChart = asyncComponent(() => import('../../PresentationalComponents/SummaryChart/SummaryChart.js'));\nconst SummaryChartItem = asyncComponent(() => import('../../PresentationalComponents/SummaryChartItem/SummaryChartItem.js'));\nconst ConditionalLink = asyncComponent(() => import('../../PresentationalComponents/ConditionalLink/ConditionalLink.js'));\n\nconst sevNames = [ 'Low', 'Medium', 'High', 'Critical' ];\nconst typeNames = [ 'Availability', 'Security', 'Stability', 'Performance' ];\nconst typeLink = '/actions/';\n\nclass ActionsOverview extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            severity: [],\n            total: 0,\n            category: []\n        };\n    }\n\n    componentDidMount () {\n        this.props.fetchStats();\n        this.props.setBreadcrumbs([{ title: 'Actions', navigate: '/actions' }]);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.stats !== prevProps.stats) {\n            const rules = this.props.stats.rules;\n            this.setState({ severity: [ rules.severity.Info, rules.severity.Warn, rules.severity.Error, rules.severity.Critical ]});\n            this.setState({\n                category: [ rules.category.Availability, rules.category.Security, rules.category.Stability, rules.category.Performance ]\n            });\n            this.setState({ total: rules.total });\n        }\n    }\n\n    render () {\n        const {\n            statsFetchStatus\n        } = this.props;\n        const renderDonut = (donutValues) =>\n            <Donut key='advisor-donut' values={ donutValues } link={ typeLink } totalLabel='issues' identifier='advisor-donut' withLegend/>;;\n        let donutValues = [];\n        let SummaryChartItems = [];\n\n        this.state.severity.map((value, key) => {\n            SummaryChartItems.push(\n                <ConditionalLink\n                    key={ key }\n                    condition={ value }\n                    wrap={ children =>\n                        <Link to={ `/actions/${sevNames[key].toLowerCase()}-risk` }>\n                            { children }\n                        </Link>\n                    }>\n                    <SummaryChartItem\n                        name={ sevNames[key] }\n                        numIssues={ value }\n                        totalIssues={ this.state.total }/>\n                </ConditionalLink>\n            );\n        });\n\n        this.state.category.map((value, key) => donutValues.push([ typeNames[key], value ]));\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Actions'/>\n                </PageHeader>\n                <Main>\n                    { statsFetchStatus === 'fulfilled' && (\n                        <Grid gutter='md' xl={ 4 } sm={ 6 }>\n                            <GridItem>\n                                <Card className='pf-t-light  pf-m-opaque-100'>\n                                    <CardHeader>Category Summary</CardHeader>\n                                    <CardBody>\n                                        { renderDonut(donutValues) }\n                                    </CardBody>\n                                </Card>\n                            </GridItem>\n                            <GridItem>\n                                <Card className='pf-t-light  pf-m-opaque-100'>\n                                    <CardHeader>Risk Summary</CardHeader>\n                                    <CardBody>\n                                        <SummaryChart>\n                                            { SummaryChartItems }\n                                        </SummaryChart>\n                                    </CardBody>\n                                </Card>\n                            </GridItem>\n                        </Grid>\n                    ) }\n                    { statsFetchStatus === 'pending' && (<Loading />)\n                    }\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nActionsOverview.propTypes = {\n    breadcrumbs: PropTypes.array,\n    fetchStats: PropTypes.func,\n    setBreadcrumbs: PropTypes.func,\n    statsFetchStatus: PropTypes.string,\n    stats: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    breadcrumbs: state.AdvisorStore.breadcrumbs,\n    stats: state.AdvisorStore.stats,\n    statsFetchStatus: state.AdvisorStore.statsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchStats: (url) => dispatch(AppActions.fetchStats(url)),\n    setBreadcrumbs: (obj) => dispatch(AppActions.setBreadcrumbs(obj))\n});\n\nexport default routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ActionsOverview));\n\n"],"sourceRoot":""}