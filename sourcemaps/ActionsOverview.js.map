{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/SmartComponents/Actions/ActionsOverview.js"],"names":["Loading","AppActions","SummaryChart","SummaryChartItem","ConditionalLink","sevNames","typeNames","typeLink","ActionsOverview","props","state","severity","total","category","fetchStats","prevProps","stats","rules","setState","Info","Warn","Error","Critical","Availability","Security","Stability","Performance","statsFetchStatus","renderDonut","donutValues","SummaryChartItems","map","value","key","push","toLowerCase","children","Component","propTypes","PropTypes","func","string","object","mapStateToProps","ownProps","AdvisorStore","mapDispatchToProps","url","dispatch"],"mappings":"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","file":"js/ActionsOverview.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div> Loading... </div>;\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardHeader, Grid, GridItem } from '@patternfly/react-core';\nimport { Donut, Main, PageHeader, PageHeaderTitle } from '@red-hat-insights/insights-frontend-components';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport '../../App.scss';\n\nconst SummaryChart = asyncComponent(() => import('../../PresentationalComponents/SummaryChart/SummaryChart.js'));\nconst SummaryChartItem = asyncComponent(() => import('../../PresentationalComponents/SummaryChartItem/SummaryChartItem.js'));\nconst ConditionalLink = asyncComponent(() => import('../../PresentationalComponents/ConditionalLink/ConditionalLink.js'));\n\nconst sevNames = [ 'Low', 'Medium', 'High', 'Critical' ];\nconst typeNames = [ 'Availability', 'Security', 'Stability', 'Performance' ];\nconst typeLink = '/actions/';\n\nclass ActionsOverview extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            severity: [],\n            total: 0,\n            category: []\n        };\n    }\n\n    componentDidMount () {\n        this.props.fetchStats();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.stats !== prevProps.stats) {\n            const rules = this.props.stats.rules;\n            this.setState({ severity: [ rules.severity.Info, rules.severity.Warn, rules.severity.Error, rules.severity.Critical ]});\n            this.setState({\n                category: [ rules.category.Availability, rules.category.Security, rules.category.Stability, rules.category.Performance ]\n            });\n            this.setState({ total: rules.total });\n        }\n    }\n\n    render () {\n        const {\n            statsFetchStatus\n        } = this.props;\n        const renderDonut = (donutValues) =>\n            <Donut key='advisor-donut' values={ donutValues } link={ typeLink } totalLabel='issues' identifier='advisor-donut' withLegend/>;;\n        let donutValues = [];\n        let SummaryChartItems = [];\n\n        this.state.severity.map((value, key) => {\n            SummaryChartItems.push(\n                <ConditionalLink\n                    key={ key }\n                    condition={ value }\n                    wrap={ children =>\n                        <Link to={ `/actions/${sevNames[key].toLowerCase()}-risk` }>\n                            { children }\n                        </Link>\n                    }>\n                    <SummaryChartItem\n                        name={ sevNames[key] }\n                        numIssues={ value }\n                        totalIssues={ this.state.total }/>\n                </ConditionalLink>\n            );\n        });\n\n        this.state.category.map((value, key) => donutValues.push([ typeNames[key], value ]));\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Actions'/>\n                </PageHeader>\n                <Main>\n                    { statsFetchStatus === 'fulfilled' && (\n                        <Grid gutter='md' xl={ 4 } sm={ 6 }>\n                            <GridItem>\n                                <Card className='pf-t-light  pf-m-opaque-100'>\n                                    <CardHeader>Category Summary</CardHeader>\n                                    <CardBody>\n                                        { renderDonut(donutValues) }\n                                    </CardBody>\n                                </Card>\n                            </GridItem>\n                            <GridItem>\n                                <Card className='pf-t-light  pf-m-opaque-100'>\n                                    <CardHeader>Risk Summary</CardHeader>\n                                    <CardBody>\n                                        <SummaryChart>\n                                            { SummaryChartItems }\n                                        </SummaryChart>\n                                    </CardBody>\n                                </Card>\n                            </GridItem>\n                        </Grid>\n                    ) }\n                    { statsFetchStatus === 'pending' && (<Loading />)\n                    }\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nActionsOverview.propTypes = {\n    fetchStats: PropTypes.func,\n    statsFetchStatus: PropTypes.string,\n    stats: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    stats: state.AdvisorStore.stats,\n    statsFetchStatus: state.AdvisorStore.statsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchStats: (url) => dispatch(AppActions.fetchStats(url))\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ActionsOverview));\n\n"],"sourceRoot":""}