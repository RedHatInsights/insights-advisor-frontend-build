{"version":3,"file":"js/533.a6e40ff500341a070748.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/RuleRating/RuleRating.js","webpack:///./src/PresentationalComponents/RuleDetails/RuleDetails.js","webpack:///./src/Utilities/BarDividedList.js"],"sourcesContent":["import './_RuleRating.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport React, { useState } from 'react';\n\nimport API from '../../Utilities/Api';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport OutlinedThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-down-icon';\nimport OutlinedThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-up-icon';\nimport PropTypes from 'prop-types';\nimport ThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/thumbs-down-icon';\nimport ThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/thumbs-up-icon';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst RuleRating = ({ intl, rule }) => {\n  const [rating, setRating] = useState(rule.rating);\n  const [submitted, setSubmitted] = useState(false);\n  const [thankYou, setThankYou] = useState(\n    intl.formatMessage(messages.feedbackThankyou)\n  );\n  const updateRuleRating = async (newRating) => {\n    const calculatedRating = rating === newRating ? 0 : newRating;\n    try {\n      await API.post(\n        `${AppConstants.BASE_URL}/rating/`,\n        {},\n        { rule: rule.rule_id, rating: calculatedRating }\n      );\n      setRating(calculatedRating);\n      setSubmitted(true);\n      setTimeout(() => setThankYou(''), 3000);\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n  };\n\n  return (\n    <span className=\"ratingSpanOverride\">\n      {intl.formatMessage(messages.ruleHelpful)}\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-up\"\n        onClick={() => updateRuleRating(1)}\n        ouiaId=\"thumbsUp\"\n      >\n        {rating === 1 ? (\n          <ThumbsUpIcon className=\"like\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsUpIcon size=\"sm\" />\n        )}\n      </Button>\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-down\"\n        onClick={() => updateRuleRating(-1)}\n        ouiaId=\"thumbsDown\"\n      >\n        {rating === -1 ? (\n          <ThumbsDownIcon className=\"dislike\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsDownIcon size=\"sm\" />\n        )}\n      </Button>\n      {submitted && thankYou}\n    </span>\n  );\n};\n\nRuleRating.propTypes = {\n  intl: PropTypes.any,\n  rule: PropTypes.object,\n};\n\nexport default injectIntl(RuleRating);\n","/* eslint max-len: 0 */\nimport './_RuleDetails.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport {\n  Split,\n  SplitItem,\n} from '@patternfly/react-core/dist/js/layouts/Split/index';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/js/layouts/Stack/index';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport { compact, intersection } from 'lodash';\n\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport Markdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RuleRating from '../RuleRating/RuleRating';\nimport { SeverityLine } from '@redhat-cloud-services/frontend-components-charts/esm/SeverityLine';\nimport barDividedList from '../../Utilities/BarDividedList';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeSanitize from 'rehype-sanitize';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst RuleDetails = ({\n  children,\n  rule,\n  resolutionRisk,\n  intl,\n  topics,\n  header,\n  isDetailsPage,\n}) => {\n  const topicLinks = () =>\n    topics &&\n    compact(\n      topics.map(\n        (topic) =>\n          intersection(topic.tag.split(' '), rule.tags.split(' ')).length && (\n            <React.Fragment key={topic.slug}>\n              <Link to={`/topics/${topic.slug}`}>{`${topic.name}`}</Link>\n            </React.Fragment>\n          )\n      )\n    );\n\n  const ruleDescription = (data, isGeneric) =>\n    typeof data === 'string' &&\n    Boolean(data) && (\n      <span className={isGeneric && 'genericOverride'}>\n        <Markdown rehypePlugins={[rehypeRaw, rehypeSanitize]}>{data}</Markdown>\n      </span>\n    );\n\n  return (\n    <Split className=\"ins-c-rule-details__split\" hasGutter>\n      <SplitItem>\n        <Stack hasGutter>\n          {header && <StackItem>{header}</StackItem>}\n          <StackItem>\n            {isDetailsPage\n              ? ruleDescription(rule.generic, true)\n              : ruleDescription(rule.summary)}\n          </StackItem>\n          {rule.node_id && (\n            <StackItem>\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={`https://access.redhat.com/node/${rule.node_id}`}\n              >\n                {intl.formatMessage(messages.knowledgebaseArticle)}&nbsp;\n                <ExternalLinkAltIcon size=\"sm\" />\n              </a>\n            </StackItem>\n          )}\n          {topics && rule.tags && topicLinks().length > 0 && (\n            <StackItem>\n              <strong>{intl.formatMessage(messages.topicRelatedToRule)}</strong>\n              <br />\n              {barDividedList(topicLinks())}\n            </StackItem>\n          )}\n          {isDetailsPage && <RuleRating rule={rule} />}\n          {!isDetailsPage && rule.impacted_systems_count > 0 && (\n            <StackItem>\n              <Link\n                key={`${rule.rule_id}-link`}\n                to={`/recommendations/${rule.rule_id}`}\n              >\n                {intl.formatMessage(messages.viewAffectedSystems, {\n                  systems: rule.impacted_systems_count,\n                })}\n              </Link>\n            </StackItem>\n          )}\n        </Stack>\n      </SplitItem>\n      <SplitItem>\n        <Stack gutter=\"sm\">\n          {children && <StackItem>{children}</StackItem>}\n          <StackItem>\n            <Stack className=\"ins-c-rule-details__stack\">\n              <StackItem>\n                <strong>{intl.formatMessage(messages.totalRisk)}</strong>\n              </StackItem>\n              <StackItem className=\"pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm\">\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel value={rule.total_risk} />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {intl.formatMessage(\n                            messages.rulesDetailsTotalriskBody,\n                            {\n                              risk:\n                                AppConstants.TOTAL_RISK_LABEL_LOWER[\n                                  rule.total_risk\n                                ] || intl.formatMessage(messages.undefined),\n                              strong: (str) => strong(str),\n                            }\n                          )}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <Stack>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.likelihoodLevel, {\n                            level:\n                              AppConstants.LIKELIHOOD_LABEL[rule.likelihood],\n                          })}\n                          value={rule.likelihood}\n                          tooltipMessage={intl.formatMessage(\n                            messages.likelihoodDescription,\n                            {\n                              level:\n                                AppConstants.LIKELIHOOD_LABEL_LOWER[\n                                  rule.likelihood\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.impactLevel, {\n                            level:\n                              AppConstants.IMPACT_LABEL[rule.impact.impact],\n                          })}\n                          value={rule.impact.impact}\n                          tooltipMessage={intl.formatMessage(\n                            messages.impactDescription,\n                            {\n                              level:\n                                AppConstants.IMPACT_LABEL_LOWER[\n                                  rule.impact.impact\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                    </Stack>\n                  </Stack>\n                </span>\n              </StackItem>\n              <hr></hr>\n              <StackItem>\n                <strong>{intl.formatMessage(messages.riskofchange)}</strong>\n              </StackItem>\n              <StackItem\n                className={`pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm`}\n              >\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel\n                      text={AppConstants.RISK_OF_CHANGE_LABEL[resolutionRisk]}\n                      value={resolutionRisk}\n                      hideIcon\n                    />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {resolutionRisk\n                            ? AppConstants.RISK_OF_CHANGE_DESC[resolutionRisk]\n                            : intl.formatMessage(messages.undefined)}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <StackItem>\n                      {RebootRequired(rule.reboot_required)}\n                    </StackItem>\n                  </Stack>\n                </span>\n              </StackItem>\n            </Stack>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRuleDetails.propTypes = {\n  children: PropTypes.any,\n  rule: PropTypes.object,\n  resolutionRisk: PropTypes.number,\n  intl: PropTypes.any,\n  topics: PropTypes.array,\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool,\n};\n\nexport default injectIntl(RuleDetails);\n","import React from 'react';\nimport './_BarDividedList.scss';\n\nconst BarDividedList = (list) =>\n  list.map((element, index) => (\n    <React.Fragment key={index}>\n      {element}\n      {index + 1 !== list.length && (\n        <strong className=\"verticalDivider\">&nbsp;&#124;&nbsp;</strong>\n      )}\n    </React.Fragment>\n  ));\n\nexport default BarDividedList;\n"],"names":["RuleRating","intl","rule","useState","rating","setRating","submitted","setSubmitted","formatMessage","messages","thankYou","setThankYou","updateRuleRating","newRating","calculatedRating","API","AppConstants","BASE_URL","rule_id","setTimeout","console","error","className","Button","variant","aria-label","onClick","ouiaId","size","propTypes","PropTypes","injectIntl","RuleDetails","list","children","resolutionRisk","topics","header","isDetailsPage","topicLinks","map","topic","tag","split","tags","length","key","slug","Link","to","name","ruleDescription","data","isGeneric","Boolean","rehypePlugins","rehypeRaw","rehypeSanitize","Split","hasGutter","SplitItem","Stack","StackItem","generic","summary","node_id","rel","target","href","element","index","impacted_systems_count","systems","gutter","InsightsLabel","value","total_risk","Text","TextContent","component","TextVariants","risk","TOTAL_RISK_LABEL_LOWER","strong","str","SeverityLine","title","level","LIKELIHOOD_LABEL","likelihood","tooltipMessage","LIKELIHOOD_LABEL_LOWER","IMPACT_LABEL","impact","IMPACT_LABEL_LOWER","text","RISK_OF_CHANGE_LABEL","hideIcon","RISK_OF_CHANGE_DESC","RebootRequired","reboot_required"],"sourceRoot":""}