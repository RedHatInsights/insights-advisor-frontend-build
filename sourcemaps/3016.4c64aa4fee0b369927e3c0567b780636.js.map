{"version":3,"file":"js/3016.1668767257633.6eca9b12eba0c6329df2.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Inventory/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/reducer.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/useBulkSelect.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/useSelectionManager.js","webpack:///./src/PresentationalComponents/Inventory/Inventory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import { workloadQueryBuilder, buildTagFilter } from '../Common/Tables';\nimport { Get } from '../../Utilities/Api';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport { RULES_FETCH_URL, SYSTEMS_FETCH_URL } from '../../AppConstants';\n\n/*This functions purpose is to grab the currently set filters, and return all associated systems for it.*/\nexport const paginatedRequestHelper = async ({\n  per_page,\n  page,\n  advisorFilters,\n  filters,\n  workloads,\n  SID,\n  pathway,\n  rule,\n  selectedTags,\n}) => {\n  let options = {\n    ...advisorFilters,\n    limit: per_page,\n    offset: page * per_page - per_page,\n    sort: advisorFilters.sort,\n    ...(filters?.hostnameOrId &&\n      !pathway && {\n        name: filters?.hostnameOrId,\n      }),\n    ...(filters.hostnameOrId &&\n      pathway && {\n        display_name: filters?.hostnameOrId,\n      }),\n    ...(Array.isArray(advisorFilters.rhel_version) && {\n      rhel_version: advisorFilters.rhel_version?.join(','),\n    }),\n    ...(filters.tagFilters?.length && buildTagFilter(filters.tagFilters)),\n    ...(workloads ? workloadQueryBuilder(workloads, SID) : {}),\n    ...(selectedTags?.length > 0 ? { tags: selectedTags.join(',') } : {}),\n  };\n\n  return pathway\n    ? (\n        await Get(\n          `${SYSTEMS_FETCH_URL}`,\n          {},\n          { ...options, pathway: pathway.slug }\n        )\n      )?.data\n    : (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/systems_detail/`,\n          {},\n          options\n        )\n      )?.data;\n};\n\nexport const getEntities =\n  (\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule,\n    setFilters\n  ) =>\n  async (_items, config, showTags, defaultGetEntities) => {\n    const {\n      per_page,\n      page,\n      orderBy,\n      orderDirection,\n      advisorFilters,\n      filters,\n      workloads,\n      SID,\n    } = config;\n    const sort = `${orderDirection === 'ASC' ? '' : '-'}${\n      orderBy === 'updated' ? 'last_seen' : orderBy\n    }`;\n\n    let options = {\n      ...advisorFilters,\n      limit: per_page,\n      offset: page * per_page - per_page,\n      sort,\n      ...(config?.filters?.hostnameOrId &&\n        !pathway && {\n          name: config?.filters?.hostnameOrId,\n        }),\n      ...(config.filters.hostnameOrId &&\n        pathway && {\n          display_name: config?.filters?.hostnameOrId,\n        }),\n      ...(Array.isArray(advisorFilters.rhel_version) && {\n        rhel_version: advisorFilters.rhel_version?.join(','),\n      }),\n      ...(filters.tagFilters?.length && buildTagFilter(filters.tagFilters)),\n      ...(config.selectedTags?.length > 0\n        ? { tags: config.selectedTags.join(',') }\n        : {}),\n      ...(workloads ? workloadQueryBuilder(workloads, SID) : {}),\n    };\n\n    handleRefresh(options);\n    const allDetails = { ...config, pathway, handleRefresh, rule };\n    setFullFilters(allDetails);\n    setFilters({ ...filters, sort: sort });\n    const fetchedSystems = await paginatedRequestHelper(allDetails);\n    const results = await defaultGetEntities(\n      fetchedSystems.data.map((system) => system.system_uuid),\n      {\n        page,\n        per_page,\n        hasItems: true,\n        fields: { system_profile: ['operating_system'] },\n      },\n      showTags\n    );\n    setCurPageIds(fetchedSystems.data.map((system) => system.system_uuid));\n    setTotal(fetchedSystems.meta.count);\n    return Promise.resolve({\n      results: mergeArraysByDiffKeys(fetchedSystems.data, results.results).map(\n        (item) => {\n          return {\n            ...item,\n            selected: selectedIds?.includes(item.id),\n          };\n        }\n      ),\n      total: fetchedSystems.meta.count,\n    });\n  };\n\n/*Takes in the current filters, and keeps sending get request until there are no pages left*/\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100, rule) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction({ ...filter, page: pageIdx + 1, per_page: batchSize, rule })\n    )\n  );\n};\n/*Grabs all systemIds and maniupaltes the data into one large array of systems*/\nexport const allCurrentSystemIds =\n  (fullFilters, total, rule, setIsLoading) => async () => {\n    setIsLoading(true);\n    const results = await (\n      await fetchBatched(paginatedRequestHelper, total, fullFilters, 100, rule)\n    ).map((item) => item.data);\n\n    const merged = [].concat.apply([], results).map((item) => item.system_uuid);\n    setIsLoading(false);\n    return merged;\n  };\n","import isObject from 'lodash/isObject';\nimport uniq from 'lodash/uniq';\n\nconst selectionGroup = (action) => action.group || 'default';\n\nexport const init = (withGroups) => (preselected) =>\n  withGroups ? preselected || {} : { default: preselected || [] };\n\nconst cleanEmpty = (state) => {\n  const newState = state;\n  Object.entries(state).forEach(([key, value]) => {\n    if (value === undefined) {\n      delete newState[key];\n    }\n  });\n  return newState;\n};\n\nconst set = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]:\n      action.items?.length > 0 || isObject(action.items)\n        ? action.items\n        : undefined,\n  });\n};\n\nconst select = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]: action.reset\n      ? action?.items\n      : uniq([action?.item, ...(state[group] || [])]),\n  });\n};\n\nconst deselect = (state = {}, action) => {\n  const group = selectionGroup(action);\n  const items = (state[group] || []).filter(\n    (selectedItem) => !action.item.includes(selectedItem)\n  );\n  return cleanEmpty({\n    ...state,\n    [group]: items.length === 0 ? undefined : items,\n  });\n};\n\nconst toggle = (state, action) => {\n  const group = selectionGroup(action);\n  return (state[group] || []).includes(action.item)\n    ? deselect(state, action)\n    : select(state, action);\n};\n\nconst reset = (state, action) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))(\n    action?.preselected\n  );\nconst clear = (state) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))();\n\nexport default (state, action) =>\n  ({\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n  }[action.type](state, action));\n","import { useEffect } from 'react';\nimport useSelectionManager from '../useSelectionManager';\nimport { compileTitle, checkboxState, selectOrUnselect } from './helpers';\n\n/**\n * Provides properties for a Pattternfly (based) Table and Toolbar component to implement bulk selection\n *\n * @param {number} [total] Number to show as total count\n * @param {Function} [onSelect] function to call when a selection is made\n * @param {Array} [preselected] Array of itemIds selected when initialising\n * @param {Function} [itemIdsInTable] async function that returns an array of all item ids\n * @param {Function} [itemIdsOnPage] async function that returns an array of item ids visible on the page\n * @param {string} [identifies] Prop of the row containing the item ID\n * @returns {{ selectedIds , selectNone, tableProps }}\n */\nconst useBulkSelect = ({\n  total = 0,\n  onSelect,\n  preselected,\n  itemIdsInTable,\n  itemIdsOnPage,\n  identifier = 'id',\n  isLoading,\n}) => {\n  const enableBulkSelect = !!onSelect;\n  const {\n    selection: selectedIds,\n    set,\n    select,\n    deselect,\n    clear,\n  } = useSelectionManager(preselected || []);\n  const selectedIdsTotal = (selectedIds || []).length;\n  const idsOnPage = itemIdsOnPage();\n  const paginatedTotal = idsOnPage.length || total;\n  const allSelected = selectedIdsTotal === total;\n  const noneSelected = selectedIdsTotal === 0;\n\n  const isDisabled = total === 0;\n  const checked = checkboxState(selectedIdsTotal, total);\n  const title = compileTitle(selectedIdsTotal, isLoading);\n\n  const mergeArraysUniqly = (arrayA, arrayB) =>\n    Array.from(new Set([...arrayA, ...arrayB]));\n\n  const selectOne = (_, selected, _key, row) =>\n    selected ? select(row[identifier]) : deselect(row[identifier]);\n\n  const selectPage = () => {\n    let selectedItems =\n      selectedIds?.length > 0\n        ? mergeArraysUniqly(selectedIds, idsOnPage)\n        : idsOnPage;\n    select(selectedItems, undefined, true);\n  };\n\n  const selectAll = async () => {\n    const items = await itemIdsInTable();\n    if (allSelected) {\n      clear();\n    } else {\n      set(items);\n    }\n  };\n\n  useEffect(() => {\n    set(preselected);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(preselected)]);\n\n  return enableBulkSelect\n    ? {\n        selectedIds,\n        selectNone: () => clear(),\n        tableProps: {\n          onSelect: total > 0 ? selectOne : undefined,\n          canSelectAll: false,\n        },\n        toolbarProps: {\n          bulkSelect: {\n            toggleProps: title ? { children: [title] } : null,\n            isDisabled,\n            items: [\n              {\n                title: 'Select none',\n                onClick: () => clear(),\n                props: {\n                  isDisabled: noneSelected,\n                },\n              },\n              ...(itemIdsOnPage\n                ? [\n                    {\n                      title: `Select page (${paginatedTotal} items)`,\n                      onClick: selectPage,\n                    },\n                  ]\n                : []),\n              ...(itemIdsInTable\n                ? [\n                    {\n                      title: `${selectOrUnselect(\n                        allSelected\n                      )} all (${total} items)`,\n                      onClick: selectAll,\n                    },\n                  ]\n                : []),\n            ],\n            checked,\n            onSelect: selectedIds?.length > 0 ? clear : selectAll,\n          },\n        },\n      }\n    : {};\n};\n\nexport default useBulkSelect;\n","import React from 'react';\nimport { Spinner } from '@patternfly/react-core';\n\nexport const compileTitle = (itemsTotal, isLoading) => {\n  if (itemsTotal === 0 && !isLoading) {\n    return null;\n  } else if (isLoading) {\n    return (\n      <React.Fragment>\n        <Spinner size=\"sm\" />\n        {`     ${itemsTotal} selected`}\n      </React.Fragment>\n    );\n  } else {\n    return `${itemsTotal} selected`;\n  }\n};\n\nexport const checkboxState = (selectedItemsTotal, itemsTotal) => {\n  if (selectedItemsTotal === 0) {\n    return false;\n  } else if (selectedItemsTotal === itemsTotal) {\n    return true;\n  } else {\n    return null;\n  }\n};\n\nexport const selectOrUnselect = (selected) =>\n  selected ? 'Unselect' : 'Select';\n\nconst allItemsIncluded = (items = [], selection = []) =>\n  items?.filter((item) => selection.includes(item)).length === items.length;\n\nexport const checkCurrentPageSelected = (items = [], selectedItems = []) => {\n  if (selectedItems.length === 0) {\n    return false;\n  } else {\n    return allItemsIncluded(items, selectedItems);\n  }\n};\n\nexport const itemIds = (items) => items.map(({ itemId }) => itemId);\n\nexport const selectItemTransformer = (item, selectedIds = []) => ({\n  ...item,\n  rowProps: {\n    selected: selectedIds.includes(item.itemId),\n  },\n});\n","import { useReducer } from 'react';\nimport reducer, { init as initReducer } from './reducer';\n\n/**\n * Provides a generic API to manage selection stats of one (default) or multiple groups of selections.\n *\n * @param {Array} preselected Array of items initially selected\n * @param {Object} [options] function to call when a selection is made\n */\nconst useSelectionManager = (preselected, options = {}) => {\n  const { withGroups = false } = options;\n  const [selection, dispatch] = useReducer(\n    reducer,\n    preselected,\n    initReducer(withGroups)\n  );\n\n  const set = (items, group) => dispatch({ type: 'set', group, items });\n\n  const select = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'select', group, item });\n\n  const deselect = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'deselect', group, item });\n\n  const toggle = (item, group) => dispatch({ type: 'toggle', group, item });\n\n  const reset = () => dispatch({ type: 'reset', preselected });\n\n  const clear = () => dispatch({ type: 'clear' });\n\n  return {\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n    selection: withGroups ? selection : selection.default,\n  };\n};\n\nexport default useSelectionManager;\n","import './_Inventory.scss';\n\nimport { BASE_URL, RULES_FETCH_URL } from '../../AppConstants';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport { pruneFilters, urlBuilder } from '../Common/Tables';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { getEntities, allCurrentSystemIds } from './helpers';\nimport { Link } from 'react-router-dom';\n\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Get } from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useIntl } from 'react-intl';\nimport downloadReport from '../Common/DownloadHelper';\nimport useBulkSelect from './Hooks/useBulkSelect';\nimport { useLoadModule } from '@scalprum/react-core';\n\nconst Inventory = ({\n  tableProps,\n  rule,\n  afterDisableFn,\n  pathway,\n  selectedTags,\n  workloads,\n  SID,\n  permsExport,\n  exportTable,\n  showTags,\n}) => {\n  const store = useStore();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [filters, setFilters] = useState({\n    limit: 20,\n    offset: 0,\n    sort: '-last_seen',\n    name: '',\n  });\n  const [fullFilters, setFullFilters] = useState();\n  const [total, setTotal] = useState(0);\n  const entities = useSelector(({ entities }) => entities || {});\n\n  const addNotification = (data) => dispatch(notification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [curPageIds, setCurPageIds] = useState([]);\n  const [pathwayRulesList, setPathwayRulesList] = useState({});\n  const [pathwayReportList, setPathwayReportList] = useState({});\n  const [isLoading, setIsLoading] = useState();\n\n  const [hasPathwayDetails, setHasPathwayDetails] = useState(false);\n  const [isRemediationButtonDisabled, setIsRemediationButtonDisabled] =\n    useState(true);\n  //This value comes in from the backend as 0, or 1. To be consistent it is set to -1\n  const [rulesPlaybookCount, setRulesPlaybookCount] = useState(-1);\n  const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n    appName: 'inventory',\n    scope: 'inventory',\n    module: './OsFilterHelpers',\n  });\n  const operatingSystems = useSelector(\n    ({ entities }) => entities?.operatingSystems || []\n  );\n\n  const handleRefresh = (options) => {\n    /* Rec table doesn't use the same sorting params as sys table, switching between the two results in the rec table blowing up cuz its trying to\n    read the endpoint with incorrect sorting params, if we hold of on updating the sysable url params when using the this component in pathways, it\n    solves this issue for the time being*/\n    const { name, display_name } = options;\n    const refreshedFilters = {\n      ...options,\n      ...(name && {\n        name,\n      }),\n      ...(display_name && {\n        display_name,\n      }),\n    };\n    !pathway && urlBuilder(refreshedFilters, selectedTags);\n  };\n\n  const fetchSystems = getEntities(\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule,\n    setFilters\n  );\n\n  const grabPageIds = () => {\n    return curPageIds || [];\n  };\n\n  const {\n    tableProps: bulkSelectTableProps,\n    toolbarProps,\n    selectedIds,\n    selectNone,\n  } = useBulkSelect({\n    total,\n    onSelect: () => {},\n    itemIdsInTable: allCurrentSystemIds(fullFilters, total, rule, setIsLoading),\n    itemIdsOnPage: grabPageIds,\n    identitfier: 'system_uuid',\n    isLoading,\n  });\n  // Ensures rows are marked as selected, runs the check on remediation Status\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n    checkRemediationButtonStatus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedIds]);\n\n  useEffect(() => {\n    if (pathway) {\n      pathwayCheck();\n    } else {\n      rulesCheck();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const rulesCheck = async () => {\n    if (rulesPlaybookCount < 0) {\n      const associatedRuleDetails = (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/`,\n          {},\n          { name: filters.name }\n        )\n      )?.data.playbook_count;\n      setRulesPlaybookCount(associatedRuleDetails);\n    }\n  };\n\n  const pathwayCheck = async () => {\n    if (!hasPathwayDetails) {\n      if (pathway) {\n        let pathwayRules = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n            {},\n            {}\n          )\n        )?.data.data;\n\n        let pathwayReport = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n            {},\n            {}\n          )\n        )?.data.rules;\n        setHasPathwayDetails(true);\n        setPathwayReportList(pathwayReport);\n        setPathwayRulesList(pathwayRules);\n      }\n    }\n  };\n\n  const checkRemediationButtonStatus = () => {\n    let playbookFound = false;\n    let ruleKeys = Object.keys(pathwayReportList);\n    if (selectedIds?.length <= 0 || selectedIds === undefined) {\n      setIsRemediationButtonDisabled(true);\n    } else if (pathway) {\n      for (let i = 0; i < selectedIds?.length; i++) {\n        let system = selectedIds[i];\n        if (playbookFound) {\n          break;\n        }\n        ruleKeys.forEach((rule) => {\n          //Grab the rule assosciated with that system\n          if (pathwayReportList[rule].includes(system)) {\n            let assosciatedRule = pathwayReportList[rule];\n            //find that associated rule in the pathwayRules endpoint, check for playbook\n            let item = pathwayRulesList.find(\n              (report) => (report.rule_id = assosciatedRule)\n            );\n            if (item.resolution_set[0].has_playbook) {\n              playbookFound = true;\n              return setIsRemediationButtonDisabled(false);\n            }\n          }\n        });\n      }\n    } else {\n      if (rulesPlaybookCount > 0 && selectedIds?.length > 0) {\n        setIsRemediationButtonDisabled(false);\n      }\n    }\n  };\n\n  const remediationDataProvider = async () => {\n    if (pathway) {\n      const pathways = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n          {},\n          {}\n        )\n      )?.data.data;\n\n      const systems = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n          {},\n          {}\n        )\n      )?.data.rules;\n\n      let issues = [];\n      pathways.forEach((rec) => {\n        let filteredSystems = [];\n\n        systems[rec.rule_id].forEach((system) => {\n          if (selectedIds.includes(system)) {\n            filteredSystems.push(system);\n          }\n        });\n\n        if (filteredSystems.length) {\n          issues.push({\n            id: `advisor:${rec.rule_id}`,\n            description: rec.description,\n            systems: filteredSystems,\n          });\n        }\n      });\n\n      return { issues };\n    } else {\n      return {\n        issues: [\n          {\n            id: `advisor:${rule.rule_id}`,\n            description: rule.description,\n          },\n        ],\n        systems: selectedIds,\n      };\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    selectNone();\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const createColumns = useCallback(\n    (defaultColumns) => {\n      let lastSeenColumn = defaultColumns.filter(\n        ({ key }) => key === 'updated'\n      );\n      let displayName = defaultColumns.filter(\n        ({ key }) => key === 'display_name'\n      );\n      let systemProfile = defaultColumns.filter(\n        ({ key }) => key === 'system_profile'\n      );\n      let tags = defaultColumns.filter(({ key }) => key === 'tags');\n\n      displayName = {\n        ...displayName[0],\n        transforms: [sortable, wrappable],\n        props: { isStatic: true },\n        ...(rule\n          ? {\n              renderFunc: (name, id) => {\n                return (\n                  <Link\n                    className=\"pf-u-font-size-lg\"\n                    to={`/recommendations/${rule.rule_id}/${id}?activeRule=true`}\n                  >\n                    {name}\n                  </Link>\n                );\n              },\n            }\n          : {}),\n      };\n\n      lastSeenColumn = {\n        ...lastSeenColumn[0],\n        transforms: [sortable, wrappable],\n        props: { width: 20 },\n      };\n\n      systemProfile = {\n        ...systemProfile[0],\n        transforms: [wrappable],\n        props: { isStatic: true },\n      };\n\n      tags = {\n        ...tags[0],\n      };\n\n      let columnList = [displayName, tags, systemProfile, lastSeenColumn];\n\n      // Add column for impacted_date which is relevant for the rec system details table, but not pathways system table\n      if (!pathway) {\n        const impacted_date = {\n          key: 'impacted_date',\n          title: 'First Impacted',\n          sortKey: 'impacted_date',\n          transforms: [sortable, wrappable],\n          props: { width: 15 },\n          renderFunc: lastSeenColumn.renderFunc,\n        };\n        columnList.push(impacted_date);\n        lastSeenColumn.props.width = 15;\n      }\n\n      return columnList;\n    },\n    [pathway, rule]\n  );\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    setFilters(filter);\n  };\n  const addFilterParam = (param, values) => {\n    const passValue =\n      param === SFC.rhel_version.urlParam\n        ? Object.values(values || {}).flatMap((majorOsVersion) =>\n            Object.keys(majorOsVersion)\n          )\n        : values;\n\n    passValue.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: passValue } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    ...(buildOSFilterConfig\n      ? [\n          buildOSFilterConfig(\n            {\n              label: SFC.rhel_version.title.toLowerCase(),\n              type: SFC.rhel_version.type,\n              id: SFC.rhel_version.urlParam,\n              value: toGroupSelectionValue(filters.rhel_version || []),\n              onChange: (_e, value) =>\n                addFilterParam(SFC.rhel_version.urlParam, value),\n            },\n            operatingSystems\n          ),\n        ]\n      : []),\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_e, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selectedIds}\n        />\n      )}\n      <InventoryTable\n        id=\"tablesContainer\"\n        hasCheckbox\n        initialLoading\n        autoRefresh\n        hideFilters={{ all: true, name: false, tags: !showTags }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        tableProps={{\n          variant: TableVariant.compact,\n          ...tableProps,\n          ...bulkSelectTableProps,\n        }}\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        showTags={showTags}\n        getEntities={fetchSystems}\n        dedicatedAction={\n          <RemediationButton\n            key=\"remediation-button\"\n            isDisabled={isRemediationButtonDisabled}\n            dataProvider={remediationDataProvider}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            {intl.formatMessage(messages.remediate)}\n          </RemediationButton>\n        }\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForSystems),\n              props: { isDisabled: (selectedIds || []).length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n        {...toolbarProps}\n        fallback={Loading}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          store.replaceReducer(\n            updateReducers({\n              ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n                page: Number(filters.offset / filters.limit + 1 || 1),\n                perPage: Number(filters.limit || 20),\n              }),\n              ...mergeWithDetail(),\n            })\n          );\n        }}\n        exportConfig={\n          permsExport && {\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                exportTable,\n                fileType,\n                { rule_id: rule.rule_id, ...filters },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch\n              ),\n            isDisabled: !permsExport || entities?.rows?.length === 0,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nInventory.propTypes = {\n  tableProps: PropTypes.any,\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  pathway: PropTypes.object,\n  selectedTags: PropTypes.any,\n  workloads: PropTypes.any,\n  SID: PropTypes.any,\n  permsExport: PropTypes.bool,\n  exportTable: PropTypes.string,\n  showTags: PropTypes.bool,\n};\n\nexport default Inventory;\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","i","paginatedRequestHelper","per_page","page","advisorFilters","filters","workloads","SID","pathway","rule","selectedTags","options","limit","offset","sort","hostnameOrId","name","display_name","Array","isArray","rhel_version","join","tagFilters","buildTagFilter","workloadQueryBuilder","tags","Get","SYSTEMS_FETCH_URL","slug","RULES_FETCH_URL","encodeURI","rule_id","fetchBatched","fetchFunction","total","filter","batchSize","pages","Math","ceil","Promise","all","_","pageIdx","allCurrentSystemIds","fullFilters","setIsLoading","item","results","merged","concat","apply","system_uuid","selectionGroup","action","group","init","withGroups","preselected","default","cleanEmpty","state","newState","Object","entries","forEach","undefined","set","isObject","select","reset","uniq","deselect","selectedItem","includes","toggle","prototype","hasOwnProperty","call","clear","type","selectedItemsTotal","selected","onSelect","itemIdsInTable","itemIdsOnPage","identifier","isLoading","enableBulkSelect","useReducer","reducer","initReducer","selection","dispatch","useSelectionManager","selectedIds","selectedIdsTotal","idsOnPage","paginatedTotal","allSelected","noneSelected","isDisabled","checked","itemsTotal","Spinner","size","compileTitle","selectAll","JSON","stringify","selectNone","tableProps","_key","row","canSelectAll","toolbarProps","bulkSelect","toggleProps","children","onClick","props","arrayA","arrayB","selectedItems","from","Set","Inventory","afterDisableFn","permsExport","exportTable","showTags","store","useStore","useDispatch","setFilters","setFullFilters","setTotal","entities","useSelector","addNotification","notification","disableRuleModalOpen","setDisableRuleModalOpen","curPageIds","setCurPageIds","pathwayRulesList","setPathwayRulesList","pathwayReportList","setPathwayReportList","hasPathwayDetails","setHasPathwayDetails","isRemediationButtonDisabled","setIsRemediationButtonDisabled","rulesPlaybookCount","setRulesPlaybookCount","useLoadModule","appName","scope","module","toGroupSelectionValue","buildOSFilterConfig","operatingSystems","fetchSystems","handleRefresh","_items","config","defaultGetEntities","orderBy","orderDirection","allDetails","fetchedSystems","system","hasItems","fields","system_profile","meta","count","resolve","mergeArraysByDiffKeys","id","getEntities","refreshedFilters","urlBuilder","useBulkSelect","identitfier","bulkSelectTableProps","payload","checkRemediationButtonStatus","pathwayCheck","rulesCheck","localFilters","playbook_count","associatedRuleDetails","BASE_URL","pathwayRules","rules","pathwayReport","playbookFound","ruleKeys","keys","assosciatedRule","find","report","resolution_set","has_playbook","remediationDataProvider","pathways","systems","issues","rec","filteredSystems","handleModalToggle","createColumns","useCallback","defaultColumns","lastSeenColumn","displayName","systemProfile","transforms","sortable","wrappable","isStatic","renderFunc","className","width","columnList","impacted_date","sortKey","removeFilterParam","param","filterConfigItems","label","SFC","value","onChange","_e","values","passValue","flatMap","majorOsVersion","activeFiltersConfig","deleteTitle","pruneFilters","onDelete","itemsToRemove","isAll","newFilter","urlParam","String","chips","DisableRule","isModalOpen","afterFn","hosts","InventoryTable","hasCheckbox","initialLoading","autoRefresh","hideFilters","filterConfig","columns","variant","TableVariant","customFilters","dedicatedAction","RemediationButton","dataProvider","onRemediationCreated","result","remediation","getNotification","error","dismissable","actionsConfig","actions","fallback","Loading","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","perPage","exportConfig","fileType","downloadReport","rows"],"sourceRoot":""}