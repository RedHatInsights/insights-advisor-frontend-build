{"version":3,"file":"js/TopicDetails.99e9eddec9d95fa3cde4.js","mappings":"q9BAiIA,QApGgB,WACd,IAAMA,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,eAEXC,GAAeC,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBF,gBACpDG,GAAYF,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBC,aACjDC,GAAMH,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBE,OAC3CC,GAAaJ,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBI,YAClDC,GAAUC,EAAAA,EAAAA,aAAYC,GACxBC,GAAUV,MAAAA,OAAA,EAAAA,EAAcW,SAAU,CAAEC,KAAMZ,GAC9CG,IACGO,EAAU,EAAH,KAAQA,IAAYG,EAAAA,EAAAA,IAAqBV,EAAWC,KAE9D,OAKIU,EAAAA,EAAAA,IAAiB,EAAD,KAAMJ,GAAY,CAAEH,QAAAA,KALxC,IACEQ,KAAMC,OADR,MACgB,GADhB,EAEEC,EAFF,EAEEA,UACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,QA4BF,OAzBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,EAAH,GAAQhB,GAY9B,OAXAP,GACEwB,EAAAA,EAAAA,IAAiB,CACfC,WAAW,EACXC,YAAa,UACbR,MAAOT,EACPkB,KAAM,cACNC,MAAO,GACPC,OAAQ,KAIL,kBAAM7B,GAASwB,EAAAA,EAAAA,IAAiBD,OAEtC,KAEHD,EAAAA,EAAAA,YAAU,WACR,GAAIJ,GAASA,EAAMY,KAAM,CACvB,IAAMC,EAAS,GAAH,OAAMb,EAAMY,KAAZ,cAAsBE,EAAAA,EAAAA,OAAAA,gBAClCC,SAASC,MAAQpC,EAAKqC,cAAcH,EAAAA,EAAAA,cAAwB,CAAED,OAAAA,OAG/D,CAACb,IAGF,kBAAC,aAAD,KACE,kBAAC,IAAD,MACGA,MAAAA,OAAA,EAAAA,EAAOY,OAAQ,kBAAC,IAAD,CAAaM,QAASlB,MAAAA,OAAF,EAAEA,EAAOY,KAAMO,OAAO,aACxDjB,GACA,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAOkB,aAAa,KAAKC,KAAK,MAAMC,UAAU,iBAC3CtB,EAAMY,KACNZ,EAAMuB,UACL,kBAAC,EAAAC,MAAD,CACEC,MAAM,OACNH,UAAU,gBACVI,KAAM,kBAAC,KAAD,OAEL9C,EAAKqC,cAAcH,EAAAA,EAAAA,YAI1B,kBAAC,EAAAa,YAAD,CAAaL,UAAU,gBACrB,kBAAC,EAAAM,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,GACf,kBAAC,IAAD,CACEC,KAAM/B,EAAMgC,YACZrC,OAAQ,IACRsC,WAAYrD,EAAKqC,cAAcH,EAAAA,EAAAA,UAC/BoB,aAActD,EAAKqC,cAAcH,EAAAA,EAAAA,UACjCqB,QAAM,OAMfjC,GAAeD,GAAa,kBAAC,IAAD,OAE/B,kBAAC,IAAD,KACE,kBAAC,aAAD,KACIE,EAQA,kBAAC,IAAD,CACEuB,KAAMU,EAAAA,QACNpB,MAAOpC,EAAKqC,cAAcH,EAAAA,EAAAA,6BAC1BiB,KAAMnD,EAAKqC,cAAcH,EAAAA,EAAAA,8BAV3B,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAOM,aAAa,KAAKC,KAAK,MAAMC,UAAU,iBAC3C1C,EAAKqC,cAAcH,EAAAA,EAAAA,kBAEtB,kBAAC,UAAD,Y","sources":["webpack:///./src/SmartComponents/Topics/Details.js"],"sourcesContent":["import './_Details.scss';\n\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport RulesTable from '../../PresentationalComponents/RulesTable/RulesTable';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport messages from '../../Messages';\nimport { updateRecFilters } from '../../Services/Filters';\nimport { useDispatch } from 'react-redux';\nimport { useGetTopicQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst Details = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const topicId = useParams().id;\n  let options = selectedTags?.length && { tags: selectedTags };\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n  const {\n    data: topic = {},\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetTopicQuery({ ...options, ...{ topicId } });\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    dispatch(\n      updateRecFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        topic: topicId,\n        sort: `-total_risk`,\n        limit: 10,\n        offset: 0,\n      })\n    );\n\n    return () => dispatch(updateRecFilters(initiaRecFilters));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (topic && topic.name) {\n      const subnav = `${topic.name} - ${messages.topics.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [topic]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        {topic?.name && <Breadcrumbs current={topic?.name} ouiaId=\"details\" />}\n        {!isFetching && (\n          <React.Fragment>\n            <Title headingLevel=\"h3\" size=\"2xl\" className=\"titleOverride\">\n              {topic.name}\n              {topic.featured && (\n                <Label\n                  color=\"blue\"\n                  className=\"labelOverride\"\n                  icon={<StarIcon />}\n                >\n                  {intl.formatMessage(messages.featured)}\n                </Label>\n              )}\n            </Title>\n            <TextContent className=\"textOverride\">\n              <Text component={TextVariants.p}>\n                <Truncate\n                  text={topic.description}\n                  length={600}\n                  expandText={intl.formatMessage(messages.readmore)}\n                  collapseText={intl.formatMessage(messages.readless)}\n                  inline\n                />\n              </Text>\n            </TextContent>\n          </React.Fragment>\n        )}\n        {isFetching || (isLoading && <Loading />)}\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {!isError ? (\n            <React.Fragment>\n              <Title headingLevel=\"h3\" size=\"2xl\" className=\"titleOverride\">\n                {intl.formatMessage(messages.recommendations)}\n              </Title>\n              <RulesTable />\n            </React.Fragment>\n          ) : (\n            <MessageState\n              icon={TimesCircleIcon}\n              title={intl.formatMessage(messages.topicDetailslNodetailsTitle)}\n              text={intl.formatMessage(messages.topicDetailslNodetailsBody)}\n            />\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Details;\n"],"names":["intl","useIntl","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","recFilters","recState","topicId","useParams","id","options","length","tags","workloadQueryBuilder","useGetTopicQuery","data","topic","isLoading","isFetching","isError","useEffect","initiaRecFilters","updateRecFilters","impacting","rule_status","sort","limit","offset","name","subnav","messages","document","title","formatMessage","current","ouiaId","headingLevel","size","className","featured","Label","color","icon","TextContent","Text","component","TextVariants","text","description","expandText","collapseText","inline","TimesCircleIcon"],"sourceRoot":""}