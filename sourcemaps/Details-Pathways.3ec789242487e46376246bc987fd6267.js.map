{"version":3,"file":"js/Details-Pathways.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/SmartComponents/HybridInventoryTabs/HybridInventoryTabs.js","webpack:///./src/PresentationalComponents/Cards/TotalRiskCard.js","webpack:///./src/PresentationalComponents/Cards/ResolutionCard.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js","webpack:///./src/SmartComponents/Recs/helpers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[3]}`,\n        navigate: `/${location[3]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/esm/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens/dist/js/global_secondary_color_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const RecommendationLevel = ({ recLvl, isCompact }) => {\n  const intl = useIntl();\n  const label = (text, recLvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${recLvl}%`}</Label>\n  );\n\n  if (recLvl >= 80) {\n    return label(intl.formatMessage(messages.high), recLvl, 'red', isCompact);\n  } else if (recLvl < 80 && recLvl >= 50) {\n    return label(\n      intl.formatMessage(messages.medium),\n      recLvl,\n      'orange',\n      isCompact\n    );\n  } else {\n    return label(intl.formatMessage(messages.low), recLvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\nRecommendationLevel.defaultProps = {\n  isCompact: true,\n};\n\nexport default RecommendationLevel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { Suspense, Fragment, lazy, useContext } from 'react';\nimport propTypes from 'prop-types';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useFeatureFlag } from '../../Utilities/Hooks';\nimport { AccountStatContext } from '../../ZeroStateWrapper';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst ImmutableDevices = lazy(() =>\n  import(/* webpackChunkName: \"ImmutableDevices\" */ './ImmutableDevices')\n);\n\nconst RecommendationSystems = lazy(() =>\n  import(\n    /* webpackChunkName: \"RecommendationSystems\" */ './ConventionalSystems/RecommendationSystems'\n  )\n);\n\nconst PathwaySystems = lazy(() =>\n  import(\n    /* webpackChunkName: \"PathwaySystems\" */ './ConventionalSystems/PathwaySystems'\n  )\n);\n\nconst HybridInventory = ({\n  isImmutableTabOpen,\n  conventionalSystemsCount,\n  edgeSystemsCount,\n  areCountsLoading,\n  tabPathname,\n  ...tabProps\n}) => {\n  const isEdgeParityEnabled = useFeatureFlag('advisor.edge_parity');\n  const { hasEdgeDevices } = useContext(AccountStatContext);\n\n  return areCountsLoading ? (\n    <Bullseye>\n      <Spinner size=\"lg\" />\n    </Bullseye>\n  ) : (\n    <AsynComponent\n      key=\"hybridInventory\"\n      appName=\"inventory\"\n      module=\"./HybridInventoryTabs\"\n      ConventionalSystemsTab={\n        <Suspense fallback={Fragment}>\n          {tabProps.isRecommendationDetail ? (\n            <RecommendationSystems {...tabProps} />\n          ) : (\n            <PathwaySystems {...tabProps} />\n          )}\n        </Suspense>\n      }\n      ImmutableDevicesTab={\n        <Suspense fallback={Fragment}>\n          <ImmutableDevices {...tabProps} />\n        </Suspense>\n      }\n      tabPathname={tabPathname}\n      isImmutableTabOpen={isImmutableTabOpen}\n      fallback={<div />}\n      columns\n      isEdgeParityEnabled={isEdgeParityEnabled}\n      accountHasEdgeImages={hasEdgeDevices}\n      hasConventionalSystems={\n        conventionalSystemsCount > 0 || edgeSystemsCount <= 0\n      }\n    />\n  );\n};\n\nHybridInventory.propTypes = {\n  isImmutableTabOpen: propTypes.bool,\n  conventionalSystemsCount: propTypes.number,\n  edgeSystemsCount: propTypes.number,\n  areCountsLoading: propTypes.bool,\n  tabPathname: propTypes.string,\n  rule: propTypes.object,\n  isRecommendationDetail: propTypes.bool,\n};\n\nexport default HybridInventory;\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport React from 'react';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nexport const TotalRiskCard = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid hasGutter>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6} className=\"pf-u-font-size-sm\">\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const ResolutionCard = ({\n  name,\n  reboot_required,\n  resolution_risk,\n  recommendation_level,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row \">\n          <div className=\"halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-sm pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\" pf-u-pl-xl halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body pf-u-font-size-sm\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel recLvl={recommendation_level} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import './Details.scss';\n\nimport PropTypes from 'prop-types';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { TotalRiskCard } from '../../PresentationalComponents/Cards/TotalRiskCard';\nimport { ResolutionCard } from '../../PresentationalComponents/Cards/ResolutionCard';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport HybridInventory from '../HybridInventoryTabs/HybridInventoryTabs';\nimport { useFeatureFlag } from '../../Utilities/Hooks';\nimport { edgeSystemsCheck } from './helpers';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = ({ isImmutableTabOpen }) => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  const isEdgeParityEnabled = useFeatureFlag('advisor.edge_parity');\n  const [edgeSystemsCount, setEdgeSystemsCount] = useState(0);\n  const [conventionalSystemsCount, setConventionalSystemsCount] = useState(0);\n  const [areCountsLoading, setCountsLoading] = useState(true);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n  const chrome = useChrome();\n  useEffect(() => {\n    pathway &&\n      !isFetching &&\n      chrome.updateDocumentTitle(\n        intl.formatMessage(messages.documentTitle, {\n          subnav: `${pathway.name} - ${messages.pathways.defaultMessage}`,\n        })\n      );\n  }, [chrome, intl, pathway, pathname, isFetching]);\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    isEdgeParityEnabled &&\n      edgeSystemsCheck(\n        undefined,\n        undefined,\n        setEdgeSystemsCount,\n        setConventionalSystemsCount,\n        setCountsLoading,\n        pathwayName\n      );\n  }, [isEdgeParityEnabled, pathwayName]);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <section className=\"pf-u-p-lg\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRiskCard {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <ResolutionCard {...pathway} />\n              </GridItem>\n            </Grid>\n          </section>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <section className=\"pf-u-px-lg pf-u-pb-lg\">\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <HybridInventory\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  isImmutableTabOpen={isImmutableTabOpen}\n                  tabPathname={`/insights/advisor/recommendations/pathways/${pathwayName}`}\n                  edgeSystemsCount={edgeSystemsCount}\n                  conventionalSystemsCount={conventionalSystemsCount}\n                  areCountsLoading={areCountsLoading}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </section>\n    </React.Fragment>\n  );\n};\n\nPathwayDetails.propTypes = {\n  isImmutableTabOpen: PropTypes.bool,\n};\nexport default PathwayDetails;\n","import { SYSTEM_TYPES, BASE_URL } from '../../AppConstants';\nimport { DeleteApi, Get, Post } from '../../Utilities/Api';\nimport messages from '../../Messages';\nimport axios from 'axios';\nexport const ruleResolutionRisk = (rule) => {\n  const resolution = rule?.resolution_set?.find(\n    (resolution) =>\n      resolution.system_type === SYSTEM_TYPES.rhel || SYSTEM_TYPES.ocp\n  );\n  return resolution ? resolution.resolution_risk.risk : undefined;\n};\n\nexport const enableRule = async (\n  rule,\n  refetch,\n  intl,\n  addNotification,\n  handleModalToggle\n) => {\n  try {\n    await DeleteApi(`${BASE_URL}/ack/${rule.rule_id}/`);\n    addNotification({\n      variant: 'success',\n      timeout: true,\n      dismissable: true,\n      title: intl.formatMessage(messages.recSuccessfullyEnabled),\n    });\n    refetch();\n  } catch (error) {\n    handleModalToggle(false);\n    addNotification({\n      variant: 'danger',\n      dismissable: true,\n      title: intl.formatMessage(messages.error),\n      description: `${error}`,\n    });\n  }\n};\n\nexport const bulkHostActions = async ({\n  refetch,\n  addNotification,\n  intl,\n  rule,\n}) => {\n  try {\n    const hostAckResponse = (\n      await Get(\n        `${BASE_URL}/hostack/`,\n        {},\n        { rule_id: rule.rule_id, limit: rule.hosts_acked_count }\n      )\n    ).data;\n    const data = {\n      systems: hostAckResponse?.data?.map((item) => item.system_uuid),\n    };\n\n    await Post(`${BASE_URL}/rule/${rule.rule_id}/unack_hosts/`, {}, data);\n    refetch();\n    addNotification({\n      variant: 'success',\n      timeout: true,\n      dismissable: true,\n      title: intl.formatMessage(messages.recSuccessfullyEnabled),\n    });\n  } catch (error) {\n    addNotification({\n      variant: 'danger',\n      dismissable: true,\n      title: intl.formatMessage(messages.error),\n      description: `${error}`,\n    });\n  }\n};\n\nconst getSystemCheckEndpoints = ({ ruleId, pathway }) => {\n  if (ruleId) {\n    return {\n      conventionalURL: `/api/insights/v1/rule/${ruleId}/systems_detail/?filter[system_profile][host_type][nil]=true&limit=1`,\n      edgeURL: `/api/insights/v1/rule/${ruleId}/systems_detail/?filter[system_profile][host_type]=edge&limit=1`,\n    };\n  }\n\n  return {\n    conventionalURL: `/api/insights/v1/system/?limit=1&filter[system_profile][host_type][nil]=true&pathway=${pathway}`,\n    edgeURL: `/api/insights/v1/system/?limit=1&filter[system_profile][host_type]=edge&pathway=${pathway}`,\n  };\n};\n\nexport const edgeSystemsCheck = async (\n  ruleId,\n  setSystemsCount,\n  setEdgeSystemsCount,\n  setConventionalSystemsCount,\n  setCountsLoading,\n  pathway\n) => {\n  let count = 0;\n  const { conventionalURL, edgeURL } = getSystemCheckEndpoints({\n    ruleId,\n    pathway,\n  });\n\n  try {\n    await axios.get(conventionalURL).then(({ data }) => {\n      count = count += data.meta.count;\n      setConventionalSystemsCount(data.meta.count);\n    });\n    await axios.get(edgeURL).then(({ data }) => {\n      count = count += data.meta.count;\n      setEdgeSystemsCount(data.meta.count);\n    });\n\n    setSystemsCount && setSystemsCount(count);\n    setCountsLoading(false);\n  } catch (error) {\n    console.error(error);\n    setCountsLoading(false);\n  }\n};\n"],"names":["Breadcrumbs","_ref","_useLocation$pathname","current","intl","useIntl","location","useLocation","pathname","split","_useState","useState","_useState2","_slicedToArray","items","setItems","skip","length","_useGetRecQuery","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","concat","formatMessage","messages","navigate","description","React","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","RebootRequired","reboot_required","className","PowerOffIcon","TextContent","Text","component","TextVariants","strong","str","status","QuestionTooltip","text","Tooltip","position","TooltipPosition","content","OutlinedQuestionCircleIcon","color","global_secondary_color_100","LabelIcon","icon","Label","variant","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","AutomationIcon","LockIcon","CubeIcon","PortIcon","labels","Number","defaultProps","RecommendationLevel","recLvl","props","RuleLabels","_rule$tags","rule","noMargin","tags","search","rule_status","Card","CardBody","List","ImmutableDevices","lazy","RecommendationSystems","PathwaySystems","HybridInventory","isImmutableTabOpen","conventionalSystemsCount","edgeSystemsCount","areCountsLoading","tabPathname","tabProps","_objectWithoutProperties","_excluded","isEdgeParityEnabled","useFeatureFlag","hasEdgeDevices","useContext","AccountStatContext","Bullseye","Spinner","size","AsynComponent","appName","module","ConventionalSystemsTab","Suspense","fallback","Fragment","isRecommendationDetail","ImmutableDevicesTab","columns","accountHasEdgeImages","hasConventionalSystems","TotalRiskCard","cats","_cats$","impacted_systems_count","incident_count","categories","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","isFlat","isPlain","CardTitle","Grid","hasGutter","GridItem","span","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","datum","name","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","ChartAxis","dependentAxis","showGrid","ChartGroup","ChartBar","barWidth","style","fill","_ref2","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","cat","join","systems","incidents","ResolutionCard","resolution_risk","recommendation_level","InsightsLabel","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","RulesTable","PathwayDetails","pathwayName","useParams","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","_ref3","SID","_ref4","recFilters","_ref5","recState","sysFilters","_ref6","sysState","setEdgeSystemsCount","_useState3","_useState4","setConventionalSystemsCount","_useState5","_useState6","setCountsLoading","options","_objectSpread","workloadQueryBuilder","_useGetPathwayQuery","useGetPathwayQuery","slug","_useGetPathwayQuery$d","pathway","_useState7","includes","_useState8","activeTab","setActiveTab","chrome","useChrome","updateDocumentTitle","subnav","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","then","getElementById","scrollIntoView","behavior","edgeSystemsCheck","undefined","Loading","PageHeader","PageHeaderTitle","has_incident","date","DateFormat","Date","publish_date","type","sm","md","Tabs","activeKey","onSelect","_e","tab","Tab","eventKey","TabTitleText","ruleResolutionRisk","_rule$resolution_set","resolution","resolution_set","find","system_type","SYSTEM_TYPES","enableRule","_asyncToGenerator","_regeneratorRuntime","_callee","refetch","addNotification","handleModalToggle","_context","prev","next","DeleteApi","BASE_URL","rule_id","timeout","dismissable","t0","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","bulkHostActions","_callee2","_hostAckResponse$data","hostAckResponse","_context2","Get","hosts_acked_count","sent","item","system_uuid","Post","_x6","getSystemCheckEndpoints","conventionalURL","edgeURL","_callee3","setSystemsCount","count","_getSystemCheckEndpoi","_context3","axios","meta","_ref7","console","error","_x7","_x8","_x9","_x10","_x11","_x12"],"sourceRoot":""}