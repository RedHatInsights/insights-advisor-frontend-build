{"version":3,"file":"js/TopicsList.f51004461c0b0db666ef.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/TopicsTable/TopicsTable.js","webpack:///./src/SmartComponents/Topics/List.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  sortable,\n  wrappable,\n} from '@patternfly/react-table';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport messages from '../../Messages';\nimport { sortBy } from 'lodash';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nconst TopicsTable = () => {\n  const intl = useIntl();\n  const topics = useSelector(({ AdvisorStore }) => AdvisorStore.topics);\n  const topicsFetchStatus = useSelector(\n    ({ AdvisorStore }) => AdvisorStore.topicsFetchStatus\n  );\n  const [searchText, setSearchText] = useState('');\n  const [cols] = useState([\n    { title: intl.formatMessage(messages.name), transforms: [sortable] },\n    '',\n    {\n      title: intl.formatMessage(messages.featured),\n      transforms: [sortable, wrappable],\n    },\n    {\n      title: intl.formatMessage(messages.affectedSystems),\n      transforms: [sortable, wrappable],\n    },\n  ]);\n  const [rows, setRows] = useState([]);\n  const [sort, setSort] = useState({ index: 2, direction: 'desc' });\n\n  const buildRows = (list) =>\n    list.flatMap((value, key) => {\n      const isValidSearchText =\n        searchText.length === 0 ||\n        value.name.toLowerCase().includes(searchText.toLowerCase());\n\n      return isValidSearchText\n        ? [\n            {\n              topic: value,\n              cells: [\n                {\n                  title: (\n                    <span key={key}>\n                      <Link key={key} to={`/topics/${value.slug}`}>\n                        {' '}\n                        {value.name}{' '}\n                      </Link>\n                    </span>\n                  ),\n                  props: { colSpan: 2 },\n                },\n                {\n                  title: (\n                    <span key={key}>\n                      {' '}\n                      {value.featured && (\n                        <Label color=\"blue\" icon={<StarIcon />}>\n                          {intl.formatMessage(messages.featured)}\n                        </Label>\n                      )}{' '}\n                    </span>\n                  ),\n                },\n                {\n                  title: (\n                    <span className=\"pf-m-center\" key={key}>\n                      {' '}\n                      {value.impacted_systems_count}\n                    </span>\n                  ),\n                },\n              ],\n            },\n          ]\n        : [];\n    });\n\n  const onSort = (_event, index, direction) => {\n    const sortedReports = {\n      0: sortBy(topics, [(result) => result.name]),\n      2: sortBy(topics, [(result) => result.featured]),\n      3: sortBy(topics, [(result) => result.impacted_systems_count]),\n    };\n    const sortedTopicsDirectional =\n      direction === SortByDirection.asc\n        ? sortedReports[index]\n        : sortedReports[index].reverse();\n    setSort({ index, direction });\n    setRows(buildRows(sortedTopicsDirectional));\n  };\n\n  const activeFiltersConfig = {\n    filters: searchText.length\n      ? [\n          {\n            category: 'Description',\n            chips: [{ name: searchText, value: searchText }],\n          },\n        ]\n      : [],\n    onDelete: () => {\n      setSearchText('');\n      setSort({});\n    },\n  };\n\n  useEffect(() => {\n    sort.index\n      ? onSort(null, sort.index, sort.direction)\n      : setRows(buildRows(topics).asMutable());\n  }, [topics, searchText]);\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (event, value) => {\n          setSearchText(value);\n          setSort({});\n        },\n        value: searchText,\n      },\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      {topicsFetchStatus === '' ||\n        (topicsFetchStatus === 'pending' && <Loading />)}\n      {topicsFetchStatus === 'fulfilled' && topics.length > 0 && (\n        <React.Fragment>\n          <PrimaryToolbar\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label={'topics-table'}\n            sortBy={sort}\n            onSort={onSort}\n            cells={cols}\n            rows={rows}\n            ouiaId=\"topicTable\"\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n            {rows.length === 0 &&\n              topicsFetchStatus !== 'pending' &&\n              setRows([\n                {\n                  cells: [\n                    {\n                      title: (\n                        <MessageState\n                          icon={SearchIcon}\n                          title={intl.formatMessage(messages.noHitsTitle, {\n                            item: intl\n                              .formatMessage(messages.topics)\n                              .toLowerCase(),\n                          })}\n                          text={intl.formatMessage(messages.noHitsBody, {\n                            item: intl\n                              .formatMessage(messages.topics)\n                              .toLowerCase(),\n                          })}\n                        />\n                      ),\n                      props: { colSpan: 4 },\n                    },\n                  ],\n                },\n              ])}\n          </Table>\n        </React.Fragment>\n      )}\n      {topicsFetchStatus === 'failed' ||\n        topicsFetchStatus === 'rejected' ||\n        (topicsFetchStatus === 'fulfilled' && topics.length === 0 && (\n          <MessageState\n            icon={TimesCircleIcon}\n            title={intl.formatMessage(messages.topicsListNotopicsTitle)}\n            text={intl.formatMessage(messages.topicsListNotopicsBody)}\n          />\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default TopicsTable;\n","import * as AppActions from '../../AppActions';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport PropTypes from 'prop-types';\nimport TopicsTable from '../../PresentationalComponents/TopicsTable/TopicsTable';\nimport { connect } from 'react-redux';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst List = ({ fetchTopics, selectedTags, workloads, SID }) => {\n  const intl = useIntl();\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.topics.defaultMessage,\n  });\n\n  useEffect(() => {\n    let options = selectedTags !== null &&\n      selectedTags.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    fetchTopics(options);\n  }, [fetchTopics, selectedTags, workloads, SID]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.topics)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <TopicsTable />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'list-topics';\nList.propTypes = {\n  fetchTopics: PropTypes.func,\n  selectedTags: PropTypes.array,\n  workloads: PropTypes.object,\n  SID: PropTypes.object,\n};\nconst mapStateToProps = ({ AdvisorStore, ownProps }) => ({\n  selectedTags: AdvisorStore.selectedTags,\n  workloads: AdvisorStore.workloads,\n  SID: AdvisorStore.SID,\n  ...ownProps,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTopics: (options) => dispatch(AppActions.fetchTopics(options)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"],"names":["intl","useIntl","topics","useSelector","AdvisorStore","topicsFetchStatus","useState","searchText","setSearchText","title","formatMessage","messages","transforms","sortable","wrappable","cols","rows","setRows","index","direction","sort","setSort","buildRows","list","flatMap","value","key","length","name","toLowerCase","includes","topic","cells","Link","to","slug","props","colSpan","featured","Label","color","icon","className","impacted_systems_count","onSort","_event","sortedReports","0","result","2","3","sortedTopicsDirectional","SortByDirection","reverse","activeFiltersConfig","filters","category","chips","onDelete","useEffect","asMutable","filterConfigItems","label","filterValues","onChange","event","Loading","PrimaryToolbar","filterConfig","items","Table","aria-label","sortBy","ouiaId","isStickyHeader","TableHeader","TableBody","MessageState","SearchIcon","item","text","TimesCircleIcon","List","fetchTopics","selectedTags","workloads","SID","document","subnav","options","tags","workloadQueryBuilder","PageHeader","PageHeaderTitle","Main","displayName","propTypes","PropTypes","connect","ownProps","dispatch","AppActions"],"sourceRoot":""}