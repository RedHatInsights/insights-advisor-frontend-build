{"version":3,"file":"js/909.a319418ccf1ff1791884.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Inventory/Inventory.js"],"sourcesContent":["import './_Inventory.scss';\n\nimport {\n  BASE_URL,\n  RULES_FETCH_URL,\n  SYSTEMS_FETCH_URL,\n} from '../../AppConstants';\nimport React, { useEffect, useState } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport {\n  pruneFilters,\n  urlBuilder,\n  workloadQueryBuilder,\n} from '../Common/Tables';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\n\nimport AnsibeTowerIcon from '@patternfly/react-icons/dist/js/icons/ansibeTower-icon';\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Get } from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useIntl } from 'react-intl';\nimport downloadReport from '../Common/DownloadHelper';\n\nconst Inventory = ({\n  tableProps,\n  rule,\n  afterDisableFn,\n  pathway,\n  selectedTags,\n  workloads,\n  SID,\n  permsExport,\n  exportTable,\n}) => {\n  const store = useStore();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [selected, setSelected] = useState([]);\n  const [filters, setFilters] = useState({\n    limit: 20,\n    offset: 0,\n    sort: '-last_seen',\n    name: '',\n  });\n  const entities = useSelector(({ entities }) => entities || {});\n  const onSelectRows = (id, selected) =>\n    dispatch({ type: 'SELECT_ENTITY', payload: { id, selected } });\n  const addNotification = (data) => dispatch(notification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [bulkSelect, setBulkSelect] = useState();\n\n  const remediationDataProvider = async () => {\n    if (pathway) {\n      const pathways = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n          {},\n          {}\n        )\n      )?.data.data;\n      const issues = pathways.map((rec) => ({\n        id: `advisor:${rec.rule_id}`,\n        description: rec.description,\n      }));\n      return { issues, systems: selected };\n    } else {\n      return {\n        issues: [\n          {\n            id: `advisor:${rule.rule_id}`,\n            description: rule.description,\n          },\n        ],\n        systems: selected,\n      };\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    onSelectRows(-1, false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const bulkSelectfn = () => {\n    setBulkSelect(true);\n    onSelectRows(0, true);\n  };\n\n  const calculateSelectedItems = () =>\n    bulkSelect\n      ? setBulkSelect(false)\n      : setSelected(\n          entities?.rows\n            ?.filter((entity) => entity.selected === true)\n            .map((entity) => entity.id)\n        );\n\n  const createColumns = (defaultColumns) => {\n    let lastSeenColumn = defaultColumns.filter(({ key }) => key === 'updated');\n    let displayName = defaultColumns.filter(\n      ({ key }) => key === 'display_name'\n    );\n    let systemProfile = defaultColumns.filter(\n      ({ key }) => key === 'system_profile'\n    );\n\n    displayName = {\n      ...displayName[0],\n      transforms: [sortable, wrappable],\n      props: { isStatic: true },\n    };\n\n    lastSeenColumn = {\n      ...lastSeenColumn[0],\n      transforms: [sortable, wrappable],\n      props: { width: 20 },\n    };\n\n    systemProfile = {\n      ...systemProfile[0],\n      transforms: [wrappable],\n    };\n\n    return [displayName, systemProfile, lastSeenColumn];\n  };\n\n  const handleRefresh = (options) => {\n    /* Rec table doesn't use the same sorting params as sys table, switching between the two results in the rec table blowing up cuz its trying to \n    read the endpoint with incorrect sorting params, if we hold of on updating the sysable url params when using the this component in pathways, it\n    solves this issue for the time being*/\n    const { name, display_name } = options;\n    const refreshedFilters = {\n      ...options,\n      ...(name && {\n        name,\n      }),\n      ...(display_name && {\n        display_name,\n      }),\n    };\n    !pathway && urlBuilder(refreshedFilters, selectedTags);\n  };\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    setFilters(filter);\n  };\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    {\n      label: SFC.rhel_version.title.toLowerCase(),\n      type: SFC.rhel_version.type,\n      id: SFC.rhel_version.urlParam,\n      value: `checkbox-${SFC.rhel_version.urlParam}`,\n      filterValues: {\n        key: `${SFC.rhel_version.urlParam}-filter`,\n        onChange: (_e, values) => {\n          addFilterParam(SFC.rhel_version.urlParam, values);\n        },\n        value: filters.rhel_version,\n        items: SFC.rhel_version.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_e, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  useEffect(() => {\n    entities?.rows?.length && calculateSelectedItems(entities.rows);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entities?.rows]);\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n        />\n      )}\n      <InventoryTable\n        hasCheckbox\n        initialLoading\n        autoRefresh\n        hideFilters={{ all: true, name: false }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        tableProps={{\n          variant: TableVariant.compact,\n          ...tableProps,\n        }}\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        getEntities={async (_items, config, showTags, defaultGetEntities) => {\n          const {\n            per_page,\n            page,\n            orderBy,\n            orderDirection,\n            advisorFilters,\n            selectedTags,\n            workloads,\n            SID,\n          } = config;\n          const sort = `${orderDirection === 'ASC' ? '' : '-'}${\n            orderBy === 'updated' ? 'last_seen' : orderBy\n          }`;\n          let options = {\n            ...advisorFilters,\n            limit: per_page,\n            offset: page * per_page - per_page,\n            sort,\n            ...(config.filters.hostnameOrId &&\n              !pathway && {\n                name: config?.filters?.hostnameOrId,\n              }),\n            ...(config.filters.hostnameOrId &&\n              pathway && {\n                display_name: config?.filters?.hostnameOrId,\n              }),\n            ...(selectedTags?.length && { tags: selectedTags }),\n            ...(Array.isArray(advisorFilters.rhel_version) && {\n              rhel_version: advisorFilters.rhel_version?.join(','),\n            }),\n          };\n\n          workloads &&\n            (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n          handleRefresh(options);\n\n          const fetchedSystems = pathway\n            ? (\n                await Get(\n                  `${SYSTEMS_FETCH_URL}`,\n                  {},\n                  { ...options, pathway: pathway.slug }\n                )\n              )?.data\n            : (\n                await Get(\n                  `${RULES_FETCH_URL}${encodeURI(\n                    rule.rule_id\n                  )}/systems_detail/`,\n                  {},\n                  options\n                )\n              )?.data;\n\n          const results = await defaultGetEntities(\n            fetchedSystems.data.map((system) => system.system_uuid),\n            {\n              page,\n              per_page,\n              hasItems: true,\n              fields: { system_profile: ['operating_system'] },\n            },\n            showTags\n          );\n\n          return Promise.resolve({\n            results: mergeArraysByDiffKeys(\n              fetchedSystems.data,\n              results.results\n            ),\n            total: fetchedSystems.meta.count,\n          });\n        }}\n        dedicatedAction={\n          <RemediationButton\n            key=\"remediation-button\"\n            isDisabled={\n              selected.length === 0 || (!pathway && rule?.playbook_count === 0)\n            }\n            dataProvider={remediationDataProvider}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            <AnsibeTowerIcon size=\"sm\" className=\"ins-c-background__default\" />\n            &nbsp;{intl.formatMessage(messages.remediate)}\n          </RemediationButton>\n        }\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForSystems),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: () => {\n                onSelectRows(-1, false);\n              },\n            },\n            {\n              ...(entities?.rows?.length > filters.limit\n                ? {\n                    title: intl.formatMessage(messages.selectPage, {\n                      items: filters.limit,\n                    }),\n                    onClick: () => {\n                      onSelectRows(0, true);\n                    },\n                  }\n                : {}),\n            },\n            {\n              ...(entities?.rows?.length > 0\n                ? {\n                    title: intl.formatMessage(messages.selectAll, {\n                      items: entities?.total || 0,\n                    }),\n                    onClick: async () => {\n                      console.error(pathway);\n                      const allSystems = pathway\n                        ? (\n                            await Get(\n                              `${SYSTEMS_FETCH_URL}`,\n                              {},\n                              {\n                                pathway: pathway.slug,\n                                limit: pathway.impacted_systems_count,\n                              }\n                            )\n                          )?.data?.data?.map((system) => system.system_uuid)\n                        : (\n                            await Get(\n                              `${RULES_FETCH_URL}${encodeURI(\n                                rule.rule_id\n                              )}/systems/`,\n                              {},\n                              { name: filters.name }\n                            )\n                          )?.data?.host_ids;\n\n                      console.error(allSystems);\n                      setSelected(allSystems);\n                      bulkSelectfn();\n                    },\n                  }\n                : {}),\n            },\n          ],\n          checked:\n            (selected.length === entities?.rows?.length ||\n              selected.length === entities?.total) &&\n            entities?.total > 0\n              ? 1\n              : selected.length === filters.limit\n              ? null\n              : 0,\n          onSelect: () => {\n            selected.length > 0 ? onSelectRows(-1, false) : bulkSelectfn();\n            calculateSelectedItems();\n          },\n        }}\n        fallback={Loading}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          store.replaceReducer(\n            updateReducers({\n              ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n                page: Number(filters.offset / filters.limit + 1 || 1),\n                perPage: Number(filters.limit || 20),\n              }),\n              ...mergeWithDetail(),\n            })\n          );\n        }}\n        exportConfig={\n          permsExport && {\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) => {\n              const overrideData = entities.rows.map((sys) => ({\n                display_name: sys.display_name,\n                os: `${sys.system_profile.operating_system.name} ${sys.system_profile.operating_system.major}.${sys.system_profile.operating_system.minor}`,\n                last_seen: sys.last_seen,\n              }));\n              return downloadReport(\n                exportTable,\n                fileType,\n                filters,\n                selectedTags,\n                workloads,\n                SID,\n                overrideData\n              );\n            },\n            isDisabled: !permsExport || entities?.rows?.length === 0,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nInventory.propTypes = {\n  tableProps: PropTypes.any,\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  pathway: PropTypes.object,\n  selectedTags: PropTypes.any,\n  workloads: PropTypes.any,\n  SID: PropTypes.any,\n  permsExport: PropTypes.bool,\n  exportTable: PropTypes.string,\n};\n\nexport default Inventory;\n"],"names":["Inventory","localFilters","tableProps","rule","afterDisableFn","pathway","selectedTags","workloads","SID","permsExport","exportTable","store","useStore","intl","useIntl","dispatch","useDispatch","useState","selected","setSelected","limit","offset","sort","name","filters","setFilters","entities","useSelector","onSelectRows","id","type","payload","addNotification","data","notification","disableRuleModalOpen","setDisableRuleModalOpen","bulkSelect","setBulkSelect","remediationDataProvider","Get","BASE_URL","encodeURI","slug","pathways","issues","map","rec","rule_id","description","systems","handleModalToggle","bulkSelectfn","calculateSelectedItems","rows","filter","entity","handleRefresh","options","display_name","refreshedFilters","urlBuilder","removeFilterParam","param","filterConfigItems","label","SFC","value","filterValues","key","onChange","_e","values","length","addFilterParam","rhel_version","items","activeFiltersConfig","deleteTitle","formatMessage","messages","pruneFilters","onDelete","itemsToRemove","isAll","item","newFilter","urlParam","Array","isArray","String","chips","useEffect","isModalOpen","afterFn","hosts","hasCheckbox","initialLoading","autoRefresh","hideFilters","all","filterConfig","columns","defaultColumns","lastSeenColumn","displayName","systemProfile","transforms","sortable","wrappable","props","isStatic","width","createColumns","variant","TableVariant","customFilters","advisorFilters","getEntities","_items","config","showTags","defaultGetEntities","per_page","page","orderBy","orderDirection","hostnameOrId","tags","join","workloadQueryBuilder","SYSTEMS_FETCH_URL","RULES_FETCH_URL","fetchedSystems","system","system_uuid","hasItems","fields","system_profile","results","Promise","resolve","mergeArraysByDiffKeys","total","meta","count","dedicatedAction","isDisabled","playbook_count","dataProvider","onRemediationCreated","result","remediation","getNotification","error","dismissable","title","size","className","actionsConfig","actions","onClick","console","impacted_systems_count","host_ids","allSystems","checked","onSelect","fallback","Loading","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","perPage","exportConfig","fileType","overrideData","sys","os","operating_system","major","minor","last_seen","downloadReport","propTypes","PropTypes"],"sourceRoot":""}