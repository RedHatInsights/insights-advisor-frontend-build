{"version":3,"file":"js/3016.1675069301567.44f723c9c99fb87dab8e.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Inventory/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/reducer.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/useBulkSelect.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/useSelectionManager.js","webpack:///./src/PresentationalComponents/Inventory/Inventory.js","webpack:///./src/PresentationalComponents/helper.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import { Get } from '../../Utilities/Api';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport { RULES_FETCH_URL, SYSTEMS_FETCH_URL } from '../../AppConstants';\nimport { createOptions } from '../helper';\n\n/*This functions purpose is to grab the currently set filters, and return all associated systems for it.*/\nexport const paginatedRequestHelper = async ({\n  per_page,\n  page,\n  advisorFilters,\n  filters,\n  workloads,\n  SID,\n  pathway,\n  rule,\n  selectedTags,\n  sort,\n}) => {\n  let options = createOptions(\n    advisorFilters,\n    page,\n    per_page,\n    sort,\n    pathway,\n    filters,\n    selectedTags,\n    workloads,\n    SID\n  );\n\n  return pathway\n    ? (\n        await Get(\n          `${SYSTEMS_FETCH_URL}`,\n          {},\n          { ...options, pathway: pathway.slug }\n        )\n      )?.data\n    : (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/systems_detail/`,\n          {},\n          options\n        )\n      )?.data;\n};\n\nexport const getEntities =\n  (\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule\n  ) =>\n  async (_items, config, showTags, defaultGetEntities) => {\n    const {\n      per_page,\n      page,\n      orderBy,\n      orderDirection,\n      advisorFilters,\n      filters,\n      workloads,\n      SID,\n      selectedTags,\n    } = config;\n\n    //operating_system is currently not supported, but will be down the line.\n    const sort =\n      orderBy === 'operating_system'\n        ? 'rhel_version'\n        : `${orderDirection === 'ASC' ? '' : '-'}${\n            orderBy === 'updated' ? 'last_seen' : orderBy\n          }`;\n\n    let options = createOptions(\n      advisorFilters,\n      page,\n      per_page,\n      sort,\n      pathway,\n      filters,\n      selectedTags,\n      workloads,\n      SID\n    );\n    handleRefresh(options);\n    const allDetails = { ...config, pathway, handleRefresh, rule, sort };\n    setFullFilters(allDetails);\n    const fetchedSystems = await paginatedRequestHelper(allDetails);\n    const results = await defaultGetEntities(\n      fetchedSystems.data.map((system) => system.system_uuid),\n      {\n        per_page,\n        hasItems: true,\n        fields: { system_profile: ['operating_system'] },\n      },\n      showTags\n    );\n    setCurPageIds(fetchedSystems.data.map((system) => system.system_uuid));\n    setTotal(fetchedSystems.meta.count);\n    return Promise.resolve({\n      results: mergeArraysByDiffKeys(fetchedSystems.data, results.results).map(\n        (item) => {\n          return {\n            ...item,\n            selected: selectedIds?.includes(item.id),\n          };\n        }\n      ),\n      total: fetchedSystems.meta.count,\n    });\n  };\n\n/*Takes in the current filters, and keeps sending get request until there are no pages left*/\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100, rule) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction({ ...filter, page: pageIdx + 1, per_page: batchSize, rule })\n    )\n  );\n};\n/*Grabs all systemIds and maniupaltes the data into one large array of systems*/\nexport const allCurrentSystemIds =\n  (fullFilters, total, rule, setIsLoading) => async () => {\n    setIsLoading(true);\n    const results = await (\n      await fetchBatched(paginatedRequestHelper, total, fullFilters, 100, rule)\n    ).map((item) => item.data);\n\n    const merged = [].concat.apply([], results).map((item) => item.system_uuid);\n    setIsLoading(false);\n    return merged;\n  };\n","import isObject from 'lodash/isObject';\nimport uniq from 'lodash/uniq';\n\nconst selectionGroup = (action) => action.group || 'default';\n\nexport const init = (withGroups) => (preselected) =>\n  withGroups ? preselected || {} : { default: preselected || [] };\n\nconst cleanEmpty = (state) => {\n  const newState = state;\n  Object.entries(state).forEach(([key, value]) => {\n    if (value === undefined) {\n      delete newState[key];\n    }\n  });\n  return newState;\n};\n\nconst set = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]:\n      action.items?.length > 0 || isObject(action.items)\n        ? action.items\n        : undefined,\n  });\n};\n\nconst select = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]: action.reset\n      ? action?.items\n      : uniq([action?.item, ...(state[group] || [])]),\n  });\n};\n\nconst deselect = (state = {}, action) => {\n  const group = selectionGroup(action);\n  const items = (state[group] || []).filter(\n    (selectedItem) => !action.item.includes(selectedItem)\n  );\n  return cleanEmpty({\n    ...state,\n    [group]: items.length === 0 ? undefined : items,\n  });\n};\n\nconst toggle = (state, action) => {\n  const group = selectionGroup(action);\n  return (state[group] || []).includes(action.item)\n    ? deselect(state, action)\n    : select(state, action);\n};\n\nconst reset = (state, action) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))(\n    action?.preselected\n  );\nconst clear = (state) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))();\n\nexport default (state, action) =>\n  ({\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n  }[action.type](state, action));\n","import { useEffect } from 'react';\nimport useSelectionManager from '../useSelectionManager';\nimport { compileTitle, checkboxState, selectOrUnselect } from './helpers';\n\n/**\n * Provides properties for a Pattternfly (based) Table and Toolbar component to implement bulk selection\n *\n * @param {number} [total] Number to show as total count\n * @param {Function} [onSelect] function to call when a selection is made\n * @param {Array} [preselected] Array of itemIds selected when initialising\n * @param {Function} [itemIdsInTable] async function that returns an array of all item ids\n * @param {Function} [itemIdsOnPage] async function that returns an array of item ids visible on the page\n * @param {string} [identifies] Prop of the row containing the item ID\n * @returns {{ selectedIds , selectNone, tableProps }}\n */\nconst useBulkSelect = ({\n  total = 0,\n  onSelect,\n  preselected,\n  itemIdsInTable,\n  itemIdsOnPage,\n  identifier = 'id',\n  isLoading,\n}) => {\n  const enableBulkSelect = !!onSelect;\n  const {\n    selection: selectedIds,\n    set,\n    select,\n    deselect,\n    clear,\n  } = useSelectionManager(preselected || []);\n  const selectedIdsTotal = (selectedIds || []).length;\n  const idsOnPage = itemIdsOnPage();\n  const paginatedTotal = idsOnPage.length || total;\n  const allSelected = selectedIdsTotal === total;\n  const noneSelected = selectedIdsTotal === 0;\n\n  const isDisabled = total === 0;\n  const checked = checkboxState(selectedIdsTotal, total);\n  const title = compileTitle(selectedIdsTotal, isLoading);\n\n  const mergeArraysUniqly = (arrayA, arrayB) =>\n    Array.from(new Set([...arrayA, ...arrayB]));\n\n  const selectOne = (_, selected, _key, row) =>\n    selected ? select(row[identifier]) : deselect(row[identifier]);\n\n  const selectPage = () => {\n    let selectedItems =\n      selectedIds?.length > 0\n        ? mergeArraysUniqly(selectedIds, idsOnPage)\n        : idsOnPage;\n    select(selectedItems, undefined, true);\n  };\n\n  const selectAll = async () => {\n    const items = await itemIdsInTable();\n    if (allSelected) {\n      clear();\n    } else {\n      set(items);\n    }\n  };\n\n  useEffect(() => {\n    set(preselected);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(preselected)]);\n\n  return enableBulkSelect\n    ? {\n        selectedIds,\n        selectNone: () => clear(),\n        tableProps: {\n          onSelect: total > 0 ? selectOne : undefined,\n          canSelectAll: false,\n        },\n        toolbarProps: {\n          bulkSelect: {\n            toggleProps: title ? { children: [title] } : null,\n            isDisabled,\n            items: [\n              {\n                title: 'Select none',\n                onClick: () => clear(),\n                props: {\n                  isDisabled: noneSelected,\n                },\n              },\n              ...(itemIdsOnPage\n                ? [\n                    {\n                      title: `Select page (${paginatedTotal} items)`,\n                      onClick: selectPage,\n                    },\n                  ]\n                : []),\n              ...(itemIdsInTable\n                ? [\n                    {\n                      title: `${selectOrUnselect(\n                        allSelected\n                      )} all (${total} items)`,\n                      onClick: selectAll,\n                    },\n                  ]\n                : []),\n            ],\n            checked,\n            onSelect: selectedIds?.length > 0 ? clear : selectAll,\n          },\n        },\n      }\n    : {};\n};\n\nexport default useBulkSelect;\n","import React from 'react';\nimport { Spinner } from '@patternfly/react-core';\n\nexport const compileTitle = (itemsTotal, isLoading) => {\n  if (itemsTotal === 0 && !isLoading) {\n    return null;\n  } else if (isLoading) {\n    return (\n      <React.Fragment>\n        <Spinner size=\"sm\" />\n        {`     ${itemsTotal} selected`}\n      </React.Fragment>\n    );\n  } else {\n    return `${itemsTotal} selected`;\n  }\n};\n\nexport const checkboxState = (selectedItemsTotal, itemsTotal) => {\n  if (selectedItemsTotal === 0) {\n    return false;\n  } else if (selectedItemsTotal === itemsTotal) {\n    return true;\n  } else {\n    return null;\n  }\n};\n\nexport const selectOrUnselect = (selected) =>\n  selected ? 'Unselect' : 'Select';\n\nconst allItemsIncluded = (items = [], selection = []) =>\n  items?.filter((item) => selection.includes(item)).length === items.length;\n\nexport const checkCurrentPageSelected = (items = [], selectedItems = []) => {\n  if (selectedItems.length === 0) {\n    return false;\n  } else {\n    return allItemsIncluded(items, selectedItems);\n  }\n};\n\nexport const itemIds = (items) => items.map(({ itemId }) => itemId);\n\nexport const selectItemTransformer = (item, selectedIds = []) => ({\n  ...item,\n  rowProps: {\n    selected: selectedIds.includes(item.itemId),\n  },\n});\n","import { useReducer } from 'react';\nimport reducer, { init as initReducer } from './reducer';\n\n/**\n * Provides a generic API to manage selection stats of one (default) or multiple groups of selections.\n *\n * @param {Array} preselected Array of items initially selected\n * @param {Object} [options] function to call when a selection is made\n */\nconst useSelectionManager = (preselected, options = {}) => {\n  const { withGroups = false } = options;\n  const [selection, dispatch] = useReducer(\n    reducer,\n    preselected,\n    initReducer(withGroups)\n  );\n\n  const set = (items, group) => dispatch({ type: 'set', group, items });\n\n  const select = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'select', group, item });\n\n  const deselect = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'deselect', group, item });\n\n  const toggle = (item, group) => dispatch({ type: 'toggle', group, item });\n\n  const reset = () => dispatch({ type: 'reset', preselected });\n\n  const clear = () => dispatch({ type: 'clear' });\n\n  return {\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n    selection: withGroups ? selection : selection.default,\n  };\n};\n\nexport default useSelectionManager;\n","import './_Inventory.scss';\n\nimport { BASE_URL, RULES_FETCH_URL } from '../../AppConstants';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport { pruneFilters, urlBuilder } from '../Common/Tables';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { getEntities, allCurrentSystemIds } from './helpers';\nimport { Link } from 'react-router-dom';\n\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Get } from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useIntl } from 'react-intl';\nimport downloadReport from '../Common/DownloadHelper';\nimport useBulkSelect from './Hooks/useBulkSelect';\nimport { useLoadModule } from '@scalprum/react-core';\n\nconst Inventory = ({\n  tableProps,\n  rule,\n  afterDisableFn,\n  pathway,\n  selectedTags,\n  workloads,\n  SID,\n  permsExport,\n  exportTable,\n  showTags,\n}) => {\n  const store = useStore();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [filters, setFilters] = useState({\n    limit: 20,\n    offset: 0,\n    sort: '-last_seen',\n    name: '',\n  });\n  const [fullFilters, setFullFilters] = useState();\n  const [total, setTotal] = useState(0);\n  const entities = useSelector(({ entities }) => entities || {});\n\n  const addNotification = (data) => dispatch(notification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [curPageIds, setCurPageIds] = useState([]);\n  const [pathwayRulesList, setPathwayRulesList] = useState({});\n  const [pathwayReportList, setPathwayReportList] = useState({});\n  const [isLoading, setIsLoading] = useState();\n\n  const [hasPathwayDetails, setHasPathwayDetails] = useState(false);\n  const [isRemediationButtonDisabled, setIsRemediationButtonDisabled] =\n    useState(true);\n  //This value comes in from the backend as 0, or 1. To be consistent it is set to -1\n  const [rulesPlaybookCount, setRulesPlaybookCount] = useState(-1);\n  const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n    appName: 'inventory',\n    scope: 'inventory',\n    module: './OsFilterHelpers',\n  });\n  const operatingSystems = useSelector(\n    ({ entities }) => entities?.operatingSystems || []\n  );\n\n  const handleRefresh = (options) => {\n    /* Rec table doesn't use the same sorting params as sys table, switching between the two results in the rec table blowing up cuz its trying to\n    read the endpoint with incorrect sorting params, if we hold of on updating the sysable url params when using the this component in pathways, it\n    solves this issue for the time being*/\n    const { name, display_name } = options;\n    const refreshedFilters = {\n      ...options,\n      ...(name && {\n        name,\n      }),\n      ...(display_name && {\n        display_name,\n      }),\n    };\n    !pathway && urlBuilder(refreshedFilters, selectedTags);\n  };\n\n  const fetchSystems = getEntities(\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule\n  );\n\n  const grabPageIds = () => {\n    return curPageIds || [];\n  };\n\n  const {\n    tableProps: bulkSelectTableProps,\n    toolbarProps,\n    selectedIds,\n    selectNone,\n  } = useBulkSelect({\n    total,\n    onSelect: () => {},\n    itemIdsInTable: allCurrentSystemIds(fullFilters, total, rule, setIsLoading),\n    itemIdsOnPage: grabPageIds,\n    identitfier: 'system_uuid',\n    isLoading,\n  });\n  // Ensures rows are marked as selected, runs the check on remediation Status\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n    checkRemediationButtonStatus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedIds]);\n\n  useEffect(() => {\n    if (pathway) {\n      pathwayCheck();\n    } else {\n      rulesCheck();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const rulesCheck = async () => {\n    if (rulesPlaybookCount < 0) {\n      const associatedRuleDetails = (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/`,\n          {},\n          { name: filters.name }\n        )\n      )?.data.playbook_count;\n      setRulesPlaybookCount(associatedRuleDetails);\n    }\n  };\n\n  const pathwayCheck = async () => {\n    if (!hasPathwayDetails) {\n      if (pathway) {\n        let pathwayRules = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n            {},\n            {}\n          )\n        )?.data.data;\n\n        let pathwayReport = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n            {},\n            {}\n          )\n        )?.data.rules;\n        setHasPathwayDetails(true);\n        setPathwayReportList(pathwayReport);\n        setPathwayRulesList(pathwayRules);\n      }\n    }\n  };\n\n  const checkRemediationButtonStatus = () => {\n    let playbookFound = false;\n    let ruleKeys = Object.keys(pathwayReportList);\n    if (selectedIds?.length <= 0 || selectedIds === undefined) {\n      setIsRemediationButtonDisabled(true);\n    } else if (pathway) {\n      for (let i = 0; i < selectedIds?.length; i++) {\n        let system = selectedIds[i];\n        if (playbookFound) {\n          break;\n        }\n        ruleKeys.forEach((rule) => {\n          //Grab the rule assosciated with that system\n          if (pathwayReportList[rule].includes(system)) {\n            let assosciatedRule = pathwayReportList[rule];\n            //find that associated rule in the pathwayRules endpoint, check for playbook\n            let item = pathwayRulesList.find(\n              (report) => (report.rule_id = assosciatedRule)\n            );\n            if (item.resolution_set[0].has_playbook) {\n              playbookFound = true;\n              return setIsRemediationButtonDisabled(false);\n            }\n          }\n        });\n      }\n    } else {\n      if (rulesPlaybookCount > 0 && selectedIds?.length > 0) {\n        setIsRemediationButtonDisabled(false);\n      }\n    }\n  };\n\n  const remediationDataProvider = async () => {\n    if (pathway) {\n      const pathways = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n          {},\n          {}\n        )\n      )?.data.data;\n\n      const systems = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n          {},\n          {}\n        )\n      )?.data.rules;\n\n      let issues = [];\n      pathways.forEach((rec) => {\n        let filteredSystems = [];\n\n        systems[rec.rule_id].forEach((system) => {\n          if (selectedIds.includes(system)) {\n            filteredSystems.push(system);\n          }\n        });\n\n        if (filteredSystems.length) {\n          issues.push({\n            id: `advisor:${rec.rule_id}`,\n            description: rec.description,\n            systems: filteredSystems,\n          });\n        }\n      });\n\n      return { issues };\n    } else {\n      return {\n        issues: [\n          {\n            id: `advisor:${rule.rule_id}`,\n            description: rule.description,\n          },\n        ],\n        systems: selectedIds,\n      };\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    selectNone();\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const createColumns = useCallback(\n    (defaultColumns) => {\n      let lastSeenColumn = defaultColumns.filter(\n        ({ key }) => key === 'updated'\n      );\n      let displayName = defaultColumns.filter(\n        ({ key }) => key === 'display_name'\n      );\n      let systemProfile = defaultColumns.filter(\n        ({ key }) => key === 'system_profile'\n      );\n      let tags = defaultColumns.filter(({ key }) => key === 'tags');\n\n      displayName = {\n        ...displayName[0],\n        transforms: [sortable, wrappable],\n        props: { isStatic: true },\n        ...(rule\n          ? {\n              renderFunc: (name, id) => {\n                return (\n                  <Link\n                    className=\"pf-u-font-size-lg\"\n                    to={`/recommendations/${rule.rule_id}/${id}?activeRule=true`}\n                  >\n                    {name}\n                  </Link>\n                );\n              },\n            }\n          : {}),\n      };\n\n      lastSeenColumn = {\n        ...lastSeenColumn[0],\n        transforms: [sortable, wrappable],\n        props: { width: 20 },\n      };\n\n      systemProfile = {\n        ...systemProfile[0],\n        transforms: [wrappable],\n        props: { isStatic: true },\n      };\n\n      tags = {\n        ...tags[0],\n      };\n\n      let columnList = [displayName, tags, systemProfile, lastSeenColumn];\n\n      // Add column for impacted_date which is relevant for the rec system details table, but not pathways system table\n      if (!pathway) {\n        const impacted_date = {\n          key: 'impacted_date',\n          title: 'First Impacted',\n          sortKey: 'impacted_date',\n          transforms: [sortable, wrappable],\n          props: { width: 15 },\n          renderFunc: lastSeenColumn.renderFunc,\n        };\n        columnList.push(impacted_date);\n        lastSeenColumn.props.width = 15;\n      }\n\n      return columnList;\n    },\n    [pathway, rule]\n  );\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    setFilters(filter);\n  };\n  const addFilterParam = (param, values) => {\n    const passValue =\n      param === SFC.rhel_version.urlParam\n        ? Object.values(values || {}).flatMap((majorOsVersion) =>\n            Object.keys(majorOsVersion)\n          )\n        : values;\n\n    passValue.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: passValue } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    ...(buildOSFilterConfig\n      ? [\n          buildOSFilterConfig(\n            {\n              label: SFC.rhel_version.title.toLowerCase(),\n              type: SFC.rhel_version.type,\n              id: SFC.rhel_version.urlParam,\n              value: toGroupSelectionValue(filters.rhel_version || []),\n              onChange: (_e, value) =>\n                addFilterParam(SFC.rhel_version.urlParam, value),\n            },\n            operatingSystems\n          ),\n        ]\n      : []),\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_e, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selectedIds}\n        />\n      )}\n      <InventoryTable\n        id=\"tablesContainer\"\n        hasCheckbox\n        initialLoading\n        autoRefresh\n        hideFilters={{ all: true, name: false, tags: !showTags }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        tableProps={{\n          variant: TableVariant.compact,\n          ...tableProps,\n          ...bulkSelectTableProps,\n        }}\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        showTags={showTags}\n        getEntities={fetchSystems}\n        dedicatedAction={\n          <RemediationButton\n            key=\"remediation-button\"\n            isDisabled={isRemediationButtonDisabled}\n            dataProvider={remediationDataProvider}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            {intl.formatMessage(messages.remediate)}\n          </RemediationButton>\n        }\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForSystems),\n              props: { isDisabled: (selectedIds || []).length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n        {...toolbarProps}\n        fallback={Loading}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          store.replaceReducer(\n            updateReducers({\n              ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n                page: Number(filters.offset / filters.limit + 1 || 1),\n                perPage: Number(filters.limit || 20),\n              }),\n              ...mergeWithDetail(),\n            })\n          );\n        }}\n        exportConfig={\n          permsExport && {\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                exportTable,\n                fileType,\n                { rule_id: rule.rule_id, ...filters },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch\n              ),\n            isDisabled: !permsExport || entities?.rows?.length === 0,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nInventory.propTypes = {\n  tableProps: PropTypes.any,\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  pathway: PropTypes.object,\n  selectedTags: PropTypes.any,\n  workloads: PropTypes.any,\n  SID: PropTypes.any,\n  permsExport: PropTypes.bool,\n  exportTable: PropTypes.string,\n  showTags: PropTypes.bool,\n};\n\nexport default Inventory;\n","import { buildTagFilter, workloadQueryBuilder } from './Common/Tables';\nimport { orderBy } from 'lodash';\n\nexport const createOptions = (\n  advisorFilters,\n  page,\n  per_page,\n  sort,\n  pathway,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  systemsPage\n) => {\n  let options = {\n    ...advisorFilters,\n    limit: per_page,\n    offset: page * per_page - per_page,\n    sort: sort,\n    ...(filters?.hostnameOrId &&\n      !pathway &&\n      !systemsPage && {\n        name: filters?.hostnameOrId,\n      }),\n    ...(filters?.hostnameOrId &&\n      !pathway &&\n      systemsPage && {\n        display_name: filters?.hostnameOrId,\n      }),\n    ...(filters.hostnameOrId &&\n      pathway && {\n        display_name: filters?.hostnameOrId,\n      }),\n    ...(advisorFilters.rhel_version && {\n      rhel_version: advisorFilters.rhel_version?.join(','),\n    }),\n    ...(filters.tagFilters?.length && buildTagFilter(filters.tagFilters)),\n    ...(workloads ? workloadQueryBuilder(workloads, SID) : {}),\n    ...(selectedTags?.length > 0 ? { tags: selectedTags.join(',') } : {}),\n  };\n  return options;\n};\n\nexport const sortTopics = (data, index, direction) => {\n  let sortingName = '';\n  index === 0\n    ? (sortingName = 'name')\n    : index === 2\n    ? (sortingName = 'featured')\n    : (sortingName = 'impacted_systems_count');\n  return orderBy(data, [(result) => result[sortingName]], direction);\n};\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","paginatedRequestHelper","per_page","page","advisorFilters","filters","workloads","SID","pathway","rule","selectedTags","sort","options","createOptions","Get","SYSTEMS_FETCH_URL","slug","RULES_FETCH_URL","encodeURI","rule_id","fetchBatched","fetchFunction","total","filter","batchSize","pages","Math","ceil","Promise","all","Array","_","pageIdx","allCurrentSystemIds","fullFilters","setIsLoading","item","results","merged","concat","apply","system_uuid","selectionGroup","action","group","init","withGroups","preselected","default","cleanEmpty","state","newState","Object","entries","forEach","undefined","set","isObject","select","reset","uniq","deselect","selectedItem","includes","toggle","prototype","hasOwnProperty","call","clear","type","selectedItemsTotal","selected","onSelect","itemIdsInTable","itemIdsOnPage","identifier","isLoading","enableBulkSelect","useReducer","reducer","initReducer","selection","dispatch","useSelectionManager","selectedIds","selectedIdsTotal","idsOnPage","paginatedTotal","allSelected","noneSelected","isDisabled","checked","itemsTotal","Spinner","size","compileTitle","selectAll","JSON","stringify","selectNone","tableProps","_key","row","canSelectAll","toolbarProps","bulkSelect","toggleProps","children","onClick","props","arrayA","arrayB","selectedItems","from","Set","Inventory","afterDisableFn","permsExport","exportTable","showTags","store","useStore","useDispatch","limit","offset","name","setFilters","setFullFilters","setTotal","entities","useSelector","addNotification","notification","disableRuleModalOpen","setDisableRuleModalOpen","curPageIds","setCurPageIds","pathwayRulesList","setPathwayRulesList","pathwayReportList","setPathwayReportList","hasPathwayDetails","setHasPathwayDetails","isRemediationButtonDisabled","setIsRemediationButtonDisabled","rulesPlaybookCount","setRulesPlaybookCount","useLoadModule","appName","scope","module","toGroupSelectionValue","buildOSFilterConfig","operatingSystems","fetchSystems","handleRefresh","_items","config","defaultGetEntities","orderBy","orderDirection","allDetails","fetchedSystems","system","hasItems","fields","system_profile","meta","count","resolve","mergeArraysByDiffKeys","id","getEntities","display_name","refreshedFilters","urlBuilder","useBulkSelect","identitfier","bulkSelectTableProps","payload","checkRemediationButtonStatus","pathwayCheck","rulesCheck","localFilters","playbook_count","associatedRuleDetails","BASE_URL","pathwayRules","rules","pathwayReport","playbookFound","ruleKeys","keys","i","assosciatedRule","find","report","resolution_set","has_playbook","remediationDataProvider","pathways","systems","issues","rec","filteredSystems","handleModalToggle","createColumns","useCallback","defaultColumns","lastSeenColumn","displayName","systemProfile","tags","transforms","sortable","wrappable","isStatic","renderFunc","className","width","columnList","impacted_date","sortKey","removeFilterParam","param","filterConfigItems","label","SFC","value","rhel_version","onChange","_e","values","passValue","flatMap","majorOsVersion","activeFiltersConfig","deleteTitle","pruneFilters","onDelete","itemsToRemove","isAll","newFilter","urlParam","isArray","String","chips","DisableRule","isModalOpen","afterFn","hosts","InventoryTable","hasCheckbox","initialLoading","autoRefresh","hideFilters","filterConfig","columns","variant","TableVariant","customFilters","dedicatedAction","RemediationButton","dataProvider","onRemediationCreated","result","remediation","getNotification","error","dismissable","actionsConfig","actions","fallback","Loading","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","perPage","exportConfig","fileType","downloadReport","rows","systemsPage","hostnameOrId","join","tagFilters","buildTagFilter","workloadQueryBuilder","sortTopics","index","direction","sortingName"],"sourceRoot":""}