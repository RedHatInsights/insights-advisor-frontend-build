{"version":3,"file":"js/TopicDetails.1654634556657.0f8403d936fdc96e3232.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/SmartComponents/Topics/Details.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Details.scss';\n\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport RulesTable from '../../PresentationalComponents/RulesTable/RulesTable';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport messages from '../../Messages';\nimport { updateRecFilters } from '../../Services/Filters';\nimport { useDispatch } from 'react-redux';\nimport { useGetTopicQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst Details = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const topicId = useParams().id;\n  let options = selectedTags?.length && { tags: selectedTags };\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n  const {\n    data: topic = {},\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetTopicQuery({ ...options, ...{ topicId } });\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    dispatch(\n      updateRecFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        topic: topicId,\n        sort: `-total_risk`,\n        limit: 10,\n        offset: 0,\n      })\n    );\n\n    return () => dispatch(updateRecFilters(initiaRecFilters));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (topic && topic.name) {\n      const subnav = `${topic.name} - ${messages.topics.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [topic]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        {topic?.name && <Breadcrumbs current={topic?.name} ouiaId=\"details\" />}\n        {!isFetching && (\n          <React.Fragment>\n            <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n              {topic.name}\n              {topic.featured && (\n                <Label color=\"blue\" className=\"adv-c-label\" icon={<StarIcon />}>\n                  {intl.formatMessage(messages.featured)}\n                </Label>\n              )}\n            </Title>\n            <TextContent className=\"pf-u-mt-md\">\n              <Text component={TextVariants.p}>\n                <Truncate\n                  text={topic.description}\n                  length={600}\n                  expandText={intl.formatMessage(messages.readmore)}\n                  collapseText={intl.formatMessage(messages.readless)}\n                  inline\n                />\n              </Text>\n            </TextContent>\n          </React.Fragment>\n        )}\n        {isFetching || (isLoading && <Loading />)}\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {!isError ? (\n            <React.Fragment>\n              <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n                {intl.formatMessage(messages.recommendations)}\n              </Title>\n              <RulesTable />\n            </React.Fragment>\n          ) : (\n            <MessageState\n              icon={TimesCircleIcon}\n              title={intl.formatMessage(messages.topicDetailslNodetailsTitle)}\n              text={intl.formatMessage(messages.topicDetailslNodetailsBody)}\n            />\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Details;\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","recFilters","recState","topicId","useParams","id","options","tags","workloadQueryBuilder","useGetTopicQuery","topic","isLoading","isError","initiaRecFilters","updateRecFilters","impacting","rule_status","sort","limit","offset","name","subnav","document","headingLevel","size","className","featured","Label","color","icon","TextContent","Text","component","TextVariants","text","expandText","collapseText","inline","TimesCircleIcon"],"sourceRoot":""}