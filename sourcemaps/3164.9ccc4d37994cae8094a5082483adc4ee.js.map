{"version":3,"file":"js/3164.1650544895195.31918464c70ddec72e70.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/MessageState/MessageState.js","webpack:///./src/PresentationalComponents/ReportDetails/ReportDetails.js","webpack:///./src/SmartComponents/SystemAdvisor/EmptyStates.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js","webpack:///./src/Utilities/Api.js"],"sourcesContent":["import { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\n// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters = {}) => {\n  const url = new URL(window.location);\n  const queryString = `${Object.keys(filters)\n    .map(\n      (key) =>\n        `${key}=${\n          Array.isArray(filters[key]) ? filters[key].join() : filters[key]\n        }`\n    )\n    .join('&')}`;\n  const params = new URLSearchParams(queryString);\n\n  //Removes invalid 'undefined' url param value\n  params.get('reports_shown') === 'undefined' && params.delete('reports_shown');\n  filters?.tags?.length\n    ? params.set('tags', filters.tags)\n    : params.delete('tags');\n  window.history.replaceState(\n    null,\n    null,\n    `${url.origin}${url.pathname}?${params.toString()}${window.location.hash}`\n  );\n  return `?${queryString}`;\n};\n\nexport const buildTagFilter = (tagFilters) => {\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...tagsApiFilter,\n  };\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) =>\n  Object.assign(\n    {},\n    ...Object.entries(filters).map(([filterName, filterValue]) =>\n      Array.isArray(filterValue)\n        ? (filterValue[0] === 'true' || filterValue[0] === 'false') &&\n          filterValue.length > 1\n          ? null\n          : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue }\n    )\n  );\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]:\n        value === 'true' || value === 'false'\n          ? JSON.parse(value)\n          : value.split(','),\n    }),\n    {}\n  );\n};\n\n// create url from options\nexport const encodeOptionsToURL = (options) => {\n  return Object.entries(options).reduce((acc, [key, value], index) => {\n    return (acc += index === 0 ? `${key}=${value}` : `&${key}=${value}`);\n  }, '');\n};\n\n// capitalizes text string\nexport const capitalize = (string) =>\n  string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.length > 0\n    ? prunedFilters.reduce((arr, item) => {\n        if (filterCategories[item[0]]) {\n          const category = filterCategories[item[0]];\n          const chips = Array.isArray(item[1])\n            ? item[1].map((value) => {\n                const selectedCategoryValue = category.values.find(\n                  (values) => values.value === String(value)\n                );\n                return selectedCategoryValue\n                  ? {\n                      name:\n                        selectedCategoryValue.text ||\n                        selectedCategoryValue.label,\n                      value,\n                    }\n                  : { name: value, value };\n              })\n            : [\n                {\n                  name: category.values.find(\n                    (values) => values.value === String(item[1])\n                  ).label,\n                  value: item[1],\n                },\n              ];\n          return [\n            ...arr,\n            {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            },\n          ];\n        } else if (item[0] === 'text') {\n          return [\n            ...arr,\n            {\n              category: 'Name',\n              chips: [{ name: item[1], value: item[1] }],\n              urlParam: item[0],\n            },\n          ];\n        } else {\n          return arr;\n        }\n      }, [])\n    : [];\n};\n\n// builds workload query filter\nexport const workloadQueryBuilder = (workloads, SID) =>\n  generateFilter(\n    {\n      system_profile: {\n        ...(workloads?.SAP?.isSelected && { sap_system: true }),\n        ...(workloads?.['Ansible Automation Platform']?.isSelected && {\n          ansible: {\n            not_nil: true,\n          },\n        }),\n        ...(workloads?.['Microsoft SQL']?.isSelected && {\n          mssql: {\n            not_nil: true,\n          },\n        }),\n        ...(SID?.length > 0 && { sap_sids: SID }),\n      },\n    },\n    undefined,\n    { arrayEnhancer: 'contains' }\n  );\n\n// merges two array objects by different key names\nexport const mergeArraysByDiffKeys = (advSystems, invSystems) =>\n  advSystems.map((advSys) => ({\n    ...invSystems.find(\n      (invSys) => invSys['id'] === advSys['system_uuid'] && invSys\n    ),\n    ...advSys,\n  }));\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className=\"adv-c-label-incident\"\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import './report-details.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n} from '@patternfly/react-core/dist/esm/components/Card';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/esm/layouts/Stack';\n\nimport { BullseyeIcon } from '@patternfly/react-icons/dist/esm/icons/bullseye-icon';\nimport { Divider } from '@patternfly/react-core/dist/esm/components/Divider';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { LightbulbIcon } from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\nimport React from 'react';\nimport { ThumbsUpIcon } from '@patternfly/react-icons/dist/esm/icons/thumbs-up-icon';\nimport classNames from 'classnames';\nimport doT from 'dot';\nimport { marked } from 'marked';\nimport propTypes from 'prop-types';\n\nconst ReportDetails = ({ report, kbaDetail, kbaLoading }) => {\n  const rule = report.rule || report;\n  const rulesCardClasses = classNames(\n    'ins-c-inventory-advisor__card',\n    'ins-c-rules-card'\n  );\n  const templateProcessor = (template, definitions) => {\n    const DOT_SETTINGS = {\n      ...doT.templateSettings,\n      varname: ['pydata'],\n      strip: false,\n    };\n    const externalLinkIcon = '';\n\n    try {\n      const compiledDot = definitions\n        ? doT.template(template, DOT_SETTINGS)(definitions)\n        : template;\n      const compiledMd = marked(compiledDot);\n\n      return (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: compiledMd\n              .replace(\n                /<ul>/gim,\n                `<ul class=\"pf-c-list\" style=\"font-size: inherit\">`\n              )\n              .replace(\n                /<a>/gim,\n                `<a> rel=\"noopener noreferrer\" target=\"_blank\"`\n              )\n              .replace(/<\\/a>/gim, ` ${externalLinkIcon}</a>`),\n          }}\n        />\n      );\n    } catch (error) {\n      console.warn(error, definitions, template); // eslint-disable-line no-console\n      return (\n        <React.Fragment>\n          {' '}\n          Ouch. We were unable to correctly render this text, instead please\n          enjoy the raw data.\n          <pre>\n            <code>{template}</code>\n          </pre>\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <Card\n      className=\"ins-c-inventory-insights__report-details__override\"\n      style={{ boxShadow: 'none' }}\n    >\n      <CardBody>\n        <Stack\n          className={rulesCardClasses}\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card className=\"ins-m-card__flat\" isCompact>\n              <CardHeader>\n                <BullseyeIcon className=\"ins-c-report-details-icon\" />\n                <strong> Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                {rule.reason && templateProcessor(rule.reason, report.details)}\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card className=\"ins-m-card__flat\" isCompact>\n              <CardHeader>\n                <ThumbsUpIcon className=\"ins-c-report-details-icon\" />\n                <strong> Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                {report.resolution &&\n                  templateProcessor(\n                    report.resolution.resolution,\n                    report.details\n                  )}\n              </CardBody>\n            </Card>\n          </StackItem>\n          {rule.node_id && (\n            <React.Fragment>\n              <Divider />\n              <StackItem>\n                <Card className=\"ins-m-card__flat\" isCompact>\n                  <CardHeader>\n                    <LightbulbIcon className=\"ins-c-report-details-icon\" />\n                    <strong> Related Knowledgebase article </strong>\n                  </CardHeader>\n                  <CardBody>\n                    {kbaLoading ? (\n                      <Skeleton size={SkeletonSize.sm} />\n                    ) : (\n                      <a\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                        href={`${kbaDetail.view_uri}`}\n                      >\n                        {kbaDetail.publishedTitle\n                          ? kbaDetail.publishedTitle\n                          : `Knowledgebase article`}{' '}\n                        <ExternalLinkAltIcon />\n                      </a>\n                    )}\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </React.Fragment>\n          )}\n          {rule.more_info && (\n            <React.Fragment>\n              <Divider />\n              <StackItem>\n                <Card className=\"ins-m-card__flat\" isCompact>\n                  <CardHeader>\n                    <InfoCircleIcon className=\"ins-c-report-details-icon\" />\n                    <strong> Additional info </strong>\n                  </CardHeader>\n                  <CardBody>\n                    {templateProcessor(rule.more_info, report.details)}\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </React.Fragment>\n          )}\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ReportDetails;\n\nReportDetails.defaultProps = {\n  report: {},\n  kbaDetail: {},\n};\n\nReportDetails.propTypes = {\n  report: propTypes.object,\n  kbaDetail: propTypes.object,\n  kbaLoading: propTypes.bool,\n};\n","import React from 'react';\nimport {\n  ChartSpikeIcon,\n  CheckIcon,\n  ExternalLinkAltIcon,\n  PficonSatelliteIcon,\n  TimesCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PropTypes from 'prop-types';\n\nexport const HideResultsSatelliteManaged = () => (\n  <MessageState\n    icon={PficonSatelliteIcon}\n    title=\"Satellite managed system\"\n    text={\n      <span key=\"satellite managed system\">\n        Insights results can not be displayed for this host, as the &quot;Hide\n        Satellite Managed Systems&quot; setting has been enabled by an org\n        admin.\n        <br />\n        For more information on this setting and how to modify it,\n        <a href=\"https://access.redhat.com/solutions/4281761\" rel=\"noopener\">\n          {' '}\n          Please visit this Knowledgebase article &nbsp;\n          <ExternalLinkAltIcon />\n        </a>\n        .\n      </span>\n    }\n  />\n);\n\nexport const NoMatchingRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      title=\"No matching recommendations found\"\n      text={`To continue, edit your filter settings and search again.`}\n    />\n  </Bullseye>\n);\n\nexport const NoRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      icon={CheckIcon}\n      iconClass=\"ins-c-insights__check\"\n      title=\"No recommendations\"\n      text={`No known recommendations affect this system`}\n    />\n  </Bullseye>\n);\n\nexport const InsightsNotEnabled = () => (\n  <MessageState\n    iconClass=\"chartSpikeIconColor\"\n    icon={ChartSpikeIcon}\n    title=\"Get started with Red Hat Insights\"\n    text={\n      <Bullseye>\n        <Stack hasGutter>\n          <StackItem>\n            1. Install the client on the RHEL system.\n            <ClipboardCopy>yum install insights-client</ClipboardCopy>\n          </StackItem>\n          <StackItem>\n            2. Register the system to Red Hat Insights.\n            <ClipboardCopy>insights-client --register</ClipboardCopy>\n          </StackItem>\n        </Stack>\n      </Bullseye>\n    }\n  >\n    <Button\n      component=\"a\"\n      href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n      target=\"_blank\"\n      variant=\"primary\"\n    >\n      Getting started documentation\n    </Button>\n  </MessageState>\n);\n\nexport const InventoryReportFetchFailed = ({ entity }) => (\n  <Bullseye>\n    <MessageState\n      icon={TimesCircleIcon}\n      title=\"Error getting recommendations\"\n      text={\n        entity\n          ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n          : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n      }\n    />\n  </Bullseye>\n);\n\nInventoryReportFetchFailed.propTypes = {\n  entity: PropTypes.object,\n};\n","import './SystemAdvisor.scss';\n\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport {\n  BASE_URL,\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  Card,\n  CardBody,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  fitContent,\n  sortable,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Get } from '../../Utilities/Api';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { List } from 'react-content-loader';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport ReportDetails from '../../PresentationalComponents/ReportDetails';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport { Provider } from 'react-redux';\nimport {\n  HideResultsSatelliteManaged,\n  NoMatchingRecommendations,\n  NoRecommendations,\n  InsightsNotEnabled,\n  InventoryReportFetchFailed,\n} from './EmptyStates';\nimport NotConnected from '@redhat-cloud-services/frontend-components/NotConnected';\n\nconst BaseSystemAdvisor = () => {\n  const intl = useIntl();\n  const systemAdvisorRef = useRef({\n    rowCount: 0,\n  });\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n  const systemProfile = useSelector(({ systemProfileStore }) =>\n    systemProfileStore ? systemProfileStore.systemProfile : {}\n  );\n  const routerData = useSelector(({ routerData }) => routerData);\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [accountSettings, setAccountSettings] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n\n  const satelliteManaged =\n    (systemProfile && systemProfile.satellite_managed) || false; // system is managed by satellite\n  const satelliteShowHosts = accountSettings.show_satellite_hosts || false; // setting to show satellite managed systems\n  const hideResultsSatelliteManaged = !satelliteShowHosts && satelliteManaged;\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  ).length;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.topicAddEditDescription),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.modified),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.remediation),\n      transforms: [sortable, fitContent],\n    },\n  ];\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) =>\n        addNotification(result.getNotification())\n      }\n    >\n      {intl.formatMessage(messages.remediate)}\n    </RemediationButton>,\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex =\n      routerData && typeof routerData.params !== 'undefined'\n        ? activeReports.findIndex(\n            (report) => report.rule.rule_id === routerData.params.id\n          )\n        : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = (\n    activeReports,\n    kbaDetails,\n    filters,\n    rows,\n    searchValue = '',\n    kbaLoading = false\n  ) => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value.rule;\n      const resolution = value.resolution;\n      const kbaDetail = Object.keys(kbaDetails).length\n        ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n        : {};\n\n      const match = rows.find((row) => row?.rule?.rule_id === rule.rule_id);\n      const selected = match?.selected;\n      const isOpen = match?.isOpen || false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          disableSelection: !resolution.has_playbook,\n          cells: [\n            {\n              title: (\n                <span>\n                  {rule.description} <RuleLabels rule={rule} />\n                </span>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.publish_date}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                        <strong>impact</strong> of the problem would be &nbsp;\n                        {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} isCompact />\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div className=\"ins-c-center-text\" key={key}>\n                  {resolution.has_playbook ? (\n                    <span>\n                      <AnsibeTowerIcon size=\"sm\" />{' '}\n                      {intl.formatMessage(messages.playbook)}\n                    </span>\n                  ) : (\n                    intl.formatMessage(messages.manual)\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={value}\n                  kbaDetail={kbaDetail}\n                  kbaLoading={kbaLoading}\n                />\n              ),\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              has_playbook: value.resolution.has_playbook,\n              publish_date: rule.publish_date,\n              total_risk: rule.total_risk,\n              category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n            };\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    //must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    systemAdvisorRef.current.rowCount = builtRows.length / 2;\n\n    if (activeReports.length < 1 || builtRows.length < 1) {\n      let EmptyState =\n        (builtRows.length === 0 && NoMatchingRecommendations) ||\n        (entity.insights_id && NoRecommendations) ||\n        InsightsNotEnabled;\n\n      return [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 5 },\n              title: <EmptyState />,\n            },\n          ],\n        },\n      ];\n    }\n\n    if (inventoryReportFetchStatus === 'failed') {\n      return [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 5 },\n              title: <InventoryReportFetchFailed entity={entity} />,\n            },\n          ],\n        },\n      ];\n    }\n\n    return builtRows;\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: selectedItemsLength === selectableItemsLength,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fl=view_uri,id,publishedTitle&rows=${\n            kbaIds.length\n          }&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(reportsData, kbaDetailsFetch, filters, rows, searchValue)\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'publish_date',\n      3: 'total_risk',\n      4: 'has_playbook',\n    };\n    const key = index === 5 ? 'resolution' : 'rule';\n    const sort = (key) =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[key][sortedReports[index]] >\n          secondItem[key][sortedReports[index]]\n            ? 1\n            : secondItem[key][sortedReports[index]] >\n              firstItem[key][sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort(key) : sort(key).reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = (selectedAnsibleRules) => {\n    const playbookRows = selectedAnsibleRules.filter(\n      (r) => r.resolution && r.resolution.has_playbook\n    );\n    const issues = playbookRows.map((r) => ({\n      id: `advisor:${r.rule.rule_id}`,\n      description: r.rule.description,\n    }));\n    return issues.length ? { issues, systems: [entity.id] } : false;\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.has_playbook.title,\n      type: FC.has_playbook.type,\n      id: FC.has_playbook.urlParam,\n      value: `checkbox-${FC.has_playbook.urlParam}`,\n      filterValues: {\n        key: `${FC.has_playbook.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.has_playbook.urlParam, values),\n        value: filters.has_playbook,\n        items: FC.has_playbook.values,\n      },\n    },\n  ];\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const [settingsFetch, reportsFetch] = await Promise.all([\n          (\n            await Get(`${BASE_URL}/account_setting/`, {\n              credentials: 'include',\n            })\n          ).data,\n          (\n            await Get(`${BASE_URL}/system/${entity.id}/reports/`, {\n              credentials: 'include',\n            })\n          ).data,\n        ]);\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch);\n        fetchKbaDetails(activeRuleFirstReportsData);\n\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n        setAccountSettings(settingsFetch);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n\n  return inventoryReportFetchStatus === 'fulfilled' &&\n    entity.insights_id === null ? (\n    <NotConnected\n      titleText={intl.formatMessage(messages.notConnectedTitle)}\n      bodyText={intl.formatMessage(messages.notConnectedBody)}\n      buttonText={intl.formatMessage(messages.notConnectedButton)}\n    />\n  ) : (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      (inventoryReportFetchStatus === 'fulfilled' &&\n        hideResultsSatelliteManaged) ||\n      entity.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {`${systemAdvisorRef.current.rowCount} ${\n                (systemAdvisorRef.current.rowCount === 1 && 'Recommendation') ||\n                'Recommendations'\n              }`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' &&\n        (hideResultsSatelliteManaged ? (\n          <HideResultsSatelliteManaged />\n        ) : (\n          <Fragment>\n            <Table\n              aria-label={'report-table'}\n              onSelect={\n                !(rows.length === 1 && rows[0].heightAuto) && onRowSelect\n              }\n              onCollapse={handleOnCollapse}\n              rows={rows}\n              cells={cols}\n              sortBy={sortBy}\n              canSelectAll={false}\n              onSort={onSort}\n              variant={TableVariant.compact}\n              isStickyHeader\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </Fragment>\n        ))}\n    </div>\n  );\n};\n\nconst SystemAdvisor = ({ customItnl, intlProps, store, ...props }) => {\n  const Wrapper = customItnl ? IntlProvider : Fragment;\n  const ReduxProvider = store ? Provider : Fragment;\n  return (\n    <Wrapper\n      {...(customItnl && {\n        locale: navigator.language.slice(0, 2),\n        messages,\n        onError: console.log,\n        ...intlProps,\n      })}\n    >\n      <ReduxProvider store={store}>\n        <BaseSystemAdvisor {...props} />\n      </ReduxProvider>\n    </Wrapper>\n  );\n};\n\nexport default SystemAdvisor;\n\nSystemAdvisor.propTypes = {\n  customItnl: PropTypes.bool,\n  intlProps: PropTypes.shape({\n    locale: PropTypes.string,\n    messages: PropTypes.array,\n    onError: PropTypes.func,\n  }),\n  store: PropTypes.object,\n};\n","import Qs from 'qs';\nimport axios from 'axios';\n\nconst Get = (url, headers = {}, params = {}) =>\n  axios.get(url, {\n    headers,\n    params,\n    paramsSerializer(params) {\n      return Qs.stringify(params, { arrayFormat: 'repeat' });\n    },\n  });\n\nconst Post = (url, headers = {}, data = {}) =>\n  axios.post(url, data, {\n    headers,\n  });\n\nconst Put = (url, data = {}, headers = {}) => {\n  return axios.put(url, data, {\n    headers,\n  });\n};\n\nconst DeleteApi = (url, data = {}, headers = {}) => {\n  return axios.delete(url, data, {\n    headers,\n  });\n};\n\nconst AxiosBaseQuery =\n  ({ baseUrl } = { baseUrl: '' }) =>\n  async ({ url, headers, options, search, method }) => {\n    await insights.chrome.auth.getUser();\n    method === undefined && (method = 'get');\n    try {\n      const result =\n        method === 'get'\n          ? await Get(\n              `${baseUrl}${url}?${search ? `${search}` : ``}`,\n              headers,\n              options\n            )\n          : Post(`${baseUrl}${url}`, headers, options);\n\n      return { data: result.data };\n    } catch (axiosError) {\n      let err = axiosError;\n      return {\n        error: { status: err.response?.status, data: err.response?.data },\n      };\n    }\n  };\n\nexport { AxiosBaseQuery, Get, Post, Put, DeleteApi };\n"],"names":["urlBuilder","filters","url","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","params","URLSearchParams","get","tags","length","set","history","replaceState","origin","pathname","toString","hash","buildTagFilter","tagFilters","flatMap","tagFilter","values","tag","encodeURIComponent","tagKey","value","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","JSON","parse","split","capitalize","string","toUpperCase","substring","pruneFilters","localFilters","filterCategories","prunedFilters","arr","item","category","chips","selectedCategoryValue","find","String","name","text","label","title","urlParam","workloadQueryBuilder","workloads","SID","generateFilter","system_profile","SAP","isSelected","sap_system","ansible","not_nil","mssql","sap_sids","undefined","arrayEnhancer","mergeArraysByDiffKeys","advSystems","invSystems","advSys","invSys","RuleLabels","rule","isCompact","intl","useIntl","Tooltip","content","formatMessage","messages","position","TooltipPosition","Label","color","className","rule_status","propTypes","PropTypes","defaultProps","MessageState","children","icon","iconClass","iconStyle","variant","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","ReportDetails","report","kbaDetail","kbaLoading","rulesCardClasses","classNames","templateProcessor","template","definitions","DOT_SETTINGS","doT","varname","strip","compiledDot","compiledMd","marked","dangerouslySetInnerHTML","__html","replace","error","console","warn","boxShadow","widget-type","hasGutter","reason","details","resolution","node_id","SkeletonSize","rel","target","href","view_uri","publishedTitle","more_info","HideResultsSatelliteManaged","PficonSatelliteIcon","ExternalLinkAltIcon","NoMatchingRecommendations","Bullseye","NoRecommendations","CheckIcon","InsightsNotEnabled","ChartSpikeIcon","Stack","StackItem","ClipboardCopy","Button","component","InventoryReportFetchFailed","entity","TimesCircleIcon","BaseSystemAdvisor","systemAdvisorRef","useRef","rowCount","dispatch","useDispatch","useSelector","entityDetails","systemProfile","systemProfileStore","routerData","useState","inventoryReportFetchStatus","setInventoryReportFetchStatus","rows","setRows","activeReports","setActiveReports","kbaDetailsData","setKbaDetailsData","sortBy","setSortBy","setFilters","accountSettings","setAccountSettings","searchValue","setSearchValue","setIsSelected","isAllExpanded","setIsAllExpanded","satelliteManaged","satellite_managed","hideResultsSatelliteManaged","show_satellite_hosts","getSelectedItems","filter","selected","selectedAnsibleRules","r","has_playbook","selectedItemsLength","selectableItemsLength","cols","transforms","sortable","cellWidth","fitContent","actions","RemediationButton","isDisabled","dataProvider","processRemediation","onRemediationCreated","result","data","getNotification","addNotificationAction","activeRuleFirst","reports","activeRuleIndex","findIndex","rule_id","id","activeReport","splice","buildRows","kbaDetails","builtRows","article","match","row","isOpen","reportRow","disableSelection","cells","description","DateFormat","date","publish_date","type","tooltipProps","verticalAlign","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","total_risk","AnsibeTowerIcon","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","filterValues","rowValue","RULE_CATEGORIES","every","x","forEach","index","current","EmptyState","insights_id","heightAuto","props","colSpan","onBulkSelect","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","FC","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","reportsData","kbaIds","Get","credentials","kbaDetailsFetch","response","docs","param","newFilters","removeFilterParam","issues","systems","filterConfigItems","onChange","onInputChange","useEffect","Promise","BASE_URL","all","settingsFetch","reportsFetch","activeRuleFirstReportsData","dataFetch","NotConnected","titleText","bodyText","buttonText","Fragment","PrimaryToolbar","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","Card","CardBody","Table","aria-label","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","1","2","3","4","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","TableVariant","isStickyHeader","TableHeader","TableBody","SystemAdvisor","customItnl","intlProps","store","Wrapper","IntlProvider","ReduxProvider","Provider","locale","navigator","language","slice","onError","log","headers","axios","paramsSerializer","Qs","arrayFormat","Post","Put","DeleteApi","AxiosBaseQuery","baseUrl","options","method","insights","chrome","auth","getUser","err","status"],"sourceRoot":""}