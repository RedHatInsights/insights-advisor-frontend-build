{"version":3,"file":"js/7847.1648644099415.63e31907788173c9fbdd.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Inventory/Inventory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_Color_200 } from '@patternfly/react-tokens';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_Color_200.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import './_Inventory.scss';\n\nimport {\n  BASE_URL,\n  RULES_FETCH_URL,\n  SYSTEMS_FETCH_URL,\n} from '../../AppConstants';\nimport React, { useEffect, useState } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport {\n  pruneFilters,\n  urlBuilder,\n  workloadQueryBuilder,\n  buildTagFilter,\n} from '../Common/Tables';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\n\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Get } from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useIntl } from 'react-intl';\nimport downloadReport from '../Common/DownloadHelper';\n\nconst Inventory = ({\n  tableProps,\n  rule,\n  afterDisableFn,\n  pathway,\n  selectedTags,\n  workloads,\n  SID,\n  permsExport,\n  exportTable,\n  showTags,\n}) => {\n  const store = useStore();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [selected, setSelected] = useState([]);\n  const [filters, setFilters] = useState({\n    limit: 20,\n    offset: 0,\n    sort: '-last_seen',\n    name: '',\n  });\n  const entities = useSelector(({ entities }) => entities || {});\n  const onSelectRows = (id, selected) =>\n    dispatch({ type: 'SELECT_ENTITY', payload: { id, selected } });\n  const addNotification = (data) => dispatch(notification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [bulkSelect, setBulkSelect] = useState();\n\n  const remediationDataProvider = async () => {\n    if (pathway) {\n      const pathways = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n          {},\n          {}\n        )\n      )?.data.data;\n      const issues = pathways.map((rec) => ({\n        id: `advisor:${rec.rule_id}`,\n        description: rec.description,\n      }));\n      return { issues, systems: selected };\n    } else {\n      return {\n        issues: [\n          {\n            id: `advisor:${rule.rule_id}`,\n            description: rule.description,\n          },\n        ],\n        systems: selected,\n      };\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    onSelectRows(-1, false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const bulkSelectfn = () => {\n    setBulkSelect(true);\n    onSelectRows(0, true);\n  };\n\n  const calculateSelectedItems = () =>\n    bulkSelect\n      ? setBulkSelect(false)\n      : setSelected(\n          entities?.rows\n            ?.filter((entity) => entity.selected === true)\n            .map((entity) => entity.id)\n        );\n\n  const createColumns = (defaultColumns) => {\n    let lastSeenColumn = defaultColumns.filter(({ key }) => key === 'updated');\n    let displayName = defaultColumns.filter(\n      ({ key }) => key === 'display_name'\n    );\n    let systemProfile = defaultColumns.filter(\n      ({ key }) => key === 'system_profile'\n    );\n    let tags = defaultColumns.filter(({ key }) => key === 'tags');\n\n    displayName = {\n      ...displayName[0],\n      transforms: [sortable, wrappable],\n      props: { isStatic: true },\n    };\n\n    lastSeenColumn = {\n      ...lastSeenColumn[0],\n      transforms: [sortable, wrappable],\n      props: { width: 20 },\n    };\n\n    systemProfile = {\n      ...systemProfile[0],\n      transforms: [wrappable],\n    };\n\n    tags = {\n      ...tags[0],\n    };\n\n    return [displayName, tags, systemProfile, lastSeenColumn];\n  };\n\n  const handleRefresh = (options) => {\n    /* Rec table doesn't use the same sorting params as sys table, switching between the two results in the rec table blowing up cuz its trying to\n    read the endpoint with incorrect sorting params, if we hold of on updating the sysable url params when using the this component in pathways, it\n    solves this issue for the time being*/\n    const { name, display_name } = options;\n    const refreshedFilters = {\n      ...options,\n      ...(name && {\n        name,\n      }),\n      ...(display_name && {\n        display_name,\n      }),\n    };\n    !pathway && urlBuilder(refreshedFilters, selectedTags);\n  };\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    setFilters(filter);\n  };\n  const addFilterParam = (param, values) => {\n    values.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    {\n      label: SFC.rhel_version.title.toLowerCase(),\n      type: SFC.rhel_version.type,\n      id: SFC.rhel_version.urlParam,\n      value: `checkbox-${SFC.rhel_version.urlParam}`,\n      filterValues: {\n        key: `${SFC.rhel_version.urlParam}-filter`,\n        onChange: (_e, values) => {\n          addFilterParam(SFC.rhel_version.urlParam, values);\n        },\n        value: filters.rhel_version,\n        items: SFC.rhel_version.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_e, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  useEffect(() => {\n    entities?.rows?.length && calculateSelectedItems(entities.rows);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entities?.rows]);\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selected}\n        />\n      )}\n      <InventoryTable\n        hasCheckbox\n        initialLoading\n        autoRefresh\n        hideFilters={{ all: true, name: false, tags: !showTags }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        tableProps={{\n          variant: TableVariant.compact,\n          ...tableProps,\n        }}\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        showTags={showTags}\n        getEntities={async (_items, config, showTags, defaultGetEntities) => {\n          const {\n            per_page,\n            page,\n            orderBy,\n            orderDirection,\n            advisorFilters,\n            filters,\n            workloads,\n            SID,\n          } = config;\n          const sort = `${orderDirection === 'ASC' ? '' : '-'}${\n            orderBy === 'updated' ? 'last_seen' : orderBy\n          }`;\n          let options = {\n            ...advisorFilters,\n            limit: per_page,\n            offset: page * per_page - per_page,\n            sort,\n            ...(config.filters.hostnameOrId &&\n              !pathway && {\n                name: config?.filters?.hostnameOrId,\n              }),\n            ...(config.filters.hostnameOrId &&\n              pathway && {\n                display_name: config?.filters?.hostnameOrId,\n              }),\n            ...(Array.isArray(advisorFilters.rhel_version) && {\n              rhel_version: advisorFilters.rhel_version?.join(','),\n            }),\n            ...(filters.tagFilters?.length &&\n              buildTagFilter(filters.tagFilters)),\n          };\n\n          workloads &&\n            (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n          handleRefresh(options);\n\n          const fetchedSystems = pathway\n            ? (\n                await Get(\n                  `${SYSTEMS_FETCH_URL}`,\n                  {},\n                  { ...options, pathway: pathway.slug }\n                )\n              )?.data\n            : (\n                await Get(\n                  `${RULES_FETCH_URL}${encodeURI(\n                    rule.rule_id\n                  )}/systems_detail/`,\n                  {},\n                  options\n                )\n              )?.data;\n\n          const results = await defaultGetEntities(\n            fetchedSystems.data.map((system) => system.system_uuid),\n            {\n              page,\n              per_page,\n              hasItems: true,\n              fields: { system_profile: ['operating_system'] },\n            },\n            showTags\n          );\n\n          return Promise.resolve({\n            results: mergeArraysByDiffKeys(\n              fetchedSystems.data,\n              results.results\n            ),\n            total: fetchedSystems.meta.count,\n          });\n        }}\n        dedicatedAction={\n          <RemediationButton\n            key=\"remediation-button\"\n            isDisabled={\n              selected.length === 0 || (!pathway && rule?.playbook_count === 0)\n            }\n            dataProvider={remediationDataProvider}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            {intl.formatMessage(messages.remediate)}\n          </RemediationButton>\n        }\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForSystems),\n              props: { isDisabled: selected.length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n        bulkSelect={{\n          count: selected.length,\n          items: [\n            {\n              title: intl.formatMessage(messages.selectNone),\n              onClick: () => {\n                onSelectRows(-1, false);\n              },\n            },\n            {\n              ...(entities?.rows?.length > filters.limit\n                ? {\n                    title: intl.formatMessage(messages.selectPage, {\n                      items: filters.limit,\n                    }),\n                    onClick: () => {\n                      onSelectRows(0, true);\n                    },\n                  }\n                : {}),\n            },\n            {\n              ...(entities?.rows?.length > 0\n                ? {\n                    title: intl.formatMessage(messages.selectAll, {\n                      items: entities?.total || 0,\n                    }),\n                    onClick: async () => {\n                      console.error(pathway);\n                      const allSystems = pathway\n                        ? (\n                            await Get(\n                              `${SYSTEMS_FETCH_URL}`,\n                              {},\n                              {\n                                pathway: pathway.slug,\n                                limit: pathway.impacted_systems_count,\n                              }\n                            )\n                          )?.data?.data?.map((system) => system.system_uuid)\n                        : (\n                            await Get(\n                              `${RULES_FETCH_URL}${encodeURI(\n                                rule.rule_id\n                              )}/systems/`,\n                              {},\n                              { name: filters.name }\n                            )\n                          )?.data?.host_ids;\n\n                      console.error(allSystems);\n                      setSelected(allSystems);\n                      bulkSelectfn();\n                    },\n                  }\n                : {}),\n            },\n          ],\n          checked:\n            (selected.length === entities?.rows?.length ||\n              selected.length === entities?.total) &&\n            entities?.total > 0\n              ? 1\n              : selected.length === filters.limit\n              ? null\n              : 0,\n          onSelect: () => {\n            selected.length > 0 ? onSelectRows(-1, false) : bulkSelectfn();\n            calculateSelectedItems();\n          },\n        }}\n        fallback={Loading}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          store.replaceReducer(\n            updateReducers({\n              ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n                page: Number(filters.offset / filters.limit + 1 || 1),\n                perPage: Number(filters.limit || 20),\n              }),\n              ...mergeWithDetail(),\n            })\n          );\n        }}\n        exportConfig={\n          permsExport && {\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) => {\n              const overrideData = entities.rows.map((sys) => ({\n                display_name: sys.display_name,\n                os: `${sys.system_profile.operating_system.name} ${sys.system_profile.operating_system.major}.${sys.system_profile.operating_system.minor}`,\n                last_seen: sys.last_seen,\n              }));\n              return downloadReport(\n                exportTable,\n                fileType,\n                filters,\n                selectedTags,\n                workloads,\n                SID,\n                overrideData,\n                dispatch\n              );\n            },\n            isDisabled: !permsExport || entities?.rows?.length === 0,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nInventory.propTypes = {\n  tableProps: PropTypes.any,\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  pathway: PropTypes.object,\n  selectedTags: PropTypes.any,\n  workloads: PropTypes.any,\n  SID: PropTypes.any,\n  permsExport: PropTypes.bool,\n  exportTable: PropTypes.string,\n  showTags: PropTypes.bool,\n};\n\nexport default Inventory;\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","onError","console","log","RebootRequired","reboot_required","className","TextContent","Text","component","TextVariants","strong","str","status","QuestionTooltip","text","position","TooltipPosition","content","aria-label","color","global_Color_200","Inventory","localFilters","tableProps","rule","afterDisableFn","pathway","selectedTags","workloads","SID","permsExport","exportTable","showTags","store","useStore","dispatch","useDispatch","selected","setSelected","limit","offset","sort","name","filters","setFilters","entities","useSelector","onSelectRows","id","type","payload","addNotification","notification","disableRuleModalOpen","setDisableRuleModalOpen","bulkSelect","setBulkSelect","remediationDataProvider","Get","BASE_URL","encodeURI","slug","pathways","issues","rec","rule_id","systems","handleModalToggle","bulkSelectfn","calculateSelectedItems","rows","filter","entity","handleRefresh","options","display_name","refreshedFilters","urlBuilder","removeFilterParam","param","filterConfigItems","label","SFC","value","filterValues","onChange","_e","values","addFilterParam","rhel_version","activeFiltersConfig","deleteTitle","pruneFilters","onDelete","itemsToRemove","isAll","item","newFilter","urlParam","Array","isArray","String","chips","isModalOpen","afterFn","hosts","hasCheckbox","initialLoading","autoRefresh","hideFilters","all","tags","filterConfig","columns","defaultColumns","lastSeenColumn","displayName","systemProfile","transforms","sortable","wrappable","props","isStatic","width","createColumns","variant","TableVariant","customFilters","advisorFilters","getEntities","_items","config","defaultGetEntities","per_page","page","orderBy","orderDirection","hostnameOrId","join","tagFilters","buildTagFilter","workloadQueryBuilder","SYSTEMS_FETCH_URL","RULES_FETCH_URL","fetchedSystems","system","system_uuid","hasItems","fields","system_profile","results","Promise","resolve","mergeArraysByDiffKeys","total","meta","count","dedicatedAction","isDisabled","playbook_count","dataProvider","onRemediationCreated","result","remediation","getNotification","error","dismissable","actionsConfig","actions","onClick","impacted_systems_count","host_ids","allSystems","checked","onSelect","fallback","Loading","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","perPage","exportConfig","fileType","overrideData","sys","os","operating_system","major","minor","last_seen","downloadReport"],"sourceRoot":""}