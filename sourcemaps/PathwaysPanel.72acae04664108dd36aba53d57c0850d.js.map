{"version":3,"file":"js/PathwaysPanel.5766c41cf567f6e69a9a.js","mappings":"yUAoBMA,EAAgB,WAAM,MACpBC,GAAOC,EAAAA,EAAAA,KACb,GAAgCC,EAAAA,EAAAA,UAC9BC,KAAKC,MAAMC,aAAaC,QAAQ,mCAAqC,SADvE,eAAOC,EAAP,KAAiBC,EAAjB,KAGA,GAAiDC,EAAAA,EAAAA,IAAoB,CACnEC,MAAO,IADDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,WAAYC,EAArC,EAAqCA,QAIrC,OAAQF,EA2CN,kBAAC,IAAD,MA1CA,kBAAC,IAAD,CACEG,UAAS,wDACTC,GAAE,qCACFC,WAAYV,GAEZ,kBAAC,IAAD,CACEW,SAAU,WACRV,GAAaD,GACbF,aAAac,QAAQ,kCAAmCZ,IAE1Da,kBAAmB,CACjBJ,GAAI,yDACJ,aAAc,UACd,6EAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,aAAa,KAAKC,KAAK,MAC3BtB,EAAKuB,cAAcC,EAAAA,EAAAA,uBAI1B,kBAAC,IAAD,KACGX,EACC,kBAAC,IAAD,OACGC,GAAD,UAAYH,EAAKA,YAAjB,OAAY,EAAWc,OACzB,kBAAC,EAAAC,KAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,GAAI,IACxBlB,EAAKA,KAAKmB,KAAI,SAACC,GAAD,OACb,kBAAC,EAAAC,SAAD,CAAUC,IAAKF,EAAQG,MACrB,kBAAC,KAAgBH,QAKvB,kBAAC,IAAD,CACEI,KAAM,OACNC,KAAMpC,EAAKuB,cAAcC,EAAAA,EAAAA,iBAUrCzB,EAAcsC,UAAY,CACxBtB,UAAWsB,IAAAA,QAGb","sources":["webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardExpandableContent,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PathwayCard } from '../Cards/Pathways';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n  const { data, isLoading, isFetching, isError } = useGetPathwaysQuery({\n    limit: 3,\n  });\n\n  return !isLoading ? (\n    <Card\n      className={`ins-c-advisor_card ins-c-advisor__card--pathwayspanel`}\n      id={`ins-c-advisor__card--pathwayspanel`}\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        {isFetching ? (\n          <Loading />\n        ) : !isError && data.data?.length ? (\n          <Grid hasGutter md={4} sm={12}>\n            {data.data.map((pathway) => (\n              <GridItem key={pathway.name}>\n                <PathwayCard {...pathway} />\n              </GridItem>\n            ))}\n          </Grid>\n        ) : (\n          <MessageState\n            icon={'none'}\n            text={intl.formatMessage(messages.noPathways)}\n          />\n        )}\n      </CardExpandableContent>\n    </Card>\n  ) : (\n    <Loading />\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["PathwaysPanel","intl","useIntl","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","useGetPathwaysQuery","limit","data","isLoading","isFetching","isError","className","id","isExpanded","onExpand","setItem","toggleButtonProps","headingLevel","size","formatMessage","messages","length","Grid","hasGutter","md","sm","map","pathway","GridItem","key","name","icon","text","propTypes"],"sourceRoot":""}