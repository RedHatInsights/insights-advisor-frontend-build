{"version":3,"file":"js/3269.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Inventory/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/reducer.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/useBulkSelect.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useBulkSelect/helpers.js","webpack:///./src/PresentationalComponents/Inventory/Hooks/useSelectionManager/useSelectionManager.js","webpack:///./src/PresentationalComponents/Inventory/Inventory.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/helper.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[3]}`,\n        navigate: `/${location[3]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch,\n  display_name\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        {\n          ...filters,\n          ...options,\n          ...(display_name && { display_name: display_name }),\n        }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import { Get } from '../../Utilities/Api';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport { RULES_FETCH_URL, SYSTEMS_FETCH_URL } from '../../AppConstants';\nimport { createOptions } from '../helper';\n\n/*This functions purpose is to grab the currently set filters, and return all associated systems for it.*/\nexport const paginatedRequestHelper = async ({\n  per_page,\n  page,\n  advisorFilters,\n  filters,\n  workloads,\n  SID,\n  pathway,\n  rule,\n  selectedTags,\n  sort,\n}) => {\n  let options = createOptions(\n    advisorFilters,\n    page,\n    per_page,\n    sort,\n    pathway,\n    filters,\n    selectedTags,\n    workloads,\n    SID\n  );\n\n  return pathway\n    ? (\n        await Get(\n          `${SYSTEMS_FETCH_URL}`,\n          {},\n          { ...options, pathway: pathway.slug }\n        )\n      )?.data\n    : (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/systems_detail/`,\n          {},\n          options\n        )\n      )?.data;\n};\n\nexport const getEntities =\n  (\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule\n  ) =>\n  async (_items, config, showTags, defaultGetEntities) => {\n    const {\n      per_page,\n      page,\n      orderBy,\n      orderDirection,\n      advisorFilters,\n      filters,\n      workloads,\n      SID,\n      selectedTags,\n    } = config;\n\n    //operating_system is currently not supported, but will be down the line.\n    const sort =\n      orderBy === 'operating_system'\n        ? 'rhel_version'\n        : `${orderDirection === 'ASC' ? '' : '-'}${\n            orderBy === 'updated' ? 'last_seen' : orderBy\n          }`;\n\n    let options = createOptions(\n      advisorFilters,\n      page,\n      per_page,\n      sort,\n      pathway,\n      filters,\n      selectedTags,\n      workloads,\n      SID\n    );\n    handleRefresh(options);\n    const allDetails = { ...config, pathway, handleRefresh, rule, sort };\n    setFullFilters(allDetails);\n    const fetchedSystems = await paginatedRequestHelper(allDetails);\n    const results = await defaultGetEntities(\n      fetchedSystems.data.map((system) => system.system_uuid),\n      {\n        per_page,\n        hasItems: true,\n        fields: { system_profile: ['operating_system'] },\n      },\n      showTags\n    );\n    setCurPageIds(fetchedSystems.data.map((system) => system.system_uuid));\n    setTotal(fetchedSystems.meta.count);\n    return Promise.resolve({\n      results: mergeArraysByDiffKeys(fetchedSystems.data, results.results).map(\n        (item) => {\n          return {\n            ...item,\n            selected: selectedIds?.includes(item.id),\n          };\n        }\n      ),\n      total: fetchedSystems.meta.count,\n    });\n  };\n\n/*Takes in the current filters, and keeps sending get request until there are no pages left*/\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100, rule) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction({ ...filter, page: pageIdx + 1, per_page: batchSize, rule })\n    )\n  );\n};\n/*Grabs all systemIds and maniupaltes the data into one large array of systems*/\nexport const allCurrentSystemIds =\n  (fullFilters, total, rule, setIsLoading) => async () => {\n    setIsLoading(true);\n    const results = await (\n      await fetchBatched(paginatedRequestHelper, total, fullFilters, 100, rule)\n    ).map((item) => item.data);\n\n    const merged = [].concat.apply([], results).map((item) => item.system_uuid);\n    setIsLoading(false);\n    return merged;\n  };\n","import isObject from 'lodash/isObject';\nimport uniq from 'lodash/uniq';\n\nconst selectionGroup = (action) => action.group || 'default';\n\nexport const init = (withGroups) => (preselected) =>\n  withGroups ? preselected || {} : { default: preselected || [] };\n\nconst cleanEmpty = (state) => {\n  const newState = state;\n  Object.entries(state).forEach(([key, value]) => {\n    if (value === undefined) {\n      delete newState[key];\n    }\n  });\n  return newState;\n};\n\nconst set = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]:\n      action.items?.length > 0 || isObject(action.items)\n        ? action.items\n        : undefined,\n  });\n};\n\nconst select = (state = {}, action) => {\n  const group = selectionGroup(action);\n  return cleanEmpty({\n    ...state,\n    [group]: action.reset\n      ? action?.items\n      : uniq([action?.item, ...(state[group] || [])]),\n  });\n};\n\nconst deselect = (state = {}, action) => {\n  const group = selectionGroup(action);\n  const items = (state[group] || []).filter(\n    (selectedItem) => !action.item.includes(selectedItem)\n  );\n  return cleanEmpty({\n    ...state,\n    [group]: items.length === 0 ? undefined : items,\n  });\n};\n\nconst toggle = (state, action) => {\n  const group = selectionGroup(action);\n  return (state[group] || []).includes(action.item)\n    ? deselect(state, action)\n    : select(state, action);\n};\n\nconst reset = (state, action) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))(\n    action?.preselected\n  );\nconst clear = (state) =>\n  init(Object.prototype.hasOwnProperty.call(!state, 'default'))();\n\nexport default (state, action) =>\n  ({\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n  }[action.type](state, action));\n","import { useEffect } from 'react';\nimport useSelectionManager from '../useSelectionManager';\nimport { compileTitle, checkboxState, selectOrUnselect } from './helpers';\n\n/**\n * Provides properties for a Pattternfly (based) Table and Toolbar component to implement bulk selection\n *\n * @param {number} [total] Number to show as total count\n * @param {Function} [onSelect] function to call when a selection is made\n * @param {Array} [preselected] Array of itemIds selected when initialising\n * @param {Function} [itemIdsInTable] async function that returns an array of all item ids\n * @param {Function} [itemIdsOnPage] async function that returns an array of item ids visible on the page\n * @param {string} [identifies] Prop of the row containing the item ID\n * @returns {{ selectedIds , selectNone, tableProps }}\n */\nconst useBulkSelect = ({\n  total = 0,\n  onSelect,\n  preselected,\n  itemIdsInTable,\n  itemIdsOnPage,\n  identifier = 'id',\n  isLoading,\n}) => {\n  const enableBulkSelect = !!onSelect;\n  const {\n    selection: selectedIds,\n    set,\n    select,\n    deselect,\n    clear,\n  } = useSelectionManager(preselected || []);\n  const selectedIdsTotal = (selectedIds || []).length;\n  const idsOnPage = itemIdsOnPage();\n  const paginatedTotal = idsOnPage.length || total;\n  const allSelected = selectedIdsTotal === total;\n  const noneSelected = selectedIdsTotal === 0;\n\n  const isDisabled = total === 0;\n  const checked = checkboxState(selectedIdsTotal, total);\n  const title = compileTitle(selectedIdsTotal, isLoading);\n\n  const mergeArraysUniqly = (arrayA, arrayB) =>\n    Array.from(new Set([...arrayA, ...arrayB]));\n\n  const selectOne = (_, selected, _key, row) =>\n    selected ? select(row[identifier]) : deselect(row[identifier]);\n\n  const selectPage = () => {\n    let selectedItems =\n      selectedIds?.length > 0\n        ? mergeArraysUniqly(selectedIds, idsOnPage)\n        : idsOnPage;\n    select(selectedItems, undefined, true);\n  };\n\n  const selectAll = async () => {\n    const items = await itemIdsInTable();\n    if (allSelected) {\n      clear();\n    } else {\n      set(items);\n    }\n  };\n\n  useEffect(() => {\n    set(preselected);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(preselected)]);\n\n  return enableBulkSelect\n    ? {\n        selectedIds,\n        selectNone: () => clear(),\n        tableProps: {\n          onSelect: total > 0 ? selectOne : undefined,\n          canSelectAll: false,\n        },\n        toolbarProps: {\n          bulkSelect: {\n            toggleProps: title ? { children: [title] } : null,\n            isDisabled,\n            items: [\n              {\n                title: 'Select none',\n                onClick: () => clear(),\n                props: {\n                  isDisabled: noneSelected,\n                },\n              },\n              ...(itemIdsOnPage\n                ? [\n                    {\n                      title: `Select page (${paginatedTotal} items)`,\n                      onClick: selectPage,\n                    },\n                  ]\n                : []),\n              ...(itemIdsInTable\n                ? [\n                    {\n                      title: `${selectOrUnselect(\n                        allSelected\n                      )} all (${total} items)`,\n                      onClick: selectAll,\n                    },\n                  ]\n                : []),\n            ],\n            checked,\n            onSelect: selectedIds?.length > 0 ? clear : selectAll,\n          },\n        },\n      }\n    : {};\n};\n\nexport default useBulkSelect;\n","import React from 'react';\nimport { Spinner } from '@patternfly/react-core';\n\nexport const compileTitle = (itemsTotal, isLoading) => {\n  if (itemsTotal === 0 && !isLoading) {\n    return null;\n  } else if (isLoading) {\n    return (\n      <React.Fragment>\n        <Spinner size=\"sm\" />\n        {`     ${itemsTotal} selected`}\n      </React.Fragment>\n    );\n  } else {\n    return `${itemsTotal} selected`;\n  }\n};\n\nexport const checkboxState = (selectedItemsTotal, itemsTotal) => {\n  if (selectedItemsTotal === 0) {\n    return false;\n  } else if (selectedItemsTotal === itemsTotal) {\n    return true;\n  } else {\n    return null;\n  }\n};\n\nexport const selectOrUnselect = (selected) =>\n  selected ? 'Unselect' : 'Select';\n\nconst allItemsIncluded = (items = [], selection = []) =>\n  items?.filter((item) => selection.includes(item)).length === items.length;\n\nexport const checkCurrentPageSelected = (items = [], selectedItems = []) => {\n  if (selectedItems.length === 0) {\n    return false;\n  } else {\n    return allItemsIncluded(items, selectedItems);\n  }\n};\n\nexport const itemIds = (items) => items.map(({ itemId }) => itemId);\n\nexport const selectItemTransformer = (item, selectedIds = []) => ({\n  ...item,\n  rowProps: {\n    selected: selectedIds.includes(item.itemId),\n  },\n});\n","import { useReducer } from 'react';\nimport reducer, { init as initReducer } from './reducer';\n\n/**\n * Provides a generic API to manage selection stats of one (default) or multiple groups of selections.\n *\n * @param {Array} preselected Array of items initially selected\n * @param {Object} [options] function to call when a selection is made\n */\nconst useSelectionManager = (preselected, options = {}) => {\n  const { withGroups = false } = options;\n  const [selection, dispatch] = useReducer(\n    reducer,\n    preselected,\n    initReducer(withGroups)\n  );\n\n  const set = (items, group) => dispatch({ type: 'set', group, items });\n\n  const select = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'select', group, item });\n\n  const deselect = (item, group, useSet = false) =>\n    useSet ? set(item, group) : dispatch({ type: 'deselect', group, item });\n\n  const toggle = (item, group) => dispatch({ type: 'toggle', group, item });\n\n  const reset = () => dispatch({ type: 'reset', preselected });\n\n  const clear = () => dispatch({ type: 'clear' });\n\n  return {\n    set,\n    select,\n    deselect,\n    toggle,\n    reset,\n    clear,\n    selection: withGroups ? selection : selection.default,\n  };\n};\n\nexport default useSelectionManager;\n","import './_Inventory.scss';\n\nimport { BASE_URL, RULES_FETCH_URL } from '../../AppConstants';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport { pruneFilters, urlBuilder } from '../Common/Tables';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { getEntities, allCurrentSystemIds } from './helpers';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Get } from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useIntl } from 'react-intl';\nimport downloadReport from '../Common/DownloadHelper';\nimport useBulkSelect from './Hooks/useBulkSelect';\nimport { useLoadModule, Spinner } from '@scalprum/react-core';\n\nconst Inventory = ({\n  tableProps,\n  rule,\n  afterDisableFn,\n  pathway,\n  selectedTags,\n  workloads,\n  SID,\n  permsExport,\n  exportTable,\n  showTags,\n}) => {\n  const store = useStore();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [filters, setFilters] = useState({\n    limit: 20,\n    offset: 0,\n    sort: '-last_seen',\n    name: '',\n  });\n  const [fullFilters, setFullFilters] = useState();\n  const [total, setTotal] = useState(0);\n  const entities = useSelector(({ entities }) => entities || {});\n\n  const addNotification = (data) => dispatch(notification(data));\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [curPageIds, setCurPageIds] = useState([]);\n  const [pathwayRulesList, setPathwayRulesList] = useState({});\n  const [pathwayReportList, setPathwayReportList] = useState({});\n  const [isLoading, setIsLoading] = useState();\n\n  const [hasPathwayDetails, setHasPathwayDetails] = useState(false);\n  const [isRemediationButtonDisabled, setIsRemediationButtonDisabled] =\n    useState(true);\n  //This value comes in from the backend as 0, or 1. To be consistent it is set to -1\n  const [rulesPlaybookCount, setRulesPlaybookCount] = useState(-1);\n  const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n    appName: 'inventory',\n    scope: 'inventory',\n    module: './OsFilterHelpers',\n  });\n  const operatingSystems = useSelector(\n    ({ entities }) => entities?.operatingSystems || []\n  );\n\n  const handleRefresh = (options) => {\n    /* Rec table doesn't use the same sorting params as sys table, switching between the two results in the rec table blowing up cuz its trying to\n    read the endpoint with incorrect sorting params, if we hold of on updating the sysable url params when using the this component in pathways, it\n    solves this issue for the time being*/\n    const { name, display_name } = options;\n    const refreshedFilters = {\n      ...options,\n      ...(name && {\n        name,\n      }),\n      ...(display_name && {\n        display_name,\n      }),\n    };\n    !pathway && urlBuilder(refreshedFilters, selectedTags);\n  };\n\n  const fetchSystems = getEntities(\n    handleRefresh,\n    pathway,\n    setCurPageIds,\n    setTotal,\n    selectedIds,\n    setFullFilters,\n    fullFilters,\n    rule\n  );\n\n  const grabPageIds = () => {\n    return curPageIds || [];\n  };\n\n  const {\n    tableProps: bulkSelectTableProps,\n    toolbarProps,\n    selectedIds,\n    selectNone,\n  } = useBulkSelect({\n    total,\n    onSelect: () => {},\n    itemIdsInTable: allCurrentSystemIds(fullFilters, total, rule, setIsLoading),\n    itemIdsOnPage: grabPageIds,\n    identitfier: 'system_uuid',\n    isLoading,\n  });\n  // Ensures rows are marked as selected, runs the check on remediation Status\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n    checkRemediationButtonStatus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedIds]);\n\n  useEffect(() => {\n    if (pathway) {\n      pathwayCheck();\n    } else {\n      rulesCheck();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const rulesCheck = async () => {\n    if (rulesPlaybookCount < 0) {\n      const associatedRuleDetails = (\n        await Get(\n          `${RULES_FETCH_URL}${encodeURI(rule.rule_id)}/`,\n          {},\n          { name: filters.name }\n        )\n      )?.data.playbook_count;\n      setRulesPlaybookCount(associatedRuleDetails);\n    }\n  };\n\n  const pathwayCheck = async () => {\n    if (!hasPathwayDetails) {\n      if (pathway) {\n        let pathwayRules = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n            {},\n            {}\n          )\n        )?.data.data;\n\n        let pathwayReport = (\n          await Get(\n            `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n            {},\n            {}\n          )\n        )?.data.rules;\n        setHasPathwayDetails(true);\n        setPathwayReportList(pathwayReport);\n        setPathwayRulesList(pathwayRules);\n      }\n    }\n  };\n\n  const checkRemediationButtonStatus = () => {\n    let playbookFound = false;\n    let ruleKeys = Object.keys(pathwayReportList);\n    if (selectedIds?.length <= 0 || selectedIds === undefined) {\n      setIsRemediationButtonDisabled(true);\n    } else if (pathway) {\n      for (let i = 0; i < selectedIds?.length; i++) {\n        let system = selectedIds[i];\n        if (playbookFound) {\n          break;\n        }\n        ruleKeys.forEach((rule) => {\n          //Grab the rule assosciated with that system\n          if (pathwayReportList[rule].includes(system)) {\n            let assosciatedRule = pathwayReportList[rule];\n            //find that associated rule in the pathwayRules endpoint, check for playbook\n            let item = pathwayRulesList.find(\n              (report) => (report.rule_id = assosciatedRule)\n            );\n            if (item.resolution_set[0].has_playbook) {\n              playbookFound = true;\n              return setIsRemediationButtonDisabled(false);\n            }\n          }\n        });\n      }\n    } else {\n      if (rulesPlaybookCount > 0 && selectedIds?.length > 0) {\n        setIsRemediationButtonDisabled(false);\n      }\n    }\n  };\n\n  const remediationDataProvider = async () => {\n    if (pathway) {\n      const pathways = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/rules/`,\n          {},\n          {}\n        )\n      )?.data.data;\n\n      const systems = (\n        await Get(\n          `${BASE_URL}/pathway/${encodeURI(pathway.slug)}/reports/`,\n          {},\n          {}\n        )\n      )?.data.rules;\n\n      let issues = [];\n      pathways.forEach((rec) => {\n        let filteredSystems = [];\n\n        systems[rec.rule_id].forEach((system) => {\n          if (selectedIds.includes(system)) {\n            filteredSystems.push(system);\n          }\n        });\n\n        if (filteredSystems.length) {\n          issues.push({\n            id: `advisor:${rec.rule_id}`,\n            description: rec.description,\n            systems: filteredSystems,\n          });\n        }\n      });\n\n      return { issues };\n    } else {\n      return {\n        issues: [\n          {\n            id: `advisor:${rule.rule_id}`,\n            description: rule.description,\n          },\n        ],\n        systems: selectedIds,\n      };\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    selectNone();\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const handleModalToggle = (disableRuleModalOpen) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n  };\n\n  const createColumns = useCallback(\n    (defaultColumns) => {\n      let lastSeenColumn = defaultColumns.filter(\n        ({ key }) => key === 'updated'\n      );\n      let displayName = defaultColumns.filter(\n        ({ key }) => key === 'display_name'\n      );\n      let systemProfile = defaultColumns.filter(\n        ({ key }) => key === 'system_profile'\n      );\n      let tags = defaultColumns.filter(({ key }) => key === 'tags');\n      //Link to the Systems in the Recommendation details table and Pathway details table\n      displayName = {\n        ...displayName[0],\n        transforms: [sortable, wrappable],\n        props: { isStatic: true },\n        ...(rule\n          ? {\n              renderFunc: (name, id) => {\n                return (\n                  <Link\n                    className=\"pf-u-font-size-lg\"\n                    to={`/recommendations/${rule.rule_id}/${id}?activeRule=true`}\n                  >\n                    {name}\n                  </Link>\n                );\n              },\n            }\n          : {}),\n      };\n\n      lastSeenColumn = {\n        ...lastSeenColumn[0],\n        transforms: [sortable, wrappable],\n        props: { width: 20 },\n      };\n\n      systemProfile = {\n        ...systemProfile[0],\n        transforms: [wrappable],\n        props: { isStatic: true },\n      };\n\n      tags = {\n        ...tags[0],\n      };\n\n      let columnList = [displayName, tags, systemProfile, lastSeenColumn];\n\n      // Add column for impacted_date which is relevant for the rec system details table, but not pathways system table\n      if (!pathway) {\n        const impacted_date = {\n          key: 'impacted_date',\n          title: 'First Impacted',\n          sortKey: 'impacted_date',\n          transforms: [sortable, wrappable],\n          props: { width: 15 },\n          renderFunc: lastSeenColumn.renderFunc,\n        };\n        columnList.push(impacted_date);\n        lastSeenColumn.props.width = 15;\n      }\n\n      return columnList;\n    },\n    [pathway, rule]\n  );\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    setFilters(filter);\n  };\n  const addFilterParam = (param, values) => {\n    const passValue =\n      param === SFC.rhel_version.urlParam\n        ? Object.values(values || {}).flatMap((majorOsVersion) =>\n            Object.keys(majorOsVersion)\n          )\n        : values;\n\n    passValue.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: passValue } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    ...(buildOSFilterConfig\n      ? [\n          buildOSFilterConfig(\n            {\n              label: SFC.rhel_version.title.toLowerCase(),\n              type: SFC.rhel_version.type,\n              id: SFC.rhel_version.urlParam,\n              value: toGroupSelectionValue(filters.rhel_version || []),\n              onChange: (_e, value) =>\n                addFilterParam(SFC.rhel_version.urlParam, value),\n            },\n            operatingSystems\n          ),\n        ]\n      : []),\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (_e, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  return (\n    <React.Fragment>\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          hosts={selectedIds}\n        />\n      )}\n      <InventoryTable\n        id=\"tablesContainer\"\n        hasCheckbox\n        initialLoading\n        autoRefresh\n        hideFilters={{ all: true, name: false, tags: !showTags }}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        tableProps={{\n          variant: TableVariant.compact,\n          ...tableProps,\n          ...bulkSelectTableProps,\n        }}\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        showTags={showTags}\n        getEntities={fetchSystems}\n        dedicatedAction={\n          <RemediationButton\n            key=\"remediation-button\"\n            isDisabled={isRemediationButtonDisabled}\n            dataProvider={remediationDataProvider}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            {intl.formatMessage(messages.remediate)}\n          </RemediationButton>\n        }\n        actionsConfig={{\n          actions: [\n            '',\n            {\n              label: intl.formatMessage(messages.disableRuleForSystems),\n              props: { isDisabled: (selectedIds || []).length === 0 },\n              onClick: () => handleModalToggle(true),\n            },\n          ],\n        }}\n        {...toolbarProps}\n        fallback={Spinner}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          store.replaceReducer(\n            updateReducers({\n              ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n                page: Number(filters.offset / filters.limit + 1 || 1),\n                perPage: Number(filters.limit || 20),\n              }),\n              ...mergeWithDetail(),\n            })\n          );\n        }}\n        exportConfig={\n          permsExport && {\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                exportTable,\n                fileType,\n                { rule_id: rule.rule_id, ...filters },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch\n              ),\n            isDisabled: !permsExport || entities?.rows?.length === 0,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nInventory.propTypes = {\n  tableProps: PropTypes.any,\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  pathway: PropTypes.object,\n  selectedTags: PropTypes.any,\n  workloads: PropTypes.any,\n  SID: PropTypes.any,\n  permsExport: PropTypes.bool,\n  exportTable: PropTypes.string,\n  showTags: PropTypes.bool,\n};\n\nexport default Inventory;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/esm/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const [setAck] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import { buildTagFilter, workloadQueryBuilder } from './Common/Tables';\nimport { orderBy } from 'lodash';\n\nexport const createOptions = (\n  advisorFilters,\n  page,\n  per_page,\n  sort,\n  pathway,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  systemsPage\n) => {\n  let options = {\n    ...advisorFilters,\n    limit: per_page,\n    offset: page * per_page - per_page,\n    sort: sort,\n    ...(filters?.hostnameOrId &&\n      !pathway &&\n      !systemsPage && {\n        name: filters?.hostnameOrId,\n      }),\n    ...(filters?.hostnameOrId &&\n      !pathway &&\n      systemsPage && {\n        display_name: filters?.hostnameOrId,\n      }),\n    ...(filters.hostnameOrId &&\n      pathway && {\n        display_name: filters?.hostnameOrId,\n      }),\n    ...(advisorFilters.rhel_version && {\n      rhel_version: advisorFilters.rhel_version?.join(','),\n    }),\n    ...(filters?.hostGroupFilter?.length && {\n      groups: filters.hostGroupFilter.join(','),\n    }),\n    ...(filters.tagFilters?.length && buildTagFilter(filters.tagFilters)),\n    ...(workloads ? workloadQueryBuilder(workloads, SID) : {}),\n    ...(selectedTags?.length > 0 ? { tags: selectedTags.join(',') } : {}),\n  };\n  return options;\n};\n\nexport const sortTopics = (data, index, direction) => {\n  let sortingName = '';\n  index === 0\n    ? (sortingName = 'name')\n    : index === 2\n    ? (sortingName = 'featured')\n    : (sortingName = 'impacted_systems_count');\n  return orderBy(data, [(result) => result[sortingName]], direction);\n};\n"],"names":["Breadcrumbs","_ref","_useLocation$pathname","current","intl","useIntl","location","useLocation","pathname","split","_useState","useState","_useState2","_slicedToArray","items","setItems","skip","length","_useGetRecQuery","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","concat","formatMessage","messages","navigate","description","React","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","propTypes","PropTypes","fileName","exportTable","defaultParams","date","Date","toISOString","replace","_asyncToGenerator","_regeneratorRuntime","_callee","format","filters","selectedTags","workloads","SID","dispatch","display_name","options","formattedData","_context","prev","next","tags","_objectSpread","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","sent","JSON","stringify","downloadFile","t0","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","paginatedRequestHelper","_ref2","_yield$Get","_yield$Get2","per_page","page","advisorFilters","pathway","rule","sort","createOptions","SYSTEMS_FETCH_URL","slug","t2","t1","t3","RULES_FETCH_URL","encodeURI","rule_id","t5","t4","t6","abrupt","fetchBatched","fetchFunction","total","filter","batchSize","undefined","pages","Math","ceil","Promise","all","_toConsumableArray","Array","_","pageIdx","allCurrentSystemIds","fullFilters","setIsLoading","_callee3","results","merged","_context3","item","system_uuid","selectionGroup","action","group","init","withGroups","preselected","default","cleanEmpty","state","newState","Object","entries","forEach","set","_action$items","_defineProperty","isObject","select","reset","uniq","deselect","selectedItem","includes","toggle","prototype","hasOwnProperty","call","clear","type","selectedItemsTotal","selected","_ref$total","onSelect","itemIdsInTable","itemIdsOnPage","_ref$identifier","identifier","isLoading","enableBulkSelect","_useSelectionManager","_options$withGroups","_useReducer","useReducer","reducer","initReducer","_useReducer2","selection","useSelectionManager","selectedIds","selectedIdsTotal","idsOnPage","paginatedTotal","allSelected","noneSelected","isDisabled","checked","itemsTotal","Spinner","size","compileTitle","selectAll","selectNone","tableProps","_key","row","canSelectAll","toolbarProps","bulkSelect","toggleProps","children","onClick","props","arrayA","arrayB","selectedItems","from","Set","Inventory","_entities$rows","_ref12","afterDisableFn","permsExport","showTags","store","useStore","useDispatch","limit","offset","name","setFilters","_useState3","_useState4","setFullFilters","_useState5","_useState6","setTotal","entities","useSelector","notification","_useState7","_useState8","disableRuleModalOpen","setDisableRuleModalOpen","_useState9","_useState10","curPageIds","setCurPageIds","_useState11","_useState12","pathwayRulesList","setPathwayRulesList","_useState13","_useState14","pathwayReportList","setPathwayReportList","_useState15","_useState16","_useState17","_useState18","hasPathwayDetails","setHasPathwayDetails","_useState19","_useState20","isRemediationButtonDisabled","setIsRemediationButtonDisabled","_useState21","_useState22","rulesPlaybookCount","setRulesPlaybookCount","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2$","toGroupSelectionValue","buildOSFilterConfig","operatingSystems","_ref3","fetchSystems","handleRefresh","_callee2","_items","config","defaultGetEntities","orderBy","orderDirection","allDetails","fetchedSystems","_context2","system","hasItems","fields","system_profile","meta","count","resolve","mergeArraysByDiffKeys","id","getEntities","refreshedFilters","urlBuilder","_useBulkSelect","useBulkSelect","identitfier","bulkSelectTableProps","payload","checkRemediationButtonStatus","pathwayCheck","rulesCheck","localFilters","_ref4","associatedRuleDetails","playbook_count","_ref5","_yield$Get3","pathwayRules","pathwayReport","rules","playbookFound","ruleKeys","keys","_loop","i","assosciatedRule","find","report","resolution_set","has_playbook","remediationDataProvider","_ref6","_yield$Get4","_yield$Get5","pathways","systems","issues","rec","filteredSystems","handleModalToggle","createColumns","useCallback","defaultColumns","lastSeenColumn","_ref7","displayName","_ref8","systemProfile","_ref9","_ref10","transforms","sortable","wrappable","isStatic","renderFunc","className","width","columnList","impacted_date","sortKey","removeFilterParam","param","filterConfigItems","label","SFC","value","rhel_version","onChange","_e","values","passValue","flatMap","majorOsVersion","activeFiltersConfig","deleteTitle","pruneFilters","onDelete","itemsToRemove","isAll","newFilter","urlParam","isArray","String","chips","DisableRule","isModalOpen","afterFn","hosts","InventoryTable","_extends","hasCheckbox","initialLoading","autoRefresh","hideFilters","filterConfig","columns","variant","TableVariant","customFilters","dedicatedAction","RemediationButton","dataProvider","onRemediationCreated","remediation","getNotification","error","dismissable","actionsConfig","actions","fallback","onLoad","_ref11","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","perPage","exportConfig","fileType","downloadReport","rows","LabelIcon","icon","text","Label","color","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","reduce","acc","curr","a","b","LabelGroup","numLabels","AutomationIcon","LockIcon","CubeIcon","PortIcon","labels","defaultProps","RuleLabels","_rule$tags","noMargin","search","Tooltip","content","position","TooltipPosition","rule_status","Card","CardBody","List","host","justification","setJustificaton","singleSystem","setSingleSystem","_useSetAckMutation","useSetAckMutation","setAck","bulkHostActions","Post","timeout","disableRule","unwrap","Modal","isOpen","onClose","Button","Form","FormGroup","fieldId","Checkbox","isChecked","TextInput","onKeyDown","e","preventDefault","systemsPage","_advisorFilters$rhel_","_filters$hostGroupFil","_filters$tagFilters","hostnameOrId","join","hostGroupFilter","groups","tagFilters","buildTagFilter","sortTopics","index","direction","sortingName","_orderBy"],"sourceRoot":""}