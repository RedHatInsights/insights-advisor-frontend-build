{"version":3,"file":"js/List.805cf73228972e84088a.js","mappings":"uWAkBMA,EAAkB,SAAC,GAKnB,IAJJC,EAII,EAJJA,aACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,KAEMC,EAAc,SAACC,EAAOC,GAAR,OAClBC,KAAKC,MAAMC,OAAQJ,EAAQC,EAAS,OAChCI,EAAc,CAClB,CACEC,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,UACtBC,EAAGV,EAAYH,EAAac,WAAW,GAAId,EAAaK,QAE1D,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,WACtBC,EAAGV,EAAYH,EAAac,WAAW,GAAId,EAAaK,QAE1D,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,UACtBC,EAAGV,EAAYH,EAAac,WAAW,GAAId,EAAaK,QAE1D,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,KACtBC,EAAGV,EAAYH,EAAac,WAAW,GAAId,EAAaK,SAGtDU,EAAe,CACnB,CACEb,EAAKS,cAAcC,EAAAA,EAAAA,UACnBV,EAAKS,cAAcC,EAAAA,EAAAA,eAHL,eAKbI,OAAOC,QAAQjB,EAAac,YAC5BI,KAAI,+BAAEC,EAAF,KAAOf,EAAP,WAAkB,CACrBgB,EAAAA,iBAAiBD,GAAKE,MAAMC,SAC5BpB,EAAKS,cAAcC,EAAAA,EAAAA,oBAA8B,CAC/CW,MAAOnB,EACPC,MAAOF,EAAYC,EAAOJ,EAAaK,aAG1CmB,YAGCC,EAAc,CAClB,CACEf,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,cACtBC,EAAGV,EAAYH,EAAa0B,SAASC,aAAc3B,EAAaK,QAElE,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,aACtBC,EAAGV,EAAYH,EAAa0B,SAASE,YAAa5B,EAAaK,QAEjE,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,UACtBC,EAAGV,EAAYH,EAAa0B,SAASG,SAAU7B,EAAaK,QAE9D,CACEK,EAAGR,EAAKS,cAAcC,EAAAA,EAAAA,WACtBC,EAAGV,EAAYH,EAAa0B,SAASI,UAAW9B,EAAaK,SAG3D0B,EAAe,CACnB,CACE7B,EAAKS,cAAcC,EAAAA,EAAAA,UACnBV,EAAKS,cAAcC,EAAAA,EAAAA,eAHL,eAKbI,OAAOC,QAAQjB,EAAa0B,UAAUR,KAAI,+BAAEC,EAAF,KAAOf,EAAP,WAAkB,CAC7De,EACAjB,EAAKS,cAAcC,EAAAA,EAAAA,oBAA8B,CAC/CW,MAAOnB,EACPC,MAAOF,EAAYC,EAAOJ,EAAaK,eAKvC2B,EAAY,SAACC,GAAD,OAChB,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAMC,MAAO,CAAEC,WAAY,MAA3B,IAAoCF,EAAKG,aAD3C,IAEG,IAASH,EAAKI,QAAS,CAAEC,OAAQ,QAItC,OACE,kBAAC,aAAD,CAAgBnB,IAAKjB,EAAKS,cAAcC,EAAAA,EAAAA,iBACtC,kBAAC,KAAD,KACGV,EAAKS,cAAcC,EAAAA,EAAAA,iBAA2B,CAC7C2B,QACE,kBAAC,KAAD,CAAML,MAAO,CAAEC,WAAY,MACxBjC,EAAKS,cAAcC,EAAAA,EAAAA,wBAAkC,CACpD2B,QAASxC,EAAaM,SAI5BmC,MACE,kBAAC,KAAD,CAAMN,MAAO,CAAEC,WAAY,MACxB,IACAjC,EAAKS,cAAcC,EAAAA,EAAAA,sBAAgC,CAClD4B,MAAOxC,EAAaK,YAM9B,kBAAC,KAAD,CAASoC,MAAOvC,EAAKS,cAAcC,EAAAA,EAAAA,iBACjC,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO8B,YAAU,EAACC,KAAM5B,KAE1B,kBAAC,KAAD,KACE,kBAAC,KAAD,CACE6B,UAAU,MACVC,SAAU3C,EAAKS,cAAcC,EAAAA,EAAAA,gBAC7B6B,MAAM,MACNK,KAAMrC,EACNsC,YAAa,YAInB,kBAAC,KAAD,CAASN,MAAOvC,EAAKS,cAAcC,EAAAA,EAAAA,iBACjC,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO8B,YAAU,EAACC,KAAMZ,KAE1B,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEa,UAAU,MACVC,SAAU3C,EAAKS,cAAcC,EAAAA,EAAAA,gBAC7B6B,MAAM,MACNK,KAAMrB,MAIZ,kBAAC,KAAD,CACEgB,MAAOvC,EAAKS,cAAcC,EAAAA,EAAAA,iBAC1BoC,YAAY,GAEX/C,EAAa6C,KAAK5B,KAAI,SAACe,EAAMd,GAAP,OACrB,kBAAC,KAAD,CAAOA,IAAKA,EAAKiB,YAAaJ,EAAUC,IACtC,kBAAC,KAAD,CACEQ,MAAOvC,EAAKS,cAAcC,EAAAA,EAAAA,iBAD5B,UAEKqB,EAAKgB,yBACV,kBAAC,KAAD,CAAWR,MAAOvC,EAAKS,cAAcC,EAAAA,EAAAA,YACnC,kBAAC,KAAD,CAAesC,QAASjB,EAAKnB,qBAS3ChB,EAAgBqD,UAAY,CAC1BpD,aAAcqD,IAAAA,OACdpD,aAAcoD,IAAAA,OACdnD,aAAcmD,IAAAA,OACdlD,KAAMkD,IAAAA,KAGR,U,olBCtGA,QAvD2B,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,WACtBnD,GAAOoD,EAAAA,EAAAA,KACb,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAS,mCAAG,qGAChBD,GAAW,GADK,KAEyCE,QAFzC,SAGPC,EAAAA,EAAAA,IAAQC,EAAAA,yBAHD,0BAG2Bf,KAH3B,SAIPc,EAAAA,EAAAA,IAAQE,EAAAA,yBAJD,0BAI2BhB,KAJ3B,UAMNc,EAAAA,EAAAA,IACJG,EAAAA,gBACA,GACA,CAAEC,MAAO,EAAGC,KAAM,8BAA+BC,WAAW,IATlD,2BAWZpB,KAXY,qCAEiDqB,IAFjD,uDAETpE,EAFS,KAEKC,EAFL,KAEmBC,EAFnB,KAaVmE,EAASC,EAAgB,CAC7BrE,aAAAA,EACAD,aAAAA,EACAE,aAAAA,EACAC,KAAAA,IAEFuD,GAAW,GAnBK,kBAqBT,CAACW,IArBQ,4CAAH,qDAwBf,OAAOE,EAAAA,EAAAA,UAAQ,WACb,OACE,kBAAC,KAAD,CACEC,UAAWrE,EAAKS,cAAcC,EAAAA,EAAAA,gBAC9B4D,MACEhB,EACItD,EAAKS,cAAcC,EAAAA,EAAAA,SACnBV,EAAKS,cAAcC,EAAAA,EAAAA,wBAEzB6D,cAAef,EACfgB,YAAW,GACTxB,QAAS,OACTyB,KAAM,kBAAC,KAAD,CAAYC,UAAU,iBAC5BC,UAAW,IACXD,UAAW,yBACXE,eAAgBzB,GACZG,EAAU,CAAEH,YAAY,GAAS,MAEvC0B,KAAM7E,EAAKS,cAAcC,EAAAA,EAAAA,gBACzBoE,SAAQ,qCAA+B,IAAIC,MACxCC,cACAC,QAAQ,KAAM,KAFT,YAKX,CAAC3B,K,gDCnDA4B,GAAaC,EAAAA,EAAAA,OAAK,kBACtB,+GAKIC,EAAO,WACX,IAAMpF,GAAOoD,EAAAA,EAAAA,KACPiC,GAAcC,EAAAA,EAAAA,GAAe,UAAWC,EAAAA,MAAAA,QAK9C,OAJAC,SAASjD,MAAQvC,EAAKS,cAAcC,EAAAA,EAAAA,cAAwB,CAC1D+E,OAAQ/E,EAAAA,EAAAA,gBAAAA,iBAIR,kBAAC,aAAD,KACE,kBAACgF,EAAA,EAAD,CAAYhB,UAAU,gCACpB,kBAACiB,EAAA,EAAD,CACEpD,MAAK,UAAKvC,EAAKS,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoDV,EACtDS,cAAcC,EAAAA,EAAAA,iBACdkF,kBAEHP,EAAYQ,WACZ,kBAACC,EAAA,EAAD,CACEC,QAAUV,EAAYW,UAA2B,GAAf,aAClCC,QAASjG,EAAKS,cAAcC,EAAAA,EAAAA,cAE5B,kBAACwF,EAAD,CAAoB/C,YAAakC,EAAYW,cAInD,kBAACG,EAAA,EAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,OAClB,kBAACpB,EAAD,UAOVE,EAAKmB,YAAc,uBAEnB,W,qJC/CMC,GAAerB,EAAAA,EAAAA,OAAK,kBACxB,4EAKIC,EAAO,WACX,IAAMpF,GAAOoD,EAAAA,EAAAA,KAMb,OAJAoC,SAASjD,MAAQvC,EAAKS,cAAcC,EAAAA,EAAAA,cAAwB,CAC1D+E,OAAQ/E,EAAAA,EAAAA,QAAAA,iBAIR,kBAAC,aAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE6B,MAAK,UAAKvC,EAAKS,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoDV,EACtDS,cAAcC,EAAAA,EAAAA,SACdkF,kBAGP,kBAAC,IAAD,KACE,kBAAC,EAAAQ,SAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAACG,EAAD,UAOVpB,EAAKmB,YAAc,eAEnB,W","sources":["webpack:///./src/PresentationalComponents/ExecutiveReport/Build.js","webpack:///./src/PresentationalComponents/ExecutiveReport/Download.js","webpack:///./src/SmartComponents/Recs/List.js","webpack:///./src/SmartComponents/Systems/List.js"],"sourcesContent":["import {\n  Chart,\n  Column,\n  InsightsLabel,\n  Panel,\n  PanelItem,\n  Paragraph,\n  Section,\n  Table,\n} from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { TOTAL_RISK_LABEL } from '../../AppConstants';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../Messages';\nimport { truncate } from 'lodash';\n\nconst BuildExecReport = ({\n  statsSystems,\n  statsReports,\n  topActiveRec,\n  intl,\n}) => {\n  const calcPercent = (value, total) =>\n    Math.round(Number((value / total) * 100));\n  const severityPie = [\n    {\n      x: intl.formatMessage(messages.critical),\n      y: calcPercent(statsReports.total_risk[4], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.important),\n      y: calcPercent(statsReports.total_risk[3], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.moderate),\n      y: calcPercent(statsReports.total_risk[2], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.low),\n      y: calcPercent(statsReports.total_risk[1], statsReports.total),\n    },\n  ];\n  const severityRows = [\n    [\n      intl.formatMessage(messages.severity),\n      intl.formatMessage(messages.poundOfRecs),\n    ],\n    ...Object.entries(statsReports.total_risk)\n      .map(([key, value]) => [\n        TOTAL_RISK_LABEL[key].props.children,\n        intl.formatMessage(messages.recNumAndPercentage, {\n          count: value,\n          total: calcPercent(value, statsReports.total),\n        }),\n      ])\n      .reverse(),\n  ];\n\n  const categoryPie = [\n    {\n      x: intl.formatMessage(messages.availability),\n      y: calcPercent(statsReports.category.Availability, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.performance),\n      y: calcPercent(statsReports.category.Performance, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.security),\n      y: calcPercent(statsReports.category.Security, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.stability),\n      y: calcPercent(statsReports.category.Stability, statsReports.total),\n    },\n  ];\n  const categoryRows = [\n    [\n      intl.formatMessage(messages.category),\n      intl.formatMessage(messages.poundOfRecs),\n    ],\n    ...Object.entries(statsReports.category).map(([key, value]) => [\n      key,\n      intl.formatMessage(messages.recNumAndPercentage, {\n        count: value,\n        total: calcPercent(value, statsReports.total),\n      }),\n    ]),\n  ];\n\n  const rulesDesc = (rule) => (\n    <Text>\n      <Text style={{ fontWeight: 700 }}> {rule.description}</Text>&nbsp;\n      {truncate(rule.summary, { length: 280 })}\n    </Text>\n  );\n\n  return (\n    <React.Fragment key={intl.formatMessage(messages.insightsHeader)}>\n      <Paragraph>\n        {intl.formatMessage(messages.execReportHeader, {\n          systems: (\n            <Text style={{ fontWeight: 700 }}>\n              {intl.formatMessage(messages.execReportHeaderSystems, {\n                systems: statsSystems.total,\n              })}\n            </Text>\n          ),\n          risks: (\n            <Text style={{ fontWeight: 700 }}>\n              {' '}\n              {intl.formatMessage(messages.execReportHeaderRisks, {\n                risks: statsReports.total,\n              })}\n            </Text>\n          ),\n        })}\n      </Paragraph>\n      <Section title={intl.formatMessage(messages.severityHeader)}>\n        <Column>\n          <Table withHeader rows={severityRows} />\n        </Column>\n        <Column>\n          <Chart\n            chartType=\"pie\"\n            subTitle={intl.formatMessage(messages.severityHeader)}\n            title=\"100\"\n            data={severityPie}\n            colorSchema={'multi'}\n          />\n        </Column>\n      </Section>\n      <Section title={intl.formatMessage(messages.categoryHeader)}>\n        <Column>\n          <Table withHeader rows={categoryRows} />\n        </Column>\n        <Column>\n          <Chart\n            chartType=\"pie\"\n            subTitle={intl.formatMessage(messages.categoryHeader)}\n            title=\"100\"\n            data={categoryPie}\n          />\n        </Column>\n      </Section>\n      <Section\n        title={intl.formatMessage(messages.top3RulesHeader)}\n        withColumn={false}\n      >\n        {topActiveRec.data.map((rule, key) => (\n          <Panel key={key} description={rulesDesc(rule)}>\n            <PanelItem\n              title={intl.formatMessage(messages.systemsExposed)}\n            >{`${rule.impacted_systems_count}`}</PanelItem>\n            <PanelItem title={intl.formatMessage(messages.totalRisk)}>\n              <InsightsLabel variant={rule.total_risk} />\n            </PanelItem>\n          </Panel>\n        ))}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nBuildExecReport.propTypes = {\n  statsSystems: PropTypes.object,\n  statsReports: PropTypes.object,\n  topActiveRec: PropTypes.object,\n  intl: PropTypes.any,\n};\n\nexport default BuildExecReport;\n","import './_Download.scss';\n\nimport {\n  RULES_FETCH_URL,\n  STATS_REPORTS_FETCH_URL,\n  STATS_SYSTEMS_FETCH_URL,\n} from '../../AppConstants';\nimport React, { useMemo, useState } from 'react';\n\nimport API from '../../Utilities/Api';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\nimport ExportIcon from '@patternfly/react-icons/dist/js/icons/export-icon';\nimport buildExecReport from './Build';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst DownloadExecReport = ({ isDisabled }) => {\n  const intl = useIntl();\n  const [loading, setLoading] = useState(false);\n\n  const dataFetch = async () => {\n    setLoading(true);\n    const [statsSystems, statsReports, topActiveRec] = await Promise.all([\n      (await API.get(STATS_SYSTEMS_FETCH_URL)).data,\n      (await API.get(STATS_REPORTS_FETCH_URL)).data,\n      (\n        await API.get(\n          RULES_FETCH_URL,\n          {},\n          { limit: 3, sort: '-total_risk,-impacted_count', impacting: true }\n        )\n      ).data,\n    ]);\n    const report = buildExecReport({\n      statsReports,\n      statsSystems,\n      topActiveRec,\n      intl,\n    });\n    setLoading(false);\n\n    return [report];\n  };\n\n  return useMemo(() => {\n    return (\n      <DownloadButton\n        groupName={intl.formatMessage(messages.redHatInsights)}\n        label={\n          loading\n            ? intl.formatMessage(messages.loading)\n            : intl.formatMessage(messages.downloadExecutiveLabel)\n        }\n        asyncFunction={dataFetch}\n        buttonProps={{\n          variant: 'link',\n          icon: <ExportIcon className=\"iconOverride\" />,\n          component: 'a',\n          className: 'downloadButtonOverride',\n          isAriaDisabled: isDisabled,\n          ...(loading ? { isDisabled: true } : null),\n        }}\n        type={intl.formatMessage(messages.insightsHeader)}\n        fileName={`Advisor-Executive-Report--${new Date()\n          .toUTCString()\n          .replace(/ /g, '-')}.pdf`}\n      />\n    );\n  }, [loading]);\n};\n\nexport default DownloadExecReport;\n","import './List.scss';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy } from 'react';\n\nimport DownloadExecReport from '../../PresentationalComponents/ExecutiveReport/Download';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PERMS } from '../../AppConstants';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: \"RulesTable\" */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst List = () => {\n  const intl = useIntl();\n  const permsExport = usePermissions('advisor', PERMS.export);\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.recommendations.defaultMessage,\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"ins-c-recommendations-header\">\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.recommendations)\n            .toLowerCase()}`}\n        />\n        {!permsExport.isLoading && (\n          <Tooltip\n            trigger={!permsExport.hasAccess ? 'mouseenter' : ''}\n            content={intl.formatMessage(messages.permsAction)}\n          >\n            <DownloadExecReport isDisabled={!permsExport.hasAccess} />\n          </Tooltip>\n        )}\n      </PageHeader>\n      <Main>\n        <Suspense fallback={<Loading />}>\n          <RulesTable />\n        </Suspense>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'recommendations-list';\n\nexport default List;\n","import {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SystemsTable = lazy(() =>\n  import(\n    /* webpackChunkName: \"SystemsTable\" */ '../../PresentationalComponents/SystemsTable/SystemsTable'\n  )\n);\n\nconst List = () => {\n  const intl = useIntl();\n\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.systems.defaultMessage,\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.systems)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <Suspense fallback={<Loading />}>\n          <SystemsTable />\n        </Suspense>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'systems-list';\n\nexport default List;\n"],"names":["BuildExecReport","statsSystems","statsReports","topActiveRec","intl","calcPercent","value","total","Math","round","Number","severityPie","x","formatMessage","messages","y","total_risk","severityRows","Object","entries","map","key","TOTAL_RISK_LABEL","props","children","count","reverse","categoryPie","category","Availability","Performance","Security","Stability","categoryRows","rulesDesc","rule","style","fontWeight","description","summary","length","systems","risks","title","withHeader","rows","chartType","subTitle","data","colorSchema","withColumn","impacted_systems_count","variant","propTypes","PropTypes","isDisabled","useIntl","useState","loading","setLoading","dataFetch","Promise","API","STATS_SYSTEMS_FETCH_URL","STATS_REPORTS_FETCH_URL","RULES_FETCH_URL","limit","sort","impacting","all","report","buildExecReport","useMemo","groupName","label","asyncFunction","buttonProps","icon","className","component","isAriaDisabled","type","fileName","Date","toUTCString","replace","RulesTable","lazy","List","permsExport","usePermissions","PERMS","document","subnav","PageHeader","PageHeaderTitle","toLowerCase","isLoading","Tooltip","trigger","hasAccess","content","Download","Main","Suspense","fallback","Loading","displayName","SystemsTable"],"sourceRoot":""}