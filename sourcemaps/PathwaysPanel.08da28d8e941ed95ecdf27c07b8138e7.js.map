{"version":3,"file":"js/PathwaysPanel.3257aaefcc744e16714f.js","mappings":"2YA0BMA,EAAgB,WACpB,IAAMC,GAAOC,EAAAA,EAAAA,KACb,GAAgCC,EAAAA,EAAAA,UAC9BC,KAAKC,MAAMC,aAAaC,QAAQ,mCAAqC,SADvE,eAAOC,EAAP,KAAiBC,EAAjB,KAGA,GAKIC,EAAAA,EAAAA,IAAoB,CAAEC,MAAO,IALjC,IACEC,KAAAA,OADF,MACS,GADT,EAEEC,EAFF,EAEEA,UACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,QA2BF,OAAQF,EAyCN,kBAAC,IAAD,MAxCA,kBAAC,IAAD,CACEG,UAAS,wDACTC,GAAE,qCACFC,WAAYV,GAEZ,kBAAC,IAAD,CACEW,SAAU,WACRV,GAAaD,GACbF,aAAac,QAAQ,kCAAmCZ,IAE1Da,kBAAmB,CACjBJ,GAAI,yDACJ,aAAc,UACd,6EAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,aAAa,KAAKC,KAAK,MAC3BtB,EAAKuB,cAAcC,EAAAA,EAAAA,uBAI1B,kBAAC,IAAD,KACGX,EACC,kBAAC,IAAD,MACEF,MAAAA,GAAAA,EAAMc,QAAUX,EAClB,kBAAC,EAAAY,KAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,GAAI,IACxBlB,EAAKmB,KAAI,SAACC,GAAD,OACR,kBAAC,EAAAC,SAAD,CAAUC,IAAKF,EAAQG,MArDf,SAACH,GAAD,OAClB,kBAAC,IAAD,CAAMI,QAAM,EAACC,SAAO,EAACrB,UAAS,oCAC5B,kBAAC,IAAD,CAAUA,UAAS,QACjB,kBAAC,IAAD,CAAekB,IAAKF,EAAQG,KAAMG,UAAWN,EAAQO,aAAe,IACpE,kBAAC,EAAAC,KAAD,CAAMC,GAAE,UAAKT,EAAQG,OAClBlC,EAAKuB,cAAcC,EAAAA,EAAAA,yBAAmC,CACrDiB,QAASV,EAAQW,2BAIvB,kBAAC,IAAD,CAAU3B,UAAS,QAAWgB,EAAQY,aACtC,kBAAC,IAAD,CAAU5B,UAAS,QAChBgB,EAAQa,cAAgB,kBAAC,IAAD,CAAYC,KAAM,CAAEC,KAAM,cAAkB,KACpEC,EAAAA,EAAAA,GAAehB,EAAQiB,kBAE1B,kBAAC,IAAD,CAAYjC,UAAS,UACnB,kBAAC,EAAAwB,KAAD,CAAMC,GAAE,UAAKT,EAAQG,OAArB,UACMlC,EAAKuB,cAAcC,EAAAA,EAAAA,aADzB,KAEE,kBAAC,KAAD,SAmCkCyB,CAAYlB,QAI9C,kBAAC,IAAD,CACEmB,KAAM,OACNC,KAAMnD,EAAKuB,cAAcC,EAAAA,EAAAA,iBAUrCzB,EAAcqD,UAAY,CACxBrC,UAAWqC,IAAAA,QAGb","sources":["webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardExpandableContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { RebootRequired } from '../Common/Common';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n  const {\n    data = [],\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetPathwaysQuery({ limit: 3 });\n\n  const pathwayCard = (pathway) => (\n    <Card isFlat isPlain className={`ins-c-advisor__card--pathwaycard`}>\n      <CardBody className={`body`}>\n        <CategoryLabel key={pathway.name} labelList={pathway.categories} />{' '}\n        <Link to={`${pathway.name}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: pathway.impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className={`body`}>{pathway.description}</CardBody>\n      <CardBody className={`body`}>\n        {pathway.has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(pathway.reboot_required)}\n      </CardBody>\n      <CardFooter className={`footer`}>\n        <Link to={`${pathway.name}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n\n  return !isLoading ? (\n    <Card\n      className={`ins-c-advisor_card ins-c-advisor__card--pathwayspanel`}\n      id={`ins-c-advisor__card--pathwayspanel`}\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        {isFetching ? (\n          <Loading />\n        ) : data?.length || isError ? (\n          <Grid hasGutter md={4} sm={12}>\n            {data.map((pathway) => (\n              <GridItem key={pathway.name}>{pathwayCard(pathway)}</GridItem>\n            ))}\n          </Grid>\n        ) : (\n          <MessageState\n            icon={'none'}\n            text={intl.formatMessage(messages.noPathways)}\n          />\n        )}\n      </CardExpandableContent>\n    </Card>\n  ) : (\n    <Loading />\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["PathwaysPanel","intl","useIntl","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","useGetPathwaysQuery","limit","data","isLoading","isFetching","isError","className","id","isExpanded","onExpand","setItem","toggleButtonProps","headingLevel","size","formatMessage","messages","length","Grid","hasGutter","md","sm","map","pathway","GridItem","key","name","isFlat","isPlain","labelList","categories","Link","to","systems","impacted_systems_count","description","has_incident","rule","tags","RebootRequired","reboot_required","pathwayCard","icon","text","propTypes"],"sourceRoot":""}