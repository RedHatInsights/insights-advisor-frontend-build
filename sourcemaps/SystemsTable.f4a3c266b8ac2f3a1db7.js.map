{"version":3,"sources":["webpack:///./src/PresentationalComponents/Export/SystemsPdfBuild.js","webpack:///./src/PresentationalComponents/Export/SystemsPdf.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js"],"names":["styles","StyleSheet","bold","fontWeight","global_FontWeight_bold","link","color","global_link_Color","text","marginTop","global_spacer_md","nameColumn","width","header","fontSize","chart_global_Fill_Color_700","paddingLeft","c_table_m_compact_cell_PaddingLeft","paddingBottom","c_table_m_compact_cell_PaddingBottom","paddingTop","c_table_m_compact_cell_PaddingTop","tablePage","page","systems","intl","value","formatMessage","messages","style","textAlign","marginLeft","hitColumns","rows","map","system","Date","last_seen","toUTCString","split","date","month","year","time","sysDate","slice","join","key","system_uuid","src","BASE_URI","display_name","item","withHeader","propTypes","PropTypes","leadPage","systemsTotal","filters","tags","offset","limit","Object","entries","decodeURIComponent","title","SystemsPdf","useIntl","useState","loading","setLoading","selectedTags","useSelector","AdvisorStore","workloads","SID","dataFetch","options","length","workloadQueryBuilder","API","BASE_URL","data","firstPage","otherPages","reduce","resultArray","index","chunkIndex","Math","floor","push","pageSystems","useMemo","groupName","allPagesHaveTitle","label","asyncFunction","buttonProps","variant","component","className","isDisabled","reportName","type","fileName","replace","size","systemsCount","localFilters","dispatch","useDispatch","search","useLocation","filtersSystems","setFilters","AppActions","permsExport","usePermissions","PERMS","hasAccess","filterBuilding","setFilterBuilding","columns","transforms","sortable","wrappable","removeFilterParam","param","filter","undefined","hits","filterConfigItems","SFC","id","filterValues","onChange","event","values","includes","shift","addFilterParam","items","activeFiltersConfig","deleteTitle","sort","pruneFilters","onDelete","itemsToRemove","isAll","newFilter","urlParam","Array","isArray","String","chips","handleRefresh","refreshedFilters","urlBuilder","useEffect","combinedFitlers","paramsObject","paramParser","isNaN","Number","InventoryTable","hideFilters","all","name","initialLoading","autoRefresh","disableDefaultColumns","customFilters","advisorFilters","defaultColumns","lastSeenColumn","displayName","systemProfile","props","isStatic","createColumns","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","getRegistry","register","systemReducer","perPage","getEntities","_items","config","showTags","defaultGetEntities","per_page","orderBy","orderDirection","hostnameOrId","SYSTEMS_FETCH_URL","fetchedSystems","hasItems","fields","system_profile","results","Promise","resolve","mergeArraysByDiffKeys","total","meta","count","tableProps","isStickyHeader","TableVariant","isFullView","hasCheckbox","filterConfig","exportConfig","onSelect","_e","fileType","downloadReport","extraItems","role","filterFetchBuilder","tooltipText","fallback","Loading"],"mappings":"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","file":"js/SystemsTable.6cab1117bfc66af4ca3f.js","sourcesContent":["/* eslint-disable react/prop-types */\n\nimport {\n  Column,\n  Section,\n  Table,\n} from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\nimport { Link, StyleSheet, Text } from '@react-pdf/renderer';\n\nimport { BASE_URI } from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport c_table_m_compact_cell_PaddingBottom from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingBottom';\nimport c_table_m_compact_cell_PaddingLeft from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingLeft';\nimport c_table_m_compact_cell_PaddingTop from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingTop';\nimport chart_global_Fill_Color_700 from '@patternfly/react-tokens/dist/js/chart_global_Fill_Color_700';\nimport global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport messages from '../../Messages';\n\nconst styles = StyleSheet.create({\n  bold: { fontWeight: global_FontWeight_bold.value },\n  link: { color: global_link_Color.value },\n  text: { marginTop: global_spacer_md.value },\n  nameColumn: { width: '220px' },\n  header: {\n    fontSize: 9,\n    color: chart_global_Fill_Color_700.value,\n    paddingLeft: c_table_m_compact_cell_PaddingLeft.value,\n    paddingBottom: c_table_m_compact_cell_PaddingBottom.value,\n    paddingTop: c_table_m_compact_cell_PaddingTop.value,\n  },\n});\n\nexport const tablePage = ({ page, systems, intl }) => {\n  const header = [\n    { value: intl.formatMessage(messages.name), style: styles.nameColumn },\n    {\n      value: intl.formatMessage(messages.recommendations),\n      style: { width: '100px', textAlign: 'center' },\n    },\n    {\n      value: intl.formatMessage(messages.critical),\n      style: { width: '70px', textAlign: 'center' },\n    },\n    {\n      value: intl.formatMessage(messages.important),\n      style: { width: '70px', textAlign: 'center' },\n    },\n    {\n      value: intl.formatMessage(messages.moderate),\n      style: { width: '60px', textAlign: 'center' },\n    },\n    {\n      value: intl.formatMessage(messages.low),\n      style: { width: '90px', textAlign: 'center' },\n    },\n    {\n      value: intl.formatMessage(messages.lastSeen),\n      style: { marginLeft: '20px' },\n    },\n  ];\n  const hitColumns = [\n    'hits',\n    'critical_hits',\n    'important_hits',\n    'moderate_hits',\n    'low_hits',\n  ];\n  const headerBuilder = ({ value, style }) => (\n    <Text style={{ ...style, ...styles.header, ...styles.bold }}>{value}</Text>\n  );\n  const rowBuilder = ({ value, style }) => <Text style={style}>{value}</Text>;\n  const rows = [\n    ...systems.map((system) => {\n      const [, date, month, year, time] = new Date(system.last_seen)\n        .toUTCString()\n        .split(' ');\n      const sysDate = `${date} ${month} ${year}, ${time\n        .split(':')\n        .slice(0, 2)\n        .join(':')} UTC`;\n      return [\n        <Text key={system.system_uuid} style={styles.nameColumn}>\n          <Link\n            style={styles.link}\n            src={`${BASE_URI}/insights/advisor/systems/${system.system_uuid}/`}\n          >\n            {system.display_name}\n          </Link>\n        </Text>,\n        ...hitColumns.map((item) =>\n          rowBuilder({ style: { width: '10px' }, value: system[item] })\n        ),\n        <Text\n          key={system.last_seen}\n          style={{ width: '100px' }}\n        >{`${sysDate}`}</Text>,\n      ];\n    }),\n  ];\n\n  return (\n    <React.Fragment key={page}>\n      <Column>\n        <Table\n          withHeader\n          rows={[header.map((item) => headerBuilder(item)), ...rows]}\n        />\n      </Column>\n    </React.Fragment>\n  );\n};\n\ntablePage.propTypes = {\n  systems: PropTypes.object,\n  page: PropTypes.number,\n  intl: PropTypes.any,\n};\n\nexport const leadPage = ({ systemsTotal, systems, filters, tags, intl }) => {\n  delete filters.offset;\n  delete filters.limit;\n  return (\n    <React.Fragment\n      key={`${intl.formatMessage(\n        messages.insightsHeader\n      )}: ${intl.formatMessage(messages.systems)}`}\n    >\n      <Text key=\"sys-count\" style={styles.text}>\n        {intl.formatMessage(messages.sysTableCount, {\n          systems: (\n            <Text key=\"sys-count-count\" style={styles.bold}>\n              {intl.formatMessage(messages.execReportHeaderSystems, {\n                systems: systemsTotal,\n              })}\n              {systemsTotal > 1000 && intl.formatMessage(messages.dueTo)}\n            </Text>\n          ),\n        })}\n      </Text>\n      <Text key=\"sys-filters\" style={styles.text}>\n        {intl.formatMessage(messages.filtersApplied)}\n      </Text>\n      <Text key=\"sys-filters-values\" style={styles.bold}>\n        {Object.entries(filters).map((value) => (\n          <Text key={value}>{`${value[0]}: ${value[1]}     `}</Text>\n        ))}\n      </Text>\n      <Text key=\"sys-tags\" style={styles.text}>\n        {intl.formatMessage(messages.tagsApplied)}\n      </Text>\n      <Text key=\"sys-tags-values\" style={styles.bold}>\n        {tags ? decodeURIComponent(tags) : intl.formatMessage(messages.noTags)}\n      </Text>\n      <Section key=\"systems\" title=\"Systems\">\n        {tablePage({ systems, intl })}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nleadPage.propTypes = {\n  systems: PropTypes.object,\n  systemsTotal: PropTypes.number,\n  filters: PropTypes.object,\n  tags: PropTypes.array,\n  intl: PropTypes.any,\n};\n","import './_Export.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { leadPage, tablePage } from './SystemsPdfBuild';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst SystemsPdf = ({ filters }) => {\n  const intl = useIntl();\n  const [loading, setLoading] = useState(false);\n  const selectedTags = useSelector(\n    ({ AdvisorStore }) => AdvisorStore.selectedTags\n  );\n  const workloads = useSelector(({ AdvisorStore }) => AdvisorStore.workloads);\n  const SID = useSelector(({ AdvisorStore }) => AdvisorStore.SID);\n\n  const dataFetch = async () => {\n    setLoading(true);\n    let options = selectedTags.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    const systems = (\n      await API.get(\n        `${BASE_URL}/export/systems/`,\n        {},\n        { ...filters, ...options }\n      )\n    ).data;\n\n    const firstPage = leadPage({\n      systemsTotal: systems?.length,\n      systems: systems.slice(0, 18),\n      filters,\n      tags: selectedTags,\n      intl,\n    });\n\n    const otherPages = systems\n      .slice(18, 982)\n      .reduce((resultArray, item, index) => {\n        const chunkIndex = Math.floor(index / 31);\n        !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n        resultArray[chunkIndex].push(item);\n\n        return resultArray;\n      }, []);\n\n    setLoading(false);\n\n    return [\n      firstPage,\n      ...otherPages.map((pageSystems, index) =>\n        tablePage({ page: index, systems: pageSystems, intl })\n      ),\n    ];\n  };\n\n  return useMemo(() => {\n    return (\n      <DownloadButton\n        groupName={intl.formatMessage(messages.redHatInsights)}\n        allPagesHaveTitle={false}\n        label={\n          loading\n            ? intl.formatMessage(messages.loading)\n            : intl.formatMessage(messages.exportPdf)\n        }\n        asyncFunction={dataFetch}\n        buttonProps={{\n          variant: '',\n          component: 'button',\n          className: 'pf-c-dropdown__menu-item systemsPdfOverride',\n          ...(loading ? { isDisabled: true } : null),\n        }}\n        reportName={`${intl.formatMessage(messages.insightsHeader)}:`}\n        type={intl.formatMessage(messages.systems)}\n        fileName={`Advisor_systems--${new Date()\n          .toUTCString()\n          .replace(/ /g, '-')}.pdf`}\n        size={[841.89, 595.28]}\n      />\n    );\n  }, [loading]);\n};\n\nSystemsPdf.propTypes = {\n  filters: PropTypes.object,\n  systemsCount: PropTypes.number,\n};\n\nexport default SystemsPdf;\n","import './SystemsTable.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport {\n  PERMS,\n  SYSTEM_FILTER_CATEGORIES as SFC,\n  SYSTEMS_FETCH_URL,\n} from '../../AppConstants';\nimport React, { useEffect, useState } from 'react';\nimport { TableVariant, sortable, wrappable } from '@patternfly/react-table';\nimport {\n  filterFetchBuilder,\n  paramParser,\n  pruneFilters,\n  urlBuilder,\n  workloadQueryBuilder,\n} from '../Common/Tables';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport API from '../../Utilities/Api';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport Loading from '../Loading/Loading';\nimport SystemsPdf from '../Export/SystemsPdf';\nimport downloadReport from '../Common/DownloadHelper';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { mergeArraysByDiffKeys } from '../Common/Tables';\nimport messages from '../../Messages';\nimport { systemReducer } from '../../AppReducer';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst SystemsTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { search } = useLocation();\n  const filters = useSelector(\n    ({ AdvisorStore }) => AdvisorStore.filtersSystems\n  );\n  const selectedTags = useSelector(\n    ({ AdvisorStore }) => AdvisorStore.selectedTags\n  );\n  const workloads = useSelector(({ AdvisorStore }) => AdvisorStore.workloads);\n  const SID = useSelector(({ AdvisorStore }) => AdvisorStore.SID);\n  const setFilters = (filters) =>\n    dispatch(AppActions.setFiltersSystems(filters));\n\n  const permsExport = usePermissions('advisor', PERMS.export).hasAccess;\n  const [filterBuilding, setFilterBuilding] = useState(true);\n  const columns = [\n    {\n      title: intl.formatMessage(messages.numberRuleHits),\n      transforms: [sortable, wrappable],\n      key: 'hits',\n    },\n    {\n      title: intl.formatMessage(messages.critical),\n      transforms: [sortable, wrappable],\n      key: 'critical_hits',\n    },\n    {\n      title: intl.formatMessage(messages.important),\n      transforms: [sortable, wrappable],\n      key: 'important_hits',\n    },\n    {\n      title: intl.formatMessage(messages.moderate),\n      transforms: [sortable, wrappable],\n      key: 'moderate_hits',\n    },\n    {\n      title: intl.formatMessage(messages.low),\n      transforms: [sortable, wrappable],\n      key: 'low_hits',\n    },\n  ];\n\n  const removeFilterParam = (param) => {\n    const filter = { ...filters, offset: 0 };\n    delete filter[param];\n    param === 'hits' && filter.hits === undefined && (filter.hits = ['yes']);\n    setFilters(filter);\n  };\n\n  const addFilterParam = (param, values) => {\n    // remove 'yes' from the hits filter if the user chooses any other filters (its always the first item)\n    param === 'hits' &&\n      values.length > 1 &&\n      values.includes('yes') &&\n      values.shift();\n    values.length > 0\n      ? setFilters({ ...filters, offset: 0, ...{ [param]: values } })\n      : removeFilterParam(param);\n  };\n  const filterConfigItems = [\n    {\n      label: SFC.hits.title.toLowerCase(),\n      type: SFC.hits.type,\n      id: SFC.hits.urlParam,\n      value: `checkbox-${SFC.hits.urlParam}`,\n      filterValues: {\n        key: `${SFC.hits.urlParam}-filter`,\n        onChange: (event, values) => addFilterParam(SFC.hits.urlParam, values),\n        value: filters.hits,\n        items: SFC.hits.values,\n      },\n    },\n  ];\n\n  const buildFilterChips = () => {\n    const localFilters = { ...filters };\n    localFilters.hits &&\n      localFilters.hits.includes('yes') &&\n      delete localFilters.hits;\n    delete localFilters.sort;\n    delete localFilters.offset;\n    delete localFilters.limit;\n\n    return pruneFilters(localFilters, SFC);\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(),\n    onDelete: (event, itemsToRemove, isAll) => {\n      if (isAll) {\n        setFilters({\n          sort: filters.sort,\n          limit: filters.limit,\n          offset: filters.offset,\n          hits: ['yes'],\n        });\n      } else {\n        itemsToRemove.map((item) => {\n          const newFilter = {\n            [item.urlParam]: Array.isArray(filters[item.urlParam])\n              ? filters[item.urlParam].filter(\n                  (value) => String(value) !== String(item.chips[0].value)\n                )\n              : '',\n          };\n          newFilter[item.urlParam].length > 0\n            ? setFilters({ ...filters, ...newFilter })\n            : removeFilterParam(item.urlParam);\n        });\n      }\n    },\n  };\n\n  const handleRefresh = (options) => {\n    const { limit, offset, sort, display_name, hits } = options;\n    const refreshedFilters = {\n      limit,\n      offset,\n      sort,\n      ...(display_name && {\n        display_name,\n      }),\n      ...(hits && { hits }),\n    };\n    urlBuilder(refreshedFilters, selectedTags);\n  };\n\n  const createColumns = (defaultColumns) => {\n    let lastSeenColumn = defaultColumns.filter(({ key }) => key === 'updated');\n    let displayName = defaultColumns.filter(\n      ({ key }) => key === 'display_name'\n    );\n    let systemProfile = defaultColumns.filter(\n      ({ key }) => key === 'system_profile'\n    );\n\n    displayName = {\n      ...displayName[0],\n      transforms: [sortable, wrappable],\n      props: { isStatic: true },\n    };\n\n    lastSeenColumn = {\n      ...lastSeenColumn[0],\n      transforms: [sortable, wrappable],\n      props: { width: 20 },\n    };\n\n    systemProfile = {\n      ...systemProfile[0],\n      transforms: [wrappable],\n    };\n\n    return [displayName, systemProfile, ...columns, lastSeenColumn];\n  };\n\n  useEffect(() => {\n    let combinedFitlers;\n    if (search) {\n      const paramsObject = paramParser();\n      delete paramsObject.tags;\n      paramsObject.sort !== undefined &&\n        (paramsObject.sort = paramsObject.sort[0]);\n      paramsObject.display_name !== undefined &&\n        (paramsObject.display_name = paramsObject.display_name[0]);\n      paramsObject.hits === undefined && (paramsObject.hits = ['all']);\n      paramsObject.offset === undefined || isNaN(paramsObject.offset)\n        ? (paramsObject.offset = 0)\n        : (paramsObject.offset = Number(paramsObject.offset[0]));\n      paramsObject.limit === undefined || isNaN(paramsObject.limit)\n        ? (paramsObject.limit = 20)\n        : (paramsObject.limit = Number(paramsObject.limit[0]));\n      combinedFitlers = { ...filters, ...paramsObject };\n      setFilters(combinedFitlers);\n    } else if (\n      filters.limit === undefined ||\n      filters.offset === undefined ||\n      filters.hits === undefined\n    ) {\n      combinedFitlers = { ...filters, offset: 0, limit: 20, hits: ['all'] };\n      setFilters(combinedFitlers);\n    }\n    setFilterBuilding(false);\n    urlBuilder(combinedFitlers, selectedTags);\n  }, []);\n\n  return (\n    !filterBuilding && (\n      <InventoryTable\n        hideFilters={{ all: true, name: false }}\n        initialLoading\n        autoRefresh\n        disableDefaultColumns\n        customFilters={{\n          advisorFilters: filters,\n          selectedTags,\n          workloads,\n          SID,\n        }}\n        columns={(defaultColumns) => createColumns(defaultColumns)}\n        onLoad={({\n          mergeWithEntities,\n          INVENTORY_ACTION_TYPES,\n          mergeWithDetail,\n        }) => {\n          getRegistry().register({\n            ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n              page: Number(filters.offset / filters.limit + 1 || 1),\n              perPage: Number(filters.limit || 20),\n            }),\n            ...mergeWithDetail(),\n          });\n        }}\n        getEntities={async (_items, config, showTags, defaultGetEntities) => {\n          const {\n            per_page,\n            page,\n            orderBy,\n            orderDirection,\n            advisorFilters,\n            selectedTags,\n            workloads,\n            SID,\n          } = config;\n          const sort = `${orderDirection === 'ASC' ? '' : '-'}${\n            orderBy === 'updated' ? 'last_seen' : orderBy\n          }`;\n          let options = {\n            ...advisorFilters,\n            limit: per_page,\n            offset: page * per_page - per_page,\n            sort,\n            ...(config.filters.hostnameOrId && {\n              display_name: config?.filters?.hostnameOrId,\n            }),\n            ...(selectedTags.length && { tags: selectedTags }),\n          };\n\n          workloads &&\n            (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n          const fetchedSystems = (await API.get(SYSTEMS_FETCH_URL, {}, options))\n            ?.data;\n\n          handleRefresh(options);\n          const results = await defaultGetEntities(\n            fetchedSystems.data.map((system) => system.system_uuid),\n            {\n              page,\n              per_page,\n              hasItems: true,\n              fields: { system_profile: ['operating_system'] },\n            },\n            showTags\n          );\n\n          return Promise.resolve({\n            results: mergeArraysByDiffKeys(\n              fetchedSystems.data,\n              results.results\n            ),\n            total: fetchedSystems.meta.count,\n          });\n        }}\n        tableProps={{\n          isStickyHeader: true,\n          variant: TableVariant.compact,\n        }}\n        isFullView\n        hasCheckbox={false}\n        filterConfig={{ items: filterConfigItems }}\n        activeFiltersConfig={activeFiltersConfig}\n        exportConfig={{\n          onSelect: (_e, fileType) =>\n            downloadReport(\n              'systems',\n              fileType,\n              filters,\n              selectedTags,\n              workloads,\n              SID\n            ),\n          extraItems: [\n            <li key=\"download-pd\" role=\"menuitem\">\n              <SystemsPdf filters={{ ...filterFetchBuilder(filters) }} />\n            </li>,\n          ],\n          isDisabled: !permsExport,\n          tooltipText: permsExport\n            ? intl.formatMessage(messages.exportData)\n            : intl.formatMessage(messages.permsAction),\n        }}\n        fallback={Loading}\n      />\n    )\n  );\n};\n\nexport default SystemsTable;\n"],"sourceRoot":""}