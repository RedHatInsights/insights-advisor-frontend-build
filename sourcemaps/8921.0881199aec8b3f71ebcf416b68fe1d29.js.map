{"version":3,"file":"js/8921.c779bcddf7ff385f588a.js","mappings":"oyBAKA,IAAMA,EAAW,SAACC,GAChB,IAAMC,EAAgB,CACpBC,MAAM,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,QAGvE,iCAA2BN,EAA3B,aAA2CC,EAAcC,OAkD3D,QAlCoB,mCAAG,WACrBF,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,GAPqB,wFAWfA,EAXe,gBAYjBC,EAAkB,SAAXN,EAAoBK,GAzBXE,EAyBuCF,EAxB7C,CAACG,OAAOC,KAAKF,EAAI,KAAKG,OAAOH,GAExCI,KAAI,SAACC,GACJ,OAAOJ,OAAOK,OAAOD,GAClBD,KAAI,SAACG,GACJ,MAAwB,iBAAVA,EAAqBC,KAAKC,UAAUF,GAASA,KAE5DG,cAEJC,KAAK,OAGa,8BAcbC,GAAUjB,MAAAA,OAAA,EAAAA,EAAckB,SAAU,CAAEC,KAAMnB,GAC9CC,IACGgB,EAAU,EAAH,KAAQA,IAAYG,EAAAA,EAAAA,IAAqBnB,EAAWC,KAhB7C,UAkBTmB,EAAAA,EAAAA,IAAI,GAAD,OACJC,EAAAA,GADI,mBACe/B,EADf,YAEM,SAAXO,EAAoB,OAAS,OAE/B,GAJO,OAKFC,GAAYkB,IAvBJ,OAiBjBb,EAjBiB,OAyBfA,KAzBe,QA2BfmB,EAA2B,SAAXzB,EAAoBe,KAAKC,UAAUV,GAAQA,GAC/DoB,EAAAA,EAAAA,IAAaD,EAAejC,EAASC,GAAcO,GA5BhC,0GAbvB,IAAsBO,IAaC,qBAAH","sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js"],"sourcesContent":["import { BASE_URL } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nfunction objectsToCSV(arr) {\n  const array = [Object.keys(arr[0])].concat(arr);\n  return array\n    .map((row) => {\n      return Object.values(row)\n        .map((value) => {\n          return typeof value === 'string' ? JSON.stringify(value) : value;\n        })\n        .toString();\n    })\n    .join('\\n');\n}\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  overrideData\n) => {\n  try {\n    let data;\n    if (overrideData) {\n      data = format === 'json' ? overrideData : objectsToCSV(overrideData);\n    } else {\n      let options = selectedTags?.length && { tags: selectedTags };\n      workloads &&\n        (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n      data = (\n        await Get(\n          `${BASE_URL}/export/${exportTable}.${\n            format === 'json' ? 'json' : 'csv'\n          }`,\n          {},\n          { ...filters, ...options }\n        )\n      ).data;\n    }\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","format","filters","selectedTags","workloads","SID","overrideData","data","arr","Object","keys","concat","map","row","values","value","JSON","stringify","toString","join","options","length","tags","workloadQueryBuilder","Get","BASE_URL","formattedData","downloadFile"],"sourceRoot":""}