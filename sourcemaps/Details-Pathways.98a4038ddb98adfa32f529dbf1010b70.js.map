{"version":3,"file":"js/Details-Pathways.e66d02c813aa5b710b45.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport {\n  Resolution,\n  TotalRisk,\n} from '../../PresentationalComponents/Cards/Pathways';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"pageHeaderOverride\">\n            <Breadcrumbs\n              ouiaId=\"override\"\n              current={pathway.description || ''}\n            />\n            <CategoryLabel labelList={pathway.categories} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.description}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p>\n              {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n            </p>\n          </PageHeader>\n          <Main className=\"ins-c-advisor__pathway-detail__cards\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRisk {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <Resolution {...pathway} />\n              </GridItem>\n            </Grid>\n          </Main>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <Main>\n        <Tabs\n          className=\"advisor__background--global-100\"\n          mountOnEnter\n          unmountOnExit\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["RulesTable","lazy","intl","useIntl","pathwayName","useParams","id","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","recFilters","recState","sysFilters","sysState","options","length","tags","join","workloadQueryBuilder","useGetPathwayQuery","slug","data","pathway","isFetching","useState","activeTab","setActiveTab","useEffect","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","sort","impacting","updateSysFilters","className","ouiaId","current","description","labelList","categories","title","has_incident","rule","formatMessage","messages","date","Date","publish_date","type","hasGutter","sm","md","mountOnEnter","unmountOnExit","activeKey","onSelect","_e","tab","eventKey","T","Suspense","fallback","tableProps","canSelectAll","isStickyHeader"],"sourceRoot":""}