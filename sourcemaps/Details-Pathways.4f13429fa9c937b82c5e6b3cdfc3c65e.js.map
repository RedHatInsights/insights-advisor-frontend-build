{"version":3,"file":"js/Details-Pathways.2503234f5d7db3f5f255.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/Cards/TotalRiskCard.js","webpack:///./src/PresentationalComponents/Cards/ResolutionCard.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[3]}`,\n        navigate: `/${location[3]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/esm/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens/dist/js/global_secondary_color_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const RecommendationLevel = ({ recLvl, isCompact }) => {\n  const intl = useIntl();\n  const label = (text, recLvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${recLvl}%`}</Label>\n  );\n\n  if (recLvl >= 80) {\n    return label(intl.formatMessage(messages.high), recLvl, 'red', isCompact);\n  } else if (recLvl < 80 && recLvl >= 50) {\n    return label(\n      intl.formatMessage(messages.medium),\n      recLvl,\n      'orange',\n      isCompact\n    );\n  } else {\n    return label(intl.formatMessage(messages.low), recLvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\nRecommendationLevel.defaultProps = {\n  isCompact: true,\n};\n\nexport default RecommendationLevel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/esm/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const [setAck] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport React from 'react';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nexport const TotalRiskCard = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid hasGutter>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6} className=\"pf-u-font-size-sm\">\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const ResolutionCard = ({\n  name,\n  reboot_required,\n  resolution_risk,\n  recommendation_level,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row \">\n          <div className=\"halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-sm pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\" pf-u-pl-xl halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body pf-u-font-size-sm\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel recLvl={recommendation_level} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { TotalRiskCard } from '../../PresentationalComponents/Cards/TotalRiskCard';\nimport { ResolutionCard } from '../../PresentationalComponents/Cards/ResolutionCard';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n  const chrome = useChrome();\n  useEffect(() => {\n    pathway &&\n      !isFetching &&\n      chrome.updateDocumentTitle(\n        intl.formatMessage(messages.documentTitle, {\n          subnav: `${pathway.name} - ${messages.pathways.defaultMessage}`,\n        })\n      );\n  }, [chrome, intl, pathway, pathname, isFetching]);\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <section className=\"pf-u-p-lg\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRiskCard {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <ResolutionCard {...pathway} />\n              </GridItem>\n            </Grid>\n          </section>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <section className=\"pf-u-px-lg pf-u-pb-lg\">\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  showTags={true}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["Breadcrumbs","_ref","_useLocation$pathname","current","intl","useIntl","location","useLocation","pathname","split","_useState","useState","_useState2","_slicedToArray","items","setItems","skip","length","_useGetRecQuery","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","concat","formatMessage","messages","insightsHeader","navigate","description","React","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","loading","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","RebootRequired","reboot_required","className","PowerOffIcon","TextContent","Text","component","TextVariants","p","systemReboot","strong","str","status","is","isNot","QuestionTooltip","text","Tooltip","position","TooltipPosition","right","content","OutlinedQuestionCircleIcon","color","global_secondary_color_100","value","LabelIcon","icon","Label","variant","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","AutomationIcon","availability","LockIcon","security","CubeIcon","stability","PortIcon","performance","labels","Number","defaultProps","RecommendationLevel","recLvl","high","medium","low","props","RuleLabels","_rule$tags","rule","noMargin","tags","search","incidentTooltip","incident","rule_status","ruleIsDisabledTooltip","disabled","redhatDisabled","Card","CardBody","List","DisableRule","handleModalToggle","isModalOpen","host","hosts","afterFn","dispatch","useDispatch","notification","addNotification","justification","setJustificaton","_useState3","undefined","_useState4","singleSystem","setSingleSystem","_useSetAckMutation","useSetAckMutation","setAck","bulkHostActions","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","systems","Post","BASE_URL","rule_id","dismissable","timeout","recSuccessfullyDisabled","t0","error","stop","apply","arguments","disableRule","_ref3","_callee2","options","_context2","type","system_uuid","_objectSpread","unwrap","Modal","isOpen","onClose","actions","Button","onClick","save","cancel","disableRuleBody","Form","FormGroup","fieldId","Checkbox","isChecked","onChange","disableRuleForSystems","disableRuleSingleSystem","name","justificationNote","TextInput","onKeyDown","e","preventDefault","system","TotalRiskCard","cats","_cats$","impacted_systems_count","incident_count","categories","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","isFlat","isPlain","CardTitle","totalRiskPathway","Grid","hasGutter","GridItem","span","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","top","ChartAxis","dependentAxis","showGrid","ChartGroup","ChartBar","barWidth","style","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","thisPathway","category","cat","join","incidents","ResolutionCard","resolution_risk","recommendation_level","resolution","remediation","riskOfChange","InsightsLabel","RISK_OF_CHANGE_LABEL","risk","hideIcon","staticRemediationDesc","reclvl","RulesTable","lazy","pathwayName","useParams","selectedTags","useSelector","filters","workloads","SID","recFilters","_ref4","recState","sysFilters","_ref5","sysState","workloadQueryBuilder","_useGetPathwayQuery","useGetPathwayQuery","slug","_useGetPathwayQuery$d","pathway","includes","activeTab","setActiveTab","chrome","useChrome","updateDocumentTitle","documentTitle","subnav","pathways","defaultMessage","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","then","getElementById","scrollIntoView","behavior","Loading","PageHeader","PageHeaderTitle","has_incident","rulesDetailsModifieddate","date","DateFormat","Date","publish_date","sm","md","Tabs","activeKey","onSelect","_e","tab","Tab","eventKey","TabTitleText","recommendations","Suspense","fallback","Inventory","tableProps","canSelectAll","isStickyHeader","showTags"],"sourceRoot":""}