{"version":3,"file":"js/PathwaysPanel.1658406741857.f2543f0b9f896852374f.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js","webpack:///./src/PresentationalComponents/Cards/Pathways.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { CardContext } from './Card';\nexport const CardExpandableContent = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(CardContext.Consumer, null, ({ isExpanded }) => isExpanded ? (React.createElement(\"div\", Object.assign({ className: css(styles.cardExpandableContent, className) }, props), children)) : null));\n};\nCardExpandableContent.displayName = 'CardExpandableContent';\n//# sourceMappingURL=CardExpandableContent.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport const CardHeader = (_a) => {\n    var { children = null, className = '', id, onExpand, toggleButtonProps, isToggleRightAligned } = _a, props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\", \"isToggleRightAligned\"]);\n    return (React.createElement(CardContext.Consumer, null, ({ cardId }) => {\n        const cardHeaderToggle = (React.createElement(\"div\", { className: css(styles.cardHeaderToggle) },\n            React.createElement(Button, Object.assign({ variant: \"plain\", type: \"button\", onClick: evt => {\n                    onExpand(evt, cardId);\n                } }, toggleButtonProps),\n                React.createElement(\"span\", { className: css(styles.cardHeaderToggleIcon) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" })))));\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className), id: id }, props),\n            onExpand && !isToggleRightAligned && cardHeaderToggle,\n            children,\n            onExpand && isToggleRightAligned && cardHeaderToggle));\n    }));\n};\nCardHeader.displayName = 'CardHeader';\n//# sourceMappingURL=CardHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Title/title';\nimport { useOUIAProps } from '../../helpers';\nexport var TitleSizes;\n(function (TitleSizes) {\n    TitleSizes[\"md\"] = \"md\";\n    TitleSizes[\"lg\"] = \"lg\";\n    TitleSizes[\"xl\"] = \"xl\";\n    TitleSizes[\"2xl\"] = \"2xl\";\n    TitleSizes[\"3xl\"] = \"3xl\";\n    TitleSizes[\"4xl\"] = \"4xl\";\n})(TitleSizes || (TitleSizes = {}));\nvar headingLevelSizeMap;\n(function (headingLevelSizeMap) {\n    headingLevelSizeMap[\"h1\"] = \"2xl\";\n    headingLevelSizeMap[\"h2\"] = \"xl\";\n    headingLevelSizeMap[\"h3\"] = \"lg\";\n    headingLevelSizeMap[\"h4\"] = \"md\";\n    headingLevelSizeMap[\"h5\"] = \"md\";\n    headingLevelSizeMap[\"h6\"] = \"md\";\n})(headingLevelSizeMap || (headingLevelSizeMap = {}));\nexport const Title = (_a) => {\n    var { className = '', children = '', headingLevel: HeadingLevel, size = headingLevelSizeMap[HeadingLevel], ouiaId, ouiaSafe = true } = _a, props = __rest(_a, [\"className\", \"children\", \"headingLevel\", \"size\", \"ouiaId\", \"ouiaSafe\"]);\n    const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);\n    return (React.createElement(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(styles.title, size && styles.modifiers[size], className) }), children));\n};\nTitle.displayName = 'Title';\n//# sourceMappingURL=Title.js.map","/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport { Text } from '@patternfly/react-core';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardBody className=\"body\">\n        <Text className=\"pf-u-pb-sm pf-u-font-weight-bold\">{name}</Text>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/systems/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className=\"body\">{description}</CardBody>\n      <CardBody className=\"body\">\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className=\"footer\">\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className=\"body\">\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n          <CardBody className=\"body\">\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className=\"body\">\n            {intl.formatMessage(messages.staticRemediationDesc)}\n          </CardBody>\n          <CardBody className=\"body\">\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <CardBody className=\"body\">\n            <RecommendationLevel {...props} />\n          </CardBody>\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n","import AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CategoryLabel = ({ labelList, isCompact }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const label = (icon, text) => (\n    <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact={isCompact}>\n      {text}\n    </Label>\n  );\n  const labels = (id, isCompact) => {\n    if (id === 1) {\n      return label(\n        <AutomationIcon />,\n        intl.formatMessage(messages.availability)\n      );\n    }\n    if (id === 2) {\n      return label(\n        <LockIcon />,\n        intl.formatMessage(messages.security),\n        isCompact\n      );\n    }\n    if (id === 3) {\n      return label(\n        <CubeIcon />,\n        intl.formatMessage(messages.stability),\n        isCompact\n      );\n    }\n    if (id === 4) {\n      return label(\n        <PortIcon />,\n        intl.formatMessage(messages.performance),\n        isCompact\n      );\n    }\n  };\n  return (\n    <LabelGroup numLabels={1} isCompact={isCompact}>\n      {sortedFrequencyList.map((id) => labels(Number(id[0]), isCompact))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: false,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RecommendationLevel = (props) => {\n  const intl = useIntl();\n  const { recommendation_level: lvl, isCompact } = props;\n\n  const label = (text, lvl, color, isCompact) => (\n    <Label color={color} isCompact={isCompact}>{`${text} - ${lvl}%`}</Label>\n  );\n\n  if (lvl >= 80) {\n    return label(intl.formatMessage(messages.high), lvl, 'red', isCompact);\n  } else if (lvl < 80 && lvl >= 50) {\n    return label(intl.formatMessage(messages.medium), lvl, 'orange', isCompact);\n  } else {\n    return label(intl.formatMessage(messages.low), lvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\n\nexport default RecommendationLevel;\n","import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardExpandableContent,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PathwayCard } from '../Cards/Pathways';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n  const { data, isLoading, isFetching, isError } = useGetPathwaysQuery({\n    limit: 3,\n  });\n\n  return !isLoading ? (\n    <Card\n      className=\"adv-c-card adv-c-card-pathways-panel\"\n      id=\"adv-c-card-pathwayspanel\"\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        {isFetching ? (\n          <Loading />\n        ) : !isError && data.data?.length ? (\n          <Grid hasGutter md={4} sm={12}>\n            {data.data.map((pathway) => (\n              <GridItem key={pathway.name}>\n                <PathwayCard {...pathway} />\n              </GridItem>\n            ))}\n          </Grid>\n        ) : (\n          <MessageState\n            icon={'none'}\n            text={intl.formatMessage(messages.noPathways)}\n          />\n        )}\n      </CardExpandableContent>\n    </Card>\n  ) : (\n    <Loading />\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["CardExpandableContent","_a","children","className","props","__rest","isExpanded","Object","assign","css","displayName","CardHeader","id","onExpand","toggleButtonProps","isToggleRightAligned","cardId","cardHeaderToggle","variant","type","onClick","evt","TitleSizes","headingLevelSizeMap","Title","headingLevel","HeadingLevel","size","ouiaId","ouiaSafe","ouiaProps","PathwayCard","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","Text","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","barWidth","style","data","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","CategoryLabel","arr","isCompact","sortedFrequencyList","label","entries","reduce","acc","curr","sort","a","b","icon","Label","color","numLabels","Number","propTypes","PropTypes","defaultProps","RecommendationLevel","lvl","recommendation_level","PathwaysPanel","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","useGetPathwaysQuery","limit","isLoading","isFetching","isError","setItem","Grid","hasGutter","md","sm","pathway","GridItem"],"sourceRoot":""}