{"version":3,"file":"js/List.1651090219908.6559081e3da6f8f4ae6d.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/ExecutiveReport/Build.js","webpack:///./src/PresentationalComponents/ExecutiveReport/Download.js","webpack:///./src/PresentationalComponents/AppIntro/IntroBody.js","webpack:///./src/PresentationalComponents/AppIntro/AppIntro.js","webpack:///./src/SmartComponents/Recs/List.js","webpack:///./src/Utilities/Hooks.js","webpack:///./src/SmartComponents/Systems/List.js"],"sourcesContent":["import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import {\n  Chart,\n  Column,\n  InsightsLabel,\n  Panel,\n  PanelItem,\n  Paragraph,\n  Section,\n  Table,\n} from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { TOTAL_RISK_LABEL } from '../../AppConstants';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../Messages';\nimport { truncate } from 'lodash';\n\nconst BuildExecReport = ({\n  statsSystems,\n  statsReports,\n  topActiveRec,\n  intl,\n}) => {\n  const calcPercent = (value, total) =>\n    Math.round(Number((value / total) * 100));\n  const severityPie = [\n    {\n      x: intl.formatMessage(messages.critical),\n      y: calcPercent(statsReports.total_risk[4], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.important),\n      y: calcPercent(statsReports.total_risk[3], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.moderate),\n      y: calcPercent(statsReports.total_risk[2], statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.low),\n      y: calcPercent(statsReports.total_risk[1], statsReports.total),\n    },\n  ];\n  const severityRows = [\n    [\n      intl.formatMessage(messages.severity),\n      intl.formatMessage(messages.poundOfRecs),\n    ],\n    ...Object.entries(statsReports.total_risk)\n      .map(([key, value]) => [\n        TOTAL_RISK_LABEL[key].props.children,\n        intl.formatMessage(messages.recNumAndPercentage, {\n          count: value,\n          total: calcPercent(value, statsReports.total),\n        }),\n      ])\n      .reverse(),\n  ];\n\n  const categoryPie = [\n    {\n      x: intl.formatMessage(messages.availability),\n      y: calcPercent(statsReports.category.Availability, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.performance),\n      y: calcPercent(statsReports.category.Performance, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.security),\n      y: calcPercent(statsReports.category.Security, statsReports.total),\n    },\n    {\n      x: intl.formatMessage(messages.stability),\n      y: calcPercent(statsReports.category.Stability, statsReports.total),\n    },\n  ];\n  const categoryRows = [\n    [\n      intl.formatMessage(messages.category),\n      intl.formatMessage(messages.poundOfRecs),\n    ],\n    ...Object.entries(statsReports.category).map(([key, value]) => [\n      key,\n      intl.formatMessage(messages.recNumAndPercentage, {\n        count: value,\n        total: calcPercent(value, statsReports.total),\n      }),\n    ]),\n  ];\n\n  const rulesDesc = (rule) => (\n    <Text>\n      <Text style={{ fontWeight: 700 }}> {rule.description}</Text>&nbsp;\n      {truncate(rule.summary, { length: 280 })}\n    </Text>\n  );\n\n  return (\n    <React.Fragment key={intl.formatMessage(messages.insightsHeader)}>\n      <Paragraph>\n        {intl.formatMessage(messages.execReportHeader, {\n          systems: (\n            <Text style={{ fontWeight: 700 }}>\n              {intl.formatMessage(messages.execReportHeaderSystems, {\n                systems: statsSystems.total,\n              })}\n            </Text>\n          ),\n          risks: (\n            <Text style={{ fontWeight: 700 }}>\n              {' '}\n              {intl.formatMessage(messages.execReportHeaderRisks, {\n                risks: statsReports.total,\n              })}\n            </Text>\n          ),\n        })}\n      </Paragraph>\n      <Section title={intl.formatMessage(messages.severityHeader)}>\n        <Column>\n          <Table withHeader rows={severityRows} />\n        </Column>\n        <Column>\n          <Chart\n            chartType=\"pie\"\n            subTitle={intl.formatMessage(messages.severityHeader)}\n            title=\"100\"\n            data={severityPie}\n            colorSchema={'multi'}\n          />\n        </Column>\n      </Section>\n      <Section title={intl.formatMessage(messages.categoryHeader)}>\n        <Column>\n          <Table withHeader rows={categoryRows} />\n        </Column>\n        <Column>\n          <Chart\n            chartType=\"pie\"\n            subTitle={intl.formatMessage(messages.categoryHeader)}\n            title=\"100\"\n            data={categoryPie}\n          />\n        </Column>\n      </Section>\n      <Section\n        title={intl.formatMessage(messages.top3RulesHeader)}\n        withColumn={false}\n      >\n        {topActiveRec.data.map((rule, key) => (\n          <Panel key={key} description={rulesDesc(rule)}>\n            <PanelItem\n              title={intl.formatMessage(messages.systemsExposed)}\n            >{`${rule.impacted_systems_count}`}</PanelItem>\n            <PanelItem title={intl.formatMessage(messages.totalRisk)}>\n              <InsightsLabel variant={rule.total_risk} isCompact />\n            </PanelItem>\n          </Panel>\n        ))}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nBuildExecReport.propTypes = {\n  statsSystems: PropTypes.object,\n  statsReports: PropTypes.object,\n  topActiveRec: PropTypes.object,\n  intl: PropTypes.any,\n};\n\nexport default BuildExecReport;\n","import './_Download.scss';\n\nimport {\n  RULES_FETCH_URL,\n  STATS_REPORTS_FETCH_URL,\n  STATS_SYSTEMS_FETCH_URL,\n  exportNotifications,\n} from '../../AppConstants';\nimport React, { useMemo, useState } from 'react';\n\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator/dist/esm/index';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport ExportIcon from '@patternfly/react-icons/dist/js/icons/export-icon';\nimport { Get } from '../../Utilities/Api';\nimport buildExecReport from './Build';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nconst DownloadExecReport = ({ isDisabled }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  const dataFetch = async () => {\n    setLoading(true);\n    dispatch(addNotification(exportNotifications.pending));\n\n    try {\n      const [statsSystems, statsReports, topActiveRec] = await Promise.all([\n        (await Get(STATS_SYSTEMS_FETCH_URL)).data,\n        (await Get(STATS_REPORTS_FETCH_URL)).data,\n        (\n          await Get(\n            RULES_FETCH_URL,\n            {},\n            { limit: 3, sort: '-total_risk,-impacted_count', impacting: true }\n          )\n        ).data,\n      ]);\n\n      const report = buildExecReport({\n        statsReports,\n        statsSystems,\n        topActiveRec,\n        intl,\n      });\n      setLoading(false);\n      dispatch(addNotification(exportNotifications.success));\n\n      return [report];\n    } catch (e) {\n      setLoading(false);\n      dispatch(addNotification(exportNotifications.error));\n\n      return [];\n    }\n  };\n\n  return useMemo(() => {\n    return (\n      <DownloadButton\n        groupName={intl.formatMessage(messages.redHatInsights)}\n        label={\n          loading\n            ? intl.formatMessage(messages.loading)\n            : intl.formatMessage(messages.downloadExecutiveLabel)\n        }\n        asyncFunction={dataFetch}\n        buttonProps={{\n          variant: 'link',\n          icon: <ExportIcon className=\"iconOverride\" />,\n          component: 'a',\n          className: 'downloadButtonOverride',\n          isAriaDisabled: isDisabled,\n          ...(loading ? { isDisabled: true } : null),\n        }}\n        type={intl.formatMessage(messages.insightsHeader)}\n        fileName={`Advisor-Executive-Report--${new Date()\n          .toUTCString()\n          .replace(/ /g, '-')}.pdf`}\n      />\n    );\n  }, [loading]);\n};\n\nexport default DownloadExecReport;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { linksForAppIntro } from '../../AppConstants';\nimport { WrenchIcon, SecurityIcon, TrendUpIcon } from '@patternfly/react-icons';\nimport {\n  Grid,\n  GridItem,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  List,\n  ListItem,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\n\nconst IntroCard = ({ title, Icon, appList }) => {\n  return (\n    <Card\n      id={`id-${title}`}\n      isCompact\n      style={{ 'background-color': 'var(--pf-global--palette--black-200)' }}\n    >\n      <CardTitle>\n        <Flex flex={{ default: 'inlineFlex' }} style={{ flexWrap: 'nowrap' }}>\n          <FlexItem>\n            <Icon />\n          </FlexItem>\n          <FlexItem isFilled>{title}</FlexItem>\n        </Flex>\n      </CardTitle>\n      <CardBody>\n        <List isPlain>\n          {appList.map((app) => (\n            <ListItem key={app.title}>\n              <Button variant=\"link\" component=\"a\" isInline href={app.link}>\n                {app.title}\n              </Button>{' '}\n            </ListItem>\n          ))}\n        </List>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst IntroBody = ({ isPreProduction }) => {\n  const intl = useIntl();\n  return (\n    <Grid hasGutter>\n      <GridItem>{intl.formatMessage(messages.introLearnMoreButton)}</GridItem>\n      <GridItem>\n        <Button\n          className={'advisor_pendo_intro'}\n          id={'advisor_pendo_intro'}\n          ouiaId={'advisor_pendo_intro'}\n        >\n          {intl.formatMessage(messages.introTakeTour)}\n        </Button>\n      </GridItem>\n      {!isPreProduction && (\n        <>\n          <GridItem>\n            <IntroCard\n              title={intl.formatMessage(messages.introLinkOperationInsights)}\n              Icon={WrenchIcon}\n              appList={linksForAppIntro.operationInsights}\n            />\n          </GridItem>\n          <GridItem>\n            <IntroCard\n              title={intl.formatMessage(messages.introLinkSecurityInsights)}\n              Icon={SecurityIcon}\n              appList={linksForAppIntro.securityInsights}\n            />\n          </GridItem>\n          <GridItem>\n            <IntroCard\n              title={intl.formatMessage(messages.introLinkBusinessInsights)}\n              Icon={TrendUpIcon}\n              appList={linksForAppIntro.businessInsights}\n            />\n          </GridItem>\n        </>\n      )}\n    </Grid>\n  );\n};\n\nIntroCard.propTypes = {\n  title: PropTypes.string,\n  Icon: PropTypes.element,\n  appList: PropTypes.array,\n};\n\nIntroBody.propTypes = {\n  isPreProduction: PropTypes.bool,\n};\n\nexport default IntroBody;\n","import React from 'react';\nimport {\n  Button,\n  Label,\n  Popover,\n  PopoverPosition,\n} from '@patternfly/react-core';\nimport IntroBody from './IntroBody';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst AppIntro = () => {\n  const intl = useIntl();\n  const [show, setShow] = React.useState(false);\n\n  const HeaderContent = () => (\n    <div>{intl.formatMessage(messages.introExploreInsights)}</div>\n  );\n\n  return (\n    <Popover\n      aria-label=\"Advisor intro wizard\"\n      position={PopoverPosition.bottomEnd}\n      hideOnOutsideClick={false}\n      isVisible={show}\n      shouldClose={setShow}\n      shouldOpen={setShow}\n      enableFlip={true}\n      appendTo={() => document.body}\n      headerContent={<HeaderContent />}\n      bodyContent={<IntroBody isPreProduction />}\n    >\n      <Button variant=\"link\">\n        <Label color=\"blue\">{intl.formatMessage(messages.introTakeTour)}</Label>\n      </Button>\n    </Popover>\n  );\n};\n\nexport default AppIntro;\n","import './List.scss';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useState } from 'react';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport DownloadExecReport from '../../PresentationalComponents/ExecutiveReport/Download';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PERMS, featureFlags } from '../../AppConstants';\nimport { QuestionTooltip } from '../../PresentationalComponents/Common/Common';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { GridItem, Grid } from '@patternfly/react-core';\nimport AppIntro from '../../PresentationalComponents/AppIntro/AppIntro';\nimport { useFeatureFlag } from '../../Utilities/Hooks';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\nconst PathwaysTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'PathwaysTable' */ '../../PresentationalComponents/PathwaysTable/PathwaysTable'\n  )\n);\nconst PathwaysPanel = lazy(() =>\n  import(\n    /* webpackChunkName: 'PathwaysPanel' */ '../../PresentationalComponents/PathwaysPanel/PathwaysPanel'\n  )\n);\n\nconst List = () => {\n  const intl = useIntl();\n  const { pathname } = useLocation();\n  const history = useHistory();\n  const permsExport = usePermissions('advisor', PERMS.export);\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.recommendations.defaultMessage,\n  });\n  const [activeTab, setActiveTab] = useState(\n    pathname === '/recommendations/pathways' ? 1 : 0\n  );\n  const changeTab = (tab) => {\n    setActiveTab(tab);\n    history.push(tab === 1 ? '/recommendations/pathways' : '/recommendations');\n  };\n\n  const isAppTourEnabled = useFeatureFlag(featureFlags.appTour);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"adv-c-page-recommendations__header\">\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.recommendations)\n            .toLowerCase()}`}\n        />\n        {!permsExport.isLoading && (\n          <Grid className={'pageHeaderElementsContainer'}>\n            <GridItem span={isAppTourEnabled ? 9 : 12}>\n              <Tooltip\n                trigger={!permsExport.hasAccess ? 'mouseenter' : ''}\n                content={intl.formatMessage(messages.permsAction)}\n              >\n                <DownloadExecReport isDisabled={!permsExport.hasAccess} />\n              </Tooltip>\n            </GridItem>\n            {isAppTourEnabled ? (\n              <GridItem span={3}>\n                <AppIntro />\n              </GridItem>\n            ) : null}\n          </Grid>\n        )}\n      </PageHeader>\n      <Main>\n        {insights.chrome.isBeta() ? (\n          <>\n            <Suspense fallback={<Loading />}>\n              <PathwaysPanel />\n            </Suspense>\n            <Tabs\n              className=\"adv__background--global-100\"\n              mountOnEnter\n              unmountOnExit\n              activeKey={activeTab}\n              onSelect={(_e, tab) => changeTab(tab)}\n            >\n              <Tab\n                eventKey={0}\n                title={\n                  <TabTitleText>\n                    {intl.formatMessage(messages.recommendations)}\n                  </TabTitleText>\n                }\n              >\n                <Suspense fallback={<Loading />}>\n                  <RulesTable />\n                </Suspense>\n              </Tab>\n              <Tab\n                eventKey={1}\n                title={\n                  <TabTitleText>\n                    {intl.formatMessage(messages.pathways)}{' '}\n                    {QuestionTooltip(\n                      intl.formatMessage(messages.recommendedPathways)\n                    )}\n                  </TabTitleText>\n                }\n              >\n                <Suspense fallback={<Loading />}>\n                  <PathwaysTable />\n                </Suspense>\n              </Tab>\n            </Tabs>\n          </>\n        ) : (\n          <Suspense fallback={<Loading />}>\n            <RulesTable />\n          </Suspense>\n        )}\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'recommendations-list';\n\nexport default List;\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport const useFeatureFlag = (flag) => {\n  const { flagsReady } = useFlagsStatus();\n  const isFlagEnabled = useFlag(flag);\n\n  return flagsReady ? isFlagEnabled : false;\n};\n","import {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SystemsTable = lazy(() =>\n  import(\n    /* webpackChunkName: \"SystemsTable\" */ '../../PresentationalComponents/SystemsTable/SystemsTable'\n  )\n);\n\nconst List = () => {\n  const intl = useIntl();\n\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.systems.defaultMessage,\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.systems)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <Suspense fallback={<Loading />}>\n          <SystemsTable />\n        </Suspense>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'systems-list';\n\nexport default List;\n"],"names":["cache","createIntlCache","locale","navigator","language","slice","intl","createIntl","onError","console","log","RebootRequired","reboot_required","className","TextContent","Text","component","TextVariants","formatMessage","messages","strong","str","status","QuestionTooltip","text","key","position","TooltipPosition","content","aria-label","color","global_secondary_color_100","BuildExecReport","statsSystems","statsReports","topActiveRec","calcPercent","value","total","Math","round","Number","severityPie","x","y","total_risk","severityRows","Object","entries","map","TOTAL_RISK_LABEL","props","children","count","reverse","categoryPie","category","Availability","Performance","Security","Stability","categoryRows","rulesDesc","rule","style","fontWeight","description","summary","length","systems","risks","title","withHeader","rows","chartType","subTitle","data","colorSchema","withColumn","impacted_systems_count","variant","isCompact","propTypes","PropTypes","isDisabled","useIntl","dispatch","useDispatch","useState","loading","setLoading","dataFetch","addNotification","exportNotifications","Promise","Get","STATS_SYSTEMS_FETCH_URL","STATS_REPORTS_FETCH_URL","RULES_FETCH_URL","limit","sort","impacting","all","report","buildExecReport","useMemo","groupName","label","asyncFunction","buttonProps","icon","isAriaDisabled","type","fileName","Date","toUTCString","replace","IntroCard","Icon","appList","Card","id","CardTitle","Flex","flex","default","flexWrap","FlexItem","isFilled","CardBody","List","isPlain","app","ListItem","Button","isInline","href","link","IntroBody","isPreProduction","Grid","hasGutter","GridItem","ouiaId","WrenchIcon","linksForAppIntro","SecurityIcon","TrendUpIcon","React","show","setShow","HeaderContent","Popover","PopoverPosition","hideOnOutsideClick","isVisible","shouldClose","shouldOpen","enableFlip","appendTo","document","body","headerContent","bodyContent","Label","RulesTable","lazy","PathwaysTable","PathwaysPanel","pathname","useLocation","history","useHistory","permsExport","usePermissions","PERMS","subnav","flag","flagsReady","isFlagEnabled","activeTab","setActiveTab","isAppTourEnabled","featureFlags","useFlagsStatus","useFlag","PageHeader","PageHeaderTitle","toLowerCase","isLoading","span","Tooltip","trigger","hasAccess","Download","Main","insights","chrome","isBeta","Suspense","fallback","Loading","Tabs","mountOnEnter","unmountOnExit","activeKey","onSelect","_e","tab","push","changeTab","Tab","eventKey","TabTitleText","T","displayName","SystemsTable"],"sourceRoot":""}