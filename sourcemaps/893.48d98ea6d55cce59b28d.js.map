{"version":3,"file":"js/893.b6897ae8adb32c2e83b3.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/Modals/ViewHostAcks.js"],"sourcesContent":["import * as AppActions from '../../Store/AppActions';\n\nimport React, { useState } from 'react';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const setAck = (data) => dispatch(AppActions.setAck(data));\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await API.post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabledForSystem),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options);\n        singleSystem\n          ? notification({\n              variant: 'success',\n              timeout: true,\n              dismissable: true,\n              title: intl.formatMessage(\n                messages.recSuccessfullyDisabledForSystem\n              ),\n            })\n          : notification({\n              variant: 'success',\n              timeout: true,\n              dismissable: true,\n              title: intl.formatMessage(messages.recSuccessfullyDisabled),\n            });\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { fetchHostAcks, setAck } from '../../Store/AppActions';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { List } from 'react-content-loader';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport OutlinedBellIcon from '@patternfly/react-icons/dist/js/icons/outlined-bell-icon';\nimport PropTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst ViewHostAcks = ({\n  fetchHostAcks,\n  hostAcksFetchStatus,\n  handleModalToggle,\n  intl,\n  isModalOpen,\n  hostAcks,\n  rule,\n  afterFn,\n}) => {\n  const columns = [\n    intl.formatMessage(messages.systemName),\n    intl.formatMessage(messages.justificationNote),\n    intl.formatMessage(messages.dateDisabled),\n    '',\n  ];\n  const [rows, setRows] = useState([]);\n  const [unclean, setUnclean] = useState(false);\n\n  const deleteAck = async (host) => {\n    try {\n      await API.delete(`${BASE_URL}/hostack/${host.id}/`);\n      fetchHostAcks({ rule_id: rule.rule_id, limit: rule.hosts_acked_count });\n      setUnclean(true);\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (hostAcks.data) {\n      const rows = hostAcks.data\n        .map((item) => ({\n          cells: [\n            item.display_name || item.system_uuid,\n            item.justification || intl.formatMessage(messages.none),\n            {\n              title: (\n                <DateFormat date={new Date(item.updated_at)} type=\"onlyDate\" />\n              ),\n            },\n            {\n              title: (\n                <Button\n                  key={item.system_uuid}\n                  isInline\n                  variant=\"link\"\n                  onClick={() => deleteAck(item)}\n                >\n                  <OutlinedBellIcon size=\"sm\" /> &nbsp;{' '}\n                  {intl.formatMessage(messages.enable)}\n                </Button>\n              ),\n            },\n          ],\n        }))\n        .asMutable();\n\n      if (!rows.length) {\n        afterFn();\n        handleModalToggle(false);\n      }\n\n      setRows(rows);\n    }\n  }, [hostAcks]);\n\n  useEffect(() => {\n    fetchHostAcks({ rule_id: rule.rule_id, limit: rule.hosts_acked_count });\n  }, [fetchHostAcks, rule.hosts_acked_count, rule.rule_id]);\n\n  return (\n    <Modal\n      width={'50%'}\n      title={intl.formatMessage(messages.hostAckModalTitle)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        unclean && afterFn();\n        handleModalToggle(false);\n      }}\n    >\n      {hostAcksFetchStatus === 'fulfilled' && (\n        <Table aria-label=\"host-ack-table\" rows={rows} cells={columns}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n      {hostAcksFetchStatus !== 'fulfilled' && (\n        <Table\n          aria-label=\"host-ack-table\"\n          rows={[\n            {\n              cells: [{ props: { colSpan: 3 }, title: <List /> }],\n            },\n          ]}\n          cells={columns}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </Modal>\n  );\n};\n\nViewHostAcks.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleModalToggle: PropTypes.func,\n  intl: PropTypes.any,\n  rule: PropTypes.object,\n  fetchHostAcks: PropTypes.func,\n  hostAcks: PropTypes.object,\n  hostAcksFetchStatus: PropTypes.string,\n  addNotification: PropTypes.func,\n  afterFn: PropTypes.func,\n};\n\nViewHostAcks.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  rule: {},\n  afterFn: () => undefined,\n};\n\nconst mapStateToProps = ({ AdvisorStore, ownProps }) => ({\n  hostAcks: AdvisorStore.hostAcks,\n  hostAcksFetchStatus: AdvisorStore.hostAcksFetchStatus,\n  ...ownProps,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAck: (data) => dispatch(setAck(data)),\n  fetchHostAcks: (data) => dispatch(fetchHostAcks(data)),\n  addNotification: (data) => dispatch(addNotification(data)),\n});\n\nexport default injectIntl(\n  connect(mapStateToProps, mapDispatchToProps)(ViewHostAcks)\n);\n"],"names":["DisableRule","handleModalToggle","isModalOpen","host","hosts","rule","afterFn","intl","useIntl","dispatch","useDispatch","notification","data","addNotification","useState","justification","setJustificaton","undefined","length","singleSystem","setSingleSystem","bulkHostActions","systems","API","BASE_URL","rule_id","variant","dismissable","timeout","title","formatMessage","messages","description","disableRule","rule_status","options","type","system_uuid","id","AppActions","isOpen","onClose","actions","Button","key","onClick","ouiaId","fieldId","isChecked","onChange","label","name","aria-describedby","value","text","onKeyDown","e","preventDefault","propTypes","PropTypes","defaultProps","system","ViewHostAcks","fetchHostAcks","hostAcksFetchStatus","hostAcks","columns","rows","setRows","unclean","setUnclean","deleteAck","limit","hosts_acked_count","useEffect","map","item","cells","display_name","date","Date","updated_at","isInline","size","asMutable","width","Table","aria-label","TableHeader","TableBody","props","colSpan","injectIntl","connect","AdvisorStore","ownProps","setAck"],"sourceRoot":""}