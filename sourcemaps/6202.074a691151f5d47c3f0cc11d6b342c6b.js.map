{"version":3,"file":"js/6202.03f7f6637a14f1b07b3e.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Cards/Pathways.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardBody className={`body`}>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className={`body`}>{description}</CardBody>\n      <CardBody className={`body`}>\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className={`footer`}>\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1 ? categories.map((cat) => cat.name).join(', ') : cats.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className={`body`}>\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                height={300}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 35,\n                  right: 20,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { description, reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className={`body`}>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n          <CardBody className={`body`}>\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className={`body`}>{description}</CardBody>\n          <CardBody className={`body`}>\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <RecommendationLevel {...props} />\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n"],"names":["PathwayCard","props","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","className","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","style","data","fill","x","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","headingLevel","size"],"sourceRoot":""}