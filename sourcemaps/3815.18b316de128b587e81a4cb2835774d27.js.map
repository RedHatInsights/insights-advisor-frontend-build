{"version":3,"file":"js/3815.2503234f5d7db3f5f255.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/SmartComponents/SystemAdvisor/EmptyStates.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisorAssets.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js"],"sourcesContent":["import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch,\n  display_name\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        {\n          ...filters,\n          ...options,\n          ...(display_name && { display_name: display_name }),\n        }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport ChartSpikeIcon from '@patternfly/react-icons/dist/esm/icons/chartSpike-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport {\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PropTypes from 'prop-types';\n\nexport const NoMatchingRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      title=\"No matching recommendations found\"\n      text={`To continue, edit your filter settings and search again.`}\n    />\n  </Bullseye>\n);\n\nexport const NoRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      icon={CheckIcon}\n      iconClass=\"ins-c-insights__check\"\n      title=\"No recommendations\"\n      text={`No known recommendations affect this system`}\n    />\n  </Bullseye>\n);\n\nexport const InsightsNotEnabled = () => (\n  <MessageState\n    iconClass=\"chartSpikeIconColor\"\n    icon={ChartSpikeIcon}\n    title=\"Get started with Red Hat Insights\"\n    text={\n      <Bullseye>\n        <Stack hasGutter>\n          <StackItem>\n            1. Install the client on the RHEL system.\n            <ClipboardCopy>yum install insights-client</ClipboardCopy>\n          </StackItem>\n          <StackItem>\n            2. Register the system to Red Hat Insights.\n            <ClipboardCopy>insights-client --register</ClipboardCopy>\n          </StackItem>\n        </Stack>\n      </Bullseye>\n    }\n  >\n    <Button\n      component=\"a\"\n      href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n      target=\"_blank\"\n      variant=\"primary\"\n    >\n      Getting started documentation\n    </Button>\n  </MessageState>\n);\n\nexport const InventoryReportFetchFailed = ({ entity }) => (\n  <Bullseye>\n    <MessageState\n      icon={TimesCircleIcon}\n      title=\"Error getting recommendations\"\n      text={\n        entity\n          ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n          : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n      }\n    />\n  </Bullseye>\n);\n\nInventoryReportFetchFailed.propTypes = {\n  entity: PropTypes.object,\n};\n","import './SystemAdvisor.scss';\nimport React, { useCallback } from 'react';\nimport { fitContent, sortable } from '@patternfly/react-table';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport AnsibeTowerIcon from '@patternfly/react-icons/dist/esm/icons/ansibeTower-icon';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components/ReportDetails';\nimport {\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  NoMatchingRecommendations,\n  NoRecommendations,\n  InsightsNotEnabled,\n  InventoryReportFetchFailed,\n} from './EmptyStates';\nimport { useLocation } from 'react-router-dom';\n\nimport messages from '../../Messages';\n\nexport const getColumns = (intl) => [\n  {\n    title: intl.formatMessage(messages.topicAddEditDescription),\n    transforms: [sortable],\n  },\n  {\n    title: intl.formatMessage(messages.modified),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.firstImpacted),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.totalRisk),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.remediation),\n    transforms: [sortable, fitContent],\n  },\n];\n\nexport const getFilters = (\n  filters,\n  searchValue,\n  onInputChange,\n  onFilterChange\n) => [\n  {\n    label: 'description',\n    filterValues: {\n      key: 'text-filter',\n      onChange: (_e, value) => onInputChange(value),\n      value: searchValue,\n    },\n  },\n  {\n    label: FC.total_risk.title,\n    type: FC.total_risk.type,\n    id: FC.total_risk.urlParam,\n    value: `checkbox-${FC.total_risk.urlParam}`,\n    filterValues: {\n      key: `${FC.total_risk.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.total_risk.urlParam, values),\n      value: filters.total_risk,\n      items: FC.total_risk.values,\n    },\n  },\n  {\n    label: FC.category.title,\n    type: FC.category.type,\n    id: FC.category.urlParam,\n    value: `checkbox-${FC.category.urlParam}`,\n    filterValues: {\n      key: `${FC.category.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n      value: filters.category,\n      items: FC.category.values,\n    },\n  },\n  {\n    label: FC.has_playbook.title,\n    type: FC.has_playbook.type,\n    id: FC.has_playbook.urlParam,\n    value: `checkbox-${FC.has_playbook.urlParam}`,\n    filterValues: {\n      key: `${FC.has_playbook.urlParam}-filter`,\n      onChange: (_e, values) =>\n        onFilterChange(FC.has_playbook.urlParam, values),\n      value: filters.has_playbook,\n      items: FC.has_playbook.values,\n    },\n  },\n];\n\nexport const useProcessRemediation = (inventoryId) =>\n  useCallback(\n    (selectedAnsibleRules) => {\n      const playbookRows = selectedAnsibleRules.filter(\n        (r) => r.resolution?.has_playbook\n      );\n      const issues = playbookRows.map((r) => ({\n        id: `advisor:${r.rule.rule_id}`,\n        description: r.rule.description,\n      }));\n      return issues.length ? { issues, systems: [inventoryId] } : false;\n    },\n    [inventoryId]\n  );\n\nexport const useBuildRows = (\n  intl,\n  systemAdvisorRef,\n  entity,\n  inventoryReportFetchStatus\n) => {\n  const location = useLocation().pathname?.split('/');\n  return useCallback(\n    (\n      activeReports,\n      kbaDetails,\n      filters,\n      rows,\n      searchValue = '',\n      kbaLoading = false,\n      isFirstLoad = false\n    ) => {\n      const url = window.location.href;\n      let newActiveReportsList = activeReports;\n      let isRulePresent = url.indexOf('activeRule') > -1 ? true : false;\n      if (isRulePresent && isFirstLoad) {\n        let activeRule = location[2];\n        //sorts activeReportsList by making the activeRecommendation ruleId having a higher priority when sorting, or by total_risk\n        newActiveReportsList.sort((x, y) =>\n          x.rule.rule_id === activeRule\n            ? -1\n            : y.rule.rule_id === activeRule\n            ? 1\n            : 0\n        );\n      } else if (isFirstLoad) {\n        newActiveReportsList.sort((x, y) =>\n          x.rule.total_risk > y.rule.total_risk\n            ? -1\n            : y.rule.total_risk > x.rule.total_risk\n            ? 1\n            : 0\n        );\n      }\n\n      const builtRows = newActiveReportsList.flatMap((value, key) => {\n        const rule = value.rule;\n        const resolution = value.resolution;\n        const kbaDetail = Object.keys(kbaDetails).length\n          ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n          : {};\n        const match = rows.find((row) => row?.rule?.rule_id === rule.rule_id);\n        const selected = match?.selected;\n        const isOpen =\n          match?.isOpen || (isRulePresent && isFirstLoad && key === 0);\n\n        const reportRow = [\n          {\n            rule,\n            resolution,\n            //make arrow button disappear when there is no resolution\n            isOpen: resolution ? isOpen : undefined,\n            selected,\n            disableSelection: resolution ? !resolution.has_playbook : true,\n            cells: [\n              {\n                title: (\n                  <span>\n                    {rule.description} <RuleLabels rule={rule} />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span>\n                    <DateFormat\n                      date={rule.publish_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>\n                    <DateFormat\n                      date={value.impacted_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div key={key} style={{ verticalAlign: 'top' }}>\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                          <strong>impact</strong> of the problem would be &nbsp;\n                          {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} isCompact />\n                    </Tooltip>\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div className=\"ins-c-center-text\" key={key}>\n                    {resolution === null ? (\n                      intl.formatMessage(messages.notAvailable)\n                    ) : resolution?.has_playbook ? (\n                      <span>\n                        <AnsibeTowerIcon size=\"sm\" />{' '}\n                        {intl.formatMessage(messages.playbook)}\n                      </span>\n                    ) : (\n                      intl.formatMessage(messages.manual)\n                    )}\n                  </div>\n                ),\n              },\n            ],\n          },\n          resolution && {\n            parent: key,\n            fullWidth: true,\n            cells: [\n              {\n                title: (\n                  <ReportDetails\n                    key={`child-${key}`}\n                    report={{\n                      ...value,\n                      resolution: value.resolution.resolution,\n                    }}\n                    kbaDetail={kbaDetail}\n                    kbaLoading={kbaLoading}\n                  />\n                ),\n              },\n            ],\n          },\n        ];\n        const isValidSearchValue =\n          searchValue.length === 0 ||\n          rule.description.toLowerCase().includes(searchValue.toLowerCase());\n        const isValidFilterValue =\n          Object.keys(filters).length === 0 ||\n          Object.keys(filters)\n            .map((key) => {\n              const filterValues = filters[key];\n              const rowValue = {\n                has_playbook: value.resolution?.has_playbook,\n                publish_date: rule.publish_date,\n                total_risk: rule.total_risk,\n                category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n              };\n              return filterValues.find(\n                (value) => String(value) === String(rowValue[key])\n              );\n            })\n            .every((x) => x);\n\n        return isValidSearchValue && isValidFilterValue\n          ? reportRow.filter((row) => row !== null)\n          : [];\n      });\n      //must recalculate parent for expandable table content whenever the array size changes\n      builtRows.forEach((row, index) =>\n        row.parent ? (row.parent = index - 1) : null\n      );\n\n      systemAdvisorRef.current.rowCount = activeReports.length;\n\n      if (activeReports.length < 1 || builtRows.length < 1) {\n        let EmptyState =\n          (builtRows.length === 0 && NoMatchingRecommendations) ||\n          (entity?.insights_id && NoRecommendations) ||\n          InsightsNotEnabled;\n\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <EmptyState />,\n              },\n            ],\n          },\n        ];\n      }\n\n      if (inventoryReportFetchStatus === 'failed') {\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <InventoryReportFetchFailed entity={entity} />,\n              },\n            ],\n          },\n        ];\n      }\n\n      return builtRows;\n    },\n    [entity, inventoryReportFetchStatus]\n  );\n};\n","import './SystemAdvisor.scss';\nimport { BASE_URL, FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Get } from '../../Utilities/Api';\nimport { List } from 'react-content-loader';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport NotConnected from '@redhat-cloud-services/frontend-components/NotConnected';\nimport get from 'lodash/get';\nimport {\n  getColumns,\n  getFilters,\n  useBuildRows,\n  useProcessRemediation,\n} from './SystemAdvisorAssets';\nimport downloadReport from '../../PresentationalComponents/Common/DownloadHelper';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport * as AppConstants from '../../AppConstants';\nimport { useParams } from 'react-router-dom';\nconst BaseSystemAdvisor = ({ entity, inventoryId }) => {\n  const intl = useIntl();\n  const systemAdvisorRef = useRef({\n    rowCount: 0,\n  });\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const { id: ruleIdParam } = useParams();\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n\n  const selectedTags = useSelector(({ filters }) => filters?.selectedTags);\n  const workloads = useSelector(({ filters }) => filters?.workloads);\n  const SID = useSelector(({ filters }) => filters?.SID);\n  const permsExport = usePermissions(\n    'advisor',\n    AppConstants.PERMS.export\n  ).hasAccess;\n\n  const getSelectedItems = (rows) => rows.filter((row) => row.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution?.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution?.has_playbook\n  ).length;\n\n  const cols = getColumns(intl);\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const onRemediationCreated = (result) => {\n    onBulkSelect(false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) => onRemediationCreated(result)}\n    >\n      {intl.formatMessage(messages.remediate)}\n    </RemediationButton>,\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex = ruleIdParam\n      ? activeReports.findIndex((report) => report.rule.rule_id === ruleIdParam)\n      : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = useBuildRows(\n    intl,\n    systemAdvisorRef,\n    entity,\n    inventoryReportFetchStatus\n  );\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n  const checkedStatus = () => {\n    if (selectedItemsLength === systemAdvisorRef.current.rowCount) {\n      return 1;\n    } else if (\n      selectedItemsLength > 0 ||\n      selectableItemsLength !== systemAdvisorRef.current.rowCount\n    ) {\n      return null;\n    } else {\n      return 0;\n    }\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: checkedStatus(),\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fq=documentKind:(Solution%20or%20Article)&fl=view_uri,id,publishedTitle&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(\n          reportsData,\n          kbaDetailsFetch,\n          filters,\n          rows,\n          searchValue,\n          false,\n          true\n        )\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'rule.description',\n      3: 'rule.publish_date',\n      4: 'impacted_date',\n      5: 'rule.total_risk',\n      6: 'resolution.has_playbook',\n    };\n    const d = direction === SortByDirection.asc ? 1 : -1;\n\n    const sort = () =>\n      activeReports.concat().sort((firstItem, secondItem) => {\n        let fst = get(firstItem, sortedReports[index]);\n        let snd = get(secondItem, sortedReports[index]);\n\n        if (index === 3 || index === 4) {\n          fst = new Date(fst);\n          snd = new Date(snd);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n\n    const sortedReportsDirectional = sort();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = useProcessRemediation(inventoryId);\n  const filterConfigItems = getFilters(\n    filters,\n    searchValue,\n    onInputChange,\n    onFilterChange\n  );\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const reportsFetch = await Get(\n          `${BASE_URL}/system/${inventoryId}/reports/`,\n          {\n            credentials: 'include',\n          }\n        );\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch.data);\n        fetchKbaDetails(activeRuleFirstReportsData);\n\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n  // eslint-disable-next-line react/prop-types\n  let display_name = entity?.display_name;\n  return inventoryReportFetchStatus === 'fulfilled' &&\n    entity?.insights_id === null ? (\n    <NotConnected\n      titleText={intl.formatMessage(messages.notConnectedTitle)}\n      bodyText={intl.formatMessage(messages.notConnectedBody)}\n      buttonText={intl.formatMessage(messages.notConnectedButton)}\n    />\n  ) : (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      entity?.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {`${systemAdvisorRef.current.rowCount} ${\n                (systemAdvisorRef.current.rowCount === 1 && 'Recommendation') ||\n                'Recommendations'\n              }`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n          exportConfig={{\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                'hits',\n                fileType,\n                { ...filters, text: searchValue },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch,\n                display_name\n              ),\n            isDisabled: !permsExport,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' && (\n        <Fragment>\n          <Table\n            id={'system-advisor-report-table'}\n            aria-label={'report-table'}\n            onSelect={!(rows.length === 1 && rows[0].heightAuto) && onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nBaseSystemAdvisor.propTypes = {\n  entity: PropTypes.shape({\n    insights_id: PropTypes.string,\n    id: PropTypes.string,\n  }),\n  inventoryId: PropTypes.string.isRequired,\n};\n\nconst SystemAdvisor = ({ ...props }) => {\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n  return <BaseSystemAdvisor {...props} entity={entity} />;\n};\n\nexport default SystemAdvisor;\nexport { BaseSystemAdvisor };\n"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","concat","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","format","filters","selectedTags","workloads","SID","dispatch","display_name","options","data","formattedData","_context","prev","next","length","tags","_objectSpread","workloadQueryBuilder","addNotification","exportNotifications","pending","Get","BASE_URL","then","result","success","error","sent","JSON","stringify","downloadFile","t0","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","RuleLabels","_rule$tags","rule","isCompact","noMargin","intl","useIntl","React","search","Tooltip","content","formatMessage","messages","incidentTooltip","position","TooltipPosition","right","Label","color","className","incident","rule_status","ruleIsDisabledTooltip","disabled","redhatDisabled","propTypes","PropTypes","defaultProps","NoMatchingRecommendations","Bullseye","MessageState","title","text","NoRecommendations","icon","CheckIcon","iconClass","InsightsNotEnabled","ChartSpikeIcon","Stack","hasGutter","StackItem","ClipboardCopy","Button","component","href","target","variant","InventoryReportFetchFailed","entity","TimesCircleIcon","BaseSystemAdvisor","_ref8","inventoryId","systemAdvisorRef","useRef","rowCount","useDispatch","addNotificationAction","ruleIdParam","useParams","id","_useState","useState","_useState2","_slicedToArray","inventoryReportFetchStatus","setInventoryReportFetchStatus","_useState3","_useState4","rows","setRows","_useState5","_useState6","activeReports","setActiveReports","_useState7","_useState8","kbaDetailsData","setKbaDetailsData","_useState9","_useState10","sortBy","setSortBy","_useState11","_useState12","setFilters","_useState13","_useState14","searchValue","setSearchValue","_useState15","_useState16","isSelected","setIsSelected","_useState17","_useState18","isAllExpanded","setIsAllExpanded","useSelector","_ref2","_ref3","_ref4","permsExport","usePermissions","AppConstants","hasAccess","getSelectedItems","filter","row","selected","selectedAnsibleRules","r","_r$resolution","resolution","has_playbook","selectedItemsLength","selectableItemsLength","_r$resolution2","cols","topicAddEditDescription","transforms","sortable","modified","fitContent","firstImpacted","totalRisk","remediation","getColumns","actions","RemediationButton","key","isDisabled","dataProvider","processRemediation","onRemediationCreated","onBulkSelect","getNotification","dismissable","description","remediate","activeRuleFirst","reports","_toConsumableArray","activeRuleIndex","findIndex","report","rule_id","activeReport","splice","buildRows","_useLocation$pathname","location","useLocation","pathname","useCallback","kbaDetails","undefined","kbaLoading","isFirstLoad","newActiveReportsList","isRulePresent","window","indexOf","activeRule","sort","x","y","total_risk","builtRows","flatMap","value","kbaDetail","Object","keys","article","node_id","match","find","_row$rule","isOpen","reportRow","disableSelection","cells","DateFormat","publish_date","type","tooltipProps","bottom","impacted_date","style","verticalAlign","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","notAvailable","AnsibeTowerIcon","size","playbook","manual","parent","fullWidth","ReportDetails","isValidSearchValue","toLowerCase","includes","isValidFilterValue","map","_value$resolution","filterValues","rowValue","category","RULE_CATEGORIES","name","String","every","forEach","index","current","EmptyState","insights_id","heightAuto","props","colSpan","useBuildRows","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","resetFilters","prunedFilters","entries","chips","item","FC","values","label","capitalize","urlParam","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","_ref5","reportsData","kbaIds","kbaDetailsFetch","_ref6","join","credentials","response","docs","console","param","newFilters","_defineProperty","removeFilterParam","issues","systems","useProcessRemediation","filterConfigItems","onInputChange","onChange","getFilters","useEffect","dataFetch","_ref7","_callee2","reportsFetch","activeRuleFirstReportsData","_context2","NotConnected","titleText","notConnectedTitle","bodyText","notConnectedBody","buttonText","notConnectedButton","Fragment","PrimaryToolbar","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","exportConfig","exportCsv","exportJson","fileType","downloadReport","exportData","permsAction","Card","CardBody","List","Table","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","d","SortByDirection","asc","sortedReportsDirectional","firstItem","secondItem","fst","get","snd","TableVariant","compact","isStickyHeader","TableHeader","TableBody","isRequired","_ref9","_extends","_ref10","entityDetails"],"sourceRoot":""}