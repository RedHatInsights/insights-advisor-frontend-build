{"version":3,"file":"js/Details-Pathways.1650305013365.48d3a1ac5ff24973f2c3.js","mappings":"4dAsCMA,EAAc,SAACC,GACnB,IAAMC,GAAOC,EAAAA,EAAAA,KAEXC,EAOEH,EAPFG,KACAC,EAMEJ,EANFI,WACAC,EAKEL,EALFK,uBACAC,EAIEN,EAJFM,YACAC,EAGEP,EAHFO,aACAC,EAEER,EAFFQ,gBACAC,EACET,EADFS,KAGF,OACE,kBAAC,IAAD,CACEC,QAAM,EACNC,SAAO,EACPC,UAAU,kDAEV,kBAAC,IAAD,CAAUA,UAAU,QAClB,kBAAC,EAAAC,KAAD,CAAMD,UAAU,oCAAoCT,GACpD,kBAAC,IAAD,CAAeW,IAAKX,EAAMY,UAAWX,IAAe,IACpD,kBAAC,EAAAY,KAAD,CAAMC,GAAE,oCAA+BR,IACpCR,EAAKiB,cAAcC,EAAAA,EAAAA,yBAAmC,CACrDC,QAASf,MAIf,kBAAC,IAAD,CAAUO,UAAU,QAAQN,GAC5B,kBAAC,IAAD,CAAUM,UAAU,QACjBL,GAAgB,kBAAC,IAAD,CAAYc,KAAM,CAAEC,KAAM,cAAkB,KAC5DC,EAAAA,EAAAA,GAAef,IAElB,kBAAC,IAAD,CAAYI,UAAU,UACpB,kBAAC,EAAAI,KAAD,CAAMC,GAAE,oCAA+BR,IAAvC,UACMR,EAAKiB,cAAcC,EAAAA,EAAAA,aADzB,KAEE,kBAAC,KAAD,UAMJK,EAAY,SAACxB,GACjB,IAWmByB,EAXbxB,GAAOC,EAAAA,EAAAA,KAEXG,EAOEL,EAPFK,uBACAqB,EAME1B,EANF0B,eACAtB,EAKEJ,EALFI,WACAuB,EAIE3B,EAJF2B,oBACAC,EAGE5B,EAHF4B,gBACAC,EAEE7B,EAFF6B,kBACAC,EACE9B,EADF8B,eAKF,OACE,kBAAC,IAAD,CACEpB,QAAM,EACNC,SAAO,EACPC,UAAU,kDAEV,kBAAC,IAAD,KAAYX,EAAKiB,cAAcC,EAAAA,EAAAA,mBAC/B,kBAAC,IAAD,CAAUP,UAAU,QAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUmB,KAAM,GACd,6BACE,kBAAC,IAAD,CACEC,SAAS,gCACTC,UAAU,gCACVC,mBACE,kBAAC,IAAD,CACEC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAMjC,KAAxB,aAAiCiC,EAAMC,IAC/CC,wBAAsB,IAG1BC,OAAQ,IACRC,MAAO,IACPC,QAAS,CACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,KAGP,kBAAC,EAAAC,EAAD,MACA,kBAAC,EAAAA,EAAD,CAAWC,eAAa,EAACC,UAAQ,IACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAO,CACLC,KAAM,CACJC,KAAM,qBAAGf,MAAkBe,QAG/BD,KAAM,CACJ,CACE/C,KAAM,WACNiD,EAAG,WACHf,EAAGV,EACHwB,KAAME,EAAAA,EAAAA,OAER,CACElD,KAAM,YACNiD,EAAG,YACHf,EACAc,KAAMG,EAAAA,EAAAA,OAER,CACEnD,KAAM,WACNiD,EAAG,WACHf,EAAGR,EACHsB,KAAMI,EAAAA,EAAAA,OAER,CACEpD,KAAM,MACNiD,EAAG,MACHf,EAAGP,EACHqB,KAAMK,EAAAA,EAAAA,cAQpB,kBAAC,IAAD,CAAUzB,KAAM,GACb9B,EAAKiB,cAAcC,EAAAA,EAAAA,YAAsB,CACxCsC,UAzEOhC,EAyEarB,EAxE9BqB,EAAKiC,OAAS,EAAItD,EAAWuD,KAAI,SAACC,GAAD,OAASA,EAAIzD,QAAM0D,KAAK,MAAQpC,EAAKtB,MAyE5DiB,QAASf,EACTyD,UAAWpC,EACXqC,OAAQ,SAACC,GAAD,OAASD,EAAAA,EAAAA,GAAOC,WAQhCC,EAAa,SAACjE,GAClB,IAAMC,GAAOC,EAAAA,EAAAA,KACLM,EAA2CR,EAA3CQ,gBAAiBL,EAA0BH,EAA1BG,KAAM+D,EAAoBlE,EAApBkE,gBAE/B,OACE,kBAAC,IAAD,CACExD,QAAM,EACNC,SAAO,EACPC,UAAU,kDAEV,kBAAC,IAAD,KAAYX,EAAKiB,cAAcC,EAAAA,EAAAA,aAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUY,KAAM,GACd,kBAAC,IAAD,CAAUnB,UAAU,QAClB,kBAAC,IAAD,CACEuD,KAAMC,EAAAA,GAAqBF,EAAgBG,MAC3CC,MAAOJ,EAAgBG,KACvBE,UAAQ,EACRC,WAAS,KAGb,kBAAC,IAAD,CAAU5D,UAAU,QAClB,kBAAC,KAAD,CAAO6D,aAAa,KAAKC,KAAK,MAC3BvE,IAIL,kBAAC,IAAD,CAAUS,UAAU,QACjBX,EAAKiB,cAAcC,EAAAA,EAAAA,wBAEtB,kBAAC,IAAD,CAAUP,UAAU,SACjBW,EAAAA,EAAAA,GAAef,KAGpB,kBAAC,IAAD,CAAUuB,KAAM,GACd,kBAAC,IAAD,KAAY9B,EAAKiB,cAAcC,EAAAA,EAAAA,SAC/B,kBAAC,IAAD,CAAUP,UAAU,QAClB,kBAAC,IAAwBZ,S,0sBC7MrC,IAAM2E,EAAW,SAACC,GAChB,IAAMC,EAAgB,CACpBC,MAAM,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,QAGvE,iCAA2BN,EAA3B,aAA2CC,EAAcC,OAuC3D,QApCoB,mCAAG,WACrBF,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,GAPqB,2FAUfC,GAAUJ,MAAAA,OAAA,EAAAA,EAAc3B,SAAU,CAAEpC,KAAM+D,GAC9CC,IACGG,EAAU,EAAH,KAAQA,IAAYC,EAAAA,EAAAA,IAAqBJ,EAAWC,KAC9DC,GAASG,EAAAA,EAAAA,iBAAgBC,EAAAA,GAAAA,UAbN,UAeXC,EAAAA,EAAAA,IAAI,GAAD,OACJC,EAAAA,GADI,mBACelB,EADf,YAEM,SAAXO,EAAoB,OAAS,OAE/B,GAJO,OAKFC,GAAYK,IAEhBM,MAAK,SAACC,GAEL,OADAR,GAASG,EAAAA,EAAAA,iBAAgBC,EAAAA,GAAAA,UAClBI,KATL,OAWG,kBAAMR,GAASG,EAAAA,EAAAA,iBAAgBC,EAAAA,GAAAA,WA1BvB,OAcb1C,EAda,OA2BjBA,KAEE+C,EAA2B,SAAXd,EAAoBe,KAAKC,UAAUjD,GAAQA,GAC/DkD,EAAAA,EAAAA,IAAaH,EAAetB,EAASC,GAAcO,GA9BhC,kIAAH,mE,qKCJdkB,EAAgB,SAAC,GAA6B,IAEzBC,EAFFvF,EAA2B,EAA3BA,UAAWyD,EAAgB,EAAhBA,UAC5BvE,GAAOC,EAAAA,EAAAA,KAKPqG,GAJmBD,EAKvBvF,EAAU4C,KAAI,SAAC6C,GAAD,OAAWA,EAAMC,MAJ/BC,OAAOC,QACLL,EAAIM,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAIC,IAASD,EAAIC,IAAS,GAAK,EAAID,IAAM,KACrEE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,OAKtBR,EAAQ,SAACU,EAAM/C,GAAP,OACZ,kBAAC,EAAAgD,MAAD,CAAOD,KAAMA,EAAME,QAAQ,UAAUC,MAAM,OAAO7C,UAAWA,GAC1DL,IAgCL,OACE,kBAAC,IAAD,CAAYmD,UAAW,EAAG9C,UAAWA,GAClC+B,EAAoB5C,KAAI,SAAC8C,GAAD,OA/Bd,SAACA,EAAIjC,GAClB,OAAW,IAAPiC,EACKD,EACL,kBAAC,KAAD,MACAvG,EAAKiB,cAAcC,EAAAA,EAAAA,eAGZ,IAAPsF,EACKD,EACL,kBAAC,KAAD,MACAvG,EAAKiB,cAAcC,EAAAA,EAAAA,WAIZ,IAAPsF,EACKD,EACL,kBAAC,KAAD,MACAvG,EAAKiB,cAAcC,EAAAA,EAAAA,YAIZ,IAAPsF,EACKD,EACL,kBAAC,KAAD,MACAvG,EAAKiB,cAAcC,EAAAA,EAAAA,mBAHvB,EAUmCgB,CAAOoF,OAAOd,EAAG,UAKxDJ,EAAcmB,UAAY,CACxBzG,UAAW0G,IAAAA,MACXjD,UAAWiD,IAAAA,MAGbpB,EAAcqB,aAAe,CAC3BlD,WAAW,GAGb,W,8GCjEMmD,EAAsB,SAAC3H,GAC3B,IAAMC,GAAOC,EAAAA,EAAAA,KACiB0H,EAAQ5H,EAA9B6H,qBAEFrB,EAAQ,SAACrC,EAAMyD,EAAKP,GAAZ,OACZ,kBAAC,EAAAF,MAAD,CAAOE,MAAOA,EAAO7C,WAAS,GAA9B,UAAmCL,EAAnC,cAA6CyD,EAA7C,OAGF,OAAIA,GAAO,GACFpB,EAAMvG,EAAKiB,cAAcC,EAAAA,EAAAA,MAAgByG,EAAK,OAC5CA,EAAM,IAAMA,GAAO,GACrBpB,EAAMvG,EAAKiB,cAAcC,EAAAA,EAAAA,QAAkByG,EAAK,UAEhDpB,EAAMvG,EAAKiB,cAAcC,EAAAA,EAAAA,KAAeyG,EAAK,SAIxDD,EAAoBH,UAAY,CAC9BxH,MAAOyH,IAAAA,OAGT,W,m1BCVA,IAAMK,EAAc,SAAC,GAOf,IANJC,EAMI,EANJA,kBACAC,EAKI,EALJA,YACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACA7G,EAEI,EAFJA,KACA8G,EACI,EADJA,QAEMlI,GAAOC,EAAAA,EAAAA,KACPsF,GAAW4C,EAAAA,EAAAA,eACXC,EAAe,SAACnF,GAAD,OAAUsC,GAASG,EAAAA,EAAAA,IAAgBzC,KACxD,GAAyCoF,EAAAA,EAAAA,UAAS,IAAlD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCF,EAAAA,EAAAA,eAC7BG,IAATR,GAAsBC,EAAMxE,OAAS,GADvC,eAAOgF,EAAP,KAAqBC,EAArB,KAKA,GAAgCC,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAEMC,GAFN,KAAiBC,UAEI,mCAAG,2FAChB7F,EAAO,CAAE9B,QAAS8G,EAAOK,cAAAA,GADT,mBAGdS,EAAAA,EAAAA,IAAK,GAAD,OAAIlD,EAAAA,GAAJ,iBAAqBzE,EAAK4H,QAA1B,eAAgD,GAAI/F,GAH1C,QAInBwF,GACCL,EAAa,CACXjB,QAAS,UACT8B,aAAa,EACbC,SAAS,EACTC,MAAOnJ,EAAKiB,cAAcC,EAAAA,EAAAA,2BAE9BgH,GAAWA,IAXS,gDAapBE,EAAa,CACXjB,QAAS,SACT8B,aAAa,EACbE,MAAOnJ,EAAKiB,cAAcC,EAAAA,EAAAA,OAC1Bb,YAAa,GAAF,eAjBO,yDAAH,sDAsBf+I,EAAW,mCAAG,uFACO,YAArBhI,EAAKiI,aAA8BpB,EAAMxE,OAD3B,wBAEV+B,EAAUiD,EACZ,CACEa,KAAM,OACN9D,QAAS,CACPpE,KAAMA,EAAK4H,QACXO,YAAavB,EAAKxB,GAClB8B,cAAAA,IAGJ,CACEgB,KAAM,OACN9D,QAAS,EAAF,CACLwD,QAAS5H,EAAK4H,SACVV,GAAiB,CAAEA,cAAAA,KAff,kBAmBRM,EAAOpD,GAASgE,SAnBR,OAqBdpB,EAAa,CACXjB,QAAS,UACT+B,SAAS,EACTD,aAAa,EACbE,MAAOnJ,EAAKiB,cAAcC,EAAAA,EAAAA,2BAG5BqH,EAAgB,IAChBL,GAAWA,IA7BG,kDA+BdE,EAAa,CACXjB,QAAS,SACT8B,aAAa,EACbE,MAAOnJ,EAAKiB,cAAcC,EAAAA,EAAAA,OAC1Bb,YAAa,GAAF,eAnCC,gCAuChBwI,IAvCgB,QA0ClBf,GAAkB,GA1CA,0DAAH,qDA6CjB,OACE,kBAAC,KAAD,CACEX,QAAQ,QACRgC,MAAOnJ,EAAKiB,cAAcC,EAAAA,EAAAA,aAC1BuI,OAAQ1B,EACR2B,QAAS,WACP5B,GAAkB,GAClBS,EAAgB,KAElBoB,QAAS,CACP,kBAAC,EAAAC,OAAD,CACE/I,IAAI,UACJsG,QAAQ,UACR0C,QAAS,kBAAMT,KACfU,OAAO,WAEN9J,EAAKiB,cAAcC,EAAAA,EAAAA,OAEtB,kBAAC,EAAA0I,OAAD,CACE/I,IAAI,SACJsG,QAAQ,OACR0C,QAAS,WACP/B,GAAkB,GAClBS,EAAgB,KAElBuB,OAAO,UAEN9J,EAAKiB,cAAcC,EAAAA,EAAAA,WAIvBlB,EAAKiB,cAAcC,EAAAA,EAAAA,iBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAW6I,QAAQ,qBACRvB,IAATR,GAAsBC,EAAMxE,OAAS,IACrC,kBAAC,IAAD,CAAWsG,QAAQ,2BACjB,kBAAC,IAAD,CACEC,UAAWvB,EACXwB,SAAU,WACRvB,GAAiBD,IAEnBlC,MACE0B,EAAMxE,OACFzD,EAAKiB,cAAcC,EAAAA,EAAAA,uBACnBlB,EAAKiB,cAAcC,EAAAA,EAAAA,yBAEzBsF,GAAG,0BACHtG,KAAK,6BAIX,kBAAC,IAAD,CACEqG,MAAOvG,EAAKiB,cAAcC,EAAAA,EAAAA,mBAC1B6I,QAAQ,8BAER,kBAAC,KAAD,CACET,KAAK,OACL9C,GAAG,6BACH0D,mBAAiB,6BACjB7F,MAAOiE,EACP2B,SAAU,SAAC/F,GAAD,OAAUqE,EAAgBrE,IACpCiG,UAAW,SAACC,GAAD,MACC,UAAVA,EAAEvJ,MAAoBuJ,EAAEC,iBAAkBjB,YASxDvB,EAAYN,UAAY,CACtBQ,YAAaP,IAAAA,KACbQ,KAAMR,IAAAA,OACNM,kBAAmBN,IAAAA,KACnBpG,KAAMoG,IAAAA,OACNU,QAASV,IAAAA,KACTS,MAAOT,IAAAA,OAGTK,EAAYJ,aAAe,CACzBM,aAAa,EACbD,kBAAmB,aACnBwC,YAAQ9B,EACRpH,KAAM,GACN8G,QAAS,aACTF,UAAMQ,EACNP,MAAO,IAGT,W,g5BC7JA,IAAMsC,GAAaC,EAAAA,EAAAA,OAAK,kBACtB,uGA4JF,QAvJuB,WACrB,IAAMxK,GAAOC,EAAAA,EAAAA,KACPwK,GAAcC,EAAAA,EAAAA,aAAYlE,GAC1BjB,GAAW4C,EAAAA,EAAAA,eAEX/C,GAAeuF,EAAAA,EAAAA,cAAY,qBAAGxF,QAAsBC,gBACpDC,GAAYsF,EAAAA,EAAAA,cAAY,qBAAGxF,QAAsBE,aACjDC,GAAMqF,EAAAA,EAAAA,cAAY,qBAAGxF,QAAsBG,OAC3CsF,GAAaD,EAAAA,EAAAA,cAAY,qBAAGxF,QAAsB0F,YAClDC,GAAaH,EAAAA,EAAAA,cAAY,qBAAGxF,QAAsB4F,YAEpDvF,EAAU,IACdJ,MAAAA,OAAA,EAAAA,EAAc3B,UACX+B,EAAU,EAAH,KACHA,GACA,CAAEnE,KAAM+D,EAAaxB,KAAK,QAEjCyB,IACGG,EAAU,EAAH,KAAQA,IAAYC,EAAAA,EAAAA,IAAqBJ,EAAWC,KAC9D,OAA2C0F,EAAAA,EAAAA,IAAmB,EAAD,KACxDxF,GADwD,IAE3DhF,KAAMiK,KAFR,IAAQxH,KAAMgI,OAAd,MAAwB,GAAxB,EAA4BC,EAA5B,EAA4BA,WAI5B,GAAkC7C,EAAAA,EAAAA,UAAS,GAA3C,eAAO8C,EAAP,KAAkBC,EAAlB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,EAAH,GAAQV,GACxBW,EAAmB,EAAH,GAAQT,GACxBU,EAAiB,CAAEP,QAASR,EAAagB,MAAO,GAAIC,OAAQ,GAclE,OAbAnG,GACEoG,EAAAA,EAAAA,IAAiB,EAAD,KACXH,GADW,IAEd1E,KAAM,WACN8E,WAAW,MAGfrG,GACEsG,EAAAA,EAAAA,IAAiB,EAAD,GACXL,KAIA,WACLjG,GAASoG,EAAAA,EAAAA,IAAiBL,IAC1B/F,GAASsG,EAAAA,EAAAA,IAAiBN,OAG3B,IAGD,kBAAC,aAAD,KACGL,EACC,kBAAC,IAAD,MAEA,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAYvK,UAAU,sBACpB,kBAAC,IAAD,CACEmJ,OAAO,WACPgC,QAASb,EAAQ5K,aAAe,KAElC,kBAAC,IAAD,CAAeS,UAAWmK,EAAQ9K,aAClC,kBAAC,IAAD,CACEgJ,MACE,kBAAC,aAAD,KACG8B,EAAQ5K,YACR4K,EAAQ3K,cACP,kBAAC,IAAD,CAAYc,KAAM,CAAEC,KAAM,iBAKlC,uBAAGV,UAAU,cACVX,EAAKiB,cAAcC,EAAAA,EAAAA,yBAAmC,CACrD2D,KACE,kBAAC,IAAD,CACEA,KAAM,IAAIC,KAAKmG,EAAQc,cACvBzC,KAAK,iBAMf,kBAAC,IAAD,CAAM3I,UAAU,aACd,kBAAC,IAAD,CAAMqL,WAAS,GACb,kBAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,GACpB,kBAAC,KAAcjB,IAEjB,kBAAC,IAAD,CAAUgB,GAAI,GAAIC,GAAI,GACpB,kBAAC,KAAejB,OAMzBC,GAAc,kBAAC,IAAD,MACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEvK,UAAU,8BACVwL,cAAY,EACZC,eAAa,EACbC,UAAWlB,EACXmB,SAAU,SAACC,EAAIC,GAAL,OAAapB,EAAaoB,KAEpC,kBAAC,IAAD,CACEC,SAAU,EACVtD,MACE,kBAAC,EAAAuD,EAAD,KACG1M,EAAKiB,cAAcC,EAAAA,EAAAA,mBAIvBgK,EACC,kBAAC,IAAD,MAEA,kBAAC,EAAAyB,SAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAACrC,EAAD,QAIN,kBAAC,IAAD,CACEkC,SAAU,EACVtD,MACE,kBAAC,EAAAuD,EAAD,KACG1M,EAAKiB,cAAcC,EAAAA,EAAAA,WAIvBgK,EACC,kBAAC,IAAD,MAEA,kBAAC,EAAAyB,SAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CACEC,WAAY,CACVC,cAAc,EACdC,gBAAgB,GAElB9B,QAASA,EACT7F,aAAcA,EACdC,UAAWA,EACXC,IAAKA,EACL0H,UAAU","sources":["webpack:///./src/PresentationalComponents/Cards/Pathways.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport { Text } from '@patternfly/react-core';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardBody className=\"body\">\n        <Text className=\"pf-u-pb-sm pf-u-font-weight-bold\">{name}</Text>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className=\"body\">{description}</CardBody>\n      <CardBody className=\"body\">\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className=\"footer\">\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1 ? categories.map((cat) => cat.name).join(', ') : cats.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                height={300}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 35,\n                  right: 20,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className=\"body\">\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n          <CardBody className=\"body\">\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className=\"body\">\n            {intl.formatMessage(messages.staticRemediationDesc)}\n          </CardBody>\n          <CardBody className=\"body\">\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <CardBody className=\"body\">\n            <RecommendationLevel {...props} />\n          </CardBody>\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        { ...filters, ...options }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CategoryLabel = ({ labelList, isCompact }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const label = (icon, text) => (\n    <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact={isCompact}>\n      {text}\n    </Label>\n  );\n  const labels = (id, isCompact) => {\n    if (id === 1) {\n      return label(\n        <AutomationIcon />,\n        intl.formatMessage(messages.availability)\n      );\n    }\n    if (id === 2) {\n      return label(\n        <LockIcon />,\n        intl.formatMessage(messages.security),\n        isCompact\n      );\n    }\n    if (id === 3) {\n      return label(\n        <CubeIcon />,\n        intl.formatMessage(messages.stability),\n        isCompact\n      );\n    }\n    if (id === 4) {\n      return label(\n        <PortIcon />,\n        intl.formatMessage(messages.performance),\n        isCompact\n      );\n    }\n  };\n  return (\n    <LabelGroup numLabels={1} isCompact={isCompact}>\n      {sortedFrequencyList.map((id) => labels(Number(id[0]), isCompact))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RecommendationLevel = (props) => {\n  const intl = useIntl();\n  const { recommendation_level: lvl } = props;\n\n  const label = (text, lvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${lvl}%`}</Label>\n  );\n\n  if (lvl >= 80) {\n    return label(intl.formatMessage(messages.high), lvl, 'red');\n  } else if (lvl < 80 && lvl >= 50) {\n    return label(intl.formatMessage(messages.medium), lvl, 'orange');\n  } else {\n    return label(intl.formatMessage(messages.low), lvl, 'blue');\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\n\nexport default RecommendationLevel;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  // eslint-disable-next-line no-unused-vars\n  const [setAck, { isLoading }] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport {\n  Resolution,\n  TotalRisk,\n} from '../../PresentationalComponents/Cards/Pathways';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs\n              ouiaId=\"override\"\n              current={pathway.description || ''}\n            />\n            <CategoryLabel labelList={pathway.categories} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.description}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n            </p>\n          </PageHeader>\n          <Main className=\"pf-u-pb-0\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRisk {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <Resolution {...pathway} />\n              </GridItem>\n            </Grid>\n          </Main>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <Main>\n        <Tabs\n          className=\"adv__background--global-100\"\n          mountOnEnter\n          unmountOnExit\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  showTags={true}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["PathwayCard","props","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","className","Text","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","style","data","fill","x","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","isCompact","headingLevel","size","fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","format","filters","selectedTags","workloads","SID","dispatch","options","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","formattedData","JSON","stringify","downloadFile","CategoryLabel","arr","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","icon","Label","variant","color","numLabels","Number","propTypes","PropTypes","defaultProps","RecommendationLevel","lvl","recommendation_level","DisableRule","handleModalToggle","isModalOpen","host","hosts","afterFn","useDispatch","notification","useState","justification","setJustificaton","undefined","singleSystem","setSingleSystem","useSetAckMutation","setAck","bulkHostActions","isLoading","Post","rule_id","dismissable","timeout","title","disableRule","rule_status","type","system_uuid","unwrap","isOpen","onClose","actions","Button","onClick","ouiaId","fieldId","isChecked","onChange","aria-describedby","onKeyDown","e","preventDefault","system","RulesTable","lazy","pathwayName","useParams","useSelector","recFilters","recState","sysFilters","sysState","useGetPathwayQuery","pathway","isFetching","activeTab","setActiveTab","useEffect","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","current","publish_date","hasGutter","sm","md","mountOnEnter","unmountOnExit","activeKey","onSelect","_e","tab","eventKey","T","Suspense","fallback","tableProps","canSelectAll","isStickyHeader","showTags"],"sourceRoot":""}