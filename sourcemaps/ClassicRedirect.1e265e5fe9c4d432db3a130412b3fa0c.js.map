{"version":3,"file":"js/ClassicRedirect.9847dd17a4d5c59644bd.js","mappings":"uTAyEA,QA7DwB,WACtB,OAAsCA,EAAAA,EAAAA,UAAS,WAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAgCF,EAAAA,EAAAA,YAAhC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,eAEXC,EAAU,SAACC,GACf,IAAMC,EAAYD,EAASE,MAAM,KAC3BC,EAAQF,EAAUG,MAAK,SAACC,GAAD,MAAiB,SAARA,KAAkB,EAAI,EAC5D,OAAQJ,MAAAA,OAAR,EAAQA,EAAY,IAClB,IAAK,UACH,MAAO,CAACA,MAAAA,OAAD,EAACA,EAAYE,GAAb,YACT,IAAK,kBACH,MAAO,CACLF,MAAAA,OADK,EACLA,EAAYE,EAAQ,GADf,2BAEeF,MAAAA,OAFf,EAEeA,EAAYE,KAEpC,QACE,MAAM,IAAIG,MAAMX,EAAKY,cAAcC,EAAAA,EAAAA,oBA6BzC,OAzBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8GAEqCV,EAAQW,OAAOC,SAASX,UAF7D,eAEUY,EAFV,KAEqBC,EAFrB,eAIWC,EAAAA,EAAAA,IAAI,uCAAD,OAAwCF,IAJtD,OAGSG,EAHT,OAKKC,KAAKC,QAAQ,GAAGC,GAClBxB,EAAY,GAAD,OAAImB,EAAJ,YAAoBE,IAC/BvB,EAAe,aAPlB,gDASGK,GACEsB,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTC,aAAa,EACbC,MAAO3B,EAAKY,cAAcC,EAAAA,EAAAA,OAC1Be,YAAa,GAAF,gBAGf/B,EAAe,YAjBlB,wDAAD,KAsBC,CAACE,EAAaF,EAAgBG,EAAME,IAGrC,kBAAC,aAAD,KACmB,YAAhBN,GAA6B,kBAAC,IAAD,MACb,cAAhBA,GAA+B,kBAAC,EAAAiC,SAAD,CAAUC,GAAIhC,IAC7B,aAAhBF,GACC,kBAAC,IAAD,CACEmC,KAAMC,EAAAA,QACNL,MAAO3B,EAAKY,cAAcC,EAAAA,EAAAA","sources":["webpack:///./src/SmartComponents/Common/ClassicRedirect.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Get } from '../../Utilities/Api';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { Redirect } from 'react-router-dom';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nconst ClassicRedirect = () => {\n  const [fetchStatus, setFetchStatus] = useState('pending');\n  const [redirect, setRedirect] = useState();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const getData = (pathname) => {\n    const patharray = pathname.split('/');\n    const start = patharray.some((val) => val === 'beta') ? 6 : 5;\n    switch (patharray?.[3]) {\n      case 'systems':\n        return [patharray?.[start], `/systems`];\n      case 'recommendations':\n        return [\n          patharray?.[start + 1],\n          `/recommendations/${patharray?.[start]}`,\n        ];\n      default:\n        throw new Error(intl.formatMessage(messages.invalidPathname));\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const [classicId, redirectBase] = getData(window.location.pathname);\n        const inventoryId = (\n          await Get(`/api/inventory/v1/hosts?insights_id=${classicId}`)\n        ).data.results[0].id;\n        setRedirect(`${redirectBase}/${inventoryId}`);\n        setFetchStatus('fulfilled');\n      } catch (error) {\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            dismissable: true,\n            title: intl.formatMessage(messages.error),\n            description: `${error}`,\n          })\n        );\n        setFetchStatus('rejected');\n      }\n    })();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setRedirect, setFetchStatus, intl, dispatch]);\n\n  return (\n    <React.Fragment>\n      {fetchStatus === 'pending' && <Loading />}\n      {fetchStatus === 'fulfilled' && <Redirect to={redirect} />}\n      {fetchStatus === 'rejected' && (\n        <MessageState\n          icon={TimesCircleIcon}\n          title={intl.formatMessage(messages.inventoryIdNotFound)}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ClassicRedirect;\n"],"names":["useState","fetchStatus","setFetchStatus","redirect","setRedirect","intl","useIntl","dispatch","useDispatch","getData","pathname","patharray","split","start","some","val","Error","formatMessage","messages","useEffect","window","location","classicId","redirectBase","Get","inventoryId","data","results","id","addNotification","variant","dismissable","title","description","Redirect","to","icon","TimesCircleIcon"],"sourceRoot":""}