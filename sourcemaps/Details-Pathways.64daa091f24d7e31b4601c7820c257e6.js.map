{"version":3,"file":"js/Details-Pathways.1659365342525.93aac882d213a86ca5ac.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Cards/Pathways.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport { Text } from '@patternfly/react-core';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardBody className=\"body\">\n        <Text className=\"pf-u-pb-sm pf-u-font-weight-bold\">{name}</Text>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link\n          to={`/recommendations/pathways/systems/${slug}`}\n          className=\"pf-u-font-size-sm\"\n        >\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className=\"body pf-u-font-size-sm\">{description}</CardBody>\n      <CardBody className=\"body pf-u-font-size-sm\">\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} isCompact />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className=\"footer pf-u-font-size-sm\">\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row\">\n          <div>\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-md pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\"body center\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm \">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold \">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel {...props} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RecommendationLevel = (props) => {\n  const intl = useIntl();\n  const { recommendation_level: lvl, isCompact } = props;\n\n  const label = (text, lvl, color, isCompact) => (\n    <Label color={color} isCompact={isCompact}>{`${text} - ${lvl}%`}</Label>\n  );\n\n  if (lvl >= 80) {\n    return label(intl.formatMessage(messages.high), lvl, 'red', isCompact);\n  } else if (lvl < 80 && lvl >= 50) {\n    return label(intl.formatMessage(messages.medium), lvl, 'orange', isCompact);\n  } else {\n    return label(intl.formatMessage(messages.low), lvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\n\nexport default RecommendationLevel;\n","import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport {\n  Resolution,\n  TotalRisk,\n} from '../../PresentationalComponents/Cards/Pathways';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <Main className=\"pf-u-pb-0\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRisk {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <Resolution {...pathway} />\n              </GridItem>\n            </Grid>\n          </Main>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <Main>\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  showTags={true}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["PathwayCard","props","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","className","Text","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","isCompact","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","barWidth","style","data","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","cache","createIntlCache","locale","navigator","language","slice","createIntl","onError","console","log","TextContent","component","TextVariants","status","QuestionTooltip","position","TooltipPosition","content","color","global_secondary_color_100","RecommendationLevel","lvl","recommendation_level","label","Label","propTypes","PropTypes","RulesTable","lazy","pathwayName","useParams","id","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","recFilters","recState","sysFilters","sysState","options","workloadQueryBuilder","useGetPathwayQuery","pathway","isFetching","pathname","useLocation","useState","includes","activeTab","setActiveTab","useEffect","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","sort","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","then","getElementById","scrollIntoView","behavior","ouiaId","current","title","date","Date","publish_date","type","hasGutter","sm","md","activeKey","onSelect","_e","tab","eventKey","T","Suspense","fallback","tableProps","canSelectAll","isStickyHeader","showTags"],"sourceRoot":""}