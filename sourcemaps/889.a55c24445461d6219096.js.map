{"version":3,"sources":["webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"names":["BaseSystemAdvisor","intl","useIntl","dispatch","useDispatch","entity","useSelector","entityDetails","systemProfile","systemProfileStore","routerData","useState","inventoryReportFetchStatus","setInventoryReportFetchStatus","rows","setRows","activeReports","setActiveReports","kbaDetailsData","setKbaDetailsData","sortBy","setSortBy","filters","setFilters","accountSettings","setAccountSettings","searchValue","setSearchValue","isSelected","setIsSelected","results","length","satelliteManaged","satellite_managed","hideResultsSatelliteManaged","show_satellite_hosts","getSelectedItems","filter","selected","selectedAnsibleRules","r","resolution","has_playbook","selectedItemsLength","selectableItemsLength","cols","title","formatMessage","messages","transforms","sortable","cellWidth","AnsibeTowerIcon","size","fitContent","dataLabel","onKebabClick","action","isOpen","allRows","map","row","key","Object","prototype","hasOwnProperty","call","handleOnCollapse","actions","RemediationButton","isDisabled","dataProvider","processRemediation","onRemediationCreated","result","data","getNotification","addNotificationAction","className","label","onClick","activeRuleFirst","reports","activeRuleIndex","params","findIndex","report","rule","rule_id","id","activeReport","splice","_e","rowId","collapseRows","buildRows","kbaDetails","kbaLoading","builtRows","flatMap","value","kbaDetail","keys","article","node_id","rowVal","rowKey","reportRow","disableSelection","cells","description","DateFormat","date","publish_date","type","tooltipProps","position","TooltipPosition","style","verticalAlign","Tooltip","content","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","total_risk","CheckCircleIcon","parent","fullWidth","ReportDetails","isValidSearchValue","toLowerCase","includes","isValidFilterValue","filterValues","rowValue","category","RULE_CATEGORIES","name","find","String","every","x","forEach","index","onBulkSelect","bulkSelect","items","count","checked","onSelect","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","FC","values","capitalize","urlParam","push","buildFilterChips","onDelete","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","reportsData","kbaIds","API","join","credentials","kbaDetailsFetch","response","docs","console","error","param","newFilters","removeFilterParam","issues","systems","filterConfigItems","onChange","onInputChange","useEffect","Promise","BASE_URL","all","settingsFetch","reportsFetch","activeRuleFirstReportsData","dataFetch","insights_id","Fragment","PrimaryToolbar","actionsConfig","filterConfig","pagination","Card","CardBody","MessageState","icon","PficonSatelliteIcon","text","href","rel","ExternalLinkAltIcon","Table","aria-label","onCollapse","canSelectAll","onSort","direction","sortedReports","1","2","3","4","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","isStickyHeader","TableHeader","TableBody","CheckIcon","iconClass","ChartSpikeIcon","Bullseye","Stack","hasGutter","StackItem","ClipboardCopy","Button","component","target","variant","TimesCircleIcon","SystemAdvisor","customItnl","intlProps","props","Wrapper","IntlProvider","locale","navigator","language","slice","onError","log","propTypes","PropTypes","Widget","useLogger","Provider","store","init","logger","getStore","basename","getBaseName","window","location","pathname","App","defaultProps","ReactDOM","document","getElementById"],"mappings":"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","file":"js/889.9a6180ade75c298f53be.js","sourcesContent":["import './SystemAdvisor.scss';\n\nimport {\n  AnsibeTowerIcon,\n  ChartSpikeIcon,\n  CheckCircleIcon,\n  CheckIcon,\n  ExternalLinkAltIcon,\n  PficonSatelliteIcon,\n  TimesCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  BASE_URL,\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  Bullseye,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n  fitContent,\n  sortable,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport API from '../../Utilities/Api';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { List } from 'react-content-loader';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport ReportDetails from '../../PresentationalComponents/ReportDetails';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\n\nconst BaseSystemAdvisor = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n  const systemProfile = useSelector(({ systemProfileStore }) =>\n    systemProfileStore ? systemProfileStore.systemProfile : {}\n  );\n  const routerData = useSelector(({ routerData }) => routerData);\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [accountSettings, setAccountSettings] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n\n  const results = rows ? rows.length / 2 : 0;\n  const satelliteManaged =\n    (systemProfile && systemProfile.satellite_managed) || false; // system is managed by satellite\n  const satelliteShowHosts = accountSettings.show_satellite_hosts || false; // setting to show satellite managed systems\n  const hideResultsSatelliteManaged = !satelliteShowHosts && satelliteManaged;\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  ).length;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.topicAddEditDescription),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.added),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable],\n    },\n    {\n      title: (\n        <span>\n          {AnsibeTowerIcon && <AnsibeTowerIcon size=\"md\" />}{' '}\n          {intl.formatMessage(messages.ansible)}\n        </span>\n      ),\n      transforms: [sortable, fitContent],\n      dataLabel: intl.formatMessage(messages.ansible),\n    },\n  ];\n\n  const onKebabClick = (action) => {\n    const isOpen = action === 'insights-expand-all';\n    const allRows = [...rows];\n\n    allRows.map((row, key) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n        isOpen && handleOnCollapse(null, key, isOpen);\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) =>\n        addNotification(result.getNotification())\n      }\n    >\n      {AnsibeTowerIcon && (\n        <AnsibeTowerIcon size=\"sm\" className=\"ins-c-background__default\" />\n      )}{' '}\n      Remediate\n    </RemediationButton>,\n    {\n      label: 'Collapse all',\n      onClick: () => onKebabClick('insights-collapse-all'),\n    },\n    {\n      label: 'Expand all',\n      onClick: () => onKebabClick('insights-expand-all'),\n    },\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex =\n      routerData && typeof routerData.params !== 'undefined'\n        ? activeReports.findIndex(\n            (report) => report.rule.rule_id === routerData.params.id\n          )\n        : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = (\n    activeReports,\n    kbaDetails,\n    filters,\n    rows,\n    searchValue = '',\n    kbaLoading = false\n  ) => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value.rule;\n      const resolution = value.resolution;\n      const kbaDetail = Object.keys(kbaDetails).length\n        ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n        : {};\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n      const selected = entity.length ? entity[0].selected : false;\n      const isOpen = rows.length\n        ? entity.length\n          ? entity[0].isOpen\n          : false\n        : key === 0\n        ? true\n        : false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          disableSelection: !resolution.has_playbook,\n          cells: [\n            { title: <div> {rule.description}</div> },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.publish_date}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                        <strong>impact</strong> of the problem would be &nbsp;\n                        {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} />\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div className=\"ins-c-center-text\" key={key}>\n                  {resolution.has_playbook ? (\n                    <CheckCircleIcon className=\"successColorOverride\" />\n                  ) : (\n                    'No'\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={value}\n                  kbaDetail={kbaDetail}\n                  kbaLoading={kbaLoading}\n                />\n              ),\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              has_playbook: value.resolution.has_playbook,\n              publish_date: rule.publish_date,\n              total_risk: rule.total_risk,\n              category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n            };\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    //must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: selectedItemsLength === selectableItemsLength,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await API.get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fl=view_uri,id,publishedTitle&rows=${\n            kbaIds.length\n          }&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(reportsData, kbaDetailsFetch, filters, rows, searchValue)\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'publish_date',\n      3: 'total_risk',\n      4: 'has_playbook',\n    };\n    const key = index === 5 ? 'resolution' : 'rule';\n    const sort = (key) =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[key][sortedReports[index]] >\n          secondItem[key][sortedReports[index]]\n            ? 1\n            : secondItem[key][sortedReports[index]] >\n              firstItem[key][sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort(key) : sort(key).reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = (selectedAnsibleRules) => {\n    const playbookRows = selectedAnsibleRules.filter(\n      (r) => r.resolution && r.resolution.has_playbook\n    );\n    const issues = playbookRows.map((r) => ({\n      id: `advisor:${r.rule.rule_id}`,\n      description: r.rule.description,\n    }));\n    return issues.length ? { issues, systems: [entity.id] } : false;\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.has_playbook.title,\n      type: FC.has_playbook.type,\n      id: FC.has_playbook.urlParam,\n      value: `checkbox-${FC.has_playbook.urlParam}`,\n      filterValues: {\n        key: `${FC.has_playbook.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.has_playbook.urlParam, values),\n        value: filters.has_playbook,\n        items: FC.has_playbook.values,\n      },\n    },\n  ];\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const [settingsFetch, reportsFetch] = await Promise.all([\n          (\n            await API.get(`${BASE_URL}/account_setting/`, {\n              credentials: 'include',\n            })\n          ).data,\n          (\n            await API.get(`${BASE_URL}/system/${entity.id}/reports/`, {\n              credentials: 'include',\n            })\n          ).data,\n        ]);\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch);\n        fetchKbaDetails(activeRuleFirstReportsData);\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n        setAccountSettings(settingsFetch);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n\n  return (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      (inventoryReportFetchStatus === 'fulfilled' &&\n        hideResultsSatelliteManaged) ||\n      entity.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <React.Fragment>\n              {' '}\n              {results === 1\n                ? `${results} Recommendation`\n                : `${results} Recommendations`}{' '}\n            </React.Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' &&\n        (hideResultsSatelliteManaged ? (\n          <MessageState\n            icon={PficonSatelliteIcon}\n            title=\"Satellite managed system\"\n            text={\n              <span key=\"satellite managed system\">\n                Insights results can not be displayed for this host, as the\n                &quot;Hide Satellite Managed Systems&quot; setting has been\n                enabled by an org admin.\n                <br />\n                For more information on this setting and how to modify it,\n                <a\n                  href=\"https://access.redhat.com/solutions/4281761\"\n                  rel=\"noopener\"\n                >\n                  {' '}\n                  Please visit this Knowledgebase article &nbsp;\n                  <ExternalLinkAltIcon />\n                </a>\n                .\n              </span>\n            }\n          />\n        ) : activeReports.length > 0 ? (\n          <Fragment>\n            <Table\n              aria-label={'report-table'}\n              onSelect={onRowSelect}\n              onCollapse={handleOnCollapse}\n              rows={rows}\n              cells={cols}\n              sortBy={sortBy}\n              canSelectAll={false}\n              onSort={onSort}\n              isStickyHeader\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n            {results === 0 && (\n              <Card>\n                <CardBody>\n                  <MessageState\n                    title=\"No matching recommendations found\"\n                    text={`This filter criteria matches no recommendations. Try changing your filter settings.`}\n                  />\n                </CardBody>\n              </Card>\n            )}\n          </Fragment>\n        ) : entity.insights_id !== null ? (\n          <Card>\n            <CardBody>\n              <MessageState\n                icon={CheckIcon}\n                iconClass=\"ins-c-insights__check\"\n                title=\"No recommendations\"\n                text={`No known recommendations affect this system`}\n              />\n            </CardBody>\n          </Card>\n        ) : (\n          <MessageState\n            iconClass=\"chartSpikeIconColor\"\n            icon={ChartSpikeIcon}\n            title=\"Get started with Red Hat Insights\"\n            text={\n              <Bullseye>\n                <Stack hasGutter>\n                  <StackItem>\n                    1. Install the client on the RHEL system.\n                    <ClipboardCopy>yum install insights-client</ClipboardCopy>\n                  </StackItem>\n                  <StackItem>\n                    2. Register the system to Red Hat Insights.\n                    <ClipboardCopy>insights-client --register</ClipboardCopy>\n                  </StackItem>\n                </Stack>\n              </Bullseye>\n            }\n          >\n            <Button\n              component=\"a\"\n              href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n              target=\"_blank\"\n              variant=\"primary\"\n            >\n              Getting started documentation\n            </Button>\n          </MessageState>\n        ))}\n      {inventoryReportFetchStatus === 'failed' && entity && (\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={TimesCircleIcon}\n              title=\"Error getting recommendations\"\n              text={\n                entity\n                  ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n                  : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n              }\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nconst SystemAdvisor = ({ customItnl, intlProps, ...props }) => {\n  const Wrapper = customItnl ? IntlProvider : Fragment;\n  return (\n    <Wrapper\n      {...(customItnl && {\n        locale: navigator.language.slice(0, 2),\n        messages,\n        onError: console.log,\n        ...intlProps,\n      })}\n    >\n      <BaseSystemAdvisor {...props} />\n    </Wrapper>\n  );\n};\n\nexport default SystemAdvisor;\n\nSystemAdvisor.propTypes = {\n  customItnl: PropTypes.bool,\n  intlProps: PropTypes.shape({\n    locale: PropTypes.string,\n    messages: PropTypes.array,\n    onError: PropTypes.func,\n  }),\n};\n","import App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations/';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\n/* eslint-disable no-console */\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { init } from './Store';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\n\nconst Widget = ({ useLogger }) => (\n  <IntlProvider\n    locale={navigator.language.slice(0, 2)}\n    messages={messages}\n    onError={console.log}\n  >\n    <Provider store={(useLogger ? init(logger) : init()).getStore()}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <React.Fragment>\n          <NotificationsPortal />\n          <App />\n        </React.Fragment>\n      </Router>\n    </Provider>\n  </IntlProvider>\n);\n\nWidget.propTypes = {\n  useLogger: PropTypes.bool,\n};\n\nWidget.defaultProps = {\n  useLogger: false,\n};\n\nexport default Widget;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InventoryApp from './AppEntry';\n\nReactDOM.render(<InventoryApp />, document.getElementById('root'));\n"],"sourceRoot":""}