{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/RulesCard/_RulesCard.scss","webpack:///./src/PresentationalComponents/Skeletons/RulesCard/RulesCardSkeleton.js","webpack:///./src/PresentationalComponents/Skeletons/_Skeleton.scss","webpack:///./src/SmartComponents/Rules/ListRules.js","webpack:///./src/SmartComponents/Rules/ViewRule.js"],"names":["Loading","RulesCardSkeleton","importComponent","props","state","component","default","setState","C","Component","AppActions","RulesCard","ListRules","summary","itemsPerPage","page","cards","things","limitCards","bind","setPage","setPerPage","fetchRules","page_size","prevProps","getRandomInt","max","Math","floor","random","rules","results","map","value","key","push","rule_id","category","name","description","summary_html","rec_impact","rec_likelihood","resolution_risk","risk_of_change","ansible","hitCount","amount","numberOfItems","length","lastPage","ceil","lastIndex","firstIndex","slice","rulesFetchStatus","React","displayName","propTypes","AdvisorStore","PropTypes","object","func","string","mapStateToProps","ownProps","mapDispatchToProps","url","dispatch","ViewRule","match"],"mappings":"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","file":"js/ListRules.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div> Loading... </div>;\n\nexport default Loading;\n","// extracted by mini-css-extract-plugin","import React, { Component } from 'react';\nimport { Card, CardHeader, CardBody, CardFooter } from '@patternfly/react-core';\n\nimport '../_Skeleton.scss';\nimport '../../RulesCard/_RulesCard.scss';\n\n/**\n * This is the async skeleton loader for the rules card\n * When this is used, it will generate a fake rules card with blocks of highlighted\n * CSS to show information is loading.\n */\n\nexport default function RulesCardSkeleton(importComponent) {\n    class RulesCardSkeleton extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                component: null\n            };\n        }\n\n        async componentDidMount() {\n            const { default: component } = await importComponent();\n\n            this.setState({\n                component\n            });\n        }\n\n        render() {\n            const C = this.state.component;\n\n            return C ? <C { ...this.props } /> :\n                <Card className='ins-c-rules-card ins-c-card__skeleton'>\n                    <CardHeader>\n                        <div className='skeleton skeleton-md'>&nbsp;</div>\n                    </CardHeader>\n                    <CardBody>\n                        <div className='skeleton skeleton-lg'>&nbsp;</div>\n                    </CardBody>\n                    <CardFooter>\n                        <div className='skeleton skeleton-sm'>&nbsp;</div>\n                    </CardFooter>\n                </Card>;\n        }\n    }\n\n    return RulesCardSkeleton;\n}\n","// extracted by mini-css-extract-plugin","import React from 'react';\nimport { Main, Pagination } from '@red-hat-insights/insights-frontend-components';\nimport PropTypes from 'prop-types';\n\nimport * as AppActions from '../../AppActions';\n\nimport rulesCardSkeleton from '../../PresentationalComponents/Skeletons/RulesCard/RulesCardSkeleton.js';\nconst RulesCard = rulesCardSkeleton(() => import('../../PresentationalComponents/RulesCard/RulesCard.js'));\nimport Loading from '../../PresentationalComponents/Loading/Loading';\n\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass ListRules extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            summary: '',\n            itemsPerPage: 10,\n            page: 1,\n            cards: [],\n            things: []\n        };\n        this.limitCards = this.limitCards.bind(this);\n        this.setPage = this.setPage.bind(this);\n        this.setPerPage = this.setPerPage.bind(this);\n    }\n\n    // TODO: implement server supported pagination in this component, page_size 1000? wtf yo 😏\n    componentDidMount() {\n        this.props.fetchRules({ page_size: 1000 }); // eslint-disable-line camelcase\n    }\n\n    componentDidUpdate(prevProps) {\n        const getRandomInt = (max)  => Math.floor(Math.random() * Math.floor(max)) + 1;\n\n        if (this.props.rules !== prevProps.rules) {\n            const rules = this.props.rules.results;\n            let cards = [];\n            rules.map((value, key) => {\n                cards.push(\n                    <RulesCard\n                        key = { key }\n                        widget-id= { value }\n                        ruleID = { value.rule_id }\n                        category= { value.category.name }\n                        description= { value.description }\n                        summary= { value.summary_html }\n                        // TODO: random numbers gotta go once these attributes are present on api 😏\n                        impact = { value.rec_impact || getRandomInt(4) }\n                        likelihood = { value.rec_likelihood || getRandomInt(4) }\n                        totalRisk = { value.resolution_risk || getRandomInt(4) }\n                        riskOfChange = { value.risk_of_change || getRandomInt(4) }\n                        ansible = { value.ansible }\n                        hitCount = { value.hitCount || getRandomInt(100) }\n                    />\n                );\n            }\n            );\n            this.setState({ cards });\n\n        }\n    }\n\n    setPage(page) {\n        this.setState({\n            ...this.state,\n            page\n        });\n    }\n\n    setPerPage(amount) {\n        this.setState({\n            ...this.state,\n            itemsPerPage: amount\n        });\n    }\n\n    limitCards() {\n        const { page, itemsPerPage } = this.state;\n        const numberOfItems = this.state.cards.length;\n        const lastPage = Math.ceil(numberOfItems / itemsPerPage);\n        const lastIndex = page === lastPage ? numberOfItems : page * itemsPerPage;\n        const firstIndex = page === 1 ? 0 : page * itemsPerPage - itemsPerPage;\n        return this.state.cards.slice(firstIndex, lastIndex);\n    }\n\n    render() {\n        const {\n            rulesFetchStatus\n        } = this.props;\n        const cards = this.limitCards();\n        return (\n            <Main>\n                { rulesFetchStatus === 'fulfilled' && (\n                    <React.Fragment>\n                        { cards }\n                        <Pagination\n                            numberOfItems={ this.state.cards.length }\n                            onPerPageSelect={ this.setPerPage }\n                            page={ this.state.page }\n                            onSetPage={ this.setPage }\n                            itemsPerPage={ this.state.itemsPerPage }\n                        />\n                    </React.Fragment>\n                ) }\n                { rulesFetchStatus === 'pending' && (<Loading />) }\n            </Main>\n        );\n\n    };\n}\n\nListRules.displayName = 'list-rules';\n\nListRules.propTypes = {\n    AdvisorStore: PropTypes.object\n};\n\nListRules.propTypes = {\n    fetchRules: PropTypes.func,\n    rulesFetchStatus: PropTypes.string,\n    rules: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rules: state.AdvisorStore.rules,\n    rulesFetchStatus: state.AdvisorStore.rulesFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRules: (url) => dispatch(AppActions.fetchRules(url))\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ListRules));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Section } from '@red-hat-insights/insights-frontend-components';\n\nimport '../../PresentationalComponents/Skeletons/_Skeleton.scss';\nimport '../../PresentationalComponents/RulesCard/_RulesCard.scss';\n\nconst ViewRule = () => {\n    return (\n        <Section type='content'>\n            <Card className='ins-c-rules-card ins-c-card__skeleton pf-t-light  pf-m-opaque-100'>\n                <CardHeader>\n                    <div className='skeleton skeleton-md'>&nbsp;</div>\n                </CardHeader>\n                <CardBody>\n                    <div className='skeleton skeleton-lg'>&nbsp;</div>\n                </CardBody>\n                <CardFooter>\n                    <div className='skeleton skeleton-sm'>&nbsp;</div>\n                </CardFooter>\n            </Card>\n            <Card className='ins-c-rules-card ins-c-card__skeleton pf-t-light  pf-m-opaque-100'>\n                <CardHeader>\n                    <div className='skeleton skeleton-md'>&nbsp;</div>\n                </CardHeader>\n                <CardBody>\n                    <div className='skeleton skeleton-lg'>&nbsp;</div>\n                </CardBody>\n                <CardFooter>\n                    <div className='skeleton skeleton-sm'>&nbsp;</div>\n                </CardFooter>\n            </Card>\n            <Card className='ins-c-rules-card ins-c-card__skeleton pf-t-light  pf-m-opaque-100'>\n                <CardHeader>\n                    <div className='skeleton skeleton-md'>&nbsp;</div>\n                </CardHeader>\n                <CardBody>\n                    <div className='skeleton skeleton-lg'>&nbsp;</div>\n                </CardBody>\n                <CardFooter>\n                    <div className='skeleton skeleton-sm'>&nbsp;</div>\n                </CardFooter>\n            </Card>\n            <Card className='ins-c-rules-card ins-c-card__skeleton pf-t-light  pf-m-opaque-100'>\n                <CardHeader>\n                    <div className='skeleton skeleton-md'>&nbsp;</div>\n                </CardHeader>\n                <CardBody>\n                    <div className='skeleton skeleton-lg'>&nbsp;</div>\n                </CardBody>\n                <CardFooter>\n                    <div className='skeleton skeleton-sm'>&nbsp;</div>\n                </CardFooter>\n            </Card>\n        </Section>\n    );\n};\n\nViewRule.displayName = 'view-rule';\n\nViewRule.propTypes = {\n    match: PropTypes.object\n};\n\nexport default ViewRule;\n"],"sourceRoot":""}