{"version":3,"file":"js/PathwaysPanel.1648552208576.f28aa2a88338d7e1bc49.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js","webpack:///./src/PresentationalComponents/Cards/Pathways.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { CardContext } from './Card';\nexport const CardExpandableContent = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(CardContext.Consumer, null, ({ isExpanded }) => isExpanded ? (React.createElement(\"div\", Object.assign({ className: css(styles.cardExpandableContent, className) }, props), children)) : null));\n};\nCardExpandableContent.displayName = 'CardExpandableContent';\n//# sourceMappingURL=CardExpandableContent.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Title/title';\nimport { useOUIAProps } from '../../helpers';\nexport var TitleSizes;\n(function (TitleSizes) {\n    TitleSizes[\"md\"] = \"md\";\n    TitleSizes[\"lg\"] = \"lg\";\n    TitleSizes[\"xl\"] = \"xl\";\n    TitleSizes[\"2xl\"] = \"2xl\";\n    TitleSizes[\"3xl\"] = \"3xl\";\n    TitleSizes[\"4xl\"] = \"4xl\";\n})(TitleSizes || (TitleSizes = {}));\nvar headingLevelSizeMap;\n(function (headingLevelSizeMap) {\n    headingLevelSizeMap[\"h1\"] = \"2xl\";\n    headingLevelSizeMap[\"h2\"] = \"xl\";\n    headingLevelSizeMap[\"h3\"] = \"lg\";\n    headingLevelSizeMap[\"h4\"] = \"md\";\n    headingLevelSizeMap[\"h5\"] = \"md\";\n    headingLevelSizeMap[\"h6\"] = \"md\";\n})(headingLevelSizeMap || (headingLevelSizeMap = {}));\nexport const Title = (_a) => {\n    var { className = '', children = '', headingLevel: HeadingLevel, size = headingLevelSizeMap[HeadingLevel], ouiaId, ouiaSafe = true } = _a, props = __rest(_a, [\"className\", \"children\", \"headingLevel\", \"size\", \"ouiaId\", \"ouiaSafe\"]);\n    const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);\n    return (React.createElement(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(styles.title, size && styles.modifiers[size], className) }), children));\n};\nTitle.displayName = 'Title';\n//# sourceMappingURL=Title.js.map","/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport { Text } from '@patternfly/react-core';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardBody className=\"body\">\n        <Text className=\"pf-u-pb-sm pf-u-font-weight-bold\">{name}</Text>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className=\"body\">{description}</CardBody>\n      <CardBody className=\"body\">\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className=\"footer\">\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1 ? categories.map((cat) => cat.name).join(', ') : cats.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                height={300}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 35,\n                  right: 20,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className=\"body\">\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n          <CardBody className=\"body\">\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className=\"body\">\n            {intl.formatMessage(messages.staticRemediationDesc)}\n          </CardBody>\n          <CardBody className=\"body\">\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <RecommendationLevel {...props} />\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n","import AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const label = (icon, text) => (\n    <Label icon={icon} variant=\"outline\" color=\"blue\">\n      {text}\n    </Label>\n  );\n  const labels = (id) => {\n    if (id === 1) {\n      return label(\n        <AutomationIcon />,\n        intl.formatMessage(messages.availability)\n      );\n    }\n    if (id === 2) {\n      return label(<LockIcon />, intl.formatMessage(messages.security));\n    }\n    if (id === 3) {\n      return label(<CubeIcon />, intl.formatMessage(messages.stability));\n    }\n    if (id === 4) {\n      return label(<PortIcon />, intl.formatMessage(messages.performance));\n    }\n  };\n  return (\n    <LabelGroup numLabels={1}>\n      {sortedFrequencyList.map((id) => labels(Number(id[0])))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RecommendationLevel = (props) => {\n  const intl = useIntl();\n  const { recommendation_level: lvl } = props;\n\n  const label = (text, lvl, color) => (\n    <Label color={color}>{`${text} - ${lvl}%`}</Label>\n  );\n\n  if (lvl >= 80) {\n    return label(intl.formatMessage(messages.high), lvl, 'red');\n  } else if (lvl < 80 && lvl >= 50) {\n    return label(intl.formatMessage(messages.medium), lvl, 'orange');\n  } else {\n    return label(intl.formatMessage(messages.low), lvl, 'blue');\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\n\nexport default RecommendationLevel;\n","import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardExpandableContent,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PathwayCard } from '../Cards/Pathways';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n  const { data, isLoading, isFetching, isError } = useGetPathwaysQuery({\n    limit: 3,\n  });\n\n  return !isLoading ? (\n    <Card\n      className=\"adv-c-card adv-c-card-pathways-panel\"\n      id=\"adv-c-card-pathwayspanel\"\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        {isFetching ? (\n          <Loading />\n        ) : !isError && data.data?.length ? (\n          <Grid hasGutter md={4} sm={12}>\n            {data.data.map((pathway) => (\n              <GridItem key={pathway.name}>\n                <PathwayCard {...pathway} />\n              </GridItem>\n            ))}\n          </Grid>\n        ) : (\n          <MessageState\n            icon={'none'}\n            text={intl.formatMessage(messages.noPathways)}\n          />\n        )}\n      </CardExpandableContent>\n    </Card>\n  ) : (\n    <Loading />\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["CardExpandableContent","_a","children","className","props","__rest","isExpanded","Object","assign","css","displayName","TitleSizes","headingLevelSizeMap","Title","headingLevel","HeadingLevel","size","ouiaId","ouiaSafe","ouiaProps","PathwayCard","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","Text","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","style","data","fill","x","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","CategoryLabel","arr","sortedFrequencyList","label","id","entries","reduce","acc","curr","sort","a","b","icon","Label","variant","color","numLabels","Number","propTypes","PropTypes","RecommendationLevel","lvl","recommendation_level","PathwaysPanel","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","useGetPathwaysQuery","limit","isLoading","isFetching","isError","onExpand","setItem","toggleButtonProps","Grid","hasGutter","md","sm","pathway","GridItem"],"sourceRoot":""}