{"version":3,"file":"js/PathwaysPanel.1656080914573.2bf7425050dbdc3cc3a3.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Cards/Pathways.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport { Text } from '@patternfly/react-core';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100\"\n    >\n      <CardBody className=\"body\">\n        <Text className=\"pf-u-pb-sm pf-u-font-weight-bold\">{name}</Text>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/systems/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className=\"body\">{description}</CardBody>\n      <CardBody className=\"body\">\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className=\"footer\">\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className=\"body\">\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n          <CardBody className=\"body\">\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className=\"body\">\n            {intl.formatMessage(messages.staticRemediationDesc)}\n          </CardBody>\n          <CardBody className=\"body\">\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <CardBody className=\"body\">\n            <RecommendationLevel {...props} />\n          </CardBody>\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n","import AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CategoryLabel = ({ labelList, isCompact }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const label = (icon, text) => (\n    <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact={isCompact}>\n      {text}\n    </Label>\n  );\n  const labels = (id, isCompact) => {\n    if (id === 1) {\n      return label(\n        <AutomationIcon />,\n        intl.formatMessage(messages.availability)\n      );\n    }\n    if (id === 2) {\n      return label(\n        <LockIcon />,\n        intl.formatMessage(messages.security),\n        isCompact\n      );\n    }\n    if (id === 3) {\n      return label(\n        <CubeIcon />,\n        intl.formatMessage(messages.stability),\n        isCompact\n      );\n    }\n    if (id === 4) {\n      return label(\n        <PortIcon />,\n        intl.formatMessage(messages.performance),\n        isCompact\n      );\n    }\n  };\n  return (\n    <LabelGroup numLabels={1} isCompact={isCompact}>\n      {sortedFrequencyList.map((id) => labels(Number(id[0]), isCompact))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: false,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RecommendationLevel = (props) => {\n  const intl = useIntl();\n  const { recommendation_level: lvl, isCompact } = props;\n\n  const label = (text, lvl, color, isCompact) => (\n    <Label color={color} isCompact={isCompact}>{`${text} - ${lvl}%`}</Label>\n  );\n\n  if (lvl >= 80) {\n    return label(intl.formatMessage(messages.high), lvl, 'red', isCompact);\n  } else if (lvl < 80 && lvl >= 50) {\n    return label(intl.formatMessage(messages.medium), lvl, 'orange', isCompact);\n  } else {\n    return label(intl.formatMessage(messages.low), lvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\n\nexport default RecommendationLevel;\n","import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardExpandableContent,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PathwayCard } from '../Cards/Pathways';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n  const { data, isLoading, isFetching, isError } = useGetPathwaysQuery({\n    limit: 3,\n  });\n\n  return !isLoading ? (\n    <Card\n      className=\"adv-c-card adv-c-card-pathways-panel\"\n      id=\"adv-c-card-pathwayspanel\"\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        {isFetching ? (\n          <Loading />\n        ) : !isError && data.data?.length ? (\n          <Grid hasGutter md={4} sm={12}>\n            {data.data.map((pathway) => (\n              <GridItem key={pathway.name}>\n                <PathwayCard {...pathway} />\n              </GridItem>\n            ))}\n          </Grid>\n        ) : (\n          <MessageState\n            icon={'none'}\n            text={intl.formatMessage(messages.noPathways)}\n          />\n        )}\n      </CardExpandableContent>\n    </Card>\n  ) : (\n    <Loading />\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["PathwayCard","props","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","className","Text","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","span","ariaDesc","ariaTitle","containerComponent","labels","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","C","dependentAxis","showGrid","barWidth","style","data","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","headingLevel","size","CategoryLabel","arr","isCompact","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","icon","Label","variant","color","numLabels","Number","propTypes","PropTypes","defaultProps","RecommendationLevel","lvl","recommendation_level","PathwaysPanel","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","useGetPathwaysQuery","limit","isLoading","isFetching","isError","isExpanded","onExpand","setItem","toggleButtonProps","Grid","hasGutter","md","sm","pathway","GridItem"],"sourceRoot":""}