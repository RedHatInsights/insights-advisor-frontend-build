{"version":3,"file":"js/Details-Pathways.3cfbc9dd77853f7592cb.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/SmartComponents/HybridInventoryTabs/HybridInventoryTabs.js","webpack:///./src/PresentationalComponents/Cards/TotalRiskCard.js","webpack:///./src/PresentationalComponents/Cards/ResolutionCard.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js","webpack:///./src/SmartComponents/Recs/helpers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[3]}`,\n        navigate: `/${location[3]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/esm/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens/dist/js/global_secondary_color_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const RecommendationLevel = ({ recLvl, isCompact }) => {\n  const intl = useIntl();\n  const label = (text, recLvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${recLvl}%`}</Label>\n  );\n\n  if (recLvl >= 80) {\n    return label(intl.formatMessage(messages.high), recLvl, 'red', isCompact);\n  } else if (recLvl < 80 && recLvl >= 50) {\n    return label(\n      intl.formatMessage(messages.medium),\n      recLvl,\n      'orange',\n      isCompact\n    );\n  } else {\n    return label(intl.formatMessage(messages.low), recLvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\nRecommendationLevel.defaultProps = {\n  isCompact: true,\n};\n\nexport default RecommendationLevel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { Suspense, Fragment, lazy, useContext } from 'react';\nimport propTypes from 'prop-types';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useFeatureFlag } from '../../Utilities/Hooks';\nimport { AccountStatContext } from '../../ZeroStateWrapper';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst ImmutableDevices = lazy(() =>\n  import(/* webpackChunkName: \"ImmutableDevices\" */ './ImmutableDevices')\n);\n\nconst RecommendationSystems = lazy(() =>\n  import(\n    /* webpackChunkName: \"RecommendationSystems\" */ './ConventionalSystems/RecommendationSystems'\n  )\n);\n\nconst PathwaySystems = lazy(() =>\n  import(\n    /* webpackChunkName: \"PathwaySystems\" */ './ConventionalSystems/PathwaySystems'\n  )\n);\n\nconst HybridInventory = ({\n  isImmutableTabOpen,\n  conventionalSystemsCount,\n  edgeSystemsCount,\n  areCountsLoading,\n  tabPathname,\n  ...tabProps\n}) => {\n  const isEdgeParityEnabled = useFeatureFlag('advisor.edge_parity');\n  const { hasEdgeDevices } = useContext(AccountStatContext);\n\n  return areCountsLoading ? (\n    <Bullseye>\n      <Spinner size=\"lg\" />\n    </Bullseye>\n  ) : (\n    <AsynComponent\n      key=\"hybridInventory\"\n      appName=\"inventory\"\n      module=\"./HybridInventoryTabs\"\n      ConventionalSystemsTab={\n        <Suspense fallback={Fragment}>\n          {tabProps.isRecommendationDetail ? (\n            <RecommendationSystems {...tabProps} />\n          ) : (\n            <PathwaySystems {...tabProps} />\n          )}\n        </Suspense>\n      }\n      ImmutableDevicesTab={\n        <Suspense fallback={Fragment}>\n          <ImmutableDevices {...tabProps} />\n        </Suspense>\n      }\n      tabPathname={tabPathname}\n      isImmutableTabOpen={isImmutableTabOpen}\n      fallback={<div />}\n      columns\n      isEdgeParityEnabled={isEdgeParityEnabled}\n      accountHasEdgeImages={hasEdgeDevices}\n      hasConventionalSystems={\n        conventionalSystemsCount > 0 || edgeSystemsCount <= 0\n      }\n    />\n  );\n};\n\nHybridInventory.propTypes = {\n  isImmutableTabOpen: propTypes.bool,\n  conventionalSystemsCount: propTypes.number,\n  edgeSystemsCount: propTypes.number,\n  areCountsLoading: propTypes.bool,\n  tabPathname: propTypes.string,\n  rule: propTypes.object,\n  isRecommendationDetail: propTypes.bool,\n};\n\nexport default HybridInventory;\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport React from 'react';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nexport const TotalRiskCard = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid hasGutter>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6} className=\"pf-u-font-size-sm\">\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const ResolutionCard = ({\n  name,\n  reboot_required,\n  resolution_risk,\n  recommendation_level,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row \">\n          <div className=\"halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-sm pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\" pf-u-pl-xl halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body pf-u-font-size-sm\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel recLvl={recommendation_level} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import './Details.scss';\n\nimport PropTypes from 'prop-types';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { TotalRiskCard } from '../../PresentationalComponents/Cards/TotalRiskCard';\nimport { ResolutionCard } from '../../PresentationalComponents/Cards/ResolutionCard';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport HybridInventory from '../HybridInventoryTabs/HybridInventoryTabs';\nimport { useFeatureFlag } from '../../Utilities/Hooks';\nimport { edgeSystemsCheck } from './helpers';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = ({ isImmutableTabOpen }) => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  const isEdgeParityEnabled = useFeatureFlag('advisor.edge_parity');\n  const [edgeSystemsCount, setEdgeSystemsCount] = useState(0);\n  const [conventionalSystemsCount, setConventionalSystemsCount] = useState(0);\n  const [areCountsLoading, setCountsLoading] = useState(true);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n  const chrome = useChrome();\n  useEffect(() => {\n    pathway &&\n      !isFetching &&\n      chrome.updateDocumentTitle(\n        intl.formatMessage(messages.documentTitle, {\n          subnav: `${pathway.name} - ${messages.pathways.defaultMessage}`,\n        })\n      );\n  }, [chrome, intl, pathway, pathname, isFetching]);\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    isEdgeParityEnabled &&\n      edgeSystemsCheck(\n        undefined,\n        undefined,\n        setEdgeSystemsCount,\n        setConventionalSystemsCount,\n        setCountsLoading,\n        pathwayName\n      );\n  }, [isEdgeParityEnabled, pathwayName]);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <section className=\"pf-u-p-lg\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRiskCard {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <ResolutionCard {...pathway} />\n              </GridItem>\n            </Grid>\n          </section>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <section className=\"pf-u-px-lg pf-u-pb-lg\">\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <HybridInventory\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  isImmutableTabOpen={isImmutableTabOpen}\n                  tabPathname={`/insights/advisor/recommendations/pathways/${pathwayName}`}\n                  edgeSystemsCount={edgeSystemsCount}\n                  conventionalSystemsCount={conventionalSystemsCount}\n                  areCountsLoading={areCountsLoading}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </section>\n    </React.Fragment>\n  );\n};\n\nPathwayDetails.propTypes = {\n  isImmutableTabOpen: PropTypes.bool,\n};\nexport default PathwayDetails;\n","import { SYSTEM_TYPES, BASE_URL } from '../../AppConstants';\nimport { DeleteApi, Get, Post } from '../../Utilities/Api';\nimport messages from '../../Messages';\nimport axios from 'axios';\nexport const ruleResolutionRisk = (rule) => {\n  const resolution = rule?.resolution_set?.find(\n    (resolution) =>\n      resolution.system_type === SYSTEM_TYPES.rhel || SYSTEM_TYPES.ocp\n  );\n  return resolution ? resolution.resolution_risk.risk : undefined;\n};\n\nexport const enableRule = async (\n  rule,\n  refetch,\n  intl,\n  addNotification,\n  handleModalToggle\n) => {\n  try {\n    await DeleteApi(`${BASE_URL}/ack/${rule.rule_id}/`);\n    addNotification({\n      variant: 'success',\n      timeout: true,\n      dismissable: true,\n      title: intl.formatMessage(messages.recSuccessfullyEnabled),\n    });\n    refetch();\n  } catch (error) {\n    handleModalToggle(false);\n    addNotification({\n      variant: 'danger',\n      dismissable: true,\n      title: intl.formatMessage(messages.error),\n      description: `${error}`,\n    });\n  }\n};\n\nexport const bulkHostActions = async ({\n  refetch,\n  addNotification,\n  intl,\n  rule,\n}) => {\n  try {\n    const hostAckResponse = (\n      await Get(\n        `${BASE_URL}/hostack/`,\n        {},\n        { rule_id: rule.rule_id, limit: rule.hosts_acked_count }\n      )\n    ).data;\n    const data = {\n      systems: hostAckResponse?.data?.map((item) => item.system_uuid),\n    };\n\n    await Post(`${BASE_URL}/rule/${rule.rule_id}/unack_hosts/`, {}, data);\n    refetch();\n    addNotification({\n      variant: 'success',\n      timeout: true,\n      dismissable: true,\n      title: intl.formatMessage(messages.recSuccessfullyEnabled),\n    });\n  } catch (error) {\n    addNotification({\n      variant: 'danger',\n      dismissable: true,\n      title: intl.formatMessage(messages.error),\n      description: `${error}`,\n    });\n  }\n};\n\nconst getSystemCheckEndpoints = ({ ruleId, pathway }) => {\n  if (ruleId) {\n    return {\n      conventionalURL: `/api/insights/v1/rule/${ruleId}/systems_detail/?filter[system_profile][host_type][nil]=true&limit=1`,\n      edgeURL: `/api/insights/v1/rule/${ruleId}/systems_detail/?filter[system_profile][host_type]=edge&limit=1`,\n    };\n  }\n\n  return {\n    conventionalURL: `/api/insights/v1/system/?limit=1&filter[system_profile][host_type][nil]=true&pathway=${pathway}`,\n    edgeURL: `/api/insights/v1/system/?limit=1&filter[system_profile][host_type]=edge&pathway=${pathway}`,\n  };\n};\n\nexport const edgeSystemsCheck = async (\n  ruleId,\n  setSystemsCount,\n  setEdgeSystemsCount,\n  setConventionalSystemsCount,\n  setCountsLoading,\n  pathway\n) => {\n  let count = 0;\n  const { conventionalURL, edgeURL } = getSystemCheckEndpoints({\n    ruleId,\n    pathway,\n  });\n\n  try {\n    await axios.get(conventionalURL).then(({ data }) => {\n      count = count += data.meta.count;\n      setConventionalSystemsCount(data.meta.count);\n    });\n    await axios.get(edgeURL).then(({ data }) => {\n      count = count += data.meta.count;\n      setEdgeSystemsCount(data.meta.count);\n    });\n\n    setSystemsCount && setSystemsCount(count);\n    setCountsLoading(false);\n  } catch (error) {\n    console.error(error);\n    setCountsLoading(false);\n  }\n};\n"],"names":["Breadcrumbs","_ref","_useLocation$pathname","current","intl","useIntl","location","useLocation","pathname","split","_useState","useState","_useState2","_slicedToArray","items","setItems","skip","length","_useGetRecQuery","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","concat","formatMessage","messages","insightsHeader","navigate","description","React","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","loading","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","RebootRequired","reboot_required","className","PowerOffIcon","TextContent","Text","component","TextVariants","p","systemReboot","strong","str","status","is","isNot","QuestionTooltip","text","Tooltip","position","TooltipPosition","right","content","OutlinedQuestionCircleIcon","color","global_secondary_color_100","value","LabelIcon","icon","Label","variant","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","AutomationIcon","availability","LockIcon","security","CubeIcon","stability","PortIcon","performance","labels","Number","defaultProps","RecommendationLevel","recLvl","high","medium","low","props","RuleLabels","_rule$tags","rule","noMargin","tags","search","incidentTooltip","incident","rule_status","ruleIsDisabledTooltip","disabled","redhatDisabled","Card","CardBody","List","ImmutableDevices","lazy","RecommendationSystems","PathwaySystems","HybridInventory","isImmutableTabOpen","conventionalSystemsCount","edgeSystemsCount","areCountsLoading","tabPathname","tabProps","_objectWithoutProperties","_excluded","isEdgeParityEnabled","useFeatureFlag","hasEdgeDevices","useContext","AccountStatContext","Bullseye","Spinner","size","AsynComponent","appName","module","ConventionalSystemsTab","Suspense","fallback","Fragment","isRecommendationDetail","ImmutableDevicesTab","columns","accountHasEdgeImages","hasConventionalSystems","TotalRiskCard","cats","_cats$","impacted_systems_count","incident_count","categories","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","isFlat","isPlain","CardTitle","totalRiskPathway","Grid","hasGutter","GridItem","span","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","datum","name","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","top","ChartAxis","dependentAxis","showGrid","ChartGroup","ChartBar","barWidth","style","fill","_ref2","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","thisPathway","category","cat","join","systems","incidents","ResolutionCard","resolution_risk","recommendation_level","resolution","remediation","riskOfChange","InsightsLabel","RISK_OF_CHANGE_LABEL","risk","hideIcon","staticRemediationDesc","reclvl","RulesTable","PathwayDetails","pathwayName","useParams","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","_ref3","SID","_ref4","recFilters","_ref5","recState","sysFilters","_ref6","sysState","setEdgeSystemsCount","_useState3","_useState4","setConventionalSystemsCount","_useState5","_useState6","setCountsLoading","options","_objectSpread","workloadQueryBuilder","_useGetPathwayQuery","useGetPathwayQuery","slug","_useGetPathwayQuery$d","pathway","_useState7","includes","_useState8","activeTab","setActiveTab","chrome","useChrome","updateDocumentTitle","documentTitle","subnav","pathways","defaultMessage","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","then","getElementById","scrollIntoView","behavior","edgeSystemsCheck","undefined","Loading","PageHeader","PageHeaderTitle","has_incident","rulesDetailsModifieddate","date","DateFormat","Date","publish_date","type","sm","md","Tabs","activeKey","onSelect","_e","tab","Tab","eventKey","TabTitleText","recommendations","ruleResolutionRisk","_rule$resolution_set","resolution_set","find","system_type","SYSTEM_TYPES","rhel","ocp","enableRule","_asyncToGenerator","_regeneratorRuntime","_callee","refetch","addNotification","handleModalToggle","_context","prev","next","DeleteApi","BASE_URL","rule_id","timeout","dismissable","recSuccessfullyEnabled","t0","error","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","bulkHostActions","_callee2","_hostAckResponse$data","hostAckResponse","_context2","Get","hosts_acked_count","sent","item","system_uuid","Post","_x6","getSystemCheckEndpoints","conventionalURL","edgeURL","_callee3","setSystemsCount","count","_getSystemCheckEndpoi","_context3","axios","meta","_ref7","console","_x7","_x8","_x9","_x10","_x11","_x12"],"sourceRoot":""}