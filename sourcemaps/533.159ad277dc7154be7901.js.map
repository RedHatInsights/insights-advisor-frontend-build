{"version":3,"file":"js/533.70c91fcf802dbcd62b9a.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/RuleRating/RuleRating.js","webpack:///./src/PresentationalComponents/RuleDetails/RuleDetails.js","webpack:///./src/Utilities/BarDividedList.js"],"sourcesContent":["import './_RuleRating.scss';\n\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport OutlinedThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-down-icon';\nimport OutlinedThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/outlined-thumbs-up-icon';\nimport PropTypes from 'prop-types';\nimport ThumbsDownIcon from '@patternfly/react-icons/dist/js/icons/thumbs-down-icon';\nimport ThumbsUpIcon from '@patternfly/react-icons/dist/js/icons/thumbs-up-icon';\nimport messages from '../../Messages';\n\nconst RuleRating = ({ ruleId, ruleRating, updateRatingAction }) => {\n  const intl = useIntl();\n  const [rating, setRating] = useState(ruleRating);\n  const [submitted, setSubmitted] = useState(false);\n  const [thankYou, setThankYou] = useState(\n    intl.formatMessage(messages.feedbackThankyou)\n  );\n  const updateRuleRating = async (newRating) => {\n    const calculatedRating = rating === newRating ? 0 : newRating;\n    try {\n      await updateRatingAction(ruleId, calculatedRating);\n      setRating(calculatedRating);\n      setSubmitted(true);\n      setTimeout(() => setThankYou(''), 3000);\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n  };\n\n  return (\n    <span className=\"ratingSpanOverride\">\n      {intl.formatMessage(messages.ruleHelpful)}\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-up\"\n        onClick={() => updateRuleRating(1)}\n        ouiaId=\"thumbsUp\"\n      >\n        {rating === 1 ? (\n          <ThumbsUpIcon className=\"like\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsUpIcon size=\"sm\" />\n        )}\n      </Button>\n      <Button\n        variant=\"plain\"\n        aria-label=\"thumbs-down\"\n        onClick={() => updateRuleRating(-1)}\n        ouiaId=\"thumbsDown\"\n      >\n        {rating === -1 ? (\n          <ThumbsDownIcon className=\"dislike\" size=\"sm\" />\n        ) : (\n          <OutlinedThumbsDownIcon size=\"sm\" />\n        )}\n      </Button>\n      {submitted && thankYou}\n    </span>\n  );\n};\n\nRuleRating.propTypes = {\n  ruleId: PropTypes.string.isRequired,\n  ruleRating: PropTypes.number.isRequired,\n  updateRatingAction: PropTypes.func.isRequired,\n};\n\nexport default RuleRating;\n","/* eslint max-len: 0 */\nimport './_RuleDetails.scss';\n\nimport * as AppConstants from '../../AppConstants';\n\nimport { IntlProvider, useIntl } from 'react-intl';\nimport {\n  Split,\n  SplitItem,\n} from '@patternfly/react-core/dist/js/layouts/Split/index';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/js/layouts/Stack/index';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport { compact, intersection } from 'lodash';\n\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport Markdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RuleRating from '../RuleRating/RuleRating';\nimport { SeverityLine } from '@redhat-cloud-services/frontend-components-charts/esm/SeverityLine';\nimport barDividedList from '../../Utilities/BarDividedList';\nimport messages from '../../Messages';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeSanitize from 'rehype-sanitize';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst BaseRuleDetails = ({\n  children,\n  rule,\n  resolutionRisk,\n  topics,\n  header,\n  isDetailsPage,\n  onFeedbackChanged,\n  isOpenShift,\n  riskOfChangeDesc,\n}) => {\n  const intl = useIntl();\n  const topicLinks = () =>\n    topics &&\n    compact(\n      topics.map(\n        (topic) =>\n          intersection(topic.tag.split(' '), rule.tags.split(' ')).length && (\n            <React.Fragment key={topic.slug}>\n              <Link to={`/topics/${topic.slug}`}>{`${topic.name}`}</Link>\n            </React.Fragment>\n          )\n      )\n    );\n\n  const ruleDescription = (data, isGeneric) =>\n    typeof data === 'string' &&\n    Boolean(data) && (\n      <span className={isGeneric && 'genericOverride'}>\n        <Markdown rehypePlugins={[rehypeRaw, rehypeSanitize]}>{data}</Markdown>\n      </span>\n    );\n\n  return (\n    <Split className=\"ins-c-rule-details__split\" hasGutter>\n      <SplitItem>\n        <Stack hasGutter>\n          {header && <StackItem>{header}</StackItem>}\n          <StackItem>\n            {isOpenShift && ruleDescription(rule.generic, true)}\n            {!isOpenShift &&\n              (isDetailsPage\n                ? ruleDescription(rule.generic, true)\n                : ruleDescription(rule.summary))}\n          </StackItem>\n          {rule.node_id && (\n            <StackItem>\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={`https://access.redhat.com/node/${rule.node_id}`}\n              >\n                {intl.formatMessage(messages.knowledgebaseArticle)}&nbsp;\n                <ExternalLinkAltIcon size=\"sm\" />\n              </a>\n            </StackItem>\n          )}\n          {topics && rule.tags && topicLinks().length > 0 && (\n            <StackItem>\n              <strong>{intl.formatMessage(messages.topicRelatedToRule)}</strong>\n              <br />\n              {barDividedList(topicLinks())}\n            </StackItem>\n          )}\n          {isDetailsPage && (\n            <RuleRating\n              ruleId={rule.rule_id}\n              ruleRating={rule.rating}\n              updateRatingAction={onFeedbackChanged}\n            />\n          )}\n          {!isDetailsPage && rule.impacted_systems_count > 0 && (\n            <StackItem>\n              <Link\n                key={`${rule.rule_id}-link`}\n                to={`/recommendations/${rule.rule_id}`}\n              >\n                {intl.formatMessage(\n                  ...(isOpenShift\n                    ? [\n                        // OpenShift's intl object should be used to obtain messages\n                        intl.messages.viewAffectedClusters,\n                        {\n                          clusters: rule.impacted_clusters_count,\n                        },\n                      ]\n                    : [\n                        messages.viewAffectedSystems,\n                        {\n                          systems: rule.impacted_systems_count,\n                        },\n                      ])\n                )}\n              </Link>\n            </StackItem>\n          )}\n        </Stack>\n      </SplitItem>\n      <SplitItem>\n        <Stack gutter=\"sm\">\n          {children && <StackItem>{children}</StackItem>}\n          <StackItem>\n            <Stack className=\"ins-c-rule-details__stack\">\n              <StackItem>\n                <strong>{intl.formatMessage(messages.totalRisk)}</strong>\n              </StackItem>\n              <StackItem className=\"pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm\">\n                <span className=\"ins-c-rule-details__stackitem\">\n                  <span>\n                    <InsightsLabel value={rule.total_risk} />\n                  </span>\n                  <Stack hasGutter className=\"description-stack-override\">\n                    <StackItem>\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {intl.formatMessage(\n                            messages.rulesDetailsTotalriskBody,\n                            {\n                              risk:\n                                AppConstants.TOTAL_RISK_LABEL_LOWER[\n                                  rule.total_risk\n                                ] || intl.formatMessage(messages.undefined),\n                              strong: (str) => strong(str),\n                            }\n                          )}\n                        </Text>\n                      </TextContent>\n                    </StackItem>\n                    <Stack>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.likelihoodLevel, {\n                            level:\n                              AppConstants.LIKELIHOOD_LABEL[rule.likelihood],\n                          })}\n                          value={rule.likelihood}\n                          tooltipMessage={intl.formatMessage(\n                            messages.likelihoodDescription,\n                            {\n                              level:\n                                AppConstants.LIKELIHOOD_LABEL_LOWER[\n                                  rule.likelihood\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                      <StackItem>\n                        <SeverityLine\n                          className=\"severity-line\"\n                          title={intl.formatMessage(messages.impactLevel, {\n                            level:\n                              AppConstants.IMPACT_LABEL[rule.impact.impact],\n                          })}\n                          value={rule.impact.impact}\n                          tooltipMessage={intl.formatMessage(\n                            messages.impactDescription,\n                            {\n                              level:\n                                AppConstants.IMPACT_LABEL_LOWER[\n                                  rule.impact.impact\n                                ],\n                            }\n                          )}\n                        />\n                      </StackItem>\n                    </Stack>\n                  </Stack>\n                </span>\n              </StackItem>\n              {resolutionRisk && riskOfChangeDesc && (\n                <React.Fragment>\n                  <hr></hr>\n                  <StackItem>\n                    <strong>{intl.formatMessage(messages.riskofchange)}</strong>\n                  </StackItem>\n                  <StackItem\n                    className={`pf-u-display-inline-flex alignCenterOverride pf-u-pb-sm pf-u-pt-sm`}\n                  >\n                    <span className=\"ins-c-rule-details__stackitem\">\n                      <span>\n                        <InsightsLabel\n                          text={\n                            AppConstants.RISK_OF_CHANGE_LABEL[resolutionRisk]\n                          }\n                          value={resolutionRisk}\n                          hideIcon\n                        />\n                      </span>\n                      <Stack hasGutter className=\"description-stack-override\">\n                        <StackItem>\n                          <TextContent>\n                            <Text component={TextVariants.p}>\n                              {resolutionRisk\n                                ? riskOfChangeDesc\n                                : intl.formatMessage(messages.undefined)}\n                            </Text>\n                          </TextContent>\n                        </StackItem>\n                        {!isOpenShift && (\n                          <StackItem>\n                            {RebootRequired(rule.reboot_required)}\n                          </StackItem>\n                        )}\n                      </Stack>\n                    </span>\n                  </StackItem>\n                </React.Fragment>\n              )}\n            </Stack>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\n// eslint-disable-next-line react/prop-types\nconst RuleDetails = ({ customItnl, intlProps, ...props }) => {\n  const Wrapper = customItnl ? IntlProvider : React.Fragment;\n  return (\n    <Wrapper\n      {...(customItnl && {\n        locale: navigator.language.slice(0, 2),\n        messages,\n        onError: console.log,\n        ...intlProps,\n      })}\n    >\n      <BaseRuleDetails {...props} />\n    </Wrapper>\n  );\n};\n\nBaseRuleDetails.propTypes = {\n  children: PropTypes.any,\n  rule: PropTypes.object,\n  topics: PropTypes.array,\n  header: PropTypes.any,\n  isDetailsPage: PropTypes.bool,\n  resolutionRisk: PropTypes.number,\n  riskOfChangeDesc: PropTypes.string,\n  /**\n   * onFeedbackChanged - a callback used to update the rating of a particular rule\n   * @param {string} ruleId - ID (usually in plugin|error_key format) of the rule that needs to be updated\n   * @param {number} newRating rating (-1, 0, 1)\n   */\n  onFeedbackChanged: PropTypes.func,\n  /**\n   * isOpenShift - true when OpenShift rule is contained within `rule` param\n   */\n  isOpenShift: PropTypes.bool,\n};\n\nexport default RuleDetails;\n","import React from 'react';\nimport './_BarDividedList.scss';\n\nconst BarDividedList = (list) =>\n  list.map((element, index) => (\n    <React.Fragment key={index}>\n      {element}\n      {index + 1 !== list.length && (\n        <strong className=\"verticalDivider\">&nbsp;&#124;&nbsp;</strong>\n      )}\n    </React.Fragment>\n  ));\n\nexport default BarDividedList;\n"],"names":["RuleRating","ruleId","ruleRating","updateRatingAction","intl","useIntl","useState","rating","setRating","submitted","setSubmitted","formatMessage","messages","thankYou","setThankYou","updateRuleRating","newRating","calculatedRating","setTimeout","console","error","className","Button","variant","aria-label","onClick","ouiaId","size","propTypes","PropTypes","BaseRuleDetails","list","children","rule","resolutionRisk","topics","header","isDetailsPage","onFeedbackChanged","isOpenShift","riskOfChangeDesc","topicLinks","map","topic","tag","split","tags","length","key","slug","Link","to","name","ruleDescription","data","isGeneric","Boolean","rehypePlugins","rehypeRaw","rehypeSanitize","Split","hasGutter","SplitItem","Stack","StackItem","generic","summary","node_id","rel","target","href","element","index","rule_id","impacted_systems_count","viewAffectedClusters","clusters","impacted_clusters_count","systems","gutter","InsightsLabel","value","total_risk","Text","TextContent","component","TextVariants","risk","AppConstants","TOTAL_RISK_LABEL_LOWER","strong","str","SeverityLine","title","level","LIKELIHOOD_LABEL","likelihood","tooltipMessage","LIKELIHOOD_LABEL_LOWER","IMPACT_LABEL","impact","IMPACT_LABEL_LOWER","text","RISK_OF_CHANGE_LABEL","hideIcon","RebootRequired","reboot_required","customItnl","intlProps","props","Wrapper","IntlProvider","React","locale","navigator","language","slice","onError","log"],"sourceRoot":""}