{"version":3,"file":"js/881.a60bd3181536dab3131b.js","mappings":"mXA0BMA,EAAc,SAACC,GACnB,IAAMC,GAAOC,EAAAA,EAAAA,KAEXC,EAOEH,EAPFG,KACAC,EAMEJ,EANFI,WACAC,EAKEL,EALFK,uBACAC,EAIEN,EAJFM,YACAC,EAGEP,EAHFO,aACAC,EAEER,EAFFQ,gBACAC,EACET,EADFS,KAGF,OACE,kBAAC,IAAD,CACEC,QAAM,EACNC,SAAO,EACPC,UAAS,oEAET,kBAAC,IAAD,CAAUA,UAAS,QACjB,kBAAC,IAAD,CAAeC,IAAKV,EAAMW,UAAWV,IAAe,IACpD,kBAAC,EAAAW,KAAD,CAAMC,GAAE,oCAA+BP,IACpCR,EAAKgB,cAAcC,EAAAA,EAAAA,yBAAmC,CACrDC,QAASd,MAIf,kBAAC,IAAD,CAAUO,UAAS,QAAWN,GAC9B,kBAAC,IAAD,CAAUM,UAAS,QAChBL,GAAgB,kBAAC,IAAD,CAAYa,KAAM,CAAEC,KAAM,cAAkB,KAC5DC,EAAAA,EAAAA,GAAed,IAElB,kBAAC,IAAD,CAAYI,UAAS,UACnB,kBAAC,EAAAG,KAAD,CAAMC,GAAE,oCAA+BP,IAAvC,UACMR,EAAKgB,cAAcC,EAAAA,EAAAA,aADzB,KAEE,kBAAC,KAAD,UAMJK,EAAY,SAACvB,GACjB,IAGmBwB,EAHbvB,GAAOC,EAAAA,EAAAA,KACLG,EAAuDL,EAAvDK,uBAAwBoB,EAA+BzB,EAA/ByB,eAAgBrB,EAAeJ,EAAfI,WAIhD,OACE,kBAAC,IAAD,CACEM,QAAM,EACNC,SAAO,EACPC,UAAS,oEAET,kBAAC,IAAD,KAAYX,EAAKgB,cAAcC,EAAAA,EAAAA,mBAC/B,kBAAC,IAAD,CAAUN,UAAS,QACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUc,KAAM,GAAhB,iBACA,kBAAC,IAAD,CAAUA,KAAM,GACbzB,EAAKgB,cAAcC,EAAAA,EAAAA,YAAsB,CACxCS,UAdOH,EAcapB,EAb9BoB,EAAKI,OAAS,EAAIxB,EAAWyB,KAAI,SAACC,GAAD,OAASA,EAAI3B,QAAM4B,KAAK,MAAQP,EAAKrB,MAc5DgB,QAASd,EACT2B,UAAWP,EACXQ,OAAQ,SAACC,GAAD,OAASD,EAAAA,EAAAA,GAAOC,WAQhCC,EAAa,SAACnC,GAClB,IAAMC,GAAOC,EAAAA,EAAAA,KACLI,EAAwDN,EAAxDM,YAAaE,EAA2CR,EAA3CQ,gBAAiBL,EAA0BH,EAA1BG,KAAMiC,EAAoBpC,EAApBoC,gBAE5C,OACE,kBAAC,IAAD,CACE1B,QAAM,EACNC,SAAO,EACPC,UAAS,oEAET,kBAAC,IAAD,KAAYX,EAAKgB,cAAcC,EAAAA,EAAAA,aAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUQ,KAAM,GACd,kBAAC,IAAD,CAAUd,UAAS,QACjB,kBAAC,IAAD,CACEyB,KAAMC,EAAAA,GAAqBF,EAAgBG,MAC3CC,MAAOJ,EAAgBG,KACvBE,UAAQ,KAGZ,kBAAC,IAAD,CAAU7B,UAAS,QACjB,kBAAC,KAAD,CAAO8B,aAAa,KAAKC,KAAK,MAC3BxC,IAIL,kBAAC,IAAD,CAAUS,UAAS,QAAWN,GAC9B,kBAAC,IAAD,CAAUM,UAAS,SAChBU,EAAAA,EAAAA,GAAed,KAGpB,kBAAC,IAAD,CAAUkB,KAAM,GACd,kBAAC,IAAD,KAAYzB,EAAKgB,cAAcC,EAAAA,EAAAA,SAC/B,kBAAC,IAAwBlB","sources":["webpack:///./src/PresentationalComponents/Cards/Pathways.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../Labels/CategoryLabel';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { Link } from 'react-router-dom';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport RuleLabels from '../Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nconst PathwayCard = (props) => {\n  const intl = useIntl();\n  const {\n    name,\n    categories,\n    impacted_systems_count,\n    description,\n    has_incident,\n    reboot_required,\n    slug,\n  } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardBody className={`body`}>\n        <CategoryLabel key={name} labelList={categories} />{' '}\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className={`body`}>{description}</CardBody>\n      <CardBody className={`body`}>\n        {has_incident && <RuleLabels rule={{ tags: 'incident' }} />}{' '}\n        {RebootRequired(reboot_required)}\n      </CardBody>\n      <CardFooter className={`footer`}>\n        <Link to={`/recommendations/pathways/${slug}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n};\nconst TotalRisk = (props) => {\n  const intl = useIntl();\n  const { impacted_systems_count, incident_count, categories } = props;\n\n  const catString = (cats) =>\n    cats.length > 1 ? categories.map((cat) => cat.name).join(', ') : cats.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className={`body`}>\n        <Grid>\n          <GridItem span={6}> insert chart</GridItem>\n          <GridItem span={6}>\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\nconst Resolution = (props) => {\n  const intl = useIntl();\n  const { description, reboot_required, name, resolution_risk } = props;\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className={`ins-c-advisor__card--pathwaycard advisor__background--global-100`}\n    >\n      <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n      <Grid>\n        <GridItem span={7}>\n          <CardBody className={`body`}>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n            />\n          </CardBody>\n          <CardBody className={`body`}>\n            <Title headingLevel=\"h5\" size=\"md\">\n              {name}\n            </Title>\n          </CardBody>\n\n          <CardBody className={`body`}>{description}</CardBody>\n          <CardBody className={`body`}>\n            {RebootRequired(reboot_required)}\n          </CardBody>\n        </GridItem>\n        <GridItem span={5}>\n          <CardTitle>{intl.formatMessage(messages.reclvl)}</CardTitle>\n          <RecommendationLevel {...props} />\n        </GridItem>\n      </Grid>\n    </Card>\n  );\n};\n\nexport { PathwayCard, TotalRisk, Resolution };\n"],"names":["PathwayCard","props","intl","useIntl","name","categories","impacted_systems_count","description","has_incident","reboot_required","slug","isFlat","isPlain","className","key","labelList","Link","to","formatMessage","messages","systems","rule","tags","RebootRequired","TotalRisk","cats","incident_count","span","category","length","map","cat","join","incidents","strong","str","Resolution","resolution_risk","text","RISK_OF_CHANGE_LABEL","risk","value","hideIcon","headingLevel","size"],"sourceRoot":""}