{"version":3,"file":"js/3815.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/SmartComponents/SystemAdvisor/EmptyStates.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisorAssets.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js"],"sourcesContent":["import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch,\n  display_name\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        {\n          ...filters,\n          ...options,\n          ...(display_name && { display_name: display_name }),\n        }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import './_RuleLabels.scss';\n\nimport { Tooltip, TooltipPosition, Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport ChartSpikeIcon from '@patternfly/react-icons/dist/esm/icons/chartSpike-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport {\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PropTypes from 'prop-types';\n\nexport const NoMatchingRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      title=\"No matching recommendations found\"\n      text={`To continue, edit your filter settings and search again.`}\n    />\n  </Bullseye>\n);\n\nexport const NoRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      icon={CheckIcon}\n      iconClass=\"ins-c-insights__check\"\n      title=\"No recommendations\"\n      text={`No known recommendations affect this system`}\n    />\n  </Bullseye>\n);\n\nexport const InsightsNotEnabled = () => (\n  <MessageState\n    iconClass=\"chartSpikeIconColor\"\n    icon={ChartSpikeIcon}\n    title=\"Get started with Red Hat Insights\"\n    text={\n      <Bullseye>\n        <Stack hasGutter>\n          <StackItem>\n            1. Install the client on the RHEL system.\n            <ClipboardCopy>yum install insights-client</ClipboardCopy>\n          </StackItem>\n          <StackItem>\n            2. Register the system to Red Hat Insights.\n            <ClipboardCopy>insights-client --register</ClipboardCopy>\n          </StackItem>\n        </Stack>\n      </Bullseye>\n    }\n  >\n    <Button\n      component=\"a\"\n      href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n      target=\"_blank\"\n      variant=\"primary\"\n    >\n      Getting started documentation\n    </Button>\n  </MessageState>\n);\n\nexport const InventoryReportFetchFailed = ({ entity }) => (\n  <Bullseye>\n    <MessageState\n      icon={TimesCircleIcon}\n      title=\"Error getting recommendations\"\n      text={\n        entity\n          ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n          : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n      }\n    />\n  </Bullseye>\n);\n\nInventoryReportFetchFailed.propTypes = {\n  entity: PropTypes.object,\n};\n","import './SystemAdvisor.scss';\nimport React, { useCallback } from 'react';\nimport { fitContent, sortable } from '@patternfly/react-table';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport AnsibeTowerIcon from '@patternfly/react-icons/dist/esm/icons/ansibeTower-icon';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components/ReportDetails';\nimport {\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  NoMatchingRecommendations,\n  NoRecommendations,\n  InsightsNotEnabled,\n  InventoryReportFetchFailed,\n} from './EmptyStates';\nimport { useLocation } from 'react-router-dom';\n\nimport messages from '../../Messages';\n\nexport const getColumns = (intl) => [\n  {\n    title: intl.formatMessage(messages.topicAddEditDescription),\n    transforms: [sortable],\n  },\n  {\n    title: intl.formatMessage(messages.modified),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.firstImpacted),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.totalRisk),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.remediation),\n    transforms: [sortable, fitContent],\n  },\n];\n\nexport const getFilters = (\n  filters,\n  searchValue,\n  onInputChange,\n  onFilterChange\n) => [\n  {\n    label: 'description',\n    filterValues: {\n      key: 'text-filter',\n      onChange: (_e, value) => onInputChange(value),\n      value: searchValue,\n    },\n  },\n  {\n    label: FC.total_risk.title,\n    type: FC.total_risk.type,\n    id: FC.total_risk.urlParam,\n    value: `checkbox-${FC.total_risk.urlParam}`,\n    filterValues: {\n      key: `${FC.total_risk.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.total_risk.urlParam, values),\n      value: filters.total_risk,\n      items: FC.total_risk.values,\n    },\n  },\n  {\n    label: FC.category.title,\n    type: FC.category.type,\n    id: FC.category.urlParam,\n    value: `checkbox-${FC.category.urlParam}`,\n    filterValues: {\n      key: `${FC.category.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n      value: filters.category,\n      items: FC.category.values,\n    },\n  },\n  {\n    label: FC.has_playbook.title,\n    type: FC.has_playbook.type,\n    id: FC.has_playbook.urlParam,\n    value: `checkbox-${FC.has_playbook.urlParam}`,\n    filterValues: {\n      key: `${FC.has_playbook.urlParam}-filter`,\n      onChange: (_e, values) =>\n        onFilterChange(FC.has_playbook.urlParam, values),\n      value: filters.has_playbook,\n      items: FC.has_playbook.values,\n    },\n  },\n];\n\nexport const useProcessRemediation = (inventoryId) =>\n  useCallback(\n    (selectedAnsibleRules) => {\n      const playbookRows = selectedAnsibleRules.filter(\n        (r) => r.resolution?.has_playbook\n      );\n      const issues = playbookRows.map((r) => ({\n        id: `advisor:${r.rule.rule_id}`,\n        description: r.rule.description,\n      }));\n      return issues.length ? { issues, systems: [inventoryId] } : false;\n    },\n    [inventoryId]\n  );\n\nexport const useBuildRows = (\n  intl,\n  systemAdvisorRef,\n  entity,\n  inventoryReportFetchStatus\n) => {\n  const location = useLocation().pathname?.split('/');\n  return useCallback(\n    (\n      activeReports,\n      kbaDetails,\n      filters,\n      rows,\n      searchValue = '',\n      kbaLoading = false,\n      isFirstLoad = false\n    ) => {\n      const url = window.location.href;\n      let newActiveReportsList = activeReports;\n      let isRulePresent = url.indexOf('activeRule') > -1 ? true : false;\n      if (isRulePresent && isFirstLoad) {\n        let activeRule = location[2];\n        //sorts activeReportsList by making the activeRecommendation ruleId having a higher priority when sorting, or by total_risk\n        newActiveReportsList.sort((x, y) =>\n          x.rule.rule_id === activeRule\n            ? -1\n            : y.rule.rule_id === activeRule\n            ? 1\n            : 0\n        );\n      } else if (isFirstLoad) {\n        newActiveReportsList.sort((x, y) =>\n          x.rule.total_risk > y.rule.total_risk\n            ? -1\n            : y.rule.total_risk > x.rule.total_risk\n            ? 1\n            : 0\n        );\n      }\n\n      const builtRows = newActiveReportsList.flatMap((value, key) => {\n        const rule = value.rule;\n        const resolution = value.resolution;\n        const kbaDetail = Object.keys(kbaDetails).length\n          ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n          : {};\n        const match = rows.find((row) => row?.rule?.rule_id === rule.rule_id);\n        const selected = match?.selected;\n        const isOpen =\n          match?.isOpen || (isRulePresent && isFirstLoad && key === 0);\n\n        const reportRow = [\n          {\n            rule,\n            resolution,\n            //make arrow button disappear when there is no resolution\n            isOpen: resolution ? isOpen : undefined,\n            selected,\n            disableSelection: resolution ? !resolution.has_playbook : true,\n            cells: [\n              {\n                title: (\n                  <span>\n                    {rule.description} <RuleLabels rule={rule} />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span>\n                    <DateFormat\n                      date={rule.publish_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>\n                    <DateFormat\n                      date={value.impacted_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div key={key} style={{ verticalAlign: 'top' }}>\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                          <strong>impact</strong> of the problem would be &nbsp;\n                          {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} isCompact />\n                    </Tooltip>\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div className=\"ins-c-center-text\" key={key}>\n                    {resolution === null ? (\n                      intl.formatMessage(messages.notAvailable)\n                    ) : resolution?.has_playbook ? (\n                      <span>\n                        <AnsibeTowerIcon size=\"sm\" />{' '}\n                        {intl.formatMessage(messages.playbook)}\n                      </span>\n                    ) : (\n                      intl.formatMessage(messages.manual)\n                    )}\n                  </div>\n                ),\n              },\n            ],\n          },\n          resolution && {\n            parent: key,\n            fullWidth: true,\n            cells: [\n              {\n                title: (\n                  <ReportDetails\n                    key={`child-${key}`}\n                    report={{\n                      ...value,\n                      resolution: value.resolution.resolution,\n                    }}\n                    kbaDetail={kbaDetail}\n                    kbaLoading={kbaLoading}\n                  />\n                ),\n              },\n            ],\n          },\n        ];\n        const isValidSearchValue =\n          searchValue.length === 0 ||\n          rule.description.toLowerCase().includes(searchValue.toLowerCase());\n        const isValidFilterValue =\n          Object.keys(filters).length === 0 ||\n          Object.keys(filters)\n            .map((key) => {\n              const filterValues = filters[key];\n              const rowValue = {\n                has_playbook: value.resolution?.has_playbook,\n                publish_date: rule.publish_date,\n                total_risk: rule.total_risk,\n                category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n              };\n              return filterValues.find(\n                (value) => String(value) === String(rowValue[key])\n              );\n            })\n            .every((x) => x);\n\n        return isValidSearchValue && isValidFilterValue\n          ? reportRow.filter((row) => row !== null)\n          : [];\n      });\n      //must recalculate parent for expandable table content whenever the array size changes\n      builtRows.forEach((row, index) =>\n        row.parent ? (row.parent = index - 1) : null\n      );\n\n      systemAdvisorRef.current.rowCount = activeReports.length;\n\n      if (activeReports.length < 1 || builtRows.length < 1) {\n        let EmptyState =\n          (builtRows.length === 0 && NoMatchingRecommendations) ||\n          (entity?.insights_id && NoRecommendations) ||\n          InsightsNotEnabled;\n\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <EmptyState />,\n              },\n            ],\n          },\n        ];\n      }\n\n      if (inventoryReportFetchStatus === 'failed') {\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <InventoryReportFetchFailed entity={entity} />,\n              },\n            ],\n          },\n        ];\n      }\n\n      return builtRows;\n    },\n    [entity, inventoryReportFetchStatus]\n  );\n};\n","import './SystemAdvisor.scss';\nimport { BASE_URL, FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Get } from '../../Utilities/Api';\nimport { List } from 'react-content-loader';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport NotConnected from '@redhat-cloud-services/frontend-components/NotConnected';\nimport get from 'lodash/get';\nimport {\n  getColumns,\n  getFilters,\n  useBuildRows,\n  useProcessRemediation,\n} from './SystemAdvisorAssets';\nimport downloadReport from '../../PresentationalComponents/Common/DownloadHelper';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport * as AppConstants from '../../AppConstants';\nimport { useParams } from 'react-router-dom';\nconst BaseSystemAdvisor = ({ entity, inventoryId }) => {\n  const intl = useIntl();\n  const systemAdvisorRef = useRef({\n    rowCount: 0,\n  });\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const { id: ruleIdParam } = useParams();\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n\n  const selectedTags = useSelector(({ filters }) => filters?.selectedTags);\n  const workloads = useSelector(({ filters }) => filters?.workloads);\n  const SID = useSelector(({ filters }) => filters?.SID);\n  const permsExport = usePermissions(\n    'advisor',\n    AppConstants.PERMS.export\n  ).hasAccess;\n\n  const getSelectedItems = (rows) => rows.filter((row) => row.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution?.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution?.has_playbook\n  ).length;\n\n  const cols = getColumns(intl);\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const onRemediationCreated = (result) => {\n    onBulkSelect(false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) => onRemediationCreated(result)}\n    >\n      {intl.formatMessage(messages.remediate)}\n    </RemediationButton>,\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex = ruleIdParam\n      ? activeReports.findIndex((report) => report.rule.rule_id === ruleIdParam)\n      : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = useBuildRows(\n    intl,\n    systemAdvisorRef,\n    entity,\n    inventoryReportFetchStatus\n  );\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n  const checkedStatus = () => {\n    if (selectedItemsLength === systemAdvisorRef.current.rowCount) {\n      return 1;\n    } else if (\n      selectedItemsLength > 0 ||\n      selectableItemsLength !== systemAdvisorRef.current.rowCount\n    ) {\n      return null;\n    } else {\n      return 0;\n    }\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: checkedStatus(),\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fq=documentKind:(Solution%20or%20Article)&fl=view_uri,id,publishedTitle&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(\n          reportsData,\n          kbaDetailsFetch,\n          filters,\n          rows,\n          searchValue,\n          false,\n          true\n        )\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'rule.description',\n      3: 'rule.publish_date',\n      4: 'impacted_date',\n      5: 'rule.total_risk',\n      6: 'resolution.has_playbook',\n    };\n    const d = direction === SortByDirection.asc ? 1 : -1;\n\n    const sort = () =>\n      activeReports.concat().sort((firstItem, secondItem) => {\n        let fst = get(firstItem, sortedReports[index]);\n        let snd = get(secondItem, sortedReports[index]);\n\n        if (index === 3 || index === 4) {\n          fst = new Date(fst);\n          snd = new Date(snd);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n\n    const sortedReportsDirectional = sort();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = useProcessRemediation(inventoryId);\n  const filterConfigItems = getFilters(\n    filters,\n    searchValue,\n    onInputChange,\n    onFilterChange\n  );\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const reportsFetch = await Get(\n          `${BASE_URL}/system/${inventoryId}/reports/`,\n          {\n            credentials: 'include',\n          }\n        );\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch.data);\n        fetchKbaDetails(activeRuleFirstReportsData);\n\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n  // eslint-disable-next-line react/prop-types\n  let display_name = entity?.display_name;\n  return inventoryReportFetchStatus === 'fulfilled' &&\n    entity?.insights_id === null ? (\n    <NotConnected\n      titleText={intl.formatMessage(messages.notConnectedTitle)}\n      bodyText={intl.formatMessage(messages.notConnectedBody)}\n      buttonText={intl.formatMessage(messages.notConnectedButton)}\n    />\n  ) : (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      entity?.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {`${systemAdvisorRef.current.rowCount} ${\n                (systemAdvisorRef.current.rowCount === 1 && 'Recommendation') ||\n                'Recommendations'\n              }`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n          exportConfig={{\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                'hits',\n                fileType,\n                { ...filters, text: searchValue },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch,\n                display_name\n              ),\n            isDisabled: !permsExport,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' && (\n        <Fragment>\n          <Table\n            id={'system-advisor-report-table'}\n            aria-label={'report-table'}\n            onSelect={!(rows.length === 1 && rows[0].heightAuto) && onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nBaseSystemAdvisor.propTypes = {\n  entity: PropTypes.shape({\n    insights_id: PropTypes.string,\n    id: PropTypes.string,\n  }),\n  inventoryId: PropTypes.string.isRequired,\n};\n\nconst SystemAdvisor = ({ ...props }) => {\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n  return <BaseSystemAdvisor {...props} entity={entity} />;\n};\n\nexport default SystemAdvisor;\nexport { BaseSystemAdvisor };\n"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","concat","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","format","filters","selectedTags","workloads","SID","dispatch","display_name","options","data","formattedData","_context","prev","next","length","tags","_objectSpread","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","sent","JSON","stringify","downloadFile","t0","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","RuleLabels","_rule$tags","rule","isCompact","noMargin","intl","useIntl","React","search","Tooltip","content","formatMessage","messages","position","TooltipPosition","Label","color","className","rule_status","propTypes","PropTypes","defaultProps","NoMatchingRecommendations","Bullseye","MessageState","title","text","NoRecommendations","icon","CheckIcon","iconClass","InsightsNotEnabled","ChartSpikeIcon","Stack","hasGutter","StackItem","ClipboardCopy","Button","component","href","target","variant","InventoryReportFetchFailed","entity","TimesCircleIcon","BaseSystemAdvisor","_ref8","inventoryId","systemAdvisorRef","useRef","rowCount","useDispatch","addNotificationAction","ruleIdParam","useParams","id","_useState","useState","_useState2","_slicedToArray","inventoryReportFetchStatus","setInventoryReportFetchStatus","_useState3","_useState4","rows","setRows","_useState5","_useState6","activeReports","setActiveReports","_useState7","_useState8","kbaDetailsData","setKbaDetailsData","_useState9","_useState10","sortBy","setSortBy","_useState11","_useState12","setFilters","_useState13","_useState14","searchValue","setSearchValue","_useState15","_useState16","isSelected","setIsSelected","_useState17","_useState18","isAllExpanded","setIsAllExpanded","useSelector","_ref2","_ref3","_ref4","permsExport","usePermissions","AppConstants","hasAccess","getSelectedItems","filter","row","selected","selectedAnsibleRules","r","_r$resolution","resolution","has_playbook","selectedItemsLength","selectableItemsLength","_r$resolution2","cols","transforms","sortable","fitContent","getColumns","actions","RemediationButton","key","isDisabled","dataProvider","processRemediation","onRemediationCreated","onBulkSelect","remediation","getNotification","error","dismissable","description","activeRuleFirst","reports","_toConsumableArray","activeRuleIndex","findIndex","report","rule_id","activeReport","splice","buildRows","_useLocation$pathname","location","useLocation","pathname","useCallback","kbaDetails","undefined","kbaLoading","isFirstLoad","newActiveReportsList","isRulePresent","window","indexOf","activeRule","sort","x","y","total_risk","builtRows","flatMap","value","kbaDetail","Object","keys","article","node_id","match","find","_row$rule","isOpen","reportRow","disableSelection","cells","DateFormat","publish_date","type","tooltipProps","impacted_date","style","verticalAlign","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","AnsibeTowerIcon","size","parent","fullWidth","ReportDetails","isValidSearchValue","toLowerCase","includes","isValidFilterValue","map","_value$resolution","filterValues","rowValue","category","RULE_CATEGORIES","name","String","every","forEach","index","current","EmptyState","insights_id","heightAuto","props","colSpan","useBuildRows","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","FC","values","label","capitalize","urlParam","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","_ref5","reportsData","kbaIds","kbaDetailsFetch","_ref6","join","credentials","response","docs","console","param","newFilters","_defineProperty","removeFilterParam","issues","systems","useProcessRemediation","filterConfigItems","onInputChange","onChange","getFilters","useEffect","dataFetch","_ref7","_callee2","reportsFetch","activeRuleFirstReportsData","_context2","NotConnected","titleText","bodyText","buttonText","Fragment","PrimaryToolbar","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","exportConfig","fileType","downloadReport","Card","CardBody","List","Table","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","d","SortByDirection","sortedReportsDirectional","firstItem","secondItem","fst","get","snd","TableVariant","isStickyHeader","TableHeader","TableBody","_ref9","_extends","_ref10","entityDetails"],"sourceRoot":""}