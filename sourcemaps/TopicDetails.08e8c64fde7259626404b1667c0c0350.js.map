{"version":3,"file":"js/TopicDetails.cc9572658cd1d331a3d7.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/SmartComponents/Topics/Details.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        { ...filters, ...options }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/esm/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const [setAck] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","import './_Details.scss';\n\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/esm/components/Text/Text';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport RulesTable from '../../PresentationalComponents/RulesTable/RulesTable';\nimport StarIcon from '@patternfly/react-icons/dist/esm/icons/star-icon';\nimport { TextContent } from '@patternfly/react-core/dist/esm/components/Text/TextContent';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport messages from '../../Messages';\nimport { updateRecFilters } from '../../Services/Filters';\nimport { useDispatch } from 'react-redux';\nimport { useGetTopicQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst Details = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const topicId = useParams().id;\n  let options = selectedTags?.length && { tags: selectedTags };\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n  const {\n    data: topic = {},\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetTopicQuery({ ...options, ...{ topicId } });\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    dispatch(\n      updateRecFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        topic: topicId,\n        sort: `-total_risk`,\n        limit: 10,\n        offset: 0,\n      })\n    );\n\n    return () => dispatch(updateRecFilters(initiaRecFilters));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (topic && topic.name) {\n      const subnav = `${topic.name} - ${messages.topics.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [topic]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        {topic?.name && <Breadcrumbs current={topic?.name} ouiaId=\"details\" />}\n        {!isFetching && (\n          <React.Fragment>\n            <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n              {topic.name}\n              {topic.featured && (\n                <Label\n                  color=\"blue\"\n                  className=\"adv-c-label pf-m-compact\"\n                  icon={<StarIcon />}\n                >\n                  {intl.formatMessage(messages.featured)}\n                </Label>\n              )}\n            </Title>\n            <TextContent className=\"pf-u-mt-md\">\n              <Text component={TextVariants.p}>\n                <Truncate\n                  text={topic.description}\n                  length={600}\n                  expandText={intl.formatMessage(messages.readmore)}\n                  collapseText={intl.formatMessage(messages.readless)}\n                  inline\n                />\n              </Text>\n            </TextContent>\n          </React.Fragment>\n        )}\n        {isFetching || (isLoading && <Loading />)}\n      </PageHeader>\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <React.Fragment>\n          {!isError ? (\n            <React.Fragment>\n              <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n                {intl.formatMessage(messages.recommendations)}\n              </Title>\n              <RulesTable />\n            </React.Fragment>\n          ) : (\n            <MessageState\n              icon={TimesCircleIcon}\n              title={intl.formatMessage(messages.topicDetailslNodetailsTitle)}\n              text={intl.formatMessage(messages.topicDetailslNodetailsBody)}\n            />\n          )}\n        </React.Fragment>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Details;\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","fileName","exportTable","defaultParams","date","Date","toISOString","replace","format","filters","selectedTags","workloads","SID","dispatch","options","tags","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","formattedData","JSON","stringify","downloadFile","LabelIcon","icon","text","Label","variant","color","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","labels","Number","defaultProps","RuleLabels","rule","noMargin","search","content","position","TooltipPosition","className","rule_status","DisableRule","handleModalToggle","isModalOpen","host","hosts","afterFn","useDispatch","notification","justification","setJustificaton","undefined","singleSystem","setSingleSystem","useSetAckMutation","setAck","bulkHostActions","systems","Post","rule_id","dismissable","timeout","disableRule","type","system_uuid","unwrap","isOpen","onClose","actions","onClick","fieldId","isChecked","onChange","name","value","onKeyDown","e","preventDefault","system","useSelector","recFilters","recState","topicId","useParams","useGetTopicQuery","topic","isLoading","isError","initiaRecFilters","updateRecFilters","impacting","limit","offset","subnav","document","headingLevel","size","featured","component","TextVariants","expandText","collapseText","inline","TimesCircleIcon"],"sourceRoot":""}