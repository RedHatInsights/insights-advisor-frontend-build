{"version":3,"file":"js/3815.1682344446087.b9475043543f1a37dabb.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/SmartComponents/SystemAdvisor/EmptyStates.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisorAssets.js"],"sourcesContent":["import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport ChartSpikeIcon from '@patternfly/react-icons/dist/esm/icons/chartSpike-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport {\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PropTypes from 'prop-types';\n\nexport const NoMatchingRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      title=\"No matching recommendations found\"\n      text={`To continue, edit your filter settings and search again.`}\n    />\n  </Bullseye>\n);\n\nexport const NoRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      icon={CheckIcon}\n      iconClass=\"ins-c-insights__check\"\n      title=\"No recommendations\"\n      text={`No known recommendations affect this system`}\n    />\n  </Bullseye>\n);\n\nexport const InsightsNotEnabled = () => (\n  <MessageState\n    iconClass=\"chartSpikeIconColor\"\n    icon={ChartSpikeIcon}\n    title=\"Get started with Red Hat Insights\"\n    text={\n      <Bullseye>\n        <Stack hasGutter>\n          <StackItem>\n            1. Install the client on the RHEL system.\n            <ClipboardCopy>yum install insights-client</ClipboardCopy>\n          </StackItem>\n          <StackItem>\n            2. Register the system to Red Hat Insights.\n            <ClipboardCopy>insights-client --register</ClipboardCopy>\n          </StackItem>\n        </Stack>\n      </Bullseye>\n    }\n  >\n    <Button\n      component=\"a\"\n      href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n      target=\"_blank\"\n      variant=\"primary\"\n    >\n      Getting started documentation\n    </Button>\n  </MessageState>\n);\n\nexport const InventoryReportFetchFailed = ({ entity }) => (\n  <Bullseye>\n    <MessageState\n      icon={TimesCircleIcon}\n      title=\"Error getting recommendations\"\n      text={\n        entity\n          ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n          : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n      }\n    />\n  </Bullseye>\n);\n\nInventoryReportFetchFailed.propTypes = {\n  entity: PropTypes.object,\n};\n","import './SystemAdvisor.scss';\nimport { BASE_URL, FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Get } from '../../Utilities/Api';\nimport { List } from 'react-content-loader';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport NotConnected from '@redhat-cloud-services/frontend-components/NotConnected';\nimport get from 'lodash/get';\nimport {\n  getColumns,\n  getFilters,\n  useBuildRows,\n  useProcessRemediation,\n} from './SystemAdvisorAssets';\n\nconst BaseSystemAdvisor = ({ entity, inventoryId }) => {\n  const intl = useIntl();\n  const systemAdvisorRef = useRef({\n    rowCount: 0,\n  });\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const routerData = useSelector(({ routerData }) => routerData);\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n\n  const getSelectedItems = (rows) => rows.filter((row) => row.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution?.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution?.has_playbook\n  ).length;\n\n  const cols = getColumns(intl);\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const onRemediationCreated = (result) => {\n    onBulkSelect(false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) => onRemediationCreated(result)}\n    >\n      {intl.formatMessage(messages.remediate)}\n    </RemediationButton>,\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex =\n      routerData && typeof routerData.params !== 'undefined'\n        ? activeReports.findIndex(\n            (report) => report.rule.rule_id === routerData.params.id\n          )\n        : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = useBuildRows(\n    intl,\n    systemAdvisorRef,\n    entity,\n    inventoryReportFetchStatus\n  );\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n  const checkedStatus = () => {\n    if (selectedItemsLength === systemAdvisorRef.current.rowCount) {\n      return 1;\n    } else if (\n      selectedItemsLength > 0 ||\n      selectableItemsLength !== systemAdvisorRef.current.rowCount\n    ) {\n      return null;\n    } else {\n      return 0;\n    }\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: checkedStatus(),\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fl=view_uri,id,publishedTitle&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(\n          reportsData,\n          kbaDetailsFetch,\n          filters,\n          rows,\n          searchValue,\n          false,\n          true\n        )\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'rule.description',\n      3: 'rule.publish_date',\n      4: 'impacted_date',\n      5: 'rule.total_risk',\n      6: 'resolution.has_playbook',\n    };\n    const d = direction === SortByDirection.asc ? 1 : -1;\n\n    const sort = () =>\n      activeReports.concat().sort((firstItem, secondItem) => {\n        let fst = get(firstItem, sortedReports[index]);\n        let snd = get(secondItem, sortedReports[index]);\n\n        if (index === 3 || index === 4) {\n          fst = new Date(fst);\n          snd = new Date(snd);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n\n    const sortedReportsDirectional = sort();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = useProcessRemediation(inventoryId);\n  const filterConfigItems = getFilters(\n    filters,\n    searchValue,\n    onInputChange,\n    onFilterChange\n  );\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const reportsFetch = await Get(\n          `${BASE_URL}/system/${inventoryId}/reports/`,\n          {\n            credentials: 'include',\n          }\n        );\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch.data);\n        fetchKbaDetails(activeRuleFirstReportsData);\n\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n\n  return inventoryReportFetchStatus === 'fulfilled' &&\n    entity?.insights_id === null ? (\n    <NotConnected\n      titleText={intl.formatMessage(messages.notConnectedTitle)}\n      bodyText={intl.formatMessage(messages.notConnectedBody)}\n      buttonText={intl.formatMessage(messages.notConnectedButton)}\n    />\n  ) : (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      entity?.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {`${systemAdvisorRef.current.rowCount} ${\n                (systemAdvisorRef.current.rowCount === 1 && 'Recommendation') ||\n                'Recommendations'\n              }`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' && (\n        <Fragment>\n          <Table\n            id={'system-advisor-report-table'}\n            aria-label={'report-table'}\n            onSelect={!(rows.length === 1 && rows[0].heightAuto) && onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nBaseSystemAdvisor.propTypes = {\n  entity: PropTypes.shape({\n    insights_id: PropTypes.string,\n    id: PropTypes.string,\n  }),\n  inventoryId: PropTypes.string.isRequired,\n};\n\nconst SystemAdvisor = ({ ...props }) => {\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n  return <BaseSystemAdvisor {...props} entity={entity} />;\n};\n\nexport default SystemAdvisor;\nexport { BaseSystemAdvisor };\n","import './SystemAdvisor.scss';\nimport React, { useCallback } from 'react';\nimport { fitContent, sortable } from '@patternfly/react-table';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport AnsibeTowerIcon from '@patternfly/react-icons/dist/esm/icons/ansibeTower-icon';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components/ReportDetails';\nimport {\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  NoMatchingRecommendations,\n  NoRecommendations,\n  InsightsNotEnabled,\n  InventoryReportFetchFailed,\n} from './EmptyStates';\nimport { useLocation } from 'react-router-dom';\n\nimport messages from '../../Messages';\n\nexport const getColumns = (intl) => [\n  {\n    title: intl.formatMessage(messages.topicAddEditDescription),\n    transforms: [sortable],\n  },\n  {\n    title: intl.formatMessage(messages.modified),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.firstImpacted),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.totalRisk),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.remediation),\n    transforms: [sortable, fitContent],\n  },\n];\n\nexport const getFilters = (\n  filters,\n  searchValue,\n  onInputChange,\n  onFilterChange\n) => [\n  {\n    label: 'description',\n    filterValues: {\n      key: 'text-filter',\n      onChange: (_e, value) => onInputChange(value),\n      value: searchValue,\n    },\n  },\n  {\n    label: FC.total_risk.title,\n    type: FC.total_risk.type,\n    id: FC.total_risk.urlParam,\n    value: `checkbox-${FC.total_risk.urlParam}`,\n    filterValues: {\n      key: `${FC.total_risk.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.total_risk.urlParam, values),\n      value: filters.total_risk,\n      items: FC.total_risk.values,\n    },\n  },\n  {\n    label: FC.category.title,\n    type: FC.category.type,\n    id: FC.category.urlParam,\n    value: `checkbox-${FC.category.urlParam}`,\n    filterValues: {\n      key: `${FC.category.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n      value: filters.category,\n      items: FC.category.values,\n    },\n  },\n  {\n    label: FC.has_playbook.title,\n    type: FC.has_playbook.type,\n    id: FC.has_playbook.urlParam,\n    value: `checkbox-${FC.has_playbook.urlParam}`,\n    filterValues: {\n      key: `${FC.has_playbook.urlParam}-filter`,\n      onChange: (_e, values) =>\n        onFilterChange(FC.has_playbook.urlParam, values),\n      value: filters.has_playbook,\n      items: FC.has_playbook.values,\n    },\n  },\n];\n\nexport const useProcessRemediation = (inventoryId) =>\n  useCallback(\n    (selectedAnsibleRules) => {\n      const playbookRows = selectedAnsibleRules.filter(\n        (r) => r.resolution?.has_playbook\n      );\n      const issues = playbookRows.map((r) => ({\n        id: `advisor:${r.rule.rule_id}`,\n        description: r.rule.description,\n      }));\n      return issues.length ? { issues, systems: [inventoryId] } : false;\n    },\n    [inventoryId]\n  );\n\nexport const useBuildRows = (\n  intl,\n  systemAdvisorRef,\n  entity,\n  inventoryReportFetchStatus\n) => {\n  const location = useLocation().pathname?.split('/');\n  return useCallback(\n    (\n      activeReports,\n      kbaDetails,\n      filters,\n      rows,\n      searchValue = '',\n      kbaLoading = false,\n      isFirstLoad = false\n    ) => {\n      const url = window.location.href;\n      let newActiveReportsList = activeReports;\n      let isRulePresent = url.indexOf('activeRule') > -1 ? true : false;\n      if (isRulePresent && isFirstLoad) {\n        let activeRule = location[2];\n        //sorts activeReportsList by making the activeRecommendation ruleId having a higher priority when sorting, or by total_risk\n        newActiveReportsList.sort((x, y) =>\n          x.rule.rule_id === activeRule\n            ? -1\n            : y.rule.rule_id === activeRule\n            ? 1\n            : 0\n        );\n      } else if (isFirstLoad) {\n        newActiveReportsList.sort((x, y) =>\n          x.rule.total_risk > y.rule.total_risk\n            ? -1\n            : y.rule.total_risk > x.rule.total_risk\n            ? 1\n            : 0\n        );\n      }\n\n      const builtRows = newActiveReportsList.flatMap((value, key) => {\n        const rule = value.rule;\n        const resolution = value.resolution;\n        const kbaDetail = Object.keys(kbaDetails).length\n          ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n          : {};\n        const match = rows.find((row) => row?.rule?.rule_id === rule.rule_id);\n        const selected = match?.selected;\n        const isOpen =\n          match?.isOpen || (isRulePresent && isFirstLoad && key === 0);\n\n        const reportRow = [\n          {\n            rule,\n            resolution,\n            //make arrow button disappear when there is no resolution\n            isOpen: resolution ? isOpen : undefined,\n            selected,\n            disableSelection: resolution ? !resolution.has_playbook : true,\n            cells: [\n              {\n                title: (\n                  <span>\n                    {rule.description} <RuleLabels rule={rule} />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span>\n                    <DateFormat\n                      date={rule.publish_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>\n                    <DateFormat\n                      date={value.impacted_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div key={key} style={{ verticalAlign: 'top' }}>\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                          <strong>impact</strong> of the problem would be &nbsp;\n                          {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} isCompact />\n                    </Tooltip>\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div className=\"ins-c-center-text\" key={key}>\n                    {resolution === null ? (\n                      intl.formatMessage(messages.notAvailable)\n                    ) : resolution?.has_playbook ? (\n                      <span>\n                        <AnsibeTowerIcon size=\"sm\" />{' '}\n                        {intl.formatMessage(messages.playbook)}\n                      </span>\n                    ) : (\n                      intl.formatMessage(messages.manual)\n                    )}\n                  </div>\n                ),\n              },\n            ],\n          },\n          resolution && {\n            parent: key,\n            fullWidth: true,\n            cells: [\n              {\n                title: (\n                  <ReportDetails\n                    key={`child-${key}`}\n                    report={{\n                      ...value,\n                      resolution: value.resolution.resolution,\n                    }}\n                    kbaDetail={kbaDetail}\n                    kbaLoading={kbaLoading}\n                  />\n                ),\n              },\n            ],\n          },\n        ];\n        const isValidSearchValue =\n          searchValue.length === 0 ||\n          rule.description.toLowerCase().includes(searchValue.toLowerCase());\n        const isValidFilterValue =\n          Object.keys(filters).length === 0 ||\n          Object.keys(filters)\n            .map((key) => {\n              const filterValues = filters[key];\n              const rowValue = {\n                has_playbook: value.resolution?.has_playbook,\n                publish_date: rule.publish_date,\n                total_risk: rule.total_risk,\n                category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n              };\n              return filterValues.find(\n                (value) => String(value) === String(rowValue[key])\n              );\n            })\n            .every((x) => x);\n\n        return isValidSearchValue && isValidFilterValue\n          ? reportRow.filter((row) => row !== null)\n          : [];\n      });\n      //must recalculate parent for expandable table content whenever the array size changes\n      builtRows.forEach((row, index) =>\n        row.parent ? (row.parent = index - 1) : null\n      );\n\n      systemAdvisorRef.current.rowCount = activeReports.length;\n\n      if (activeReports.length < 1 || builtRows.length < 1) {\n        let EmptyState =\n          (builtRows.length === 0 && NoMatchingRecommendations) ||\n          (entity?.insights_id && NoRecommendations) ||\n          InsightsNotEnabled;\n\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <EmptyState />,\n              },\n            ],\n          },\n        ];\n      }\n\n      if (inventoryReportFetchStatus === 'failed') {\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <InventoryReportFetchFailed entity={entity} />,\n              },\n            ],\n          },\n        ];\n      }\n\n      return builtRows;\n    },\n    [entity, inventoryReportFetchStatus]\n  );\n};\n"],"names":["RuleLabels","rule","isCompact","noMargin","intl","useIntl","tags","search","content","formatMessage","messages","position","TooltipPosition","color","className","rule_status","propTypes","PropTypes","defaultProps","NoMatchingRecommendations","Bullseye","MessageState","title","text","NoRecommendations","icon","CheckIcon","iconClass","InsightsNotEnabled","ChartSpikeIcon","Stack","hasGutter","StackItem","ClipboardCopy","Button","component","href","target","variant","InventoryReportFetchFailed","entity","TimesCircleIcon","BaseSystemAdvisor","inventoryId","systemAdvisorRef","useRef","rowCount","dispatch","useDispatch","addNotification","data","addNotificationAction","routerData","useSelector","useState","inventoryReportFetchStatus","setInventoryReportFetchStatus","rows","setRows","activeReports","setActiveReports","kbaDetailsData","setKbaDetailsData","sortBy","setSortBy","filters","setFilters","searchValue","setSearchValue","isSelected","setIsSelected","isAllExpanded","setIsAllExpanded","getSelectedItems","filter","row","selected","selectedAnsibleRules","r","resolution","has_playbook","selectedItemsLength","length","selectableItemsLength","cols","transforms","sortable","fitContent","getColumns","actions","RemediationButton","key","isDisabled","dataProvider","processRemediation","onRemediationCreated","result","onBulkSelect","remediation","getNotification","error","dismissable","description","activeRuleFirst","reports","activeRuleIndex","params","findIndex","report","rule_id","id","activeReport","splice","buildRows","location","useLocation","pathname","split","useCallback","kbaDetails","kbaLoading","isFirstLoad","newActiveReportsList","isRulePresent","window","indexOf","activeRule","sort","x","y","total_risk","builtRows","flatMap","value","kbaDetail","Object","keys","article","node_id","match","find","isOpen","reportRow","undefined","disableSelection","cells","DateFormat","date","publish_date","type","tooltipProps","impacted_date","style","verticalAlign","Tooltip","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","size","parent","fullWidth","ReportDetails","isValidSearchValue","toLowerCase","includes","isValidFilterValue","map","filterValues","rowValue","category","RULE_CATEGORIES","name","String","every","forEach","index","current","EmptyState","insights_id","heightAuto","props","colSpan","useBuildRows","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","FC","values","label","capitalize","urlParam","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","reportsData","kbaIds","Get","join","credentials","kbaDetailsFetch","response","docs","console","param","newFilters","removeFilterParam","issues","systems","useProcessRemediation","filterConfigItems","onInputChange","onChange","getFilters","useEffect","dataFetch","BASE_URL","reportsFetch","activeRuleFirstReportsData","NotConnected","titleText","bodyText","buttonText","Fragment","PrimaryToolbar","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","Card","CardBody","Table","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","d","SortByDirection","sortedReportsDirectional","concat","firstItem","secondItem","fst","get","snd","Date","TableVariant","isStickyHeader","entityDetails"],"sourceRoot":""}