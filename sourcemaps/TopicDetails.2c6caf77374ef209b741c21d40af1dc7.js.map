{"version":3,"file":"js/TopicDetails.1651749599300.edc36e40a64ee31d897a.js","mappings":"+PAWMA,EAAc,SAAC,GAAgB,MAAdC,EAAc,EAAdA,QACfC,GAAOC,EAAAA,EAAAA,KACPC,EAAQ,WAAGC,EAAAA,EAAAA,eAAcC,gBAAjB,aAAG,EAAwBC,MAAM,KAC/C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,IACc,oBAAhBP,EAAS,IAAgD,IAApBA,EAASQ,SAChC,aAAhBR,EAAS,GACX,GAA6BS,EAAAA,EAAAA,IAC3B,CAAEC,OAAQV,EAAS,IACnB,CAAEO,KAAAA,IAFII,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAsCd,OAjCAC,EAAAA,EAAAA,YAAU,WACR,IACMC,GAAAA,EAAS,IAENC,KAAK,CACVC,MAAO,GAAF,OAAKlB,EAAKmB,cAAcC,EAAAA,EAAAA,gBAAxB,YAAoDlB,EAAS,IAClEmB,SAAU,IAAF,OAAMnB,EAAS,MAIpBO,GACHO,EAAOC,KAAK,CACVC,MAAOL,MAAAA,OAAF,EAAEA,EAAMS,YACbD,SAAU,IAAF,OAAMnB,EAAS,GAAf,YAAqBA,EAAS,MAItB,aAAhBA,EAAS,KACXc,EAAS,CACP,CACEE,MAAO,mBACPG,SAAU,+BAKhBb,EAASQ,KAKV,CAACH,IAGF,kBAAC,aAAD,MACIC,GAAcP,EAAMG,OAAS,EAC7B,kBAAC,IAAD,CAAYa,OAAO,UAChBhB,EAAMiB,KAAI,SAACC,EAASC,GAAV,OACT,kBAAC,IAAD,CAAgBA,IAAKA,GACnB,kBAAC,EAAAC,KAAD,CAAMC,GAAIH,EAAQJ,UAAWI,EAAQP,WAGzC,kBAAC,IAAD,CAAgBW,UAAQ,GAAE9B,IAG5BC,EAAKmB,cAAcC,EAAAA,EAAAA,WAM3BtB,EAAYgC,UAAY,CACtB/B,QAASgC,IAAAA,QAGX,W,iLC1DMC,GAAQC,EAAAA,EAAAA,MACRC,EAASC,UAAUC,SAASC,MAAM,EAAG,GACrCrC,GAAOsC,EAAAA,EAAAA,GACX,CAEEC,QAASC,QAAQC,IACjBP,OAAAA,GAEFF,GAGIU,EAAiB,SAACC,GAAD,OACrB,0BAAMC,UAAU,6BACd,kBAAC,KAAD,CACEA,UACED,EACI,6BACA,kCAGR,kBAAC,EAAAE,YAAD,CAAaD,UAAU,oCACrB,kBAAC,EAAAE,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,GACdhD,EAAKmB,cAAcC,EAAAA,EAAAA,aAAuB,CACzC6B,OAAQ,SAACC,GAAD,OAASD,EAAAA,EAAAA,GAAOC,IACxBC,OAAQR,EACJ3C,EAAKmB,cAAcC,EAAAA,EAAAA,IACnBpB,EAAKmB,cAAcC,EAAAA,EAAAA,aAO3BgC,EAAkB,SAACC,GAAD,OACtB,kBAAC,IAAD,CACE3B,IAAK2B,EACLC,SAAUC,EAAAA,EAAAA,MACVC,QAAS,6BAAMH,IAEf,0BAAMI,aAAW,UACf,kBAAC,KAAD,CAA4BC,MAAOC,EAAAA,2BAAAA,Y,83BCiEzC,QAhGgB,WACd,IAAM3D,GAAOC,EAAAA,EAAAA,KACP2D,GAAWC,EAAAA,EAAAA,eAEXC,GAAeC,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBF,gBACpDG,GAAYF,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBC,aACjDC,GAAMH,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBE,OAC3CC,GAAaJ,EAAAA,EAAAA,cAAY,qBAAGC,QAAsBI,YAClDC,GAAUC,EAAAA,EAAAA,aAAYC,GACxBC,GAAUV,MAAAA,OAAA,EAAAA,EAAcpD,SAAU,CAAE+D,KAAMX,GAC9CG,IACGO,EAAU,EAAH,KAAQA,IAAYE,EAAAA,EAAAA,IAAqBT,EAAWC,KAE9D,OAKIS,EAAAA,EAAAA,IAAiB,EAAD,KAAMH,GAAY,CAAEH,QAAAA,KALxC,IACExD,KAAM+D,OADR,MACgB,GADhB,EAEEC,EAFF,EAEEA,UACA/D,EAHF,EAGEA,WACAgE,EAJF,EAIEA,QA4BF,OAzBA/D,EAAAA,EAAAA,YAAU,WACR,IAAMgE,EAAmB,EAAH,GAAQZ,GAY9B,OAXAP,GACEoB,EAAAA,EAAAA,IAAiB,CACfC,WAAW,EACXC,YAAa,UACbN,MAAOP,EACPc,KAAM,cACNC,MAAO,GACPC,OAAQ,KAIL,kBAAMzB,GAASoB,EAAAA,EAAAA,IAAiBD,OAEtC,KAEHhE,EAAAA,EAAAA,YAAU,WACR,GAAI6D,GAASA,EAAMU,KAAM,CACvB,IAAMC,EAAS,GAAH,OAAMX,EAAMU,KAAZ,cAAsBlE,EAAAA,EAAAA,OAAAA,gBAClCoE,SAAStE,MAAQlB,EAAKmB,cAAcC,EAAAA,EAAAA,cAAwB,CAAEmE,OAAAA,OAG/D,CAACX,IAGF,kBAAC,aAAD,KACE,kBAAC,IAAD,MACGA,MAAAA,OAAA,EAAAA,EAAOU,OAAQ,kBAAC,IAAD,CAAavF,QAAS6E,MAAAA,OAAF,EAAEA,EAAOU,KAAM/D,OAAO,aACxDT,GACA,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAO2E,aAAa,KAAKC,KAAK,MAAM9C,UAAU,cAC3CgC,EAAMU,KACNV,EAAMe,UACL,kBAAC,EAAAC,MAAD,CAAOlC,MAAM,OAAOd,UAAU,cAAciD,KAAM,kBAAC,KAAD,OAC/C7F,EAAKmB,cAAcC,EAAAA,EAAAA,YAI1B,kBAAC,EAAAyB,YAAD,CAAaD,UAAU,cACrB,kBAAC,EAAAE,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,GACf,kBAAC,IAAD,CACEK,KAAMuB,EAAMtD,YACZZ,OAAQ,IACRoF,WAAY9F,EAAKmB,cAAcC,EAAAA,EAAAA,UAC/B2E,aAAc/F,EAAKmB,cAAcC,EAAAA,EAAAA,UACjC4E,QAAM,OAMflF,GAAe+D,GAAa,kBAAC,IAAD,OAE/B,kBAAC,IAAD,KACE,kBAAC,aAAD,KACIC,EAQA,kBAAC,IAAD,CACEe,KAAMI,EAAAA,QACN/E,MAAOlB,EAAKmB,cAAcC,EAAAA,EAAAA,6BAC1BiC,KAAMrD,EAAKmB,cAAcC,EAAAA,EAAAA,8BAV3B,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAOqE,aAAa,KAAKC,KAAK,MAAM9C,UAAU,cAC3C5C,EAAKmB,cAAcC,EAAAA,EAAAA,kBAEtB,kBAAC,UAAD,Y","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/SmartComponents/Topics/Details.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[1]}`,\n        navigate: `/${location[1]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import './_Details.scss';\n\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport RulesTable from '../../PresentationalComponents/RulesTable/RulesTable';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport messages from '../../Messages';\nimport { updateRecFilters } from '../../Services/Filters';\nimport { useDispatch } from 'react-redux';\nimport { useGetTopicQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst Details = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const topicId = useParams().id;\n  let options = selectedTags?.length && { tags: selectedTags };\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n  const {\n    data: topic = {},\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetTopicQuery({ ...options, ...{ topicId } });\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    dispatch(\n      updateRecFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        topic: topicId,\n        sort: `-total_risk`,\n        limit: 10,\n        offset: 0,\n      })\n    );\n\n    return () => dispatch(updateRecFilters(initiaRecFilters));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (topic && topic.name) {\n      const subnav = `${topic.name} - ${messages.topics.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [topic]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        {topic?.name && <Breadcrumbs current={topic?.name} ouiaId=\"details\" />}\n        {!isFetching && (\n          <React.Fragment>\n            <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n              {topic.name}\n              {topic.featured && (\n                <Label color=\"blue\" className=\"adv-c-label\" icon={<StarIcon />}>\n                  {intl.formatMessage(messages.featured)}\n                </Label>\n              )}\n            </Title>\n            <TextContent className=\"pf-u-mt-md\">\n              <Text component={TextVariants.p}>\n                <Truncate\n                  text={topic.description}\n                  length={600}\n                  expandText={intl.formatMessage(messages.readmore)}\n                  collapseText={intl.formatMessage(messages.readless)}\n                  inline\n                />\n              </Text>\n            </TextContent>\n          </React.Fragment>\n        )}\n        {isFetching || (isLoading && <Loading />)}\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {!isError ? (\n            <React.Fragment>\n              <Title headingLevel=\"h3\" size=\"2xl\" className=\"pf-u-mb-lg\">\n                {intl.formatMessage(messages.recommendations)}\n              </Title>\n              <RulesTable />\n            </React.Fragment>\n          ) : (\n            <MessageState\n              icon={TimesCircleIcon}\n              title={intl.formatMessage(messages.topicDetailslNodetailsTitle)}\n              text={intl.formatMessage(messages.topicDetailslNodetailsBody)}\n            />\n          )}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Details;\n"],"names":["Breadcrumbs","current","intl","useIntl","location","useLocation","pathname","split","useState","items","setItems","skip","length","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","formatMessage","messages","navigate","description","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","onError","console","log","RebootRequired","reboot_required","className","TextContent","Text","component","TextVariants","strong","str","status","QuestionTooltip","text","position","TooltipPosition","content","aria-label","color","global_secondary_color_100","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","recFilters","recState","topicId","useParams","id","options","tags","workloadQueryBuilder","useGetTopicQuery","topic","isLoading","isError","initiaRecFilters","updateRecFilters","impacting","rule_status","sort","limit","offset","name","subnav","document","headingLevel","size","featured","Label","icon","expandText","collapseText","inline","TimesCircleIcon"],"sourceRoot":""}