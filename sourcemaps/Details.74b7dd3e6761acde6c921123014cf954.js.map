{"version":3,"file":"js/Details.05f27570373e8730fd18.js","mappings":"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","sources":["webpack:///./src/SmartComponents/Recs/Details.js"],"sourcesContent":["import './Details.scss';\n\nimport {\n  BASE_URL,\n  PERMS,\n  RISK_OF_CHANGE_DESC,\n  SYSTEM_TYPES,\n  UI_BASE,\n} from '../../AppConstants';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n} from '@patternfly/react-core/dist/js/components/Card';\nimport { DeleteApi, Get, Post } from '../../Utilities/Api';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport BellSlashIcon from '@patternfly/react-icons/dist/js/icons/bell-slash-icon';\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport DisableRule from '../../PresentationalComponents/Modals/DisableRule';\nimport { Dropdown } from '@patternfly/react-core/dist/js/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownItem';\nimport { DropdownToggle } from '@patternfly/react-core/dist/js/components/Dropdown/DropdownToggle';\nimport Failed from '../../PresentationalComponents/Loading/Failed';\nimport { Flex } from '@patternfly/react-core/dist/js/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex/FlexItem';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport RuleDetails from '../../PresentationalComponents/RuleDetails/RuleDetails';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport ViewHostAcks from '../../PresentationalComponents/Modals/ViewHostAcks';\nimport { cveToRuleid } from '../../cveToRuleid.js';\nimport messages from '../../Messages';\nimport { addNotification as notification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useGetRecAcksQuery } from '../../Services/Acks';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useGetTopicsQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst OverviewDetails = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const ruleId = useParams().id;\n  const addNotification = (data) => dispatch(notification(data));\n\n  const {\n    data: rule = {},\n    isFetching,\n    isError,\n    refetch,\n  } = useGetRecQuery({ ruleId });\n\n  const {\n    data: recAck = {},\n    isFetching: recAckIsFetching,\n    refetch: recAckRefetch,\n  } = useGetRecAcksQuery({ ruleId });\n\n  const { data: topics = [], isFetching: topicIsFetching } =\n    useGetTopicsQuery();\n\n  const permsDisableRec = usePermissions('advisor', PERMS.disableRec).hasAccess;\n  const [actionsDropdownOpen, setActionsDropdownOpen] = useState(false);\n  const [disableRuleModalOpen, setDisableRuleModalOpen] = useState(false);\n  const [host, setHost] = useState(undefined);\n  const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n\n  const ruleResolutionRisk = (rule) => {\n    const resolution = rule?.resolution_set?.find(\n      (resolution) =>\n        resolution.system_type === SYSTEM_TYPES.rhel || SYSTEM_TYPES.ocp\n    );\n    return resolution ? resolution.resolution_risk.risk : undefined;\n  };\n\n  const handleModalToggle = (disableRuleModalOpen, host = undefined) => {\n    setDisableRuleModalOpen(disableRuleModalOpen);\n    setHost(host);\n  };\n\n  const enableRule = async (rule) => {\n    try {\n      await DeleteApi(`${BASE_URL}/ack/${rule.rule_id}/`);\n      addNotification({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabled),\n      });\n      refetch();\n    } catch (error) {\n      handleModalToggle(false);\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const afterDisableFn = async () => {\n    setHost(undefined);\n    refetch();\n    recAckRefetch();\n  };\n\n  const actionResolver = () => [\n    {\n      title: 'Disable recommendation for system',\n      onClick: (event, rowIndex, item) => handleModalToggle(true, item),\n    },\n  ];\n\n  const bulkHostActions = async () => {\n    try {\n      const hostAckResponse = (\n        await Get(\n          `${BASE_URL}/hostack/`,\n          {},\n          { rule_id: rule.rule_id, limit: rule.hosts_acked_count }\n        )\n      ).data;\n      const data = {\n        systems: hostAckResponse?.data?.map((item) => item.system_uuid),\n      };\n\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/unack_hosts/`, {}, data);\n      refetch();\n      addNotification({\n        variant: 'success',\n        timeout: true,\n        dismissable: true,\n        title: intl.formatMessage(messages.recSuccessfullyEnabledForSystem),\n      });\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const isCVE =\n      cveToRuleid && cveToRuleid.find((mapping) => mapping.rule_id === ruleId);\n\n    if (isCVE) {\n      window.location.href = `${UI_BASE}/vulnerability/cves/${\n        isCVE.cves[0].includes('CVE-')\n          ? `${isCVE.cves[0]}?security_rule=${ruleId}`\n          : ''\n      }`;\n    }\n\n    if (rule?.description) {\n      const subnav = `${rule.description} - ${messages.recommendations.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {viewSystemsModalOpen && (\n        <ViewHostAcks\n          handleModalToggle={(toggleModal) =>\n            setViewSystemsModalOpen(toggleModal)\n          }\n          isModalOpen={viewSystemsModalOpen}\n          afterFn={() => refetch()}\n          rule={rule}\n        />\n      )}\n      {disableRuleModalOpen && (\n        <DisableRule\n          handleModalToggle={handleModalToggle}\n          isModalOpen={disableRuleModalOpen}\n          rule={rule}\n          afterFn={afterDisableFn}\n          host={host}\n        />\n      )}\n      {!isFetching && !topicIsFetching && (\n        <React.Fragment>\n          <PageHeader className=\"pageHeaderOverride\">\n            <Breadcrumbs ouiaId=\"override\" current={rule.description || ''} />\n          </PageHeader>\n          <Main className=\"pf-m-light pf-u-pt-sm\">\n            <RuleDetails\n              resolutionRisk={ruleResolutionRisk(rule)}\n              riskOfChangeDesc={RISK_OF_CHANGE_DESC[ruleResolutionRisk(rule)]}\n              isDetailsPage\n              rule={rule}\n              topics={topics}\n              header={\n                <React.Fragment>\n                  <PageHeaderTitle\n                    title={\n                      <React.Fragment>\n                        {rule.description} <RuleLabels rule={rule} />\n                      </React.Fragment>\n                    }\n                  />\n                  <p>\n                    {intl.formatMessage(messages.rulesDetailsPubishdate, {\n                      date: (\n                        <DateFormat\n                          date={new Date(rule.publish_date)}\n                          type=\"onlyDate\"\n                        />\n                      ),\n                    })}\n                    <Label className=\"categoryLabel\" color=\"blue\">\n                      {rule.category.name}\n                    </Label>\n                  </p>\n                </React.Fragment>\n              }\n              onFeedbackChanged={async (ruleId, calculatedRating) => {\n                await Post(\n                  `${BASE_URL}/rating/`,\n                  {},\n                  { rule: ruleId, rating: calculatedRating }\n                );\n              }}\n            >\n              <Flex>\n                <FlexItem align={{ default: 'alignRight' }}>\n                  <Tooltip\n                    trigger={!permsDisableRec ? 'mouseenter' : ''}\n                    content={intl.formatMessage(messages.permsAction)}\n                  >\n                    <Dropdown\n                      className=\"ins-c-rec-details__actions_dropdown\"\n                      onSelect={() =>\n                        setActionsDropdownOpen(!actionsDropdownOpen)\n                      }\n                      position=\"right\"\n                      ouiaId=\"actions\"\n                      toggle={\n                        <DropdownToggle\n                          isDisabled={!permsDisableRec}\n                          onToggle={(actionsDropdownOpen) =>\n                            setActionsDropdownOpen(actionsDropdownOpen)\n                          }\n                          toggleIndicator={CaretDownIcon}\n                        >\n                          {intl.formatMessage(messages.actions)}\n                        </DropdownToggle>\n                      }\n                      isOpen={actionsDropdownOpen}\n                      dropdownItems={\n                        rule && rule.rule_status === 'enabled'\n                          ? [\n                              <DropdownItem\n                                key=\"link\"\n                                ouiaId=\"disable\"\n                                onClick={() => {\n                                  handleModalToggle(true);\n                                }}\n                              >\n                                {intl.formatMessage(messages.disableRule)}\n                              </DropdownItem>,\n                            ]\n                          : [\n                              <DropdownItem\n                                key=\"link\"\n                                ouiaId=\"enable\"\n                                onClick={() => {\n                                  enableRule(rule);\n                                }}\n                              >\n                                {intl.formatMessage(messages.enableRule)}\n                              </DropdownItem>,\n                            ]\n                      }\n                    />\n                  </Tooltip>\n                </FlexItem>\n              </Flex>\n            </RuleDetails>\n          </Main>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <Main>\n        {!isFetching ? (\n          <React.Fragment>\n            {(rule.hosts_acked_count > 0 || rule.rule_status !== 'enabled') && (\n              <Card className=\"cardOverride\">\n                <CardHeader>\n                  <Title headingLevel=\"h4\" size=\"xl\">\n                    <BellSlashIcon size=\"sm\" />\n                    &nbsp;\n                    {intl.formatMessage(\n                      rule.hosts_acked_count > 0 &&\n                        rule.rule_status === 'enabled'\n                        ? messages.ruleIsDisabledForSystems\n                        : messages.ruleIsDisabled\n                    )}\n                  </Title>\n                </CardHeader>\n                <CardBody>\n                  {rule.hosts_acked_count > 0 &&\n                  rule.rule_status === 'enabled' ? (\n                    <React.Fragment>\n                      {intl.formatMessage(\n                        messages.ruleIsDisabledForSystemsBody,\n                        {\n                          systems: rule.hosts_acked_count,\n                        }\n                      )}\n                      &nbsp;\n                      <Button\n                        isInline\n                        variant=\"link\"\n                        onClick={() => setViewSystemsModalOpen(true)}\n                        ouiaId=\"viewSystems\"\n                      >\n                        {intl.formatMessage(messages.viewSystems)}\n                      </Button>\n                    </React.Fragment>\n                  ) : (\n                    !recAckIsFetching && (\n                      <React.Fragment>\n                        {intl.formatMessage(\n                          messages.ruleIsDisabledJustification\n                        )}\n                        <i>\n                          {recAck.justification ||\n                            intl.formatMessage(messages.none)}\n                        </i>\n                        {recAck.updated_at && (\n                          <span>\n                            &nbsp;\n                            <DateFormat\n                              date={new Date(recAck.updated_at)}\n                              type=\"onlyDate\"\n                            />\n                          </span>\n                        )}\n                      </React.Fragment>\n                    )\n                  )}\n                </CardBody>\n                <CardFooter>\n                  {rule.hosts_acked_count > 0 &&\n                  rule.rule_status === 'enabled' ? (\n                    <Button\n                      isInline\n                      variant=\"link\"\n                      onClick={() => bulkHostActions()}\n                      ouiaId=\"bulkHost\"\n                    >\n                      {intl.formatMessage(messages.enableRuleForSystems)}\n                    </Button>\n                  ) : (\n                    <Button\n                      isInline\n                      variant=\"link\"\n                      onClick={() => enableRule(rule)}\n                      ouiaId=\"rule\"\n                    >\n                      {intl.formatMessage(messages.enableRule)}\n                    </Button>\n                  )}\n                </CardFooter>\n              </Card>\n            )}\n            {rule.rule_status === 'enabled' && (\n              <React.Fragment>\n                <Title className=\"titleOverride\" headingLevel=\"h3\" size=\"2xl\">\n                  {intl.formatMessage(messages.affectedSystems)}\n                </Title>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    actionResolver,\n                    isStickyHeader: true,\n                  }}\n                  rule={rule}\n                  afterDisableFn={afterDisableFn}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                />\n              </React.Fragment>\n            )}\n            {rule.rule_status !== 'enabled' && (\n              <MessageState\n                icon={BellSlashIcon}\n                title={intl.formatMessage(messages.ruleIsDisabled)}\n                text={intl.formatMessage(messages.ruleIsDisabledBody)}\n              />\n            )}\n          </React.Fragment>\n        ) : isError ? (\n          <Failed\n            message={intl.formatMessage(messages.rulesTableFetchRulesError)}\n          />\n        ) : (\n          <Loading />\n        )}\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default OverviewDetails;\n"],"names":["intl","useIntl","dispatch","useDispatch","selectedTags","useSelector","filters","workloads","SID","ruleId","useParams","id","addNotification","data","notification","useGetRecQuery","rule","isFetching","isError","refetch","useGetRecAcksQuery","recAck","recAckIsFetching","recAckRefetch","useGetTopicsQuery","topics","topicIsFetching","permsDisableRec","usePermissions","PERMS","hasAccess","useState","actionsDropdownOpen","setActionsDropdownOpen","disableRuleModalOpen","setDisableRuleModalOpen","undefined","host","setHost","viewSystemsModalOpen","setViewSystemsModalOpen","ruleResolutionRisk","resolution","resolution_set","find","system_type","SYSTEM_TYPES","resolution_risk","risk","handleModalToggle","enableRule","DeleteApi","BASE_URL","rule_id","variant","timeout","dismissable","title","formatMessage","messages","description","afterDisableFn","bulkHostActions","Get","limit","hosts_acked_count","hostAckResponse","systems","map","item","system_uuid","Post","useEffect","isCVE","cveToRuleid","mapping","window","location","href","UI_BASE","cves","includes","subnav","document","toggleModal","isModalOpen","afterFn","className","ouiaId","current","resolutionRisk","riskOfChangeDesc","RISK_OF_CHANGE_DESC","isDetailsPage","header","date","Date","publish_date","type","Label","color","category","name","onFeedbackChanged","calculatedRating","rating","align","default","trigger","content","Dropdown","onSelect","position","toggle","DropdownToggle","isDisabled","onToggle","toggleIndicator","CaretDownIcon","isOpen","dropdownItems","rule_status","DropdownItem","key","onClick","message","Card","CardHeader","headingLevel","size","CardBody","Button","isInline","justification","updated_at","CardFooter","tableProps","canSelectAll","actionResolver","event","rowIndex","isStickyHeader","icon","BellSlashIcon","text"],"sourceRoot":""}