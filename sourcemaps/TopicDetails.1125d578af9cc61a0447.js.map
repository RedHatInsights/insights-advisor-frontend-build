{"version":3,"sources":["webpack:///./src/SmartComponents/Topics/Details.js"],"names":["Details","match","fetchTopic","setFilters","topic","topicFetchStatus","intl","filters","useEffect","impacting","rule_status","params","id","sort","limit","offset","topic_id","name","subnav","messages","document","title","formatMessage","current","ouiaId","headingLevel","size","className","featured","Label","color","icon","component","TextVariants","text","description","length","expandText","collapseText","inline","TimesCircleIcon","propTypes","PropTypes","injectIntl","routerParams","connect","state","AdvisorStore","dispatch","url","AppActions"],"mappings":"mYA4BMA,EAAU,SAAC,GAQX,IAPJC,EAOI,EAPJA,MACAC,EAMI,EANJA,WACAC,EAKI,EALJA,WACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QAmCA,OAjCAC,gBAAU,gBACqB,IAAlBD,EAAQH,OACjBD,EAAW,CACTM,WAAW,EACXC,YAAa,UACbN,MAAOH,EAAMU,OAAOC,GACpBC,KAAM,cACNC,MAAO,GACPC,OAAQ,QAKdP,gBAAU,WAER,OADAN,EAAW,CAAEc,SAAUf,EAAMU,OAAOC,KAC7B,WACLT,EAAW,CACTM,WAAW,EACXC,YAAa,UACbG,KAAM,cACNC,MAAO,GACPC,OAAQ,OAGX,CAACb,EAAYD,EAAMU,OAAOC,GAAIT,KAEjCK,gBAAU,WACR,GAAIJ,GAASA,EAAMa,KAAM,CACvB,IAAMC,EAAS,GAAH,OAAMd,EAAMa,KAAZ,cAAsBE,2BAClCC,SAASC,MAAQf,EAAKgB,cAAcH,kBAAwB,CAAED,cAE/D,CAACd,IAGF,kBAAC,aAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAamB,QAASnB,EAAMa,KAAMO,OAAO,YACnB,cAArBnB,GACC,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAOoB,aAAa,KAAKC,KAAK,MAAMC,UAAU,iBAC3CvB,EAAMa,KACNb,EAAMwB,UACL,kBAAC,EAAAC,MAAD,CACEC,MAAM,OACNH,UAAU,gBACVI,KAAM,kBAAC,KAAD,OAELzB,EAAKgB,cAAcH,gBAI1B,kBAAC,IAAD,CAAaQ,UAAU,gBACrB,kBAAC,KAAD,CAAMK,UAAWC,QACf,kBAAC,IAAD,CACEC,KAAM9B,EAAM+B,YACZC,OAAQ,IACRC,WAAY/B,EAAKgB,cAAcH,cAC/BmB,aAAchC,EAAKgB,cAAcH,cACjCoB,QAAM,OAMM,KAArBlC,GACuB,YAArBA,GAAkC,kBAAC,IAAD,OAEvC,kBAAC,IAAD,KACE,kBAAC,aAAD,KACwB,KAArBA,GACsB,YAArBA,GACsB,cAArBA,GACC,kBAAC,aAAD,KACE,kBAAC,KAAD,CAAOoB,aAAa,KAAKC,KAAK,MAAMC,UAAU,iBAC3CrB,EAAKgB,cAAcH,sBAErBZ,EAAQH,OAAS,kBAAC,UAAD,OAGF,WAArBC,GACuB,aAArBA,GACC,kBAAC,IAAD,CACE0B,KAAMS,UACNnB,MAAOf,EAAKgB,cAAcH,iCAC1Be,KAAM5B,EAAKgB,cAAcH,sCASzCnB,EAAQyC,UAAY,CAClBxC,MAAOyC,QACPxC,WAAYwC,SACZtC,MAAOsC,WACPrC,iBAAkBqC,WAClBvC,WAAYuC,SACZpC,KAAMoC,QACNnC,QAASmC,YAcX,SAAeC,SACbC,QAAaC,cAZS,SAACC,GAAD,MAAY,CAClC1C,MAAO0C,EAAMC,aAAa3C,MAC1BC,iBAAkByC,EAAMC,aAAa1C,iBACrCE,QAASuC,EAAMC,aAAaxC,YAGH,SAACyC,GAAD,MAAe,CACxC9C,WAAY,SAAC+C,GAAD,OAASD,EAASE,IAAsBD,KACpD9C,WAAY,SAACI,GAAD,OAAayC,EAASE,KAAsB3C,QAI3CsC,CAA6C7C","file":"js/TopicDetails.0440590b5463fd1edbf8.js","sourcesContent":["import './_Details.scss';\n\nimport * as AppActions from '../../AppActions';\n\nimport React, { useEffect } from 'react';\nimport {\n  Text,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport PropTypes from 'prop-types';\nimport RulesTable from '../../PresentationalComponents/RulesTable/RulesTable';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nconst Details = ({\n  match,\n  fetchTopic,\n  setFilters,\n  topic,\n  topicFetchStatus,\n  intl,\n  filters,\n}) => {\n  useEffect(() => {\n    if (typeof filters.topic === 'undefined') {\n      setFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        topic: match.params.id,\n        sort: `-total_risk`,\n        limit: 10,\n        offset: 0,\n      });\n    }\n  });\n\n  useEffect(() => {\n    fetchTopic({ topic_id: match.params.id });\n    return () => {\n      setFilters({\n        impacting: true,\n        rule_status: 'enabled',\n        sort: '-total_risk',\n        limit: 10,\n        offset: 0,\n      });\n    };\n  }, [fetchTopic, match.params.id, setFilters]);\n\n  useEffect(() => {\n    if (topic && topic.name) {\n      const subnav = `${topic.name} - ${messages.topics.defaultMessage}`;\n      document.title = intl.formatMessage(messages.documentTitle, { subnav });\n    }\n  }, [topic]);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumbs current={topic.name} ouiaId=\"details\" />\n        {topicFetchStatus === 'fulfilled' && (\n          <React.Fragment>\n            <Title headingLevel=\"h3\" size=\"2xl\" className=\"titleOverride\">\n              {topic.name}\n              {topic.featured && (\n                <Label\n                  color=\"blue\"\n                  className=\"labelOverride\"\n                  icon={<StarIcon />}\n                >\n                  {intl.formatMessage(messages.featured)}\n                </Label>\n              )}\n            </Title>\n            <TextContent className=\"textOverride\">\n              <Text component={TextVariants.p}>\n                <Truncate\n                  text={topic.description}\n                  length={600}\n                  expandText={intl.formatMessage(messages.readmore)}\n                  collapseText={intl.formatMessage(messages.readless)}\n                  inline\n                />\n              </Text>\n            </TextContent>\n          </React.Fragment>\n        )}\n        {topicFetchStatus === '' ||\n          (topicFetchStatus === 'pending' && <Loading />)}\n      </PageHeader>\n      <Main>\n        <React.Fragment>\n          {topicFetchStatus === '' ||\n            topicFetchStatus === 'pending' ||\n            (topicFetchStatus === 'fulfilled' && (\n              <React.Fragment>\n                <Title headingLevel=\"h3\" size=\"2xl\" className=\"titleOverride\">\n                  {intl.formatMessage(messages.recommendations)}\n                </Title>\n                {filters.topic && <RulesTable />}\n              </React.Fragment>\n            ))}\n          {topicFetchStatus === 'failed' ||\n            (topicFetchStatus === 'rejected' && (\n              <MessageState\n                icon={TimesCircleIcon}\n                title={intl.formatMessage(messages.topicDetailslNodetailsTitle)}\n                text={intl.formatMessage(messages.topicDetailslNodetailsBody)}\n              />\n            ))}\n        </React.Fragment>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nDetails.propTypes = {\n  match: PropTypes.any,\n  fetchTopic: PropTypes.func,\n  topic: PropTypes.object,\n  topicFetchStatus: PropTypes.string,\n  setFilters: PropTypes.func,\n  intl: PropTypes.any,\n  filters: PropTypes.object,\n};\n\nconst mapStateToProps = (state) => ({\n  topic: state.AdvisorStore.topic,\n  topicFetchStatus: state.AdvisorStore.topicFetchStatus,\n  filters: state.AdvisorStore.filters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchTopic: (url) => dispatch(AppActions.fetchTopic(url)),\n  setFilters: (filters) => dispatch(AppActions.setFilters(filters)),\n});\n\nexport default injectIntl(\n  routerParams(connect(mapStateToProps, mapDispatchToProps)(Details))\n);\n"],"sourceRoot":""}