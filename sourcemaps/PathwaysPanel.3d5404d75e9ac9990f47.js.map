{"version":3,"file":"js/PathwaysPanel.055b10c79b65db9882af.js","mappings":"6hDAyBMA,EAAgB,WACpB,IAAMC,GAAOC,EAAAA,EAAAA,KACb,GAAgCC,EAAAA,EAAAA,UAC9BC,KAAKC,MAAMC,aAAaC,QAAQ,mCAAqC,SADvE,eAAOC,EAAP,KAAiBC,EAAjB,KAwCA,OACE,kBAACC,EAAA,EAAD,CACEC,UAAS,wDACTC,GAAE,qCACFC,WAAYL,GAEZ,kBAACM,EAAA,EAAD,CACEC,SAAU,WACRN,GAAaD,GACbF,aAAaU,QAAQ,kCAAmCR,IAE1DS,kBAAmB,CACjBL,GAAI,yDACJ,aAAc,UACd,6EAGF,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BpB,EAAKqB,cAAcC,EAAAA,EAAAA,uBAI1B,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,WAAS,EAACC,GAAI,EAAGC,GAAI,IACxBC,EAAAA,GAAAA,KAAkB,SAACC,GAAD,OACjB,kBAAC,EAAAC,SAAD,CAAUC,IAAKF,EAAQG,MAlDb,SAACH,GAAD,OAClB,kBAACpB,EAAA,EAAD,CAAMwB,QAAM,EAACC,SAAO,EAACxB,UAAS,oCAC5B,kBAACyB,EAAA,EAAD,CAAUzB,UAAS,QACjB,kBAAC0B,EAAA,EAAD,CAAeL,IAAKF,EAAQG,KAAMK,UAAWR,EAAQS,aAAe,IACpE,kBAAC,EAAAC,KAAD,CAAMC,GAAE,UAAKX,EAAQG,OAClBhC,EAAKqB,cAAcC,EAAAA,EAAAA,yBAAmC,CACrDmB,QAASZ,EAAQa,2BAIvB,kBAACP,EAAA,EAAD,CAAUzB,UAAS,QAAWmB,EAAQc,aACtC,kBAACR,EAAA,EAAD,CAAUzB,UAAS,QACjB,kBAACkC,EAAA,EAAD,CAAYC,KAAMhB,EAAQiB,aAAe,CAAEC,KAAM,CAAC,aAAgB,KAAO,KACxEC,EAAAA,EAAAA,GAAenB,EAAQoB,kBAE1B,kBAACC,EAAA,EAAD,CAAYxC,UAAS,UACnB,kBAAC,EAAA6B,KAAD,CAAMC,GAAE,UAAKX,EAAQG,OAArB,UACMhC,EAAKqB,cAAcC,EAAAA,EAAAA,aADzB,KAEE,kBAAC,KAAD,SAgCgC6B,CAAYtB,WAQtD9B,EAAcqD,UAAY,CACxB1C,UAAW0C,IAAAA,QAGb","sources":["webpack:///./src/PresentationalComponents/PathwaysPanel/PathwaysPanel.js"],"sourcesContent":["import './_PathwaysPanel.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardExpandableContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport CategoryLabel from '../CategoryLabel/CategoryLabel';\nimport { Link } from 'react-router-dom';\nimport { RebootRequired } from '../Common/Common';\nimport RuleLabels from '../RuleLabels/RuleLabels';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport testdata from './testdata.json';\n// import { useGetPathwaysQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\n\nconst PathwaysPanel = () => {\n  const intl = useIntl();\n  const [expanded, setExpanded] = useState(\n    JSON.parse(localStorage.getItem('advisor_pathwayspanel_expanded') || 'true')\n  );\n\n  // const { data, isUninitialized, isLoading, isFetching, isSuccess, isError } =\n  //   useGetPathwaysQuery();\n\n  // console.error(\n  //   data,\n  //   isUninitialized,\n  //   isLoading,\n  //   isFetching,\n  //   isSuccess,\n  //   isError\n  // );\n\n  const pathwayCard = (pathway) => (\n    <Card isFlat isPlain className={`ins-c-advisor__card--pathwaycard`}>\n      <CardBody className={`body`}>\n        <CategoryLabel key={pathway.name} labelList={pathway.categories} />{' '}\n        <Link to={`${pathway.name}`}>\n          {intl.formatMessage(messages.topicCardSystemsaffected, {\n            systems: pathway.impacted_systems_count,\n          })}\n        </Link>\n      </CardBody>\n      <CardBody className={`body`}>{pathway.description}</CardBody>\n      <CardBody className={`body`}>\n        <RuleLabels rule={pathway.has_incident ? { tags: ['incident'] } : {}} />{' '}\n        {RebootRequired(pathway.reboot_required)}\n      </CardBody>\n      <CardFooter className={`footer`}>\n        <Link to={`${pathway.name}`}>\n          {`${intl.formatMessage(messages.viewPathway)} `}\n          <ArrowRightIcon />\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n\n  return (\n    <Card\n      className={`ins-c-advisor_card ins-c-advisor__card--pathwayspanel`}\n      id={`ins-c-advisor__card--pathwayspanel`}\n      isExpanded={expanded}\n    >\n      <CardHeader\n        onExpand={() => {\n          setExpanded(!expanded);\n          localStorage.setItem('advisor_pathwayspanel_expanded', !expanded);\n        }}\n        toggleButtonProps={{\n          id: `ins-c-advisor__card-title--pathwayspanel-toggle-button`,\n          'aria-label': 'Details',\n          'aria-labelledby': `ins-c-advisor__card-title--pathwayspanel toggle-button`,\n        }}\n      >\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {intl.formatMessage(messages.improveRecommended)}\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <CardExpandableContent>\n        <Grid hasGutter md={4} sm={12}>\n          {testdata.data.map((pathway) => (\n            <GridItem key={pathway.name}>{pathwayCard(pathway)}</GridItem>\n          ))}\n        </Grid>\n      </CardExpandableContent>\n    </Card>\n  );\n};\n\nPathwaysPanel.propTypes = {\n  className: propTypes.string,\n};\n\nexport default PathwaysPanel;\n"],"names":["PathwaysPanel","intl","useIntl","useState","JSON","parse","localStorage","getItem","expanded","setExpanded","Card","className","id","isExpanded","CardHeader","onExpand","setItem","toggleButtonProps","CardTitle","Title","headingLevel","size","formatMessage","messages","CardExpandableContent","Grid","hasGutter","md","sm","testdata","pathway","GridItem","key","name","isFlat","isPlain","CardBody","CategoryLabel","labelList","categories","Link","to","systems","impacted_systems_count","description","RuleLabels","rule","has_incident","tags","RebootRequired","reboot_required","CardFooter","pathwayCard","propTypes"],"sourceRoot":""}