{"version":3,"file":"js/RecommendationSystems.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oOAQMA,EAAsB,SAAHC,GAAoD,IAA9CC,EAAID,EAAJC,KAAMC,EAAcF,EAAdE,eAAgBC,EAAiBH,EAAjBG,kBAC7CC,GAAeC,EAAAA,EAAAA,cAAY,SAAAC,GAAU,OAAAA,EAAPC,QAAsBH,YAAY,IAChEI,GAAYH,EAAAA,EAAAA,cAAY,SAAAI,GAAU,OAAAA,EAAPF,QAAsBC,SAAS,IAC1DE,GAAML,EAAAA,EAAAA,cAAY,SAAAM,GAAU,OAAAA,EAAPJ,QAAsBG,GAAG,IAC9CE,GAAcC,EAAAA,EAAAA,IAAe,UAAWC,EAAAA,GAAAA,QAAcC,UAEtDC,GAAiBC,EAAAA,EAAAA,IAAkBd,GAEzC,OACEe,IAAAA,cAACC,EAAAA,EAAS,CACRC,WAAY,CACVC,cAAc,EACdL,eAAAA,EACAM,gBAAgB,GAElBrB,KAAMA,EACNC,eAAgBA,EAChBE,aAAcA,EACdI,UAAWA,EACXE,IAAKA,EACLE,YAAaA,EACbW,YAAY,UACZC,UAAU,GAGhB,EAEAzB,EAAoB0B,UAAY,CAC9BxB,KAAMyB,IAAAA,OACNxB,eAAgBwB,IAAAA,KAChBvB,kBAAmBuB,IAAAA,MAErB,S,8xBC7BA,IAAMC,EAAsB,WAKvB,IAJHC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACdG,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAChBI,EAAQJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACXK,EAAiBL,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEjB,OAAOH,EAAYO,KAAI,SAACC,GAAY,IAAAC,EAC5BC,EAAOL,EAASM,MACpB,SAACC,GAAM,OAAKA,EAAOC,aAAeL,EAAQM,WAAW,IAEjDC,EAAYX,EAAcO,MAC9B,SAACI,GAAS,OAAKP,EAAQM,cAAgBC,EAAUC,EAAE,IAGrD,OAAAC,EAAAA,EAAAA,EAAAA,EAAA,GACKF,GACAP,GACAE,GAAI,IACPQ,OAAQZ,GACa,QAAjBG,EAAAC,EAAKS,oBAAY,IAAAV,OAAA,EAAjBA,EAAmBF,KAAI,SAACa,GAAK,MAAM,CACjCJ,GAAII,EAAMC,GACVC,KAAMF,EAAMG,KACb,MAAM,GACPR,EAAUG,QAElB,GACF,EAEaM,EACX,SAACC,EAAeC,EAASrD,GAAI,sBAAAD,GAAAuD,EAAAA,EAAAA,GAAAC,IAAAA,MAC7B,SAAAC,EAAOC,EAAQC,EAAQnC,EAAUoC,GAAkB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3D,EAAAC,EAAAE,EAAAN,EAAA+D,EAAAC,EAAAC,EAAAzC,EAAA0C,EAAAtC,EAAAC,EAAAC,EAAAqC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnB,IAAAA,MAAA,SAAAoB,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAyBE,OAvBjDhB,EASEH,EATFG,SACAC,EAQEJ,EARFI,KACAC,EAOEL,EAPFK,QACAC,EAMEN,EANFM,eACAC,EAKEP,EALFO,eACA3D,EAIEoD,EAJFpD,QACAC,EAGEmD,EAHFnD,UACAE,EAEEiD,EAFFjD,IACAN,EACEuD,EADFvD,aAEI+D,GAAOY,EAAAA,EAAAA,IAAgBf,EAASC,GAClCG,GAAUY,EAAAA,EAAAA,IACZd,EACAH,EACAD,EACAK,EACAb,EACA/C,EACAH,EACAI,EACAE,GAEF2C,EAAce,GACRC,EAAUxB,EAAAA,EAAA,GAAQc,GAAM,IAAEL,QAAAA,EAASrD,KAAAA,EAAMkE,KAAAA,IAAIS,EAAAE,KAAA,GACzBG,EAAAA,EAAAA,IAAuBZ,GAAW,OACY,OADlEzC,EAAWgD,EAAAM,KACXZ,EAAY1C,SAAiB,QAANiC,EAAXjC,EAAauD,YAAI,IAAAtB,OAAN,EAAXA,EAAmB1B,KAAI,SAACiD,GAAM,OAAKA,EAAO1C,WAAW,IAACkC,EAAAE,KAAA,GAE5ClB,EAC1BU,EACA,CACER,SAAAA,EACAuB,UAAU,EACVC,OAAQ,CAAEC,eAAgB,CAAC,sBAE7B/D,GACD,QAG4B,GAXvBQ,EAAa4C,EAAAM,KAUfjD,EAAW,GACXC,GAAoB,EACpBoC,UAAAA,EAAWxC,OAAM,CAAA8C,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,IACiBU,EAAAA,EAAAA,IAAK,GAADC,OACnCC,EAAAA,GAAoB,wBACvB,CAAC,EACD,CAAEC,aAAcrB,IACjB,QAAAG,EAAAG,EAAAM,KAJaR,EAAWD,EAAjBU,KAMRlD,GAAWyC,SAAiB,QAANH,EAAXG,EAAaS,YAAI,IAAAZ,OAAN,EAAXA,EAAmBqB,UAAW,GACzC1D,EAAoBwC,SAAiB,QAANF,EAAXE,EAAaS,YAAI,IAAAX,OAAN,EAAXA,EAAmBqB,oBAAoB,QAQ5D,OALKlB,EAAWhD,EACfC,EAAYuD,KACZnD,EAAc8D,QACd7D,EACAC,GACD0C,EAAAmB,OAAA,SAEMC,QAAQC,QAAQ,CACrBH,QAASnB,EACTuB,MAAOtE,EAAYuE,KAAKC,SACxB,yBAAAxB,EAAAyB,OAAA,GAAA5C,EAAA,KACH,gBAAA6C,EAAAC,EAAAC,EAAAC,GAAA,OAAAzG,EAAA0G,MAAA,KAAA7E,UAAA,EAhE4B,EAgE5B,EAEUZ,EAAoB,SAACd,GAAiB,OACjDwG,EAAAA,EAAAA,cACE,iBAAM,CACJ,CACEC,MAAO,oCACPC,QAAS,SAACC,EAAOC,EAAUC,GAAI,OAAK7G,GAAkB,EAAM6G,EAAK,GAEpE,GACD,GACD,EAEUC,EAAY,SAAC1G,GACxB,IAAM2G,GAAQC,EAAAA,EAAAA,YACd,OAAOR,EAAAA,EAAAA,cACL,SAAArG,GAAoE,IAAjE8G,EAAiB9G,EAAjB8G,kBAAmBC,EAAsB/G,EAAtB+G,uBAAwBC,EAAehH,EAAfgH,gBAC5CJ,EAAMK,gBACJC,EAAAA,EAAAA,GAAc3E,EAAAA,EAAC,CAAC,EACXuE,GAAkBK,EAAAA,EAAAA,GAAc,GAAIJ,GAAyB,CAC9DtD,KAAM2D,OAAOnH,EAAQoH,OAASpH,EAAQqH,MAAQ,GAAK,GACnDC,QAASH,OAAOnH,EAAQqH,OAAS,OAEhCN,MAGT,GACA,CAAC/G,EAAS2G,GAEd,EAEaY,EAAkB,SAACC,EAAgBC,GAC9C,IAAMC,EAAiBF,EAAexF,MAAK,SAAA9B,GAAM,MAAe,YAAfA,EAAHyH,GAA2B,IACnEC,EAAgB,CACpBD,IAAK,gBACLtB,MAAO,iBACPwB,QAAS,gBACTC,WAAY,CAACC,EAAAA,IACbC,MAAO,CAAEC,MAAO,IAChBC,WAAYR,EAAeQ,YAIvBC,EAAeX,EAAexF,MAAK,SAAA5B,GAAM,MAAe,WAAfA,EAAHuH,GAA0B,IAGtE,OAFAQ,EAAaH,MAAK1F,EAAAA,EAAA,GAAQ6F,EAAaH,OAAK,IAAEI,UAAU,IAEjD,GAAPlD,QAAAmD,EAAAA,EAAAA,GACKb,IAAca,EAAAA,EAAAA,GACbZ,EAAyB,CAACG,GAAiB,IAEnD,C","sources":["webpack:///./src/SmartComponents/HybridInventoryTabs/ConventionalSystems/RecommendationSystems.js","webpack:///./src/SmartComponents/HybridInventoryTabs/helpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport Inventory from '../../../PresentationalComponents/Inventory/Inventory';\nimport { useSelector } from 'react-redux';\nimport { PERMS } from '../../../AppConstants';\nimport { useActionResolver } from '../helpers';\n\nconst ConventionalSystems = ({ rule, afterDisableFn, handleModalToggle }) => {\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const permsExport = usePermissions('advisor', PERMS.export).hasAccess;\n\n  const actionResolver = useActionResolver(handleModalToggle);\n\n  return (\n    <Inventory\n      tableProps={{\n        canSelectAll: false,\n        actionResolver,\n        isStickyHeader: true,\n      }}\n      rule={rule}\n      afterDisableFn={afterDisableFn}\n      selectedTags={selectedTags}\n      workloads={workloads}\n      SID={SID}\n      permsExport={permsExport}\n      exportTable=\"systems\"\n      showTags={true}\n    />\n  );\n};\n\nConventionalSystems.propTypes = {\n  rule: PropTypes.object,\n  afterDisableFn: PropTypes.func,\n  handleModalToggle: PropTypes.func,\n};\nexport default ConventionalSystems;\n","import { createOptions } from '../../PresentationalComponents/helper';\nimport { paginatedRequestHelper } from '../../PresentationalComponents/Inventory/helpers';\nimport { Post } from '../../Utilities/Api';\nimport { EDGE_DEVICE_BASE_URL } from '../../AppConstants';\nimport { useCallback } from 'react';\nimport { systemReducer } from '../../Store/AppReducer';\nimport { updateReducers } from '../../Store';\nimport { useStore } from 'react-redux';\nimport { wrappable } from '@patternfly/react-table';\nimport { createSortParam } from '../../PresentationalComponents/helper';\n\nconst mergeByInventoryKey = (\n  advisorData = [],\n  inventoryData = [],\n  edgeData = [],\n  enforceEdgeGroups\n) => {\n  return advisorData.map((advisor) => {\n    const edge = edgeData.find(\n      (device) => device.DeviceUUID === advisor.system_uuid\n    );\n    const inventory = inventoryData.find(\n      (inventory) => advisor.system_uuid === inventory.id\n    );\n\n    return {\n      ...inventory,\n      ...advisor,\n      ...edge,\n      groups: enforceEdgeGroups\n        ? edge.DeviceGroups?.map((group) => ({\n            id: group.ID,\n            name: group.Name,\n          })) || []\n        : inventory.groups,\n    };\n  });\n};\n\nexport const useGetEntities =\n  (handleRefresh, pathway, rule) =>\n  async (_items, config, showTags, defaultGetEntities) => {\n    const {\n      per_page,\n      page,\n      orderBy,\n      orderDirection,\n      advisorFilters,\n      filters,\n      workloads,\n      SID,\n      selectedTags,\n    } = config;\n    const sort = createSortParam(orderBy, orderDirection);\n    let options = createOptions(\n      advisorFilters,\n      page,\n      per_page,\n      sort,\n      pathway,\n      filters,\n      selectedTags,\n      workloads,\n      SID\n    );\n    handleRefresh(options);\n    const allDetails = { ...config, pathway, rule, sort };\n    const advisorData = await paginatedRequestHelper(allDetails);\n    const systemIDs = advisorData?.data?.map((system) => system.system_uuid);\n\n    const inventoryData = await defaultGetEntities(\n      systemIDs,\n      {\n        per_page,\n        hasItems: true,\n        fields: { system_profile: ['operating_system'] },\n      },\n      showTags\n    );\n\n    let edgeData = [];\n    let enforceEdgeGroups = false;\n    if (systemIDs?.length) {\n      const { data: devicesData } = await Post(\n        `${EDGE_DEVICE_BASE_URL}/devices/devicesview`,\n        {},\n        { devices_uuid: systemIDs }\n      );\n\n      edgeData = devicesData?.data?.devices || [];\n      enforceEdgeGroups = devicesData?.data?.enforce_edge_groups;\n    }\n\n    const fullData = mergeByInventoryKey(\n      advisorData.data,\n      inventoryData.results,\n      edgeData,\n      enforceEdgeGroups\n    );\n\n    return Promise.resolve({\n      results: fullData,\n      total: advisorData.meta.count,\n    });\n  };\n\nexport const useActionResolver = (handleModalToggle) =>\n  useCallback(\n    () => [\n      {\n        title: 'Disable recommendation for system',\n        onClick: (event, rowIndex, item) => handleModalToggle(true, item),\n      },\n    ],\n    []\n  );\n\nexport const useOnLoad = (filters) => {\n  const store = useStore();\n  return useCallback(\n    ({ mergeWithEntities, INVENTORY_ACTION_TYPES, mergeWithDetail }) => {\n      store.replaceReducer(\n        updateReducers({\n          ...mergeWithEntities(systemReducer([], INVENTORY_ACTION_TYPES), {\n            page: Number(filters.offset / filters.limit + 1 || 1),\n            perPage: Number(filters.limit || 20),\n          }),\n          ...mergeWithDetail(),\n        })\n      );\n    },\n    [filters, store]\n  );\n};\n\nexport const mergeAppColumns = (defaultColumns, isRecommendationDetail) => {\n  const lastSeenColumn = defaultColumns.find(({ key }) => key === 'updated');\n  const impacted_date = {\n    key: 'impacted_date',\n    title: 'First Impacted',\n    sortKey: 'impacted_date',\n    transforms: [wrappable],\n    props: { width: 15 },\n    renderFunc: lastSeenColumn.renderFunc,\n  };\n\n  //disable sorting on GROUPS. API does not handle this\n  const groupsColumn = defaultColumns.find(({ key }) => key === 'groups');\n  groupsColumn.props = { ...groupsColumn.props, isStatic: true };\n\n  return [\n    ...defaultColumns,\n    ...(isRecommendationDetail ? [impacted_date] : []),\n  ];\n};\n"],"names":["ConventionalSystems","_ref","rule","afterDisableFn","handleModalToggle","selectedTags","useSelector","_ref2","filters","workloads","_ref3","SID","_ref4","permsExport","usePermissions","PERMS","hasAccess","actionResolver","useActionResolver","React","Inventory","tableProps","canSelectAll","isStickyHeader","exportTable","showTags","propTypes","PropTypes","mergeByInventoryKey","advisorData","arguments","length","undefined","inventoryData","edgeData","enforceEdgeGroups","map","advisor","_edge$DeviceGroups","edge","find","device","DeviceUUID","system_uuid","inventory","id","_objectSpread","groups","DeviceGroups","group","ID","name","Name","useGetEntities","handleRefresh","pathway","_asyncToGenerator","_regeneratorRuntime","_callee","_items","config","defaultGetEntities","_advisorData$data","per_page","page","orderBy","orderDirection","advisorFilters","sort","options","allDetails","systemIDs","_devicesData$data","_devicesData$data2","_yield$Post","devicesData","fullData","_context","prev","next","createSortParam","createOptions","paginatedRequestHelper","sent","data","system","hasItems","fields","system_profile","Post","concat","EDGE_DEVICE_BASE_URL","devices_uuid","devices","enforce_edge_groups","results","abrupt","Promise","resolve","total","meta","count","stop","_x","_x2","_x3","_x4","apply","useCallback","title","onClick","event","rowIndex","item","useOnLoad","store","useStore","mergeWithEntities","INVENTORY_ACTION_TYPES","mergeWithDetail","replaceReducer","updateReducers","systemReducer","Number","offset","limit","perPage","mergeAppColumns","defaultColumns","isRecommendationDetail","lastSeenColumn","key","impacted_date","sortKey","transforms","wrappable","props","width","renderFunc","groupsColumn","isStatic","_toConsumableArray"],"sourceRoot":""}