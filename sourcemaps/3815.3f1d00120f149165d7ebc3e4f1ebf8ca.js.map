{"version":3,"file":"js/3815.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/SmartComponents/SystemAdvisor/EmptyStates.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisorAssets.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js"],"sourcesContent":["import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch,\n  display_name\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        {\n          ...filters,\n          ...options,\n          ...(display_name && { display_name: display_name }),\n        }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import './_RuleLabels.scss';\n\nimport { Tooltip, TooltipPosition, Label } from '@patternfly/react-core';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={messages.incidentTooltip.defaultMessage}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {messages.incident.defaultMessage}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={messages.ruleIsDisabledTooltip.defaultMessage}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {messages.disabled.defaultMessage}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={messages.ruleIsDisabledTooltip.defaultMessage}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {messages.redhatDisabled.defaultMessage}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import React from 'react';\nimport ChartSpikeIcon from '@patternfly/react-icons/dist/esm/icons/chartSpike-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport {\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PropTypes from 'prop-types';\n\nexport const NoMatchingRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      title=\"No matching recommendations found\"\n      text={`To continue, edit your filter settings and search again.`}\n    />\n  </Bullseye>\n);\n\nexport const NoRecommendations = () => (\n  <Bullseye>\n    <MessageState\n      icon={CheckIcon}\n      iconClass=\"ins-c-insights__check\"\n      title=\"No recommendations\"\n      text={`No known recommendations affect this system`}\n    />\n  </Bullseye>\n);\n\nexport const InsightsNotEnabled = () => (\n  <MessageState\n    iconClass=\"chartSpikeIconColor\"\n    icon={ChartSpikeIcon}\n    title=\"Get started with Red Hat Insights\"\n    text={\n      <Bullseye>\n        <Stack hasGutter>\n          <StackItem>\n            1. Install the client on the RHEL system.\n            <ClipboardCopy>yum install insights-client</ClipboardCopy>\n          </StackItem>\n          <StackItem>\n            2. Register the system to Red Hat Insights.\n            <ClipboardCopy>insights-client --register</ClipboardCopy>\n          </StackItem>\n        </Stack>\n      </Bullseye>\n    }\n  >\n    <Button\n      component=\"a\"\n      href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n      target=\"_blank\"\n      variant=\"primary\"\n    >\n      Getting started documentation\n    </Button>\n  </MessageState>\n);\n\nexport const InventoryReportFetchFailed = ({ entity }) => (\n  <Bullseye>\n    <MessageState\n      icon={TimesCircleIcon}\n      title=\"Error getting recommendations\"\n      text={\n        entity\n          ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n          : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n      }\n    />\n  </Bullseye>\n);\n\nInventoryReportFetchFailed.propTypes = {\n  entity: PropTypes.object,\n};\n","import './SystemAdvisor.scss';\nimport React, { useCallback } from 'react';\nimport { fitContent, sortable } from '@patternfly/react-table';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport AnsibeTowerIcon from '@patternfly/react-icons/dist/esm/icons/ansibeTower-icon';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { ReportDetails } from '@redhat-cloud-services/frontend-components-advisor-components/ReportDetails';\nimport {\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  NoMatchingRecommendations,\n  NoRecommendations,\n  InsightsNotEnabled,\n  InventoryReportFetchFailed,\n} from './EmptyStates';\nimport { useLocation } from 'react-router-dom';\n\nimport messages from '../../Messages';\n\nexport const getColumns = (intl) => [\n  {\n    title: intl.formatMessage(messages.topicAddEditDescription),\n    transforms: [sortable],\n  },\n  {\n    title: intl.formatMessage(messages.modified),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.firstImpacted),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.totalRisk),\n    transforms: [sortable, fitContent],\n  },\n  {\n    title: intl.formatMessage(messages.remediation),\n    transforms: [sortable, fitContent],\n  },\n];\n\nexport const getFilters = (\n  filters,\n  searchValue,\n  onInputChange,\n  onFilterChange\n) => [\n  {\n    label: 'description',\n    filterValues: {\n      key: 'text-filter',\n      onChange: (_e, value) => onInputChange(value),\n      value: searchValue,\n    },\n  },\n  {\n    label: FC.total_risk.title,\n    type: FC.total_risk.type,\n    id: FC.total_risk.urlParam,\n    value: `checkbox-${FC.total_risk.urlParam}`,\n    filterValues: {\n      key: `${FC.total_risk.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.total_risk.urlParam, values),\n      value: filters.total_risk,\n      items: FC.total_risk.values,\n    },\n  },\n  {\n    label: FC.category.title,\n    type: FC.category.type,\n    id: FC.category.urlParam,\n    value: `checkbox-${FC.category.urlParam}`,\n    filterValues: {\n      key: `${FC.category.urlParam}-filter`,\n      onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n      value: filters.category,\n      items: FC.category.values,\n    },\n  },\n  {\n    label: FC.has_playbook.title,\n    type: FC.has_playbook.type,\n    id: FC.has_playbook.urlParam,\n    value: `checkbox-${FC.has_playbook.urlParam}`,\n    filterValues: {\n      key: `${FC.has_playbook.urlParam}-filter`,\n      onChange: (_e, values) =>\n        onFilterChange(FC.has_playbook.urlParam, values),\n      value: filters.has_playbook,\n      items: FC.has_playbook.values,\n    },\n  },\n];\n\nexport const useProcessRemediation = (inventoryId) =>\n  useCallback(\n    (selectedAnsibleRules) => {\n      const playbookRows = selectedAnsibleRules.filter(\n        (r) => r.resolution?.has_playbook\n      );\n      const issues = playbookRows.map((r) => ({\n        id: `advisor:${r.rule.rule_id}`,\n        description: r.rule.description,\n      }));\n      return issues.length ? { issues, systems: [inventoryId] } : false;\n    },\n    [inventoryId]\n  );\n\nexport const useBuildRows = (\n  intl,\n  systemAdvisorRef,\n  entity,\n  inventoryReportFetchStatus\n) => {\n  const location = useLocation().pathname?.split('/');\n  return useCallback(\n    (\n      activeReports,\n      kbaDetails,\n      filters,\n      rows,\n      searchValue = '',\n      kbaLoading = false,\n      isFirstLoad = false\n    ) => {\n      const url = window.location.href;\n      let newActiveReportsList = activeReports;\n      let isRulePresent = url.indexOf('activeRule') > -1 ? true : false;\n      if (isRulePresent && isFirstLoad) {\n        let activeRule = location[2];\n        //sorts activeReportsList by making the activeRecommendation ruleId having a higher priority when sorting, or by total_risk\n        newActiveReportsList.sort((x, y) =>\n          x.rule.rule_id === activeRule\n            ? -1\n            : y.rule.rule_id === activeRule\n            ? 1\n            : 0\n        );\n      } else if (isFirstLoad) {\n        newActiveReportsList.sort((x, y) =>\n          x.rule.total_risk > y.rule.total_risk\n            ? -1\n            : y.rule.total_risk > x.rule.total_risk\n            ? 1\n            : 0\n        );\n      }\n\n      const builtRows = newActiveReportsList.flatMap((value, key) => {\n        const rule = value.rule;\n        const resolution = value.resolution;\n        const kbaDetail = Object.keys(kbaDetails).length\n          ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n          : {};\n        const match = rows.find((row) => row?.rule?.rule_id === rule.rule_id);\n        const selected = match?.selected;\n        const isOpen =\n          match?.isOpen || (isRulePresent && isFirstLoad && key === 0);\n\n        const reportRow = [\n          {\n            rule,\n            resolution,\n            //make arrow button disappear when there is no resolution\n            isOpen: resolution ? isOpen : undefined,\n            selected,\n            disableSelection: resolution ? !resolution.has_playbook : true,\n            cells: [\n              {\n                title: (\n                  <span>\n                    {rule.description} <RuleLabels rule={rule} />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span>\n                    <DateFormat\n                      date={rule.publish_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <div key={key}>\n                    <DateFormat\n                      date={value.impacted_date}\n                      type=\"relative\"\n                      tooltipProps={{ position: TooltipPosition.bottom }}\n                    />\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div key={key} style={{ verticalAlign: 'top' }}>\n                    <Tooltip\n                      key={key}\n                      position={TooltipPosition.bottom}\n                      content={\n                        <span>\n                          The <strong>likelihood</strong> that this will be a\n                          problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                          <strong>impact</strong> of the problem would be &nbsp;\n                          {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                        </span>\n                      }\n                    >\n                      <InsightsLabel value={rule.total_risk} isCompact />\n                    </Tooltip>\n                  </div>\n                ),\n              },\n              {\n                title: (\n                  <div className=\"ins-c-center-text\" key={key}>\n                    {resolution === null ? (\n                      intl.formatMessage(messages.notAvailable)\n                    ) : resolution?.has_playbook ? (\n                      <span>\n                        <AnsibeTowerIcon size=\"sm\" />{' '}\n                        {intl.formatMessage(messages.playbook)}\n                      </span>\n                    ) : (\n                      intl.formatMessage(messages.manual)\n                    )}\n                  </div>\n                ),\n              },\n            ],\n          },\n          resolution && {\n            parent: key,\n            fullWidth: true,\n            cells: [\n              {\n                title: (\n                  <ReportDetails\n                    key={`child-${key}`}\n                    report={{\n                      ...value,\n                      resolution: value.resolution.resolution,\n                    }}\n                    kbaDetail={kbaDetail}\n                    kbaLoading={kbaLoading}\n                  />\n                ),\n              },\n            ],\n          },\n        ];\n        const isValidSearchValue =\n          searchValue.length === 0 ||\n          rule.description.toLowerCase().includes(searchValue.toLowerCase());\n        const isValidFilterValue =\n          Object.keys(filters).length === 0 ||\n          Object.keys(filters)\n            .map((key) => {\n              const filterValues = filters[key];\n              const rowValue = {\n                has_playbook: value.resolution?.has_playbook,\n                publish_date: rule.publish_date,\n                total_risk: rule.total_risk,\n                category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n              };\n              return filterValues.find(\n                (value) => String(value) === String(rowValue[key])\n              );\n            })\n            .every((x) => x);\n\n        return isValidSearchValue && isValidFilterValue\n          ? reportRow.filter((row) => row !== null)\n          : [];\n      });\n      //must recalculate parent for expandable table content whenever the array size changes\n      builtRows.forEach((row, index) =>\n        row.parent ? (row.parent = index - 1) : null\n      );\n\n      systemAdvisorRef.current.rowCount = activeReports.length;\n\n      if (activeReports.length < 1 || builtRows.length < 1) {\n        let EmptyState =\n          (builtRows.length === 0 && NoMatchingRecommendations) ||\n          (entity?.insights_id && NoRecommendations) ||\n          InsightsNotEnabled;\n\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <EmptyState />,\n              },\n            ],\n          },\n        ];\n      }\n\n      if (inventoryReportFetchStatus === 'failed') {\n        return [\n          {\n            heightAuto: true,\n            cells: [\n              {\n                props: { colSpan: 5 },\n                title: <InventoryReportFetchFailed entity={entity} />,\n              },\n            ],\n          },\n        ];\n      }\n\n      return builtRows;\n    },\n    [entity, inventoryReportFetchStatus]\n  );\n};\n","import './SystemAdvisor.scss';\nimport {\n  BASE_URL,\n  FILTER_CATEGORIES as FC,\n  INVENTORY_BASE_URL,\n} from '../../AppConstants';\nimport { Card, CardBody, Spinner } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Get } from '../../Utilities/Api';\nimport { List } from 'react-content-loader';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport NotConnected from '@redhat-cloud-services/frontend-components/NotConnected';\nimport get from 'lodash/get';\nimport {\n  getColumns,\n  getFilters,\n  useBuildRows,\n  useProcessRemediation,\n} from './SystemAdvisorAssets';\nimport downloadReport from '../../PresentationalComponents/Common/DownloadHelper';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport * as AppConstants from '../../AppConstants';\nimport { useParams } from 'react-router-dom';\n\nconst BaseSystemAdvisor = ({ entity, inventoryId }) => {\n  const intl = useIntl();\n  const systemAdvisorRef = useRef({\n    rowCount: 0,\n  });\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const { id: ruleIdParam } = useParams();\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const [systemProfile, setSystemsProfile] = useState({});\n  const [isSystemProfileLoading, setSystemsProfileLoading] = useState(true);\n  const selectedTags = useSelector(({ filters }) => filters?.selectedTags);\n  const workloads = useSelector(({ filters }) => filters?.workloads);\n  const SID = useSelector(({ filters }) => filters?.SID);\n  const permsExport = usePermissions(\n    'advisor',\n    AppConstants.PERMS.export\n  ).hasAccess;\n\n  const getSelectedItems = (rows) => rows.filter((row) => row.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution?.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution?.has_playbook\n  ).length;\n\n  const cols = getColumns(intl);\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const onRemediationCreated = (result) => {\n    onBulkSelect(false);\n    try {\n      result.remediation && addNotification(result.getNotification());\n    } catch (error) {\n      addNotification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const actions =\n    !isSystemProfileLoading && systemProfile?.host_type !== 'edge'\n      ? [\n          <RemediationButton\n            key=\"remediation-button\"\n            fallback={<Spinner size=\"md\" />}\n            isDisabled={selectedAnsibleRules.length === 0}\n            dataProvider={() => processRemediation(selectedAnsibleRules)}\n            onRemediationCreated={(result) => onRemediationCreated(result)}\n          >\n            {intl.formatMessage(messages.remediate)}\n          </RemediationButton>,\n        ]\n      : [];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex = ruleIdParam\n      ? activeReports.findIndex((report) => report.rule.rule_id === ruleIdParam)\n      : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = useBuildRows(\n    intl,\n    systemAdvisorRef,\n    entity,\n    inventoryReportFetchStatus\n  );\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n  const checkedStatus = () => {\n    if (selectedItemsLength === systemAdvisorRef.current.rowCount) {\n      return 1;\n    } else if (\n      selectedItemsLength > 0 ||\n      selectableItemsLength !== systemAdvisorRef.current.rowCount\n    ) {\n      return null;\n    } else {\n      return 0;\n    }\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: checkedStatus(),\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fq=documentKind:(Solution%20or%20Article)&fl=view_uri,id,publishedTitle&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(\n          reportsData,\n          kbaDetailsFetch,\n          filters,\n          rows,\n          searchValue,\n          false,\n          true\n        )\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      2: 'rule.description',\n      3: 'rule.publish_date',\n      4: 'impacted_date',\n      5: 'rule.total_risk',\n      6: 'resolution.has_playbook',\n    };\n    const d = direction === SortByDirection.asc ? 1 : -1;\n\n    const sort = () =>\n      activeReports.concat().sort((firstItem, secondItem) => {\n        let fst = get(firstItem, sortedReports[index]);\n        let snd = get(secondItem, sortedReports[index]);\n\n        if (index === 3 || index === 4) {\n          fst = new Date(fst);\n          snd = new Date(snd);\n        }\n        return fst > snd ? d : snd > fst ? -d : 0;\n      });\n\n    const sortedReportsDirectional = sort();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = useProcessRemediation(inventoryId);\n  const filterConfigItems = getFilters(\n    filters,\n    searchValue,\n    onInputChange,\n    onFilterChange\n  );\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const reportsFetch = await Get(\n          `${BASE_URL}/system/${inventoryId}/reports/`,\n          {\n            credentials: 'include',\n          }\n        );\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch.data);\n        fetchKbaDetails(activeRuleFirstReportsData);\n\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n\n        const profileData = await Get(\n          `${INVENTORY_BASE_URL}/hosts/${inventoryId}/system_profile`,\n          {\n            credentials: 'include',\n          }\n        );\n\n        setSystemsProfile(profileData?.data?.results[0]?.system_profile || {});\n        setSystemsProfileLoading(false);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n        setSystemsProfileLoading(false);\n      }\n    };\n    dataFetch();\n  }, []);\n  // eslint-disable-next-line react/prop-types\n  let display_name = entity?.display_name;\n  return inventoryReportFetchStatus === 'fulfilled' &&\n    entity?.insights_id === null ? (\n    <NotConnected\n      titleText={intl.formatMessage(messages.notConnectedTitle)}\n      bodyText={intl.formatMessage(messages.notConnectedBody)}\n      buttonText={intl.formatMessage(messages.notConnectedButton)}\n    />\n  ) : (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      entity?.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {`${systemAdvisorRef.current.rowCount} ${\n                (systemAdvisorRef.current.rowCount === 1 && 'Recommendation') ||\n                'Recommendations'\n              }`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n          exportConfig={{\n            label: intl.formatMessage(messages.exportCsv),\n            // eslint-disable-next-line no-dupe-keys\n            label: intl.formatMessage(messages.exportJson),\n            onSelect: (_e, fileType) =>\n              downloadReport(\n                'hits',\n                fileType,\n                { ...filters, text: searchValue },\n                selectedTags,\n                workloads,\n                SID,\n                dispatch,\n                display_name\n              ),\n            isDisabled: !permsExport,\n            tooltipText: permsExport\n              ? intl.formatMessage(messages.exportData)\n              : intl.formatMessage(messages.permsAction),\n          }}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' && (\n        <Fragment>\n          <Table\n            id={'system-advisor-report-table'}\n            aria-label={'report-table'}\n            onSelect={!(rows.length === 1 && rows[0].heightAuto) && onRowSelect}\n            onCollapse={handleOnCollapse}\n            rows={rows}\n            cells={cols}\n            sortBy={sortBy}\n            canSelectAll={false}\n            onSort={onSort}\n            variant={TableVariant.compact}\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nBaseSystemAdvisor.propTypes = {\n  entity: PropTypes.shape({\n    insights_id: PropTypes.string,\n    id: PropTypes.string,\n  }),\n  inventoryId: PropTypes.string.isRequired,\n};\n\nconst SystemAdvisor = ({ ...props }) => {\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n\n  return <BaseSystemAdvisor {...props} entity={entity} />;\n};\n\nexport default SystemAdvisor;\nexport { BaseSystemAdvisor };\n"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","concat","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","format","filters","selectedTags","workloads","SID","dispatch","display_name","options","data","formattedData","_context","prev","next","length","tags","_objectSpread","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","sent","JSON","stringify","downloadFile","t0","stop","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","RuleLabels","_rule$tags","rule","isCompact","noMargin","React","search","Tooltip","content","messages","position","TooltipPosition","Label","color","className","rule_status","propTypes","PropTypes","defaultProps","NoMatchingRecommendations","Bullseye","MessageState","title","text","NoRecommendations","icon","CheckIcon","iconClass","InsightsNotEnabled","ChartSpikeIcon","Stack","hasGutter","StackItem","ClipboardCopy","Button","component","href","target","variant","InventoryReportFetchFailed","entity","TimesCircleIcon","BaseSystemAdvisor","_ref8","inventoryId","intl","useIntl","systemAdvisorRef","useRef","rowCount","useDispatch","addNotificationAction","ruleIdParam","useParams","id","_useState","useState","_useState2","_slicedToArray","inventoryReportFetchStatus","setInventoryReportFetchStatus","_useState3","_useState4","rows","setRows","_useState5","_useState6","activeReports","setActiveReports","_useState7","_useState8","kbaDetailsData","setKbaDetailsData","_useState9","_useState10","sortBy","setSortBy","_useState11","_useState12","setFilters","_useState13","_useState14","searchValue","setSearchValue","_useState15","_useState16","isSelected","setIsSelected","_useState17","_useState18","isAllExpanded","setIsAllExpanded","_useState19","_useState20","systemProfile","setSystemsProfile","_useState21","_useState22","isSystemProfileLoading","setSystemsProfileLoading","useSelector","_ref2","_ref3","_ref4","permsExport","usePermissions","AppConstants","hasAccess","getSelectedItems","filter","row","selected","selectedAnsibleRules","r","_r$resolution","resolution","has_playbook","selectedItemsLength","selectableItemsLength","_r$resolution2","cols","formatMessage","transforms","sortable","fitContent","getColumns","actions","host_type","RemediationButton","key","fallback","Spinner","size","isDisabled","dataProvider","processRemediation","onRemediationCreated","onBulkSelect","remediation","getNotification","error","dismissable","description","activeRuleFirst","reports","_toConsumableArray","activeRuleIndex","findIndex","report","rule_id","activeReport","splice","buildRows","_useLocation$pathname","location","useLocation","pathname","useCallback","kbaDetails","undefined","kbaLoading","isFirstLoad","newActiveReportsList","isRulePresent","window","indexOf","activeRule","sort","x","y","total_risk","builtRows","flatMap","value","kbaDetail","Object","keys","article","node_id","match","find","_row$rule","isOpen","reportRow","disableSelection","cells","DateFormat","publish_date","type","tooltipProps","impacted_date","style","verticalAlign","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","InsightsLabel","AnsibeTowerIcon","parent","fullWidth","ReportDetails","isValidSearchValue","toLowerCase","includes","isValidFilterValue","map","_value$resolution","filterValues","rowValue","category","RULE_CATEGORIES","name","String","every","forEach","index","current","EmptyState","insights_id","heightAuto","props","colSpan","useBuildRows","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","prunedFilters","entries","chips","item","FC","values","label","capitalize","urlParam","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","_ref5","reportsData","kbaIds","kbaDetailsFetch","_ref6","join","credentials","response","docs","console","param","newFilters","_defineProperty","removeFilterParam","issues","systems","useProcessRemediation","filterConfigItems","onInputChange","onChange","getFilters","useEffect","dataFetch","_ref7","_callee2","_profileData$data","_profileData$data$res","reportsFetch","activeRuleFirstReportsData","profileData","_context2","INVENTORY_BASE_URL","results","system_profile","NotConnected","titleText","bodyText","buttonText","Fragment","PrimaryToolbar","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","exportConfig","fileType","downloadReport","Card","CardBody","List","Table","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","d","SortByDirection","sortedReportsDirectional","firstItem","secondItem","fst","get","snd","TableVariant","isStickyHeader","TableHeader","TableBody","_ref9","_extends","_ref10","entityDetails"],"sourceRoot":""}