{"version":3,"file":"js/Details-Pathways.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/Cards/TotalRiskCard.js","webpack:///./src/PresentationalComponents/Cards/ResolutionCard.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { useGetRecQuery } from '../../Services/Recs';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst Breadcrumbs = ({ current }) => {\n  const intl = useIntl();\n  const location = useLocation().pathname?.split('/');\n  const [items, setItems] = useState([]);\n  const skip =\n    !(location[1] === 'recommendations' && location.length === 4) ||\n    location[2] === 'pathways';\n  const { data, isFetching } = useGetRecQuery(\n    { ruleId: location[2] },\n    { skip }\n  );\n\n  useEffect(() => {\n    const buildBreadcrumbs = () => {\n      let crumbs = [];\n      // add base\n      crumbs.push({\n        title: `${intl.formatMessage(messages.insightsHeader)} ${location[3]}`,\n        navigate: `/${location[3]}`,\n      });\n\n      // if applicable, add :id breadcrumb\n      if (!skip) {\n        crumbs.push({\n          title: data?.description,\n          navigate: `/${location[1]}/${location[2]}`,\n        });\n      }\n\n      if (location[2] === 'pathways') {\n        crumbs = [\n          {\n            title: 'Advisor pathways',\n            navigate: '/recommendations/pathways',\n          },\n        ];\n      }\n\n      setItems(crumbs);\n    };\n\n    buildBreadcrumbs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      {!isFetching && items.length > 0 ? (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        intl.formatMessage(messages.loading)\n      )}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n","import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/esm/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens/dist/js/global_secondary_color_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/esm/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const RecommendationLevel = ({ recLvl, isCompact }) => {\n  const intl = useIntl();\n  const label = (text, recLvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${recLvl}%`}</Label>\n  );\n\n  if (recLvl >= 80) {\n    return label(intl.formatMessage(messages.high), recLvl, 'red', isCompact);\n  } else if (recLvl < 80 && recLvl >= 50) {\n    return label(\n      intl.formatMessage(messages.medium),\n      recLvl,\n      'orange',\n      isCompact\n    );\n  } else {\n    return label(intl.formatMessage(messages.low), recLvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\nRecommendationLevel.defaultProps = {\n  isCompact: true,\n};\n\nexport default RecommendationLevel;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule, isCompact, noMargin }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label\n            color=\"red\"\n            className={noMargin ? null : 'adv-c-label-incident'}\n            isCompact={isCompact}\n          >\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.disabled)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\" isCompact={isCompact}>\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n  isCompact: PropTypes.bool,\n  noMargin: PropTypes.bool,\n};\n\nRuleLabels.defaultProps = {\n  isCompact: true,\n};\n\nexport default RuleLabels;\n","import { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => (\n  <Card>\n    <CardBody>\n      <List />\n    </CardBody>\n  </Card>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/esm/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/esm/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const [setAck] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport React from 'react';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nexport const TotalRiskCard = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid hasGutter>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6} className=\"pf-u-font-size-sm\">\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const ResolutionCard = ({\n  name,\n  reboot_required,\n  resolution_risk,\n  recommendation_level,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row \">\n          <div className=\"halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-sm pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\" pf-u-pl-xl halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body pf-u-font-size-sm\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel recLvl={recommendation_level} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { TotalRiskCard } from '../../PresentationalComponents/Cards/TotalRiskCard';\nimport { ResolutionCard } from '../../PresentationalComponents/Cards/ResolutionCard';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n  const chrome = useChrome();\n  useEffect(() => {\n    pathway &&\n      !isFetching &&\n      chrome.updateDocumentTitle(\n        intl.formatMessage(messages.documentTitle, {\n          subnav: `${pathway.name} - ${messages.pathways.defaultMessage}`,\n        })\n      );\n  }, [chrome, intl, pathway, pathname, isFetching]);\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <section className=\"pf-u-p-lg\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRiskCard {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <ResolutionCard {...pathway} />\n              </GridItem>\n            </Grid>\n          </section>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <section className=\"pf-u-px-lg pf-u-pb-lg\">\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  showTags={true}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["Breadcrumbs","_ref","_useLocation$pathname","current","intl","useIntl","location","useLocation","pathname","split","_useState","useState","_useState2","_slicedToArray","items","setItems","skip","length","_useGetRecQuery","useGetRecQuery","ruleId","data","isFetching","useEffect","crumbs","push","title","concat","formatMessage","messages","navigate","description","React","Breadcrumb","ouiaId","map","oneLink","key","BreadcrumbItem","Link","to","isActive","propTypes","PropTypes","cache","createIntlCache","locale","navigator","language","slice","createIntl","RebootRequired","reboot_required","className","PowerOffIcon","TextContent","Text","component","TextVariants","strong","str","status","QuestionTooltip","text","Tooltip","position","TooltipPosition","content","OutlinedQuestionCircleIcon","color","global_secondary_color_100","LabelIcon","icon","Label","variant","isCompact","CategoryLabel","arr","labelList","sortedFrequencyList","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","AutomationIcon","LockIcon","CubeIcon","PortIcon","labels","Number","defaultProps","RecommendationLevel","recLvl","props","RuleLabels","_rule$tags","rule","noMargin","tags","search","rule_status","Card","CardBody","List","DisableRule","handleModalToggle","isModalOpen","host","hosts","afterFn","dispatch","useDispatch","notification","addNotification","justification","setJustificaton","_useState3","undefined","_useState4","singleSystem","setSingleSystem","_useSetAckMutation","useSetAckMutation","setAck","bulkHostActions","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","systems","Post","BASE_URL","rule_id","dismissable","timeout","t0","stop","apply","arguments","disableRule","_ref3","_callee2","options","_context2","type","system_uuid","_objectSpread","unwrap","Modal","isOpen","onClose","actions","Button","onClick","Form","FormGroup","fieldId","Checkbox","isChecked","onChange","name","TextInput","value","onKeyDown","e","preventDefault","system","TotalRiskCard","cats","_cats$","impacted_systems_count","incident_count","categories","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","isFlat","isPlain","CardTitle","Grid","hasGutter","GridItem","span","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","ChartAxis","dependentAxis","showGrid","ChartGroup","ChartBar","barWidth","style","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","cat","join","incidents","ResolutionCard","resolution_risk","recommendation_level","InsightsLabel","RISK_OF_CHANGE_LABEL","risk","hideIcon","RulesTable","lazy","pathwayName","useParams","selectedTags","useSelector","filters","workloads","SID","recFilters","_ref4","recState","sysFilters","_ref5","sysState","workloadQueryBuilder","_useGetPathwayQuery","useGetPathwayQuery","slug","_useGetPathwayQuery$d","pathway","includes","activeTab","setActiveTab","chrome","useChrome","updateDocumentTitle","subnav","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","then","getElementById","scrollIntoView","behavior","Loading","PageHeader","PageHeaderTitle","has_incident","date","DateFormat","Date","publish_date","sm","md","Tabs","activeKey","onSelect","_e","tab","Tab","eventKey","TabTitleText","Suspense","fallback","Inventory","tableProps","canSelectAll","isStickyHeader","showTags"],"sourceRoot":""}