{"version":3,"file":"js/TopicsList.c1213a74ed5e6e7a5ce6.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/TopicsTable/TopicsTable.js","webpack:///./src/SmartComponents/Topics/List.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  sortable,\n  wrappable,\n} from '@patternfly/react-table';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport messages from '../../Messages';\nimport { sortBy } from 'lodash';\nimport { useIntl } from 'react-intl';\n\nconst TopicsTable = ({ props }) => {\n  const intl = useIntl();\n  const [searchText, setSearchText] = useState('');\n  const { data: topics, isLoading, isFetching, isError } = props;\n  const [cols] = useState([\n    { title: intl.formatMessage(messages.name), transforms: [sortable] },\n    '',\n    {\n      title: intl.formatMessage(messages.featured),\n      transforms: [sortable, wrappable],\n    },\n    {\n      title: intl.formatMessage(messages.affectedSystems),\n      transforms: [sortable, wrappable],\n    },\n  ]);\n  const [rows, setRows] = useState([]);\n  const [sort, setSort] = useState({ index: 2, direction: 'desc' });\n\n  const buildRows = (list) =>\n    list.flatMap((value, key) => {\n      const isValidSearchText =\n        searchText.length === 0 ||\n        value.name.toLowerCase().includes(searchText.toLowerCase());\n\n      return isValidSearchText\n        ? [\n            {\n              topic: value,\n              cells: [\n                {\n                  title: (\n                    <span key={key}>\n                      <Link key={key} to={`/topics/${value.slug}`}>\n                        {' '}\n                        {value.name}{' '}\n                      </Link>\n                    </span>\n                  ),\n                  props: { colSpan: 2 },\n                },\n                {\n                  title: (\n                    <span key={key}>\n                      {' '}\n                      {value.featured && (\n                        <Label color=\"blue\" icon={<StarIcon />}>\n                          {intl.formatMessage(messages.featured)}\n                        </Label>\n                      )}{' '}\n                    </span>\n                  ),\n                },\n                {\n                  title: (\n                    <span className=\"pf-m-center\" key={key}>\n                      {' '}\n                      {value.impacted_systems_count}\n                    </span>\n                  ),\n                },\n              ],\n            },\n          ]\n        : [];\n    });\n\n  const onSort = (_event, index, direction) => {\n    const sortedReports = {\n      0: sortBy(topics, [(result) => result.name]),\n      2: sortBy(topics, [(result) => result.featured]),\n      3: sortBy(topics, [(result) => result.impacted_systems_count]),\n    };\n    const sortedTopicsDirectional =\n      direction === SortByDirection.asc\n        ? sortedReports[index]\n        : sortedReports[index].reverse();\n    setSort({ index, direction });\n    setRows(buildRows(sortedTopicsDirectional));\n  };\n\n  const activeFiltersConfig = {\n    filters: searchText.length\n      ? [\n          {\n            category: 'Description',\n            chips: [{ name: searchText, value: searchText }],\n          },\n        ]\n      : [],\n    onDelete: () => {\n      setSearchText('');\n      setSort({});\n    },\n  };\n\n  useEffect(() => {\n    sort.index\n      ? onSort(null, sort.index, sort.direction)\n      : setRows(buildRows(topics));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [topics, searchText]);\n\n  const filterConfigItems = [\n    {\n      label: intl.formatMessage(messages.name).toLowerCase(),\n      filterValues: {\n        key: 'text-filter',\n        onChange: (event, value) => {\n          setSearchText(value);\n          setSort({});\n        },\n        value: searchText,\n      },\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      {isLoading || isFetching ? (\n        <Loading />\n      ) : !isFetching && topics.length > 0 ? (\n        <React.Fragment>\n          <PrimaryToolbar\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n          />\n          <Table\n            aria-label={'topics-table'}\n            sortBy={sort}\n            onSort={onSort}\n            cells={cols}\n            rows={rows}\n            ouiaId=\"topicTable\"\n            isStickyHeader\n          >\n            <TableHeader />\n            <TableBody />\n            {rows.length === 0 &&\n              !isFetching &&\n              setRows([\n                {\n                  cells: [\n                    {\n                      title: (\n                        <MessageState\n                          icon={SearchIcon}\n                          title={intl.formatMessage(messages.noHitsTitle, {\n                            item: intl\n                              .formatMessage(messages.topics)\n                              .toLowerCase(),\n                          })}\n                          text={intl.formatMessage(messages.noHitsBody, {\n                            item: intl\n                              .formatMessage(messages.topics)\n                              .toLowerCase(),\n                          })}\n                        />\n                      ),\n                      props: { colSpan: 4 },\n                    },\n                  ],\n                },\n              ])}\n          </Table>\n        </React.Fragment>\n      ) : (\n        isError && (\n          <MessageState\n            icon={TimesCircleIcon}\n            title={intl.formatMessage(messages.topicsListNotopicsTitle)}\n            text={intl.formatMessage(messages.topicsListNotopicsBody)}\n          />\n        )\n      )}\n    </React.Fragment>\n  );\n};\n\nTopicsTable.propTypes = {\n  props: PropTypes.object,\n  data: PropTypes.array,\n  isLoading: PropTypes.bool,\n  isFetching: PropTypes.bool,\n  isError: PropTypes.bool,\n};\n\nexport default TopicsTable;\n","import {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport TopicsTable from '../../PresentationalComponents/TopicsTable/TopicsTable';\nimport messages from '../../Messages';\nimport { useGetTopicsQuery } from '../../Services/Topics';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst List = () => {\n  const intl = useIntl();\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  document.title = intl.formatMessage(messages.documentTitle, {\n    subnav: messages.topics.defaultMessage,\n  });\n  let options = selectedTags?.length && { tags: selectedTags };\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n\n  const {\n    data = [],\n    isLoading,\n    isFetching,\n    isError,\n  } = useGetTopicsQuery(options);\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={`${intl.formatMessage(messages.insightsHeader)} ${intl\n            .formatMessage(messages.topics)\n            .toLowerCase()}`}\n        />\n      </PageHeader>\n      <Main>\n        <TopicsTable props={{ data, isLoading, isFetching, isError }} />\n      </Main>\n    </React.Fragment>\n  );\n};\n\nList.displayName = 'list-topics';\n\nexport default List;\n"],"names":["TopicsTable","props","intl","useIntl","useState","searchText","setSearchText","topics","data","isLoading","isFetching","isError","title","formatMessage","messages","transforms","sortable","wrappable","cols","rows","setRows","index","direction","sort","setSort","buildRows","list","flatMap","value","key","length","name","toLowerCase","includes","topic","cells","Link","to","slug","colSpan","featured","Label","color","icon","className","impacted_systems_count","onSort","_event","sortedReports","0","result","2","3","sortedTopicsDirectional","SortByDirection","reverse","activeFiltersConfig","filters","category","chips","onDelete","useEffect","filterConfigItems","label","filterValues","onChange","event","Loading","PrimaryToolbar","filterConfig","items","Table","aria-label","sortBy","ouiaId","isStickyHeader","TableHeader","TableBody","MessageState","SearchIcon","item","text","TimesCircleIcon","propTypes","PropTypes","List","selectedTags","useSelector","workloads","SID","document","subnav","options","tags","workloadQueryBuilder","useGetTopicsQuery","PageHeader","PageHeaderTitle","Main","displayName"],"sourceRoot":""}