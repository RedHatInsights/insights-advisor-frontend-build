{"version":3,"file":"js/7418.8afb0badca2dfc12944a.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/MessageState/MessageState.js","webpack:///./src/PresentationalComponents/RuleLabels/RuleLabels.js"],"sourcesContent":["import { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\n// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters = {}, selectedTags = []) => {\n  const url = new URL(window.location);\n  const queryString = `${Object.keys(filters)\n    .map(\n      (key) =>\n        `${key}=${\n          Array.isArray(filters[key]) ? filters[key].join() : filters[key]\n        }`\n    )\n    .join('&')}`;\n  const params = new URLSearchParams(queryString);\n\n  //Removes invalid 'undefined' url param value\n  params.get('reports_shown') === 'undefined' && params.delete('reports_shown');\n  selectedTags?.length\n    ? params.set('tags', selectedTags)\n    : params.delete('tags');\n  window.history.replaceState(\n    null,\n    null,\n    `${url.origin}${url.pathname}?${params.toString()}${window.location.hash}`\n  );\n  return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) =>\n  Object.assign(\n    {},\n    ...Object.entries(filters).map(([filterName, filterValue]) =>\n      Array.isArray(filterValue)\n        ? (filterValue[0] === 'true' || filterValue[0] === 'false') &&\n          filterValue.length > 1\n          ? null\n          : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue }\n    )\n  );\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]:\n        value === 'true' || value === 'false'\n          ? JSON.parse(value)\n          : value.split(','),\n    }),\n    {}\n  );\n};\n\n// create url from options\nexport const encodeOptionsToURL = (options) => {\n  return Object.entries(options).reduce((acc, [key, value], index) => {\n    return (acc += index === 0 ? `${key}=${value}` : `&${key}=${value}`);\n  }, '');\n};\n\n// capitalizes text string\nexport const capitalize = (string) =>\n  string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.length > 0\n    ? prunedFilters.reduce((arr, item) => {\n        if (filterCategories[item[0]]) {\n          const category = filterCategories[item[0]];\n          const chips = Array.isArray(item[1])\n            ? item[1].map((value) => {\n                const selectedCategoryValue = category.values.find(\n                  (values) => values.value === String(value)\n                );\n                return selectedCategoryValue\n                  ? {\n                      name:\n                        selectedCategoryValue.text ||\n                        selectedCategoryValue.label,\n                      value,\n                    }\n                  : { name: value, value };\n              })\n            : [\n                {\n                  name: category.values.find(\n                    (values) => values.value === String(item[1])\n                  ).label,\n                  value: item[1],\n                },\n              ];\n          return [\n            ...arr,\n            {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            },\n          ];\n        } else if (item[0] === 'text') {\n          return [\n            ...arr,\n            {\n              category: 'Name',\n              chips: [{ name: item[1], value: item[1] }],\n              urlParam: item[0],\n            },\n          ];\n        } else {\n          return arr;\n        }\n      }, [])\n    : [];\n};\n\n// builds workload query filter\nexport const workloadQueryBuilder = (workloads, SID) =>\n  generateFilter(\n    {\n      system_profile: {\n        ...(workloads?.SAP?.isSelected && { sap_system: true }),\n        ...(SID?.length > 0 && { sap_sids: SID }),\n      },\n    },\n    undefined,\n    { arrayEnhancer: 'contains' }\n  );\n\n// merges two array objects by different key names\nexport const mergeArraysByDiffKeys = (advSystems, invSystems) =>\n  advSystems.map((advSys) => ({\n    ...invSystems.find(\n      (invSys) => invSys['id'] === advSys['system_uuid'] && invSys\n    ),\n    ...advSys,\n  }));\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"red\" className=\"incidentLabel\">\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\">{intl.formatMessage(messages.disabled)}</Label>\n        </Tooltip>\n      )}\n      {rule.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\">\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n"],"names":["urlBuilder","filters","selectedTags","url","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","params","URLSearchParams","get","length","set","history","replaceState","origin","pathname","toString","hash","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","encodeOptionsToURL","options","index","capitalize","string","toUpperCase","substring","pruneFilters","localFilters","filterCategories","prunedFilters","arr","item","category","chips","selectedCategoryValue","values","find","String","name","text","label","title","urlParam","workloadQueryBuilder","workloads","SID","generateFilter","system_profile","SAP","isSelected","sap_system","sap_sids","undefined","arrayEnhancer","mergeArraysByDiffKeys","advSystems","invSystems","advSys","invSys","MessageState","className","children","icon","iconClass","iconStyle","variant","style","headingLevel","size","marginBottom","propTypes","PropTypes","defaultProps","CubesIcon","EmptyStateVariant","RuleLabels","rule","intl","useIntl","tags","Tooltip","content","formatMessage","messages","position","TooltipPosition","Label","color","rule_status"],"sourceRoot":""}