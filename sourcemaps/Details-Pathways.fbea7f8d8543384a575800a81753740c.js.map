{"version":3,"file":"js/Details-Pathways.1669659569935.430c302da2576f54dc06.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/Common.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Labels/LabelIcon.js","webpack:///./src/PresentationalComponents/Labels/CategoryLabel.js","webpack:///./src/PresentationalComponents/Labels/RecommendationLevel.js","webpack:///./src/PresentationalComponents/Modals/DisableRule.js","webpack:///./src/PresentationalComponents/Cards/TotalRiskCard.js","webpack:///./src/PresentationalComponents/Cards/ResolutionCard.js","webpack:///./src/SmartComponents/Recs/DetailsPathways.js"],"sourcesContent":["import './_Common.scss';\n\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core/dist/js/components/Text/index';\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\nimport { createIntl, createIntlCache } from 'react-intl';\n\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport PowerOffIcon from '@patternfly/react-icons/dist/esm/icons/power-off-icon';\nimport React from 'react';\nimport { global_secondary_color_100 } from '@patternfly/react-tokens';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\nconst intl = createIntl(\n  {\n    locale,\n  },\n  cache\n);\n\nconst RebootRequired = (reboot_required) => (\n  <span className=\"adv-system-reboot-message\">\n    <PowerOffIcon\n      className={\n        reboot_required\n          ? 'adv-c-icon-reboot-required'\n          : 'adv-c-icon-no-reboot-required'\n      }\n    />\n    <TextContent className=\"adv-c-text-system-reboot-message pf-u-font-size-sm\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(messages.systemReboot, {\n          strong: (str) => strong(str),\n          status: reboot_required\n            ? intl.formatMessage(messages.is)\n            : intl.formatMessage(messages.isNot),\n        })}\n      </Text>\n    </TextContent>\n  </span>\n);\n\nconst QuestionTooltip = (text) => (\n  <Tooltip\n    key={text}\n    position={TooltipPosition.right}\n    content={<div>{text}</div>}\n  >\n    <span aria-label=\"Action\">\n      <OutlinedQuestionCircleIcon color={global_secondary_color_100.value} />\n    </span>\n  </Tooltip>\n);\n\nexport { RebootRequired, QuestionTooltip };\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { BASE_URL, exportNotifications } from '../../AppConstants';\nimport { Get } from '../../Utilities/Api';\nimport { workloadQueryBuilder } from '../Common/Tables';\n\nconst fileName = (exportTable) => {\n  const defaultParams = {\n    date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc',\n  };\n\n  return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (\n  exportTable,\n  format,\n  filters,\n  selectedTags,\n  workloads,\n  SID,\n  dispatch\n) => {\n  try {\n    let options = selectedTags?.length && { tags: selectedTags };\n    workloads &&\n      (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n    dispatch(addNotification(exportNotifications.pending));\n    const data = (\n      await Get(\n        `${BASE_URL}/export/${exportTable}.${\n          format === 'json' ? 'json' : 'csv'\n        }`,\n        {},\n        { ...filters, ...options }\n      )\n        .then((result) => {\n          dispatch(addNotification(exportNotifications.success));\n          return result;\n        })\n        .catch(() => dispatch(addNotification(exportNotifications.error)))\n    ).data;\n\n    let formattedData = format === 'json' ? JSON.stringify(data) : data;\n    downloadFile(formattedData, fileName(exportTable), format);\n  } catch (error) {\n    throw `${error}`;\n  }\n};\n\nexport default downloadHelper;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelIcon = ({ icon, text }) => (\n  <Label icon={icon} variant=\"outline\" color=\"blue\" isCompact>\n    {text}\n  </Label>\n);\n\nLabelIcon.propTypes = {\n  icon: PropTypes.object,\n  text: PropTypes.bool,\n};\n\nexport default LabelIcon;\n","/* eslint-disable react/jsx-key */\nimport AutomationIcon from '@patternfly/react-icons/dist/esm/icons/automation-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { LabelGroup } from '@patternfly/react-core/dist/js/components/LabelGroup/LabelGroup';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport PortIcon from '@patternfly/react-icons/dist/esm/icons/port-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport LabelIcon from './LabelIcon';\n\nconst CategoryLabel = ({ labelList }) => {\n  const intl = useIntl();\n  const sortedFrequency = (arr) =>\n    Object.entries(\n      arr.reduce((acc, curr) => ((acc[curr] = (acc[curr] || 0) + 1), acc), {})\n    ).sort((a, b) => b[1] - a[1]);\n  const sortedFrequencyList = sortedFrequency(\n    labelList.map((label) => label.id)\n  );\n\n  const labels = (id) =>\n    [\n      <LabelIcon\n        icon={<AutomationIcon />}\n        text={intl.formatMessage(messages.availability)}\n      />,\n      <LabelIcon\n        icon={<LockIcon />}\n        text={intl.formatMessage(messages.security)}\n      />,\n      <LabelIcon\n        icon={<CubeIcon />}\n        text={intl.formatMessage(messages.stability)}\n      />,\n      <LabelIcon\n        icon={<PortIcon />}\n        text={intl.formatMessage(messages.performance)}\n      />,\n    ][id];\n\n  return (\n    <LabelGroup numLabels={1} isCompact>\n      {sortedFrequencyList.map((id) => labels(Number(id[0] - 1)))}\n    </LabelGroup>\n  );\n};\n\nCategoryLabel.propTypes = {\n  labelList: PropTypes.array,\n  isCompact: PropTypes.bool,\n};\n\nCategoryLabel.defaultProps = {\n  isCompact: true,\n};\n\nexport default CategoryLabel;\n","import { Label } from '@patternfly/react-core/dist/js/components/Label/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const RecommendationLevel = ({ recLvl, isCompact }) => {\n  const intl = useIntl();\n  const label = (text, recLvl, color) => (\n    <Label color={color} isCompact>{`${text} - ${recLvl}%`}</Label>\n  );\n\n  if (recLvl >= 80) {\n    return label(intl.formatMessage(messages.high), recLvl, 'red', isCompact);\n  } else if (recLvl < 80 && recLvl >= 50) {\n    return label(\n      intl.formatMessage(messages.medium),\n      recLvl,\n      'orange',\n      isCompact\n    );\n  } else {\n    return label(intl.formatMessage(messages.low), recLvl, 'blue', isCompact);\n  }\n};\n\nRecommendationLevel.propTypes = {\n  props: PropTypes.array,\n};\nRecommendationLevel.defaultProps = {\n  isCompact: true,\n};\n\nexport default RecommendationLevel;\n","import React, { useState } from 'react';\n\nimport { BASE_URL } from '../../AppConstants';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Post } from '../../Utilities/Api';\nimport PropTypes from 'prop-types';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useSetAckMutation } from '../../Services/Acks';\n\nconst DisableRule = ({\n  handleModalToggle,\n  isModalOpen,\n  host,\n  hosts,\n  rule,\n  afterFn,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notification = (data) => dispatch(addNotification(data));\n  const [justification, setJustificaton] = useState('');\n  const [singleSystem, setSingleSystem] = useState(\n    host !== undefined || hosts.length > 0\n  );\n\n  const [setAck] = useSetAckMutation();\n\n  const bulkHostActions = async () => {\n    const data = { systems: hosts, justification };\n    try {\n      await Post(`${BASE_URL}/rule/${rule.rule_id}/ack_hosts/`, {}, data);\n      !singleSystem &&\n        notification({\n          variant: 'success',\n          dismissable: true,\n          timeout: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n      afterFn && afterFn();\n    } catch (error) {\n      notification({\n        variant: 'danger',\n        dismissable: true,\n        title: intl.formatMessage(messages.error),\n        description: `${error}`,\n      });\n    }\n  };\n\n  const disableRule = async () => {\n    if (rule.rule_status === 'enabled' && !hosts.length) {\n      const options = singleSystem\n        ? {\n            type: 'HOST',\n            options: {\n              rule: rule.rule_id,\n              system_uuid: host.id,\n              justification,\n            },\n          }\n        : {\n            type: 'RULE',\n            options: {\n              rule_id: rule.rule_id,\n              ...(justification && { justification }),\n            },\n          };\n      try {\n        await setAck(options).unwrap();\n\n        notification({\n          variant: 'success',\n          timeout: true,\n          dismissable: true,\n          title: intl.formatMessage(messages.recSuccessfullyDisabled),\n        });\n\n        setJustificaton('');\n        afterFn && afterFn();\n      } catch (error) {\n        notification({\n          variant: 'danger',\n          dismissable: true,\n          title: intl.formatMessage(messages.error),\n          description: `${error}`,\n        });\n      }\n    } else {\n      bulkHostActions();\n    }\n\n    handleModalToggle(false);\n  };\n\n  return (\n    <Modal\n      variant=\"small\"\n      title={intl.formatMessage(messages.disableRule)}\n      isOpen={isModalOpen}\n      onClose={() => {\n        handleModalToggle(false);\n        setJustificaton('');\n      }}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => disableRule()}\n          ouiaId=\"confirm\"\n        >\n          {intl.formatMessage(messages.save)}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            handleModalToggle(false);\n            setJustificaton('');\n          }}\n          ouiaId=\"cancel\"\n        >\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      {intl.formatMessage(messages.disableRuleBody)}\n      <Form>\n        <FormGroup fieldId=\"blank-form\" />\n        {(host !== undefined || hosts.length > 0) && (\n          <FormGroup fieldId=\"disable-rule-one-system\">\n            <Checkbox\n              isChecked={singleSystem}\n              onChange={() => {\n                setSingleSystem(!singleSystem);\n              }}\n              label={\n                hosts.length\n                  ? intl.formatMessage(messages.disableRuleForSystems)\n                  : intl.formatMessage(messages.disableRuleSingleSystem)\n              }\n              id=\"disable-rule-one-system\"\n              name=\"disable-rule-one-system\"\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={intl.formatMessage(messages.justificationNote)}\n          fieldId=\"disable-rule-justification\"\n        >\n          <TextInput\n            type=\"text\"\n            id=\"disable-rule-justification\"\n            aria-describedby=\"disable-rule-justification\"\n            value={justification}\n            onChange={(text) => setJustificaton(text)}\n            onKeyDown={(e) =>\n              e.key === 'Enter' && (e.preventDefault(), disableRule())\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nDisableRule.propTypes = {\n  isModalOpen: PropTypes.bool,\n  host: PropTypes.object,\n  handleModalToggle: PropTypes.func,\n  rule: PropTypes.object,\n  afterFn: PropTypes.func,\n  hosts: PropTypes.array,\n};\n\nDisableRule.defaultProps = {\n  isModalOpen: false,\n  handleModalToggle: () => undefined,\n  system: undefined,\n  rule: {},\n  afterFn: () => undefined,\n  host: undefined,\n  hosts: [],\n};\n\nexport default DisableRule;\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\n\nimport React from 'react';\nimport chart_color_black_100 from '@patternfly/react-tokens/dist/esm/chart_color_black_100';\nimport chart_color_gold_400 from '@patternfly/react-tokens/dist/esm/chart_color_gold_400';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/esm/chart_color_orange_300';\nimport chart_color_red_100 from '@patternfly/react-tokens/dist/esm/chart_color_red_100';\nimport messages from '../../Messages';\nimport { strong } from '../../Utilities/intlHelper';\nimport { useIntl } from 'react-intl';\n\nexport const TotalRiskCard = (props) => {\n  const intl = useIntl();\n  const {\n    impacted_systems_count,\n    incident_count,\n    categories,\n    critical_risk_count,\n    high_risk_count,\n    medium_risk_count,\n    low_risk_count,\n  } = props;\n\n  const catString = (cats) =>\n    cats.length > 1\n      ? categories.map((cat) => cat.name).join(', ')\n      : cats[0]?.name;\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100\"\n    >\n      <CardTitle>{intl.formatMessage(messages.totalRiskPathway)}</CardTitle>\n      <CardBody className=\"body\">\n        <Grid hasGutter>\n          <GridItem span={6}>\n            <div>\n              <Chart\n                ariaDesc=\"Total risk of recommendations\"\n                ariaTitle=\"Total risk of recommendations\"\n                containerComponent={\n                  <ChartVoronoiContainer\n                    labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                    constrainToVisibleArea\n                  />\n                }\n                domainPadding={{\n                  x: [20, 15],\n                }}\n                height={150}\n                width={300}\n                padding={{\n                  bottom: 30,\n                  left: 45,\n                  right: 10,\n                  top: 10,\n                }}\n              >\n                <ChartAxis />\n                <ChartAxis dependentAxis showGrid />\n                <ChartGroup>\n                  <ChartBar\n                    barWidth={16}\n                    style={{\n                      data: {\n                        fill: ({ datum }) => datum.fill,\n                      },\n                    }}\n                    data={[\n                      {\n                        name: 'Critical',\n                        x: 'Critical',\n                        y: critical_risk_count,\n                        fill: chart_color_red_100.value,\n                      },\n                      {\n                        name: 'Important',\n                        x: 'Important',\n                        y: high_risk_count,\n                        fill: chart_color_orange_300.value,\n                      },\n                      {\n                        name: 'Moderate',\n                        x: 'Moderate',\n                        y: medium_risk_count,\n                        fill: chart_color_gold_400.value,\n                      },\n                      {\n                        name: 'Low',\n                        x: 'Low',\n                        y: low_risk_count,\n                        fill: chart_color_black_100.value,\n                      },\n                    ]}\n                  />\n                </ChartGroup>\n              </Chart>\n            </div>\n          </GridItem>\n          <GridItem span={6} className=\"pf-u-font-size-sm\">\n            {intl.formatMessage(messages.thisPathway, {\n              category: catString(categories),\n              systems: impacted_systems_count,\n              incidents: incident_count,\n              strong: (str) => strong(str),\n            })}\n          </GridItem>\n        </Grid>\n      </CardBody>\n    </Card>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport './Pathways.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n} from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { RISK_OF_CHANGE_LABEL } from '../../AppConstants';\nimport React from 'react';\nimport { RebootRequired } from '../Common/Common';\nimport RecommendationLevel from '../Labels/RecommendationLevel';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nexport const ResolutionCard = ({\n  name,\n  reboot_required,\n  resolution_risk,\n  recommendation_level,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Card\n      isFlat\n      isPlain\n      className=\"adv-c-card-pathway adv__background--global-100 pf-u-h-100 flex-row\"\n    >\n      <div className=\"flex-coloumn\">\n        <CardTitle>{intl.formatMessage(messages.resolution)}</CardTitle>\n\n        <div className=\"flex-row \">\n          <div className=\"halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm pf-u-pl-lg\">\n              {intl.formatMessage(messages.remediation)}\n            </p>\n            <p className=\"pf-u-font-size-sm pf-u-pl-lg\">{name}</p>\n          </div>\n\n          <CardBody className=\" pf-u-pl-xl halfWidth\">\n            <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n              {intl.formatMessage(messages.riskOfChange)}\n            </p>\n            <InsightsLabel\n              text={RISK_OF_CHANGE_LABEL[resolution_risk.risk]}\n              value={resolution_risk.risk}\n              hideIcon\n              isCompact\n            />\n          </CardBody>\n        </div>\n\n        <CardBody className=\"body pf-u-font-size-sm\">\n          {intl.formatMessage(messages.staticRemediationDesc)}\n        </CardBody>\n        <CardBody className=\"body\">{RebootRequired(reboot_required)}</CardBody>\n      </div>\n\n      <div className=\"pathwayRight pf-u-p-lg \">\n        <p className=\"pf-u-font-weight-bold pf-u-font-size-sm\">\n          {intl.formatMessage(messages.reclvl)}\n        </p>\n        <div>\n          <RecommendationLevel recLvl={recommendation_level} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import './Details.scss';\n\nimport {\n  Grid,\n  GridItem,\n} from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { TotalRiskCard } from '../../PresentationalComponents/Cards/TotalRiskCard';\nimport { ResolutionCard } from '../../PresentationalComponents/Cards/ResolutionCard';\nimport {\n  Tab,\n  TabTitleText,\n  Tabs,\n} from '@patternfly/react-core/dist/esm/components/Tabs/index';\nimport { updateRecFilters, updateSysFilters } from '../../Services/Filters';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport CategoryLabel from '../../PresentationalComponents/Labels/CategoryLabel';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Inventory from '../../PresentationalComponents/Inventory/Inventory';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport messages from '../../Messages';\nimport { useGetPathwayQuery } from '../../Services/Pathways';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\nimport { useLocation } from 'react-router-dom';\n\nconst RulesTable = lazy(() =>\n  import(\n    /* webpackChunkName: 'RulesTable' */ '../../PresentationalComponents/RulesTable/RulesTable'\n  )\n);\n\nconst PathwayDetails = () => {\n  const intl = useIntl();\n  const pathwayName = useParams().id;\n  const dispatch = useDispatch();\n\n  const selectedTags = useSelector(({ filters }) => filters.selectedTags);\n  const workloads = useSelector(({ filters }) => filters.workloads);\n  const SID = useSelector(({ filters }) => filters.SID);\n  const recFilters = useSelector(({ filters }) => filters.recState);\n  const sysFilters = useSelector(({ filters }) => filters.sysState);\n\n  let options = {};\n  selectedTags?.length &&\n    (options = {\n      ...options,\n      ...{ tags: selectedTags.join(',') },\n    });\n  workloads &&\n    (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n  const { data: pathway = {}, isFetching } = useGetPathwayQuery({\n    ...options,\n    slug: pathwayName,\n  });\n  const { pathname } = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\n    pathname.includes('/recommendations/pathways/systems/') ? 1 : 0\n  );\n\n  const waitForElm = (selector) => {\n    return new Promise((resolve) => {\n      if (document.querySelector(selector)) {\n        return resolve(document.querySelector(selector));\n      }\n\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve(document.querySelector(selector));\n          observer.disconnect();\n        }\n      });\n    });\n  };\n\n  const scrollDown = () => {\n    if (pathname.includes('/recommendations/pathways/systems/')) {\n      setTimeout(() => {\n        waitForElm('#tablesContainer').then(() => {\n          document\n            .getElementById('tablesContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n        });\n      }, 5000);\n    }\n  };\n\n  useEffect(() => {\n    const initiaRecFilters = { ...recFilters };\n    const initiaSysFilters = { ...sysFilters };\n    const defaultFilters = { pathway: pathwayName, limit: 20, offset: 0 };\n    dispatch(\n      updateRecFilters({\n        ...defaultFilters,\n        sort: 'category',\n        impacting: true,\n      })\n    );\n    dispatch(\n      updateSysFilters({\n        ...defaultFilters,\n      })\n    );\n    scrollDown();\n    return () => {\n      dispatch(updateRecFilters(initiaRecFilters));\n      dispatch(updateSysFilters(initiaSysFilters));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <React.Fragment>\n      {isFetching ? (\n        <Loading />\n      ) : (\n        <React.Fragment>\n          <PageHeader className=\"adv-c-page__header\">\n            <Breadcrumbs ouiaId=\"override\" current={pathway.name || ''} />\n            <PageHeaderTitle\n              title={\n                <React.Fragment>\n                  {pathway.name}\n                  {pathway.has_incident && (\n                    <RuleLabels rule={{ tags: 'incident' }} />\n                  )}\n                </React.Fragment>\n              }\n            />\n            <p className=\"pf-u-mb-lg\">\n              {intl.formatMessage(messages.rulesDetailsModifieddate, {\n                date: (\n                  <DateFormat\n                    date={new Date(pathway.publish_date)}\n                    type=\"onlyDate\"\n                  />\n                ),\n              })}\n              <span className=\"pf-u-pl-sm\">\n                <CategoryLabel labelList={pathway.categories} />\n              </span>\n            </p>\n            <p className=\"pf-u-mb-lg\">{pathway.description}</p>\n          </PageHeader>\n          <Main className=\"pf-u-pb-0\">\n            <Grid hasGutter>\n              <GridItem sm={12} md={6}>\n                <TotalRiskCard {...pathway} />\n              </GridItem>\n              <GridItem sm={12} md={6}>\n                <ResolutionCard {...pathway} />\n              </GridItem>\n            </Grid>\n          </Main>\n        </React.Fragment>\n      )}\n      {isFetching && <Loading />}\n      <Main>\n        <Tabs\n          className=\"adv__background--global-100\"\n          activeKey={activeTab}\n          onSelect={(_e, tab) => setActiveTab(tab)}\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.recommendations)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <RulesTable />\n              </Suspense>\n            )}\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={\n              <TabTitleText>\n                {intl.formatMessage(messages.systems)}\n              </TabTitleText>\n            }\n          >\n            {isFetching ? (\n              <Loading />\n            ) : (\n              <Suspense fallback={<Loading />}>\n                <Inventory\n                  tableProps={{\n                    canSelectAll: false,\n                    isStickyHeader: true,\n                  }}\n                  pathway={pathway}\n                  selectedTags={selectedTags}\n                  workloads={workloads}\n                  SID={SID}\n                  showTags={true}\n                />\n              </Suspense>\n            )}\n          </Tab>\n        </Tabs>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default PathwayDetails;\n"],"names":["cache","createIntlCache","locale","navigator","language","slice","intl","createIntl","RebootRequired","reboot_required","className","TextContent","Text","component","TextVariants","formatMessage","messages","strong","str","status","QuestionTooltip","text","key","position","TooltipPosition","content","color","global_secondary_color_100","fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","format","filters","selectedTags","workloads","SID","dispatch","options","length","tags","workloadQueryBuilder","addNotification","exportNotifications","Get","BASE_URL","then","result","data","formattedData","JSON","stringify","downloadFile","LabelIcon","icon","Label","variant","isCompact","propTypes","PropTypes","CategoryLabel","arr","labelList","useIntl","sortedFrequencyList","map","label","id","Object","entries","reduce","acc","curr","sort","a","b","LabelGroup","numLabels","labels","Number","defaultProps","RecommendationLevel","recLvl","props","DisableRule","handleModalToggle","isModalOpen","host","hosts","rule","afterFn","useDispatch","notification","useState","justification","setJustificaton","undefined","singleSystem","setSingleSystem","useSetAckMutation","setAck","bulkHostActions","systems","Post","rule_id","dismissable","timeout","title","description","disableRule","rule_status","type","system_uuid","unwrap","isOpen","onClose","actions","Button","onClick","ouiaId","fieldId","isChecked","onChange","name","value","onKeyDown","e","preventDefault","system","TotalRiskCard","cats","impacted_systems_count","incident_count","categories","critical_risk_count","high_risk_count","medium_risk_count","low_risk_count","Card","isFlat","isPlain","CardTitle","CardBody","Grid","hasGutter","GridItem","span","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","datum","y","constrainToVisibleArea","domainPadding","x","height","width","padding","bottom","left","right","top","ChartAxis","C","dependentAxis","showGrid","ChartGroup","ChartBar","barWidth","style","fill","chart_color_red_100","chart_color_orange_300","chart_color_gold_400","chart_color_black_100","category","cat","join","incidents","ResolutionCard","resolution_risk","recommendation_level","InsightsLabel","RISK_OF_CHANGE_LABEL","risk","hideIcon","RulesTable","lazy","pathwayName","useParams","useSelector","recFilters","recState","sysFilters","sysState","useGetPathwayQuery","slug","pathway","isFetching","pathname","useLocation","includes","activeTab","setActiveTab","useEffect","initiaRecFilters","initiaSysFilters","defaultFilters","limit","offset","updateRecFilters","impacting","updateSysFilters","setTimeout","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","getElementById","scrollIntoView","behavior","Loading","PageHeader","Breadcrumbs","current","PageHeaderTitle","has_incident","RuleLabels","DateFormat","publish_date","Main","sm","md","Tabs","activeKey","onSelect","_e","tab","Tab","eventKey","TabTitleText","T","Suspense","fallback","Inventory","tableProps","canSelectAll","isStickyHeader","showTags"],"sourceRoot":""}