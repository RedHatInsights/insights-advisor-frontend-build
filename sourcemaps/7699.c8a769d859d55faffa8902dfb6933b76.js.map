{"version":3,"file":"js/7699.b9bcdb04b23f6090e4da.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js","webpack:///./node_modules/tabbable/dist/index.esm.js","webpack:///./node_modules/focus-trap/dist/focus-trap.esm.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Check/check.mjs"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { ASTERISK } from '../../helpers/htmlConstants';\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => { };\nexport class Checkbox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this.props.onChange(event.currentTarget.checked, event);\n        };\n        this.state = {\n            ouiaStateId: getDefaultOUIAId(Checkbox.displayName)\n        };\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, className, onChange, isValid, isDisabled, isRequired, isChecked, label, checked, defaultChecked, description, body, ouiaId, ouiaSafe, component: Component } = _a, props = __rest(_a, ['aria-label', \"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isRequired\", \"isChecked\", \"label\", \"checked\", \"defaultChecked\", \"description\", \"body\", \"ouiaId\", \"ouiaSafe\", \"component\"]);\n        if (!props.id) {\n            // eslint-disable-next-line no-console\n            console.error('Checkbox:', 'id is required to make input accessible');\n        }\n        const checkedProps = {};\n        if ([true, false].includes(checked) || isChecked === true) {\n            checkedProps.checked = checked || isChecked;\n        }\n        if (onChange !== defaultOnChange) {\n            checkedProps.checked = isChecked;\n        }\n        if ([false, true].includes(defaultChecked)) {\n            checkedProps.defaultChecked = defaultChecked;\n        }\n        checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n        return (React.createElement(Component, { className: css(styles.check, !label && styles.modifiers.standalone, className) },\n            React.createElement(\"input\", Object.assign({}, props, { className: css(styles.checkInput), type: \"checkbox\", onChange: this.handleChange, \"aria-invalid\": !isValid, \"aria-label\": ariaLabel, disabled: isDisabled, required: isRequired, ref: elem => elem && (elem.indeterminate = isChecked === null) }, checkedProps, getOUIAProps(Checkbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe))),\n            label && (React.createElement(\"label\", { className: css(styles.checkLabel, isDisabled && styles.modifiers.disabled), htmlFor: props.id },\n                label,\n                isRequired && (React.createElement(\"span\", { className: css(styles.checkLabelRequired), \"aria-hidden\": \"true\" }, ASTERISK)))),\n            description && React.createElement(\"span\", { className: css(styles.checkDescription) }, description),\n            body && React.createElement(\"span\", { className: css(styles.checkBody) }, body)));\n    }\n}\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isRequired: false,\n    isChecked: false,\n    onChange: defaultOnChange,\n    ouiaSafe: true,\n    component: 'div'\n};\n//# sourceMappingURL=Checkbox.js.map","/*!\n* tabbable 5.3.3\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])', 'details>summary:first-of-type', 'details'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  return element.getRootNode();\n} : function (element) {\n  return element.ownerDocument;\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot;\n\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n\n\n  var nodeRootHost = getRootNode(node).host;\n  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck` mode\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scope;\n    var element = isScope ? item.scope : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 6.9.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, isFocusable } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\n\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n\n\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n          tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      optionValue = optionValue.apply(void 0, params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkTab = function checkTab(e) {\n    var target = getActualTarget(e);\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n\n  };\n\n  var checkKey = function checkKey(e) {\n    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n\n        addListeners();\n\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nclass FocusTrapBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.divRef = this.props.innerRef || React.createRef();\n        if (typeof document !== 'undefined') {\n            this.previouslyFocusedElement = document.activeElement;\n        }\n    }\n    componentDidMount() {\n        // We need to hijack the returnFocusOnDeactivate option,\n        // because React can move focus into the element before we arrived at\n        // this lifecycle hook (e.g. with autoFocus inputs). So the component\n        // captures the previouslyFocusedElement in componentWillMount,\n        // then (optionally) returns focus to it in componentWillUnmount.\n        this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), { returnFocusOnDeactivate: false }));\n        if (this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.active && !this.props.active) {\n            this.focusTrap.deactivate();\n        }\n        else if (!prevProps.active && this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (prevProps.paused && !this.props.paused) {\n            this.focusTrap.unpause();\n        }\n        else if (!prevProps.paused && this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentWillUnmount() {\n        this.focusTrap.deactivate();\n        if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false &&\n            this.previouslyFocusedElement &&\n            this.previouslyFocusedElement.focus) {\n            this.previouslyFocusedElement.focus({ preventScroll: this.props.preventScrollOnDeactivate });\n        }\n    }\n    render() {\n        const _a = this.props, { children, className, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        focusTrapOptions, active, paused, preventScrollOnDeactivate, innerRef } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\", \"innerRef\"]);\n        return (React.createElement(\"div\", Object.assign({ ref: this.divRef, className: className }, rest), children));\n    }\n}\nFocusTrapBase.displayName = 'FocusTrap';\nFocusTrapBase.defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    preventScrollOnDeactivate: false\n};\nexport const FocusTrap = React.forwardRef((props, ref) => (React.createElement(FocusTrapBase, Object.assign({ innerRef: ref }, props))));\n//# sourceMappingURL=FocusTrap.js.map","import * as React from 'react';\nimport { canUseDOM } from './util';\n/**\n * This function is a helper for handling basic arrow keyboard interactions. If a component already has its own key handler and event start up/tear down, this function may be easier to integrate in over the full component.\n *\n * @param {event} event Event triggered by the keyboard\n * @param {element[]} navigableElements Valid traversable elements of the container\n * @param {function} isActiveElement Callback to determine if a given element from the navigable elements array is the active element of the page\n * @param {function} getFocusableElement Callback returning the focusable element of a given element from the navigable elements array\n * @param {string[]} validSiblingTags Valid sibling tags that horizontal arrow handling will focus\n * @param {boolean} noVerticalArrowHandling Flag indicating that the included vertical arrow key handling should be ignored\n * @param {boolean} noHorizontalArrowHandling Flag indicating that the included horizontal arrow key handling should be ignored\n * @param {boolean} updateTabIndex Flag indicating that the tabIndex of the currently focused element and next focused element should be updated, in the case of using a roving tabIndex\n * @param {boolean} onlyTraverseSiblings Flag indicating that next focusable element of a horizontal movement will be this element's sibling\n */\nexport const handleArrows = (event, navigableElements, isActiveElement = element => document.activeElement.contains(element), getFocusableElement = element => element, validSiblingTags = ['A', 'BUTTON', 'INPUT'], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {\n    const activeElement = document.activeElement;\n    const key = event.key;\n    let moveTarget = null;\n    // Handle vertical arrow keys. If noVerticalArrowHandling is passed, skip this block\n    if (!noVerticalArrowHandling) {\n        if (['ArrowUp', 'ArrowDown'].includes(key)) {\n            event.preventDefault();\n            event.stopImmediatePropagation(); // For menus in menus\n            // Traverse navigableElements to find the element which is currently active\n            let currentIndex = -1;\n            // while (currentIndex === -1) {\n            navigableElements.forEach((element, index) => {\n                if (isActiveElement(element)) {\n                    // Once found, move up or down the array by 1. Determined by the vertical arrow key direction\n                    let increment = 0;\n                    // keep increasing the increment until you've tried the whole navigableElement\n                    while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {\n                        key === 'ArrowUp' ? increment-- : increment++;\n                        currentIndex = index + increment;\n                        if (currentIndex >= navigableElements.length) {\n                            currentIndex = 0;\n                        }\n                        if (currentIndex < 0) {\n                            currentIndex = navigableElements.length - 1;\n                        }\n                        // Set the next target element (undefined if none found)\n                        moveTarget = getFocusableElement(navigableElements[currentIndex]);\n                    }\n                }\n            });\n            // }\n        }\n    }\n    // Handle horizontal arrow keys. If noHorizontalArrowHandling is passed, skip this block\n    if (!noHorizontalArrowHandling) {\n        if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n            event.preventDefault();\n            event.stopImmediatePropagation(); // For menus in menus\n            let currentIndex = -1;\n            navigableElements.forEach((element, index) => {\n                if (isActiveElement(element)) {\n                    const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(',')); // all focusable elements in my row\n                    if (!activeRow.length || onlyTraverseSiblings) {\n                        let nextSibling = activeElement;\n                        // While a sibling exists, check each sibling to determine if it should be focussed\n                        while (nextSibling) {\n                            // Set the next checked sibling, determined by the horizontal arrow key direction\n                            nextSibling = key === 'ArrowLeft' ? nextSibling.previousElementSibling : nextSibling.nextElementSibling;\n                            if (nextSibling) {\n                                if (validSiblingTags.includes(nextSibling.tagName)) {\n                                    // If the sibling's tag is included in validSiblingTags, set the next target element and break the loop\n                                    moveTarget = nextSibling;\n                                    break;\n                                }\n                                // If the sibling's tag is not valid, skip to the next sibling if possible\n                            }\n                        }\n                    }\n                    else {\n                        activeRow.forEach((focusableElement, index) => {\n                            if (event.target === focusableElement) {\n                                // Once found, move up or down the array by 1. Determined by the vertical arrow key direction\n                                const increment = key === 'ArrowLeft' ? -1 : 1;\n                                currentIndex = index + increment;\n                                if (currentIndex >= activeRow.length) {\n                                    currentIndex = 0;\n                                }\n                                if (currentIndex < 0) {\n                                    currentIndex = activeRow.length - 1;\n                                }\n                                // Set the next target element\n                                moveTarget = activeRow[currentIndex];\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n    if (moveTarget) {\n        // If updateTabIndex is true, set the previously focussed element's tabIndex to -1 and the next focussed element's tabIndex to 0\n        // This updates the tabIndex for a roving tabIndex\n        if (updateTabIndex) {\n            activeElement.tabIndex = -1;\n            moveTarget.tabIndex = 0;\n        }\n        // If a move target has been set by either arrow handler, focus that target\n        moveTarget.focus();\n    }\n};\n/**\n * This function is a helper for setting the initial tabIndexes in a roving tabIndex\n *\n * @param {HTMLElement[]} options Array of elements which should have a tabIndex of -1, except for the first element which will have a tabIndex of 0\n */\nexport const setTabIndex = (options) => {\n    if (options && options.length > 0) {\n        // Iterate the options and set the tabIndex to -1 on every option\n        options.forEach((option) => {\n            option.tabIndex = -1;\n        });\n        // Manually set the tabIndex of the first option to 0\n        options[0].tabIndex = 0;\n    }\n};\nexport class KeyboardHandler extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.keyHandler = (event) => {\n            const { isEventFromContainer } = this.props;\n            // If the passed keyboard event is not from the container, ignore the event by returning\n            if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {\n                return;\n            }\n            const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;\n            // Pass the event off to be handled by any custom handler\n            additionalKeyHandler && additionalKeyHandler(event);\n            // Initalize navigableElements from the createNavigableElements callback\n            const navigableElements = createNavigableElements();\n            if (!navigableElements) {\n                // eslint-disable-next-line no-console\n                console.warn('No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.');\n                return;\n            }\n            const key = event.key;\n            // Handle enter key. If noEnterHandling is passed, skip this block\n            if (!noEnterHandling) {\n                if (key === 'Enter') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation(); // For menus in menus\n                    document.activeElement.click();\n                }\n            }\n            // Handle space key. If noSpaceHandling is passed, skip this block\n            if (!noSpaceHandling) {\n                if (key === ' ') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation(); // For menus in menus\n                    document.activeElement.click();\n                }\n            }\n            // Inject helper handler for arrow navigation\n            handleArrows(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);\n        };\n        this._isEventFromContainer = (event) => {\n            const { containerRef } = this.props;\n            return containerRef.current && containerRef.current.contains(event.target);\n        };\n    }\n    componentDidMount() {\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.keyHandler);\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.keyHandler);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nKeyboardHandler.displayName = 'KeyboardHandler';\nKeyboardHandler.defaultProps = {\n    containerRef: null,\n    createNavigableElements: () => null,\n    isActiveElement: (navigableElement) => document.activeElement === navigableElement,\n    getFocusableElement: (navigableElement) => navigableElement,\n    validSiblingTags: ['BUTTON', 'A'],\n    onlyTraverseSiblings: true,\n    updateTabIndex: true,\n    noHorizontalArrowHandling: false,\n    noVerticalArrowHandling: false,\n    noEnterHandling: false,\n    noSpaceHandling: false\n};\n//# sourceMappingURL=KeyboardHandler.js.map","export const ASTERISK = '*';\n//# sourceMappingURL=htmlConstants.js.map","import { createIcon } from '../createIcon';\n\nexport const CheckIconConfig = {\n  name: 'CheckIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CheckIcon = createIcon(CheckIconConfig);\n\nexport default CheckIcon;","import './check.css';\nexport default {\n  \"check\": \"pf-c-check\",\n  \"checkBody\": \"pf-c-check__body\",\n  \"checkDescription\": \"pf-c-check__description\",\n  \"checkInput\": \"pf-c-check__input\",\n  \"checkLabel\": \"pf-c-check__label\",\n  \"checkLabelRequired\": \"pf-c-check__label-required\",\n  \"modifiers\": {\n    \"standalone\": \"pf-m-standalone\",\n    \"disabled\": \"pf-m-disabled\"\n  }\n};"],"names":["defaultOnChange","Checkbox","constructor","props","super","this","handleChange","event","onChange","currentTarget","checked","state","ouiaStateId","displayName","render","_a","ariaLabel","className","isValid","isDisabled","isRequired","isChecked","label","defaultChecked","description","body","ouiaId","ouiaSafe","component","Component","id","console","error","checkedProps","includes","Object","assign","type","disabled","required","ref","elem","indeterminate","undefined","htmlFor","defaultProps","candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","ownerDocument","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","call","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","nestedCandidates","children","flatten","push","scope","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","getTabindex","node","isScope","tabIndex","test","isContentEditable","isNaN","parseInt","getAttribute","sortOrderedTabbables","a","b","documentOrder","isInput","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isNodeMatchingSelectorFocusable","isHiddenInput","_ref","displayCheck","getComputedStyle","visibility","nodeUnderDetails","parentElement","nodeRootHost","host","nodeIsAttached","contains","originalNode","rootNode","assignedSlot","getClientRects","isHidden","some","child","isDetailsWithSummary","parentNode","i","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isRadio","name","radioSet","radioScope","form","queryRadios","window","CSS","escape","err","message","nodes","getCheckedRadio","isTabbableRadio","isNonTabbableRadio","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","content","sort","reduce","acc","sortable","concat","tabbable","bind","isTabbable","Error","focusableCandidateSelector","isFocusable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","target","arguments","source","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","trapQueue","activeFocusTraps","activateTrap","trap","activeTrap","pause","trapIndex","indexOf","splice","deactivateTrap","unpause","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","_key","getActualTarget","composedPath","FocusTrapBase","divRef","innerRef","document","previouslyFocusedElement","activeElement","componentDidMount","userOptions","doc","config","getOption","findContainerIndex","getNodeForOption","getInitialFocusNode","updateTabbableNodes","tryFocus","getReturnFocusNode","checkPointerDown","checkFocusIn","checkKey","checkClick","addListeners","removeListeners","focusTrap","current","focusTrapOptions","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","configOverrideOptions","optionName","configOptionName","container","tabbableNodes","find","optionValue","_len2","_key2","querySelector","firstTabbableGroup","firstTabbableNode","map","tabbableOptions","focusableNodes","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","reverse","group","focus","preventScroll","toLowerCase","select","isSelectableInput","previousActiveElement","e","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","targetContained","Document","stopImmediatePropagation","keyCode","isEscapeEvent","isTabEvent","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","_ref2","destinationGroupIndex","lastOfGroupIndex","_ref3","_destinationGroupIndex","checkTab","addEventListener","capture","passive","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean","componentDidUpdate","prevProps","componentWillUnmount","preventScrollOnDeactivate","rest","FocusTrap","handleArrows","navigableElements","isActiveElement","getFocusableElement","validSiblingTags","noVerticalArrowHandling","noHorizontalArrowHandling","updateTabIndex","onlyTraverseSiblings","moveTarget","currentIndex","index","increment","activeRow","nextSibling","previousElementSibling","nextElementSibling","focusableElement","setTabIndex","option","KeyboardHandler","keyHandler","isEventFromContainer","_isEventFromContainer","noEnterHandling","noSpaceHandling","additionalKeyHandler","createNavigableElements","warn","click","containerRef","navigableElement","ASTERISK","CheckIconConfig","svgPath","yOffset","xOffset","CheckIcon"],"sourceRoot":""}