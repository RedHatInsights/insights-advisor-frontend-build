{"version":3,"file":"js/8261.1644512935169.515ad55cf76f79b7ca92.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Labels/RuleLabels.js","webpack:///./src/PresentationalComponents/MessageState/MessageState.js","webpack:///./src/PresentationalComponents/ReportDetails/ReportDetails.js","webpack:///./src/SmartComponents/SystemAdvisor/SystemAdvisor.js","webpack:///./src/Utilities/Api.js"],"sourcesContent":["import { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\n// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters = {}, selectedTags = []) => {\n  const url = new URL(window.location);\n  const queryString = `${Object.keys(filters)\n    .map(\n      (key) =>\n        `${key}=${\n          Array.isArray(filters[key]) ? filters[key].join() : filters[key]\n        }`\n    )\n    .join('&')}`;\n  const params = new URLSearchParams(queryString);\n\n  //Removes invalid 'undefined' url param value\n  params.get('reports_shown') === 'undefined' && params.delete('reports_shown');\n  selectedTags?.length\n    ? params.set('tags', selectedTags)\n    : params.delete('tags');\n  window.history.replaceState(\n    null,\n    null,\n    `${url.origin}${url.pathname}?${params.toString()}${window.location.hash}`\n  );\n  return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) =>\n  Object.assign(\n    {},\n    ...Object.entries(filters).map(([filterName, filterValue]) =>\n      Array.isArray(filterValue)\n        ? (filterValue[0] === 'true' || filterValue[0] === 'false') &&\n          filterValue.length > 1\n          ? null\n          : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue }\n    )\n  );\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return Array.from(searchParams).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]:\n        value === 'true' || value === 'false'\n          ? JSON.parse(value)\n          : value.split(','),\n    }),\n    {}\n  );\n};\n\n// create url from options\nexport const encodeOptionsToURL = (options) => {\n  return Object.entries(options).reduce((acc, [key, value], index) => {\n    return (acc += index === 0 ? `${key}=${value}` : `&${key}=${value}`);\n  }, '');\n};\n\n// capitalizes text string\nexport const capitalize = (string) =>\n  string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n  const prunedFilters = Object.entries(localFilters);\n  return prunedFilters.length > 0\n    ? prunedFilters.reduce((arr, item) => {\n        if (filterCategories[item[0]]) {\n          const category = filterCategories[item[0]];\n          const chips = Array.isArray(item[1])\n            ? item[1].map((value) => {\n                const selectedCategoryValue = category.values.find(\n                  (values) => values.value === String(value)\n                );\n                return selectedCategoryValue\n                  ? {\n                      name:\n                        selectedCategoryValue.text ||\n                        selectedCategoryValue.label,\n                      value,\n                    }\n                  : { name: value, value };\n              })\n            : [\n                {\n                  name: category.values.find(\n                    (values) => values.value === String(item[1])\n                  ).label,\n                  value: item[1],\n                },\n              ];\n          return [\n            ...arr,\n            {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            },\n          ];\n        } else if (item[0] === 'text') {\n          return [\n            ...arr,\n            {\n              category: 'Name',\n              chips: [{ name: item[1], value: item[1] }],\n              urlParam: item[0],\n            },\n          ];\n        } else {\n          return arr;\n        }\n      }, [])\n    : [];\n};\n\n// builds workload query filter\nexport const workloadQueryBuilder = (workloads, SID) =>\n  generateFilter(\n    {\n      system_profile: {\n        ...(workloads?.SAP?.isSelected && { sap_system: true }),\n        ...(SID?.length > 0 && { sap_sids: SID }),\n      },\n    },\n    undefined,\n    { arrayEnhancer: 'contains' }\n  );\n\n// merges two array objects by different key names\nexport const mergeArraysByDiffKeys = (advSystems, invSystems) =>\n  advSystems.map((advSys) => ({\n    ...invSystems.find(\n      (invSys) => invSys['id'] === advSys['system_uuid'] && invSys\n    ),\n    ...advSys,\n  }));\n","import './_RuleLabels.scss';\n\nimport {\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst RuleLabels = ({ rule }) => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {rule?.tags?.search('incident') !== -1 && (\n        <Tooltip\n          content={intl.formatMessage(messages.incidentTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"red\" className=\"incidentLabel\">\n            {intl.formatMessage(messages.incident)}\n          </Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'disabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\">{intl.formatMessage(messages.disabled)}</Label>\n        </Tooltip>\n      )}\n      {rule?.rule_status === 'rhdisabled' && (\n        <Tooltip\n          content={intl.formatMessage(messages.ruleIsDisabledTooltip)}\n          position={TooltipPosition.right}\n        >\n          <Label color=\"gray\">\n            {intl.formatMessage(messages.redhatDisabled)}\n          </Label>\n        </Tooltip>\n      )}\n    </React.Fragment>\n  );\n};\n\nRuleLabels.propTypes = {\n  rule: PropTypes.object,\n};\n\nexport default RuleLabels;\n","import {\n  EmptyState,\n  EmptyStateVariant,\n} from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({\n  className,\n  children,\n  icon,\n  iconClass,\n  iconStyle,\n  text,\n  title,\n  variant,\n}) => (\n  <EmptyState className={className} variant={variant}>\n    {icon !== 'none' && (\n      <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />\n    )}\n    <Title headingLevel=\"h5\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody style={{ marginBottom: '16px' }}>{text}</EmptyStateBody>\n    {children}\n  </EmptyState>\n);\n\nMessageState.propTypes = {\n  children: PropTypes.any,\n  icon: PropTypes.any,\n  iconClass: PropTypes.any,\n  iconStyle: PropTypes.any,\n  text: PropTypes.any,\n  title: PropTypes.string,\n  variant: PropTypes.any,\n  className: PropTypes.string,\n};\n\nMessageState.defaultProps = {\n  icon: CubesIcon,\n  title: '',\n  variant: EmptyStateVariant.full,\n};\n\nexport default MessageState;\n","import './report-details.scss';\n\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n} from '@patternfly/react-core/dist/esm/components/Card';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  Stack,\n  StackItem,\n} from '@patternfly/react-core/dist/esm/layouts/Stack';\n\nimport { BullseyeIcon } from '@patternfly/react-icons/dist/esm/icons/bullseye-icon';\nimport { Divider } from '@patternfly/react-core/dist/esm/components/Divider';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { LightbulbIcon } from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\nimport React from 'react';\nimport { ThumbsUpIcon } from '@patternfly/react-icons/dist/esm/icons/thumbs-up-icon';\nimport classNames from 'classnames';\nimport doT from 'dot';\nimport marked from 'marked';\nimport propTypes from 'prop-types';\n\nconst ReportDetails = ({ report, kbaDetail, kbaLoading }) => {\n  const rule = report.rule || report;\n  const rulesCardClasses = classNames(\n    'ins-c-inventory-advisor__card',\n    'ins-c-rules-card'\n  );\n  const templateProcessor = (template, definitions) => {\n    const DOT_SETTINGS = {\n      ...doT.templateSettings,\n      varname: ['pydata'],\n      strip: false,\n    };\n    const externalLinkIcon = '';\n\n    try {\n      const compiledDot = definitions\n        ? doT.template(template, DOT_SETTINGS)(definitions)\n        : template;\n      const compiledMd = marked(compiledDot);\n\n      return (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: compiledMd\n              .replace(\n                /<ul>/gim,\n                `<ul class=\"pf-c-list\" style=\"font-size: inherit\">`\n              )\n              .replace(\n                /<a>/gim,\n                `<a> rel=\"noopener noreferrer\" target=\"_blank\"`\n              )\n              .replace(/<\\/a>/gim, ` ${externalLinkIcon}</a>`),\n          }}\n        />\n      );\n    } catch (error) {\n      console.warn(error, definitions, template); // eslint-disable-line no-console\n      return (\n        <React.Fragment>\n          {' '}\n          Ouch. We were unable to correctly render this text, instead please\n          enjoy the raw data.\n          <pre>\n            <code>{template}</code>\n          </pre>\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <Card\n      className=\"ins-c-inventory-insights__report-details__override\"\n      style={{ boxShadow: 'none' }}\n    >\n      <CardBody>\n        <Stack\n          className={rulesCardClasses}\n          widget-type=\"InsightsRulesCard\"\n          hasGutter\n        >\n          <StackItem>\n            <Card className=\"ins-m-card__flat\" isCompact>\n              <CardHeader>\n                <BullseyeIcon className=\"ins-c-report-details-icon\" />\n                <strong> Detected issues</strong>\n              </CardHeader>\n              <CardBody>\n                {rule.reason && templateProcessor(rule.reason, report.details)}\n              </CardBody>\n            </Card>\n          </StackItem>\n          <Divider />\n          <StackItem>\n            <Card className=\"ins-m-card__flat\" isCompact>\n              <CardHeader>\n                <ThumbsUpIcon className=\"ins-c-report-details-icon\" />\n                <strong> Steps to resolve</strong>\n              </CardHeader>\n              <CardBody>\n                {report.resolution &&\n                  templateProcessor(\n                    report.resolution.resolution,\n                    report.details\n                  )}\n              </CardBody>\n            </Card>\n          </StackItem>\n          {rule.node_id && (\n            <React.Fragment>\n              <Divider />\n              <StackItem>\n                <Card className=\"ins-m-card__flat\" isCompact>\n                  <CardHeader>\n                    <LightbulbIcon className=\"ins-c-report-details-icon\" />\n                    <strong> Related Knowledgebase article </strong>\n                  </CardHeader>\n                  <CardBody>\n                    {kbaLoading ? (\n                      <Skeleton size={SkeletonSize.sm} />\n                    ) : (\n                      <a\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                        href={`${kbaDetail.view_uri}`}\n                      >\n                        {kbaDetail.publishedTitle\n                          ? kbaDetail.publishedTitle\n                          : `Knowledgebase article`}{' '}\n                        <ExternalLinkAltIcon />\n                      </a>\n                    )}\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </React.Fragment>\n          )}\n          {rule.more_info && (\n            <React.Fragment>\n              <Divider />\n              <StackItem>\n                <Card className=\"ins-m-card__flat\" isCompact>\n                  <CardHeader>\n                    <InfoCircleIcon className=\"ins-c-report-details-icon\" />\n                    <strong> Additional info </strong>\n                  </CardHeader>\n                  <CardBody>\n                    {templateProcessor(rule.more_info, report.details)}\n                  </CardBody>\n                </Card>\n              </StackItem>\n            </React.Fragment>\n          )}\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ReportDetails;\n\nReportDetails.defaultProps = {\n  report: {},\n  kbaDetail: {},\n};\n\nReportDetails.propTypes = {\n  report: propTypes.object,\n  kbaDetail: propTypes.object,\n  kbaLoading: propTypes.bool,\n};\n","import './SystemAdvisor.scss';\n\nimport {\n  AnsibeTowerIcon,\n  ChartSpikeIcon,\n  CheckIcon,\n  ExternalLinkAltIcon,\n  PficonSatelliteIcon,\n  TimesCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  BASE_URL,\n  FILTER_CATEGORIES as FC,\n  IMPACT_LABEL,\n  LIKELIHOOD_LABEL,\n  RULE_CATEGORIES,\n} from '../../AppConstants';\nimport {\n  Bullseye,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Stack,\n  StackItem,\n  Tooltip,\n  TooltipPosition,\n} from '@patternfly/react-core';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SortByDirection,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n  fitContent,\n  sortable,\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Get } from '../../Utilities/Api';\nimport InsightsLabel from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport { List } from 'react-content-loader';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport ReportDetails from '../../PresentationalComponents/ReportDetails';\nimport RuleLabels from '../../PresentationalComponents/Labels/RuleLabels';\nimport { addNotification as addNotificationAction } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { capitalize } from '../../PresentationalComponents/Common/Tables';\nimport messages from '../../Messages';\nimport { Provider } from 'react-redux';\n\nconst BaseSystemAdvisor = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const addNotification = (data) => dispatch(addNotificationAction(data));\n\n  const entity = useSelector(({ entityDetails }) => entityDetails.entity);\n  const systemProfile = useSelector(({ systemProfileStore }) =>\n    systemProfileStore ? systemProfileStore.systemProfile : {}\n  );\n  const routerData = useSelector(({ routerData }) => routerData);\n\n  const [inventoryReportFetchStatus, setInventoryReportFetchStatus] =\n    useState('pending');\n  const [rows, setRows] = useState([]);\n  const [activeReports, setActiveReports] = useState([]);\n  const [kbaDetailsData, setKbaDetailsData] = useState([]);\n  const [sortBy, setSortBy] = useState({});\n  const [filters, setFilters] = useState({});\n  const [accountSettings, setAccountSettings] = useState({});\n  const [searchValue, setSearchValue] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [isAllExpanded, setIsAllExpanded] = useState(false);\n  const results = rows ? rows.length / 2 : 0;\n  const satelliteManaged =\n    (systemProfile && systemProfile.satellite_managed) || false; // system is managed by satellite\n  const satelliteShowHosts = accountSettings.show_satellite_hosts || false; // setting to show satellite managed systems\n  const hideResultsSatelliteManaged = !satelliteShowHosts && satelliteManaged;\n  const getSelectedItems = (rows) => rows.filter((entity) => entity.selected);\n  const selectedAnsibleRules = getSelectedItems(rows).filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  );\n  const selectedItemsLength = getSelectedItems(rows).length;\n  const selectableItemsLength = rows.filter(\n    (r) => r.resolution && r.resolution.has_playbook\n  ).length;\n\n  const cols = [\n    {\n      title: intl.formatMessage(messages.topicAddEditDescription),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.modified),\n      transforms: [sortable, cellWidth(15)],\n    },\n    {\n      title: intl.formatMessage(messages.totalRisk),\n      transforms: [sortable],\n    },\n    {\n      title: intl.formatMessage(messages.remediation),\n      transforms: [sortable, fitContent],\n    },\n  ];\n\n  const onExpandAllClick = (_e, isOpen) => {\n    setIsAllExpanded(isOpen);\n    const allRows = [...rows];\n\n    allRows.map((row) => {\n      if (Object.prototype.hasOwnProperty.call(row, 'isOpen')) {\n        row.isOpen = isOpen;\n      }\n    });\n\n    setRows(allRows);\n  };\n\n  const actions = [\n    <RemediationButton\n      key=\"remediation-button\"\n      isDisabled={selectedAnsibleRules.length === 0}\n      dataProvider={() => processRemediation(selectedAnsibleRules)}\n      onRemediationCreated={(result) =>\n        addNotification(result.getNotification())\n      }\n    >\n      {intl.formatMessage(messages.remediate)}\n    </RemediationButton>,\n  ];\n\n  const activeRuleFirst = (activeReports) => {\n    const reports = [...activeReports];\n    const activeRuleIndex =\n      routerData && typeof routerData.params !== 'undefined'\n        ? activeReports.findIndex(\n            (report) => report.rule.rule_id === routerData.params.id\n          )\n        : -1;\n    const activeReport = reports.splice(activeRuleIndex, 1);\n\n    return activeRuleIndex !== -1\n      ? [activeReport[0], ...reports]\n      : activeReports;\n  };\n\n  const handleOnCollapse = (_e, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const buildRows = (\n    activeReports,\n    kbaDetails,\n    filters,\n    rows,\n    searchValue = '',\n    kbaLoading = false\n  ) => {\n    const builtRows = activeReports.flatMap((value, key) => {\n      const rule = value.rule;\n      const resolution = value.resolution;\n      const kbaDetail = Object.keys(kbaDetails).length\n        ? kbaDetails.filter((article) => article.id === value.rule.node_id)[0]\n        : {};\n      const entity = rows.filter(\n        (rowVal, rowKey) =>\n          rowKey % 2 === 0 && rowVal.rule.rule_id === rule.rule_id && rowVal\n      );\n\n      const selected = (entity.length && entity[0].selected) || false;\n      const isOpen = (entity.length && entity[0].isOpen) || false;\n\n      const reportRow = [\n        {\n          rule,\n          resolution,\n          isOpen,\n          selected,\n          disableSelection: !resolution.has_playbook,\n          cells: [\n            {\n              title: (\n                <span>\n                  {rule.description} <RuleLabels rule={rule} />\n                </span>\n              ),\n            },\n            {\n              title: (\n                <div key={key}>\n                  <DateFormat\n                    date={rule.publish_date}\n                    type=\"relative\"\n                    tooltipProps={{ position: TooltipPosition.bottom }}\n                  />\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div key={key} style={{ verticalAlign: 'top' }}>\n                  <Tooltip\n                    key={key}\n                    position={TooltipPosition.bottom}\n                    content={\n                      <span>\n                        The <strong>likelihood</strong> that this will be a\n                        problem is {LIKELIHOOD_LABEL[rule.likelihood]}. The{' '}\n                        <strong>impact</strong> of the problem would be &nbsp;\n                        {IMPACT_LABEL[rule.impact.impact]} if it occurred.\n                      </span>\n                    }\n                  >\n                    <InsightsLabel value={rule.total_risk} />\n                  </Tooltip>\n                </div>\n              ),\n            },\n            {\n              title: (\n                <div className=\"ins-c-center-text\" key={key}>\n                  {resolution.has_playbook ? (\n                    <span>\n                      <AnsibeTowerIcon size=\"sm\" />{' '}\n                      {intl.formatMessage(messages.playbook)}\n                    </span>\n                  ) : (\n                    intl.formatMessage(messages.manual)\n                  )}\n                </div>\n              ),\n            },\n          ],\n        },\n        {\n          parent: key,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <ReportDetails\n                  key={`child-${key}`}\n                  report={value}\n                  kbaDetail={kbaDetail}\n                  kbaLoading={kbaLoading}\n                />\n              ),\n            },\n          ],\n        },\n      ];\n      const isValidSearchValue =\n        searchValue.length === 0 ||\n        rule.description.toLowerCase().includes(searchValue.toLowerCase());\n      const isValidFilterValue =\n        Object.keys(filters).length === 0 ||\n        Object.keys(filters)\n          .map((key) => {\n            const filterValues = filters[key];\n            const rowValue = {\n              has_playbook: value.resolution.has_playbook,\n              publish_date: rule.publish_date,\n              total_risk: rule.total_risk,\n              category: RULE_CATEGORIES[rule.category.name.toLowerCase()],\n            };\n            return filterValues.find(\n              (value) => String(value) === String(rowValue[key])\n            );\n          })\n          .every((x) => x);\n\n      return isValidSearchValue && isValidFilterValue ? reportRow : [];\n    });\n    //must recalculate parent for expandable table content whenever the array size changes\n    builtRows.forEach((row, index) =>\n      row.parent ? (row.parent = index - 1) : null\n    );\n\n    return builtRows;\n  };\n\n  const onRowSelect = (_e, isSelected, rowId) =>\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          index === rowId ? { ...row, selected: isSelected } : row\n        ),\n        searchValue\n      )\n    );\n\n  const onBulkSelect = (isSelected) => {\n    setIsSelected(isSelected);\n    setRows(\n      buildRows(\n        activeReports,\n        kbaDetailsData,\n        filters,\n        rows.map((row, index) =>\n          // We need to use mod 2 here to ignore children with no has_playbook param\n          index % 2 === 0 && row.resolution.has_playbook\n            ? { ...row, selected: isSelected }\n            : row\n        ),\n        searchValue\n      )\n    );\n  };\n\n  const bulkSelect = {\n    items: [\n      {\n        title: 'Select none',\n        onClick: () => onBulkSelect(false),\n      },\n      {\n        title: 'Select all',\n        onClick: () => onBulkSelect(true),\n      },\n    ],\n    count: selectedItemsLength,\n    checked: selectedItemsLength === selectableItemsLength,\n    onSelect: () => onBulkSelect(!isSelected),\n  };\n\n  const buildFilterChips = (filters) => {\n    const prunedFilters = Object.entries(filters);\n    let chips =\n      filters && prunedFilters.length > 0\n        ? prunedFilters.map((item) => {\n            const category = FC[item[0]];\n            const chips = item[1].map((value) => ({\n              name: category.values.find(\n                (values) => values.value === String(value)\n              ).label,\n              value,\n            }));\n            return {\n              category: capitalize(category.title),\n              chips,\n              urlParam: category.urlParam,\n            };\n          })\n        : [];\n    searchValue.length > 0 &&\n      chips.push({\n        category: 'Description',\n        chips: [{ name: searchValue, value: searchValue }],\n      });\n    return chips;\n  };\n\n  const onChipDelete = (_e, itemsToRemove, isAll) => {\n    if (isAll) {\n      setRows(buildRows(activeReports, kbaDetailsData, {}, rows, ''));\n      setFilters({});\n      setSearchValue('');\n    } else {\n      itemsToRemove.map((item) => {\n        if (item.category === 'Description') {\n          setRows(buildRows(activeReports, kbaDetailsData, filters, rows, ''));\n          setSearchValue('');\n        } else {\n          onFilterChange(\n            item.urlParam,\n            filters[item.urlParam].filter(\n              (value) => String(value) !== String(item.chips[0].value)\n            )\n          );\n        }\n      });\n    }\n  };\n\n  const activeFiltersConfig = {\n    deleteTitle: intl.formatMessage(messages.resetFilters),\n    filters: buildFilterChips(filters),\n    onDelete: onChipDelete,\n  };\n\n  const fetchKbaDetails = async (reportsData) => {\n    const kbaIds = reportsData.map(({ rule }) => rule.node_id).filter((x) => x);\n    try {\n      const kbaDetailsFetch = (\n        await Get(\n          `https://access.redhat.com/hydra/rest/search/kcs?q=id:(${kbaIds.join(\n            ` OR `\n          )})&fl=view_uri,id,publishedTitle&rows=${\n            kbaIds.length\n          }&redhat_client=$ADVISOR`,\n          {},\n          { credentials: 'include' }\n        )\n      ).data.response.docs;\n\n      setKbaDetailsData(kbaDetailsFetch);\n      setRows(\n        buildRows(reportsData, kbaDetailsFetch, filters, rows, searchValue)\n      );\n    } catch (error) {\n      console.error(error, 'KBA fetch failed.');\n    }\n  };\n\n  const onSort = (_e, index, direction) => {\n    const sortedReports = {\n      1: 'description',\n      2: 'publish_date',\n      3: 'total_risk',\n      4: 'has_playbook',\n    };\n    const key = index === 5 ? 'resolution' : 'rule';\n    const sort = (key) =>\n      activeReports\n        .concat()\n        .sort((firstItem, secondItem) =>\n          firstItem[key][sortedReports[index]] >\n          secondItem[key][sortedReports[index]]\n            ? 1\n            : secondItem[key][sortedReports[index]] >\n              firstItem[key][sortedReports[index]]\n            ? -1\n            : 0\n        );\n    const sortedReportsDirectional =\n      direction === SortByDirection.asc ? sort(key) : sort(key).reverse();\n\n    setActiveReports(sortedReportsDirectional);\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      buildRows(\n        sortedReportsDirectional,\n        kbaDetailsData,\n        filters,\n        rows,\n        searchValue\n      )\n    );\n  };\n\n  const onFilterChange = (param, values) => {\n    const removeFilterParam = (param) => {\n      const filter = { ...filters };\n      delete filter[param];\n      return filter;\n    };\n\n    const newFilters =\n      values.length > 0\n        ? { ...filters, ...{ [param]: values } }\n        : removeFilterParam(param);\n    setRows(\n      buildRows(activeReports, kbaDetailsData, newFilters, rows, searchValue)\n    );\n    setFilters(newFilters);\n  };\n\n  const onInputChange = (value) => {\n    const builtRows = buildRows(\n      activeReports,\n      kbaDetailsData,\n      filters,\n      rows,\n      value\n    );\n    setSearchValue(value);\n    setRows(builtRows);\n  };\n\n  const processRemediation = (selectedAnsibleRules) => {\n    const playbookRows = selectedAnsibleRules.filter(\n      (r) => r.resolution && r.resolution.has_playbook\n    );\n    const issues = playbookRows.map((r) => ({\n      id: `advisor:${r.rule.rule_id}`,\n      description: r.rule.description,\n    }));\n    return issues.length ? { issues, systems: [entity.id] } : false;\n  };\n\n  const filterConfigItems = [\n    {\n      label: 'description',\n      filterValues: {\n        key: 'text-filter',\n        onChange: (_e, value) => onInputChange(value),\n        value: searchValue,\n      },\n    },\n    {\n      label: FC.total_risk.title,\n      type: FC.total_risk.type,\n      id: FC.total_risk.urlParam,\n      value: `checkbox-${FC.total_risk.urlParam}`,\n      filterValues: {\n        key: `${FC.total_risk.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.total_risk.urlParam, values),\n        value: filters.total_risk,\n        items: FC.total_risk.values,\n      },\n    },\n    {\n      label: FC.category.title,\n      type: FC.category.type,\n      id: FC.category.urlParam,\n      value: `checkbox-${FC.category.urlParam}`,\n      filterValues: {\n        key: `${FC.category.urlParam}-filter`,\n        onChange: (_e, values) => onFilterChange(FC.category.urlParam, values),\n        value: filters.category,\n        items: FC.category.values,\n      },\n    },\n    {\n      label: FC.has_playbook.title,\n      type: FC.has_playbook.type,\n      id: FC.has_playbook.urlParam,\n      value: `checkbox-${FC.has_playbook.urlParam}`,\n      filterValues: {\n        key: `${FC.has_playbook.urlParam}-filter`,\n        onChange: (_e, values) =>\n          onFilterChange(FC.has_playbook.urlParam, values),\n        value: filters.has_playbook,\n        items: FC.has_playbook.values,\n      },\n    },\n  ];\n\n  useEffect(() => {\n    const dataFetch = async () => {\n      try {\n        const [settingsFetch, reportsFetch] = await Promise.all([\n          (\n            await Get(`${BASE_URL}/account_setting/`, {\n              credentials: 'include',\n            })\n          ).data,\n          (\n            await Get(`${BASE_URL}/system/${entity.id}/reports/`, {\n              credentials: 'include',\n            })\n          ).data,\n        ]);\n\n        const activeRuleFirstReportsData = activeRuleFirst(reportsFetch);\n        fetchKbaDetails(activeRuleFirstReportsData);\n        setRows(\n          buildRows(\n            activeRuleFirstReportsData,\n            {},\n            filters,\n            rows,\n            searchValue,\n            true\n          )\n        );\n        setInventoryReportFetchStatus('fulfilled');\n        setActiveReports(activeRuleFirstReportsData);\n        setAccountSettings(settingsFetch);\n      } catch (error) {\n        setInventoryReportFetchStatus('failed');\n      }\n    };\n    dataFetch();\n  }, []);\n\n  return (\n    <div className=\"ins-c-inventory-insights__overrides\">\n      {inventoryReportFetchStatus === 'pending' ||\n      (inventoryReportFetchStatus === 'fulfilled' &&\n        hideResultsSatelliteManaged) ||\n      entity.insights_id === null ? (\n        <Fragment />\n      ) : (\n        <PrimaryToolbar\n          expandAll={{ isAllExpanded, onClick: onExpandAllClick }}\n          actionsConfig={{ actions }}\n          bulkSelect={bulkSelect}\n          filterConfig={{ items: filterConfigItems }}\n          pagination={\n            <Fragment>\n              {' '}\n              {results === 1\n                ? `${results} Recommendation`\n                : `${results} Recommendations`}{' '}\n            </Fragment>\n          }\n          activeFiltersConfig={activeFiltersConfig}\n        />\n      )}\n      {inventoryReportFetchStatus === 'pending' && (\n        <Card>\n          <CardBody>\n            <List />\n          </CardBody>\n        </Card>\n      )}\n      {inventoryReportFetchStatus === 'fulfilled' &&\n        (hideResultsSatelliteManaged ? (\n          <MessageState\n            icon={PficonSatelliteIcon}\n            title=\"Satellite managed system\"\n            text={\n              <span key=\"satellite managed system\">\n                Insights results can not be displayed for this host, as the\n                &quot;Hide Satellite Managed Systems&quot; setting has been\n                enabled by an org admin.\n                <br />\n                For more information on this setting and how to modify it,\n                <a\n                  href=\"https://access.redhat.com/solutions/4281761\"\n                  rel=\"noopener\"\n                >\n                  {' '}\n                  Please visit this Knowledgebase article &nbsp;\n                  <ExternalLinkAltIcon />\n                </a>\n                .\n              </span>\n            }\n          />\n        ) : activeReports.length > 0 ? (\n          <Fragment>\n            <Table\n              aria-label={'report-table'}\n              onSelect={onRowSelect}\n              onCollapse={handleOnCollapse}\n              rows={rows}\n              cells={cols}\n              sortBy={sortBy}\n              canSelectAll={false}\n              onSort={onSort}\n              variant={TableVariant.compact}\n              isStickyHeader\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n            {results === 0 && (\n              <Card>\n                <CardBody>\n                  <MessageState\n                    title=\"No matching recommendations found\"\n                    text={`To continue, edit your filter settings and search again.`}\n                  />\n                </CardBody>\n              </Card>\n            )}\n          </Fragment>\n        ) : entity.insights_id !== null ? (\n          <Card>\n            <CardBody>\n              <MessageState\n                icon={CheckIcon}\n                iconClass=\"ins-c-insights__check\"\n                title=\"No recommendations\"\n                text={`No known recommendations affect this system`}\n              />\n            </CardBody>\n          </Card>\n        ) : (\n          <MessageState\n            iconClass=\"chartSpikeIconColor\"\n            icon={ChartSpikeIcon}\n            title=\"Get started with Red Hat Insights\"\n            text={\n              <Bullseye>\n                <Stack hasGutter>\n                  <StackItem>\n                    1. Install the client on the RHEL system.\n                    <ClipboardCopy>yum install insights-client</ClipboardCopy>\n                  </StackItem>\n                  <StackItem>\n                    2. Register the system to Red Hat Insights.\n                    <ClipboardCopy>insights-client --register</ClipboardCopy>\n                  </StackItem>\n                </Stack>\n              </Bullseye>\n            }\n          >\n            <Button\n              component=\"a\"\n              href=\"https://access.redhat.com/products/red-hat-insights#getstarted\"\n              target=\"_blank\"\n              variant=\"primary\"\n            >\n              Getting started documentation\n            </Button>\n          </MessageState>\n        ))}\n      {inventoryReportFetchStatus === 'failed' && entity && (\n        <Card>\n          <CardBody>\n            <MessageState\n              icon={TimesCircleIcon}\n              title=\"Error getting recommendations\"\n              text={\n                entity\n                  ? `There was an error fetching recommendations for this entity. Refresh your page to try again.`\n                  : `This entity can not be found or might no longer be registered to Red Hat Insights.`\n              }\n            />\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nconst SystemAdvisor = ({ customItnl, intlProps, store, ...props }) => {\n  const Wrapper = customItnl ? IntlProvider : Fragment;\n  const ReduxProvider = store ? Provider : Fragment;\n  return (\n    <Wrapper\n      {...(customItnl && {\n        locale: navigator.language.slice(0, 2),\n        messages,\n        onError: console.log,\n        ...intlProps,\n      })}\n    >\n      <ReduxProvider store={store}>\n        <BaseSystemAdvisor {...props} />\n      </ReduxProvider>\n    </Wrapper>\n  );\n};\n\nexport default SystemAdvisor;\n\nSystemAdvisor.propTypes = {\n  customItnl: PropTypes.bool,\n  intlProps: PropTypes.shape({\n    locale: PropTypes.string,\n    messages: PropTypes.array,\n    onError: PropTypes.func,\n  }),\n  store: PropTypes.object,\n};\n","import Qs from 'qs';\nimport axios from 'axios';\n\nconst Get = (url, headers = {}, params = {}) =>\n  axios.get(url, {\n    headers,\n    params,\n    paramsSerializer(params) {\n      return Qs.stringify(params, { arrayFormat: 'repeat' });\n    },\n  });\n\nconst Post = (url, headers = {}, data = {}) =>\n  axios.post(url, data, {\n    headers,\n  });\n\nconst Put = (url, data = {}, headers = {}) => {\n  return axios.put(url, data, {\n    headers,\n  });\n};\n\nconst DeleteApi = (url, data = {}, headers = {}) => {\n  return axios.delete(url, data, {\n    headers,\n  });\n};\n\nconst AxiosBaseQuery =\n  ({ baseUrl } = { baseUrl: '' }) =>\n  async ({ url, headers, options, search, method }) => {\n    await insights.chrome.auth.getUser();\n    method === undefined && (method = 'get');\n    try {\n      const result =\n        method === 'get'\n          ? await Get(\n              `${baseUrl}${url}?${search ? `${search}` : ``}`,\n              headers,\n              options\n            )\n          : Post(`${baseUrl}${url}`, headers, options);\n\n      return { data: result.data };\n    } catch (axiosError) {\n      let err = axiosError;\n      return {\n        error: { status: err.response?.status, data: err.response?.data },\n      };\n    }\n  };\n\nexport { AxiosBaseQuery, Get, Post, Put, DeleteApi };\n"],"names":["urlBuilder","filters","selectedTags","url","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","params","URLSearchParams","get","length","set","history","replaceState","origin","pathname","toString","hash","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","capitalize","string","toUpperCase","substring","pruneFilters","localFilters","filterCategories","prunedFilters","arr","item","category","chips","selectedCategoryValue","values","find","String","name","text","label","title","urlParam","workloadQueryBuilder","workloads","SID","generateFilter","system_profile","SAP","isSelected","sap_system","sap_sids","undefined","arrayEnhancer","mergeArraysByDiffKeys","advSystems","invSystems","advSys","invSys","RuleLabels","rule","intl","useIntl","tags","Tooltip","content","formatMessage","messages","position","TooltipPosition","Label","color","className","rule_status","propTypes","PropTypes","MessageState","children","icon","iconClass","iconStyle","variant","style","headingLevel","size","marginBottom","defaultProps","CubesIcon","EmptyStateVariant","ReportDetails","report","kbaDetail","kbaLoading","rulesCardClasses","classNames","templateProcessor","template","definitions","DOT_SETTINGS","doT","varname","strip","compiledDot","compiledMd","marked","dangerouslySetInnerHTML","__html","replace","error","console","warn","boxShadow","widget-type","hasGutter","isCompact","reason","details","resolution","node_id","SkeletonSize","rel","target","href","view_uri","publishedTitle","more_info","BaseSystemAdvisor","dispatch","useDispatch","entity","useSelector","entityDetails","systemProfile","systemProfileStore","routerData","useState","inventoryReportFetchStatus","setInventoryReportFetchStatus","rows","setRows","activeReports","setActiveReports","kbaDetailsData","setKbaDetailsData","sortBy","setSortBy","setFilters","accountSettings","setAccountSettings","searchValue","setSearchValue","setIsSelected","isAllExpanded","setIsAllExpanded","results","satelliteManaged","satellite_managed","hideResultsSatelliteManaged","show_satellite_hosts","getSelectedItems","filter","selected","selectedAnsibleRules","r","has_playbook","selectedItemsLength","selectableItemsLength","cols","transforms","sortable","cellWidth","fitContent","actions","isDisabled","dataProvider","processRemediation","onRemediationCreated","result","data","getNotification","addNotificationAction","activeRuleFirst","reports","activeRuleIndex","findIndex","rule_id","id","activeReport","splice","buildRows","kbaDetails","builtRows","flatMap","article","rowVal","rowKey","isOpen","reportRow","disableSelection","cells","description","date","publish_date","type","tooltipProps","verticalAlign","LIKELIHOOD_LABEL","likelihood","IMPACT_LABEL","impact","total_risk","AnsibeTowerIcon","parent","fullWidth","isValidSearchValue","toLowerCase","includes","isValidFilterValue","filterValues","rowValue","RULE_CATEGORIES","every","x","forEach","row","index","onBulkSelect","bulkSelect","items","onClick","count","checked","onSelect","activeFiltersConfig","deleteTitle","FC","push","buildFilterChips","onDelete","_e","itemsToRemove","isAll","onFilterChange","fetchKbaDetails","reportsData","kbaIds","Get","credentials","kbaDetailsFetch","response","docs","param","newFilters","removeFilterParam","issues","systems","filterConfigItems","onChange","onInputChange","useEffect","Promise","BASE_URL","all","settingsFetch","reportsFetch","activeRuleFirstReportsData","dataFetch","insights_id","Fragment","expandAll","allRows","prototype","hasOwnProperty","call","actionsConfig","filterConfig","pagination","Card","CardBody","PficonSatelliteIcon","ExternalLinkAltIcon","Table","aria-label","rowId","onCollapse","collapseRows","canSelectAll","onSort","direction","sortedReports","1","2","3","4","sort","concat","firstItem","secondItem","sortedReportsDirectional","SortByDirection","reverse","TableVariant","isStickyHeader","TableHeader","TableBody","CheckIcon","ChartSpikeIcon","Bullseye","Stack","StackItem","ClipboardCopy","Button","component","TimesCircleIcon","SystemAdvisor","customItnl","intlProps","store","props","Wrapper","IntlProvider","ReduxProvider","Provider","locale","navigator","language","slice","onError","log","headers","axios","paramsSerializer","Qs","arrayFormat","Post","Put","DeleteApi","AxiosBaseQuery","baseUrl","options","method","insights","chrome","auth","getUser","err","status"],"sourceRoot":""}