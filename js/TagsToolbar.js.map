{"version":3,"sources":["webpack:///./src/AppActions.js","webpack:///./src/Utilities/Debounce.js","webpack:///./src/PresentationalComponents/TagsToolbar/_TagsToolbar.scss","webpack:///./src/PresentationalComponents/TagsToolbar/_TagsToolbar.scss?1dc4","webpack:///./src/PresentationalComponents/TagsToolbar/ManageTags.js","webpack:///./src/PresentationalComponents/TagsToolbar/Common.js","webpack:///./src/PresentationalComponents/TagsToolbar/TagsToolbar.js"],"names":["fetchData","url","headers","options","a","insights","chrome","auth","getUser","API","get","response","data","setData","post","fetchRules","type","ActionTypes","payload","fetchRule","rule_id","tags","fetchSystem","ruleId","encodeURI","setFilters","filters","fetchTopics","fetchTopicsAdmin","fetchTopic","topic_id","fetchSystems","fetchRuleAck","setAck","fetchHostAcks","setFiltersSystems","setSelectedTags","setRule","rule","setSystem","system","Debounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","transform","undefined","update","locals","hot","accept","newContent","b","key","idx","Error","dispose","ManageTags","toggleModal","fetchTags","selectedTags","isOpen","setTags","loaded","setLoaded","selected","setSelected","perPage","setPerPage","page","setPage","searchText","setSearchText","intl","useIntl","debouncedSearchText","debounce","DEBOUNCE_DELAY","activeFiltersConfig","useMemo","map","tag","namespace","filter","index","self","indexOf","category","chips","name","id","urlParam","buildFilterChips","total","populateSelected","length","split","decodeURIComponent","Fragment","TagModal","title","formatMessage","messages","tagsCount","count","pagination","rows","find","selection","cells","width","label","filterTagsInModal","placeholder","filterValues","onChange","event","onUpdateData","columns","tagsModalName","tagsModalValue","tagsModalSources","systems","onSelect","onApply","tableProps","canSelectAll","primaryToolbarProps","onDelete","e","items","isAll","ids","flatMap","item","chip","propTypes","PropTypes","func","isRequired","bool","array","connect","AdvisorStore","dispatch","tagUrlBuilder","tagsToSet","URL","window","location","params","URLSearchParams","search","set","join","history","replaceState","origin","pathname","toString","TagsToolbar","setIsOpen","setParams","manageTagsModalOpen","setManageTagsModalOpen","groupTags","Set","source","formatTags","encodeURIComponent","formattedTags","INV_BASE_URL","toLowerCase","results","intersection","addNotification","variant","dismissable","error","description","urlParams","className","Select","SelectVariant","checkbox","aria-label","onToggle","includes","selections","placeholderText","filterResults","allSystems","noTags","ariaLabelledBy","isDisabled","InputGroup","TextInput","filterTagsInToolbar","Divider","group","tagIndex","isChecked","Tooltip","position","TooltipPosition","right","Badge","Button","onClick","countMoreTags","manageTags","any","state"],"mappings":"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","file":"js/TagsToolbar.js","sourcesContent":["import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.get(url, headers, options);\n    return response.data;\n};\n\nconst setData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.post(url, headers, options);\n    return response.data;\n};\n\nexport const fetchStatsRules = (options) => ({\n    type: ActionTypes.STATS_RULES_FETCH,\n    payload: fetchData(ActionTypes.STATS_RULES_FETCH_URL, {}, options)\n});\nexport const fetchStatsSystems = (options) => ({\n    type: ActionTypes.STATS_SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.STATS_SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchStatsStaleHosts = (options) => ({\n    type: ActionTypes.STATS_STALEHOSTS_FETCH,\n    payload: fetchData(ActionTypes.STATS_STALEHOSTS_FETCH_URL, {}, options)\n});\nexport const fetchRules = (options) => ({\n    type: ActionTypes.RULES_FETCH,\n    payload: fetchData(ActionTypes.RULES_FETCH_URL, {}, options)\n});\nexport const fetchRule = (options) => ({\n    type: ActionTypes.RULE_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/`, {}, options.tags && { tags: options.tags })\n});\nexport const fetchSystem = (ruleId, options) => ({\n    type: ActionTypes.SYSTEM_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${encodeURI(ruleId)}/systems`, {}, options)\n});\nexport const setFilters = (filters) => ({\n    type: ActionTypes.FILTERS_SET,\n    payload: filters\n});\nexport const fetchTopics = (options) => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(ActionTypes.TOPICS_FETCH_URL, {}, options)\n});\nexport const fetchTopicsAdmin = () => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}?show_disabled=true`)\n});\nexport const fetchTopic = (options) => ({\n    type: ActionTypes.TOPIC_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}${options.topic_id}/`)\n});\nexport const fetchSystems = (options) => ({\n    type: ActionTypes.SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchRuleAck = (options) => ({\n    type: ActionTypes.RULE_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.RULE_ACK_URL}${options.rule_id}/`)\n});\nexport const setAck = (options) => ({\n    type: ActionTypes[`${options.type}_ACK_SET`],\n    payload: setData(ActionTypes[`${options.type}_ACK_URL`], {}, options.options)\n});\nexport const fetchHostAcks = (options) => ({\n    type: ActionTypes.HOST_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.HOST_ACK_URL}`, {}, options)\n});\nexport const setFiltersSystems = (filters) => ({\n    type: ActionTypes.FILTERS_SYSTEMS_SET,\n    payload: filters\n});\nexport const setSelectedTags = (tags) => ({\n    type: ActionTypes.SELECTED_TAGS_SET,\n    payload: tags\n});\nexport const setRule = (rule) => ({\n    type: ActionTypes.RULE_SET,\n    payload: rule\n});\nexport const setSystem = (system) => ({\n    type: ActionTypes.SYSTEM_SET,\n    payload: system\n});\n","import { useEffect, useState } from 'react';\n\nconst Debounce = (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {setDebouncedValue(value);}, delay);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [delay, value]);\n\n    return debouncedValue;\n};\n\nexport default Debounce;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}.tagsToolbarContainer{background-color:var(--pf-global--BackgroundColor--100);border-bottom:var(--pf-global--BorderWidth--sm) solid var(--pf-global--BorderColor--light-100)}.tagsToolbarContainer .pf-c-dropdown__menu{top:36px !important}.tagsToolbarContainer .dropDownOverride{padding-left:var(--pf-global--spacer--md)}.tagsToolbarContainer .dropDownOverride button::before{border:none !important}.tagsToolbarContainer .tags-filter-group{display:flex;padding:var(--pf-global--spacer--sm) 0 var(--pf-global--spacer--md) var(--pf-global--spacer--md)}.tagsToolbarContainer .tags-filter-group .tags-filter-search-icon{position:relative;left:-30px;left:-1.875rem;top:10px;top:.625rem}.tagsToolbarContainer .tags-select-group{display:flex}.tagsToolbarContainer .tags-select-group:hover{background-color:var(--pf-c-select__menu-item--hover--BackgroundColor)}.tagsToolbarContainer .tags-select-group .tags-select-badge{position:relative;margin-top:var(--pf-global--spacer--md);left:-15px;left:-.9375rem;bottom:8px;bottom:.5rem}.tagsToolbarContainer .pf-c-select__toggle{width:220px;font-size:small}.tagsToolbarContainer .pf-c-select__toggle.pf-m-disabled,.tagsToolbarContainer .pf-c-select__toggle:disabled{background-color:var(--pf-global--BackgroundColor--100)}.tagsToolbarContainer .pf-c-select__toggle.pf-m-disabled .pf-c-select__toggle-arrow,.tagsToolbarContainer .pf-c-select__toggle:disabled .pf-c-select__toggle-arrow{color:var(--pf-global--BackgroundColor--100)}.tagsToolbarContainer .pf-c-select{max-width:400px !important}.tagsToolbarContainer .pf-c-check__label{max-width:400px !important;width:400px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tagsListContainer .pf-c-data-list{border:none}.tagsListContainer .pf-c-data-list__item{border:none}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-control{padding:8px 0 8px !important}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-content{padding-bottom:8px !important}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-content .pf-c-data-list__cell{padding-top:8px !important}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DEBOUNCE_DELAY } from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport { TagModal } from '@redhat-cloud-services/frontend-components/components/TagModal';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport messages from '../../Messages';\nimport { setSelectedTags } from '../../AppActions';\nimport { useIntl } from 'react-intl';\n\nconst buildFilterChips = (selected) => {\n    const filters = selected.map(tag => tag.namespace).filter(\n        (value, index, self) =>\n            self.indexOf(value) === index\n    ).map(category => ({\n        category,\n        chips: selected.filter(tag =>\n            tag.namespace === category\n        ).map(tag => ({\n            name: tag.value,\n            id: tag.id,\n            value: true\n        })),\n        urlParam: 'tags'\n    }));\n    return { filters };\n};\n\nconst ManageTags = ({ toggleModal, fetchTags, selectedTags, setSelectedTags, isOpen }) => {\n    const [tags, setTags] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [selected, setSelected] = useState([]);\n    const [perPage, setPerPage] = useState(10);\n    const [page, setPage] = useState(1);\n    const [searchText, setSearchText] = useState();\n    const intl = useIntl();\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const activeFiltersConfig = useMemo(() => buildFilterChips(selected), [selected]);\n    const { total, data } = tags;\n\n    useEffect(() => {\n        (async () => {\n            setPage(1);\n            setTags(await fetchTags(perPage, 1, null, searchText));\n            setLoaded(true);\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        (async () => {\n            setTags(await fetchTags(perPage, page, null, debouncedSearchText));\n            setLoaded(true);\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [perPage, page]);\n\n    const populateSelected = () => selectedTags.length ?\n        selectedTags.map(id => ({\n            id,\n            namespace: id.split('/')[0],\n            key: decodeURIComponent(id.split('/')[1].split('=')[0]),\n            value: decodeURIComponent(id.split('/')[1].split('=')[1])\n        })) : [];\n\n    useEffect(() => {\n        setSelected(populateSelected());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedTags, setSelected]);\n\n    const onDelete = (e, items, isAll) => {\n        if (isAll) {\n            setSelected([]);\n        } else {\n            const ids = items.flatMap(item => item.chips.map(chip => chip.id));\n            setSelected(selected.filter(tag => ids.filter(id => id !== tag.id).length));\n        }\n    };\n\n    return <React.Fragment>\n        {data && <TagModal\n            title={intl.formatMessage(messages.tagsCount, { count: total })}\n            {...loaded && {\n                loaded,\n                pagination: {\n                    perPage,\n                    page,\n                    count: total\n                },\n                rows: data.map(tag => ({\n                    ...tag,\n                    selected: selected.find(selection => selection.id === tag.id),\n                    cells: [tag.key, tag.value, tag.namespace, tag.count]\n                }))\n            }}\n            loaded={ loaded }\n            width='50%'\n            isOpen={ isOpen }\n            toggleModal={() => {\n                setPerPage(10);\n                setPage(1);\n                setSearchText();\n                setSelected(populateSelected());\n                toggleModal();\n            }}\n            filters={[\n                {\n                    label: intl.formatMessage(messages.filterTagsInModal),\n                    placeholder: intl.formatMessage(messages.filterTagsInModal),\n                    value: 'tags-filter',\n                    filterValues: {\n                        key: 'text-filter',\n                        onChange: (event, value) => setSearchText(value),\n                        value: searchText\n                    }\n                }\n            ]}\n            onUpdateData={(data) => {\n                setLoaded(false);\n                setPerPage(data.perPage);\n                setPage(data.page);\n            }}\n            columns={ [\n                { title: intl.formatMessage(messages.tagsModalName) },\n                { title: intl.formatMessage(messages.tagsModalValue) },\n                { title: intl.formatMessage(messages.tagsModalSources) },\n                { title: intl.formatMessage(messages.systems) }\n            ] }\n            selected={selected}\n            onSelect={(selected) => setSelected(selected.map(tag => ({\n                id: tag.id,\n                namespace: tag.namespace,\n                value: tag.value,\n                selected: true\n            })))}\n            onApply={() => {\n                setSelectedTags(selected.map(tag => tag.id));\n            }}\n            tableProps={{ canSelectAll: false }}\n            primaryToolbarProps={{\n                activeFiltersConfig: {\n                    ...activeFiltersConfig,\n                    onDelete\n                }\n            }}\n        />}\n    </React.Fragment>;\n};\n\nManageTags.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    fetchTags: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    selectedTags: PropTypes.array,\n    setSelectedTags: PropTypes.func\n};\n\nexport default connect(\n    ({ AdvisorStore }) => ({ selectedTags: AdvisorStore.selectedTags }),\n    dispatch => ({\n        setSelectedTags: (tags) => dispatch(setSelectedTags(tags))\n    }))(ManageTags);\n","const tagUrlBuilder = (tagsToSet) => {\n    if (tagsToSet !== null) {\n        const url = new URL(window.location);\n        let params = new URLSearchParams(url.search);\n        tagsToSet.length ? params.set('tags', tagsToSet.join()) : params.delete('tags');\n        window.history.replaceState(null, null, `${url.origin}${url.pathname}${params.toString().length ? '?' : ''}${params.toString()}`);\n    }\n};\n\nexport { tagUrlBuilder };\n","import './_TagsToolbar.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { Select, SelectGroup, SelectOption, SelectVariant } from '@patternfly/react-core/dist/js/components/Select/index';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport API from '../../Utilities/Api';\nimport { Badge } from '@patternfly/react-core/dist/js/components/Badge/Badge';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DEBOUNCE_DELAY } from '../../AppConstants';\nimport { Divider } from '@patternfly/react-core/dist/js/components/Divider/Divider';\nimport { INV_BASE_URL } from '../../AppConstants';\nimport { InputGroup } from '@patternfly/react-core/dist/js/components/InputGroup/InputGroup';\nimport ManageTags from './ManageTags';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport TagIcon from '@patternfly/react-icons/dist/js/icons/tag-icon';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport intersection from 'lodash/intersection';\nimport messages from '../../Messages';\nimport { setSelectedTags } from '../../AppActions';\nimport { tagUrlBuilder } from './Common';\nimport { useIntl } from 'react-intl';\n\nconst TagsToolbar = ({ selectedTags, setSelectedTags }) => {\n    const intl = useIntl();\n    const [isOpen, setIsOpen] = useState(false);\n    const [tags, setTags] = useState({});\n    const [searchText, setSearchText] = useState();\n    const [params, setParams] = useState();\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const [manageTagsModalOpen, setManageTagsModalOpen] = useState(false);\n    const showMoreCount = 20;\n    const { total, count, data } = tags;\n\n    const groupTags = (tags) => {\n        return {\n            total: tags.total,\n            count: tags.count,\n            data: [...new Set(tags.data.map(tag => tag.namespace))].map(source => ({\n                source,\n                data: tags.data.filter(tag => tag.namespace === source)\n            }))\n        };\n    };\n\n    const formatTags = (tags, total, count) => {\n        return {\n            total,\n            count,\n            data: tags.map(item => {\n                const { namespace, key, value } = item.tag;\n                return {\n                    ...item.tag,\n                    count: item.count,\n                    id: `${namespace}/${encodeURIComponent(key)}=${encodeURIComponent(value)}`\n                };\n            })\n        };\n    };\n\n    const fetchTags = async (perPage, page, params, filter) => {\n        let formattedTags = [];\n        try {\n            const response = (filter === '' || !filter) ?\n                await API.get(`${INV_BASE_URL}/tags?per_page=${perPage}&page=${page}&registered_with=insights`) :\n                await API.get(`${INV_BASE_URL}/tags?per_page=${perPage}&page=${page}&search=${filter.toLowerCase()}&registered_with=insights`);\n            formattedTags = formatTags(response.data.results, response.data.total, response.data.count);\n            params === null && selectedTags === null && setSelectedTags([]);\n            if (params.length) {\n                const tagsToSet = intersection(params.split(','), selectedTags);\n                tagUrlBuilder(tagsToSet);\n                setSelectedTags(tagsToSet);\n            }\n        } catch (error) {\n            addNotification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${error}` });\n        }\n\n        return formattedTags;\n    };\n\n    // Force triggers the debounce function on mount (i.e. deleting this will break things)\n    useEffect(() => {\n        setSearchText('');\n    }, []);\n\n    useEffect(() => {\n        const url = new URL(window.location);\n        let params = new URLSearchParams(url.search);\n        setParams(params.get('tags'));\n    }, [selectedTags]);\n\n    useEffect(() => {\n        const url = new URL(window.location);\n        let urlParams = new URLSearchParams(url.search);\n        urlParams.get('tags') === params ?\n            (async () => setTags(groupTags(await fetchTags(showMoreCount, 1, null, searchText))))() :\n            (async () => setTags(groupTags(await fetchTags(showMoreCount, 1, urlParams, searchText))))();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        tagUrlBuilder(selectedTags);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [window.location]);\n\n    const titleFn = () => <React.Fragment>\n        <TagIcon />&nbsp;\n        {data && data.length > 0 ?\n            <React.Fragment>\n                {intl.formatMessage(messages.filterResults)} {selectedTags.length === 0 && intl.formatMessage(messages.allSystems)}\n            </React.Fragment>\n            : intl.formatMessage(messages.noTags)}\n    </React.Fragment>;\n\n    const onToggle = isOpen => {\n        setSearchText('');\n        setIsOpen(isOpen);\n    };\n\n    const onSelect = (e, selection) => {\n        const tagsToSet = selectedTags.includes(selection) ? selectedTags.filter(item => item !== selection)\n            : [...selectedTags, selection];\n        setSelectedTags(tagsToSet);\n        tagUrlBuilder(tagsToSet);\n    };\n\n    return selectedTags !== null && <div className='tagsToolbarContainer'>\n        {<ManageTags\n            toggleModal={() => setManageTagsModalOpen(!manageTagsModalOpen)}\n            isOpen={manageTagsModalOpen}\n            fetchTags={fetchTags}\n        />}\n        {data && <Select\n            className='dropDownOverride'\n            variant={SelectVariant.checkbox}\n            aria-label='Select Group Input'\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={selectedTags}\n            isOpen={isOpen}\n            placeholderText={titleFn()}\n            ariaLabelledBy='select-group-input'\n            isDisabled={data.length === 0}\n        >\n            <InputGroup className='tags-filter-group'>\n                <TextInput\n                    aria-label='tags-filter-input'\n                    placeholder={intl.formatMessage(messages.filterTagsInToolbar)}\n                    value={searchText}\n                    onChange={setSearchText}\n                />\n                <SearchIcon className='tags-filter-search-icon'/>\n            </InputGroup>\n            <Divider key=\"inline-filter-divider\"/>\n            {data.map((group, index) =>\n                <SelectGroup key={`group${index}`} label={group.source}>\n                    {group.data.map((tag, tagIndex) =>\n                        <span key={tagIndex} className='tags-select-group'>\n                            <SelectOption value={tag.id} isChecked={\n                                selectedTags.find(selection => selection === tag.id)\n                            }>\n                                <Tooltip content={`${decodeURIComponent(tag.id)}`} position={TooltipPosition.right}>\n                                    <span>{`${decodeURIComponent(tag.key + '=' + tag.value)}`}</span>\n                                </Tooltip>\n                            </SelectOption>\n                            <Badge className='tags-select-badge'> {tag.count} </Badge>\n                        </span>\n                    )}\n                </SelectGroup>\n            )}\n            <Button key='manage all tags'\n                variant='link' onClick={() => setManageTagsModalOpen(true)}>\n                {(showMoreCount > 0 && count >= showMoreCount) ?\n                    intl.formatMessage(\n                        messages.countMoreTags, {\n                            count: total - count\n                        }) : intl.formatMessage(messages.manageTags)\n                }\n            </Button>\n        </Select>}\n    </div >;\n};\n\nTagsToolbar.propTypes = {\n    selectedTags: PropTypes.array,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    setSelectedTags: PropTypes.func,\n    history: PropTypes.any\n};\n\nexport default connect(\n    state => ({ selectedTags: state.AdvisorStore.selectedTags }),\n    dispatch => ({\n        addNotification: data => dispatch(addNotification(data)),\n        setSelectedTags: (tags) => dispatch(setSelectedTags(tags))\n    }))(TagsToolbar);\n"],"sourceRoot":""}