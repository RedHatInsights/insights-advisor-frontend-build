{"version":3,"sources":["webpack:///./src/PresentationalComponents/Charts/SummaryChart/SummaryChartItem.js"],"names":["SummaryChartItem","numIssues","name","riskName","affectedSystems","setFilters","history","intl","setChartFilters","totalRisk","SEVERITY_MAP","total_risk","reports_shown","impacting","push","returnLink","children","className","variant","onClick","widget-type","widget-id","label","severity","labelHidden","formatMessage","messages","summaryChartItem","propTypes","PropTypes","number","isRequired","string","object","func","any","injectIntl","routerParams","connect","dispatch","filters","AppActions"],"mappings":"4FAAA,kJAaMA,EAAmB,SAAC,GAA8E,IAA5EC,EAA4E,EAA5EA,UAAWC,EAAiE,EAAjEA,KAAMC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,gBAAiBC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACnFC,EAAkB,WACpB,IAAMC,EAAY,GAAH,OAAMC,eAAa,GAAD,OAAIP,EAAJ,WACjCE,EAAW,CAAEM,WAAY,CAACF,GAAYG,cAAe,OAAQC,WAAW,IACxEP,EAAQQ,KAAR,WAGEC,EAAa,SAACC,GAAD,OAAc,kBAAC,IAAD,CAAQC,UAAU,2BAA2BC,QAAQ,OAAOC,QAASX,GAAkBQ,IAExH,OAAO,kBAAC,IAAD,CAAWI,cAAY,2BAA2BC,YAAWnB,GAChE,kBAAC,IAAD,CAAOe,UAAU,qBACb,kBAAC,IAAD,KACKF,EAAW,kBAAC,UAAD,CAASO,MAAOnB,EAAUoB,SAAUpB,EAAUqB,aAAa,MAE3E,kBAAC,IAAD,KACKT,EAAWR,EAAKkB,cAAcC,IAASC,iBAAkB,CAAE1B,YAAWC,OAAME,yBAM7FJ,EAAiB4B,UAAY,CACzBxB,gBAAiByB,IAAUC,OAAOC,WAClC7B,KAAM2B,IAAUG,OAAOD,WACvB9B,UAAW4B,IAAUC,OAAOC,WAC5B5B,SAAU0B,IAAUG,OAAOD,WAC3BzB,QAASuB,IAAUI,OACnB5B,WAAYwB,IAAUK,KACtB3B,KAAMsB,IAAUM,KAOLC,sBAAWC,IAAaC,kBACnC,MALuB,SAAAC,GAAQ,MAAK,CACpClC,WAAY,SAACmC,GAAD,OAAaD,EAASE,IAAsBD,QAGrBF,CAGrCtC","file":"js/19.js","sourcesContent":["/* eslint camelcase: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Battery } from '@redhat-cloud-services/frontend-components';\nimport { Button, Split, SplitItem, StackItem } from '@patternfly/react-core';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\n\nimport * as AppActions from '../../../AppActions';\nimport { SEVERITY_MAP } from '../../../AppConstants';\nimport messages from '../../../Messages';\n\nconst SummaryChartItem = ({ numIssues, name, riskName, affectedSystems, setFilters, history, intl }) => {\n    const setChartFilters = () => {\n        const totalRisk = `${SEVERITY_MAP[`${riskName}-risk`]}`;\n        setFilters({ total_risk: [totalRisk], reports_shown: 'true', impacting: true });\n        history.push(`/rules`);\n    };\n\n    const returnLink = (children) => <Button className='paddingLeftLabelOverride' variant=\"link\" onClick={setChartFilters}>{children}</Button>;\n\n    return <StackItem widget-type='InsightsSummaryChartItem' widget-id={name}>\n        <Split className='flexAlignOverride'>\n            <SplitItem>\n                {returnLink(<Battery label={riskName} severity={riskName} labelHidden={true} />)}\n            </SplitItem>\n            <SplitItem>\n                {returnLink(intl.formatMessage(messages.summaryChartItem, { numIssues, name, affectedSystems }))}\n            </SplitItem>\n        </Split>\n    </StackItem>;\n};\n\nSummaryChartItem.propTypes = {\n    affectedSystems: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    numIssues: PropTypes.number.isRequired,\n    riskName: PropTypes.string.isRequired,\n    history: PropTypes.object,\n    setFilters: PropTypes.func,\n    intl: PropTypes.any\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setFilters: (filters) => dispatch(AppActions.setFilters(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    null,\n    mapDispatchToProps\n)(SummaryChartItem)));\n"],"sourceRoot":""}