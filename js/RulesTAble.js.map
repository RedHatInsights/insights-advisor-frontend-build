{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/PresentationalComponents/RulesTable/RulesTable.js"],"names":["arrayWithoutHoles","iterableToArray","nonIterableSpread","module","exports","arr","Array","isArray","i","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","RulesTable","rules","filters","rulesFetchStatus","setFilters","fetchRules","addNotification","history","intl","useState","title","formatMessage","messages","description","transforms","sortable","added","cellWidth","totalRisk","systems","size","ansible","dataLabel","cols","rows","setRows","sortBy","setSortBy","impacting","setImpacting","limit","setLimit","offset","setOffset","filterBuilding","setFilterBuilding","queryString","setQueryString","searchText","setSearchText","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","viewSystemsModalOpen","setViewSystemsModalOpen","viewSystemsModalRule","setViewSystemsModalRule","debouncedSearchText","debounce","results","meta","count","sortIndices","1","2","3","4","5","filterFetchBuilder","assign","entries","map","filter","join","fetchRulesFn","onSetPage","pageNumber","hideReports","rowId","a","rule","reports_shown","API","BASE_URL","rule_id","variant","dismissable","rulesTableHideReportsErrorDisabled","rulesTableHideReportsErrorEnabled","fetchAction","useCallback","useEffect","location","search","searchParams","URLSearchParams","paramsObject","reduce","acc","key","value","JSON","parse","split","undefined","sort","keys","replace","sortIndex","Number","find","item","sortDirection","index","direction","data","cells","icon","CheckIcon","iconClass","rulesTableNoRuleHitsTitle","text","rulesTableNoRuleHitsEnabledRulesBody","rulesTableNoRuleHitsAnyRulesBody","style","paddingTop","onClick","rulesTableNoRuleHitsAddDisabledButton","props","colSpan","flatMap","isOpen","isRead","disabled","to","moment","publish_date","fromNow","className","verticalAlign","label","labelHidden","severity","total_risk","impacted_systems_count","toLocaleString","nA","playbook_count","no","parent","fullWidth","gutter","hosts_acked_count","ruleIsDisabledForAllSystems","ruleIsDisabledForSystemsBody","isInline","viewSystems","Fragment","asMutable","removeFilterParam","param","addFilterParam","values","actions","rulesTableActionShow","rulesTableActionHide","toggleRulesWithHits","filterConfigItems","filterValues","onChange","event","FC","type","id","urlParam","items","res_risk","impact","likelihood","category","activeFiltersConfig","localFilters","topic","prunedFilters","chips","name","String","buildFilterChips","onDelete","itemsToRemove","isAll","newFilter","handleModalToggle","toggleModal","isModalOpen","afterFn","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","exportConfig","onSelect","exportType","window","actionsConfig","filterConfig","aria-label","actionResolver","rowData","rowIndex","disableRule","enableRule","onCollapse","collapseRows","onSort","_event","orderParam","message","rulesTableFetchRulesError","widgetId","PaginationVariant","bottom","propTypes","PropTypes","func","string","object","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","url","AppActions"],"mappings":"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","file":"js/RulesTAble.js","sourcesContent":["var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","import * as AppActions from '../../AppActions';\n\nimport { AnsibeTowerIcon, BellSlashIcon, CheckCircleIcon, CheckIcon } from '@patternfly/react-icons';\nimport { Badge, Button, Pagination, PaginationVariant, Stack, StackItem } from '@patternfly/react-core';\nimport { Battery, Main, PrimaryToolbar, TableToolbar } from '@redhat-cloud-services/frontend-components';\n/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader, cellWidth, sortable } from '@patternfly/react-table';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport DisableRule from '../Modals/DisableRule';\nimport { FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport Failed from '../../PresentationalComponents/Loading/Failed';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport PropTypes from 'prop-types';\nimport RuleDetails from '../RuleDetails/RuleDetails';\nimport ViewHostAcks from '../../PresentationalComponents/Modals/ViewHostAcks';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport moment from 'moment';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst RulesTable = ({ rules, filters, rulesFetchStatus, setFilters, fetchRules, addNotification, history, intl }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.description), transforms: [sortable] },\n        { title: intl.formatMessage(messages.added), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.totalRisk), transforms: [sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [sortable] },\n        {\n            title: <><AnsibeTowerIcon size='md' /> {intl.formatMessage(messages.ansible)}</>,\n            transforms: [sortable],\n            dataLabel: intl.formatMessage(messages.ansible)\n        }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [impacting, setImpacting] = useState(filters.impacting);\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const [queryString, setQueryString] = useState('');\n    const [searchText, setSearchText] = useState('');\n    const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n    const [selectedRule, setSelectedRule] = useState({});\n    const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n    const [viewSystemsModalRule, setViewSystemsModalRule] = useState({});\n    const debouncedSearchText = debounce(searchText, 800);\n    const results = rules.meta ? rules.meta.count : 0;\n    const sortIndices = { 1: 'description', 2: 'publish_date', 3: 'total_risk', 4: 'impacted_count', 5: 'playbook_count' };\n\n    // transforms array of strings -> comma seperated strings, required by advisor api\n    const filterFetchBuilder = (filters) => (Object.assign({},\n        ...Object.entries(filters).map((filter) => (Array.isArray(filter[1]) ? { [filter[0]]: filter[1].join() }\n            : { [filter[0]]: filter[1] })))\n    );\n\n    const fetchRulesFn = () => {\n        fetchRules({\n            ...filterFetchBuilder(filters),\n            offset: 0,\n            limit,\n            impacting\n        });\n    };\n\n    const onSort = (_event, index, direction) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setSortBy({ index, direction });\n        setFilters({ ...filters, sort: orderParam });\n        setOffset(0);\n    };\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    const toggleRulesWithHits = (impacting) => {\n        setFilters({ ...filters, impacting });\n        setImpacting(impacting);\n        setOffset(0);\n    };\n\n    const toggleRulesDisabled = (param) => {\n        let reports_shown = param === 'undefined' ? undefined : param;\n        setFilters({ ...filters, reports_shown });\n        setOffset(0);\n    };\n\n    const handleOnCollapse = (event, rowId, isOpen) => {\n        const collapseRows = [...rows];\n        collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n        setRows(collapseRows);\n    };\n\n    const hideReports = async (rowId) => {\n        const rule = rows[rowId].rule;\n\n        try {\n            if (rule.reports_shown) {\n                setSelectedRule(rule);\n                setDisableRuleOpen(true);\n            } else {\n                await API.delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n                fetchRulesFn();\n            }\n        } catch (error) {\n            addNotification({\n                variant: 'danger',\n                dismissable: true,\n                title: rule.reports_shown ? intl.formatMessage(messages.rulesTableHideReportsErrorDisabled)\n                    : intl.formatMessage(messages.rulesTableHideReportsErrorEnabled),\n                description: `${error}`\n            });\n        }\n    };\n\n    const actionResolver = (rowData, { rowIndex }) => {\n        const rule = rows[rowIndex].rule ? rows[rowIndex].rule : null;\n        if (rowIndex % 2 !== 0 || !rule) {\n            return null;\n        }\n\n        return rule && rule.reports_shown ?\n            [{\n                title: intl.formatMessage(messages.disableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }]\n            : [{\n                title: intl.formatMessage(messages.enableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }];\n    };\n\n    const fetchAction = useCallback(() => {\n        setOffset(0);\n    }, []);\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        delete localFilters.text;\n        delete localFilters.impacting;\n        delete localFilters.reports_shown;\n        delete localFilters.topic;\n        delete localFilters.sort;\n        const prunedFilters = Object.entries(localFilters);\n\n        return prunedFilters.length > 0 ? prunedFilters.map(item => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value =>\n                ({ name: category.values.find(values => values.value === String(value)).label, value }))\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: category.title, chips, urlParam: category.urlParam };\n        })\n            : [];\n    };\n\n    // Builds table filters from url params\n    useEffect(() => {\n        if (history.location.search) {\n            const searchParams = new URLSearchParams(history.location.search);\n            const paramsObject = Array.from(searchParams).reduce((acc, [key, value]) => ({\n                ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n            }), {});\n            paramsObject.reports_shown = paramsObject.reports_shown === undefined || paramsObject.reports_shown[0] === 'undefined' ? undefined\n                : paramsObject.reports_shown;\n            paramsObject.sort = paramsObject.sort === undefined ? '-publish_date'\n                : paramsObject.sort[0];\n\n            setImpacting(paramsObject.impacting);\n            setFilters({ ...paramsObject });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // Builds and pushes url params from table filters\n    useEffect(() => {\n        const queryString = Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&');\n        setQueryString(`?${queryString}`);\n        history.replace({\n            search: `?${queryString}`\n        });\n    }, [filters, history]);\n\n    useEffect(() => {\n        if (!filterBuilding) {\n            fetchRules({\n                ...filterFetchBuilder(filters),\n                offset,\n                limit\n            });\n        }\n    }, [fetchRules, filterBuilding, filters, limit, offset]);\n\n    useEffect(() => {\n        if (filters.sort !== undefined) {\n            const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n            const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n            setSortBy({ index: sortIndex, direction: sortDirection });\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filters, filters.sort]);\n\n    useEffect(() => {\n        if (rules.data) {\n            if (rules.data.length === 0) {\n                setRows([{\n                    cells: [{\n                        title: (\n                            <MessageState icon={CheckIcon} iconClass='ansibleCheck' size='sm'\n                                title={intl.formatMessage(messages.rulesTableNoRuleHitsTitle)} text={filters.reports_shown ?\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsEnabledRulesBody) :\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsAnyRulesBody)}>\n                                {filters.reports_shown && <Button variant=\"link\" style={{ paddingTop: 24 }} onClick={() => {\n                                    setFilters({ ...filters, reports_shown: undefined });\n                                    fetchAction();\n                                }}>\n                                    {intl.formatMessage(messages.rulesTableNoRuleHitsAddDisabledButton)}\n                                </Button>}\n                            </MessageState>),\n                        props: { colSpan: 5 }\n                    }]\n                }]\n                );\n            } else {\n                const rows = rules.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    rule: value,\n                    cells: [{\n                        title:\n                            <span key={key}>\n                                {!value.reports_shown && <Badge isRead>\n                                    <BellSlashIcon size='md' />&nbsp;\n                                    {intl.formatMessage(messages.disabled)}</Badge>}\n                                <Link key={key} to={`/rules/${value.rule_id}`}> {value.description} </Link>\n                            </span>\n                    }, {\n                        title: <div key={key}>\n                            {moment(value.publish_date).fromNow()}\n                        </div>\n                    }, {\n                        title: <div className=\"pf-m-center\" key={key} style={{ verticalAlign: 'top' }}>\n                            <Battery\n                                label={intl.formatMessage(messages.totalRisk)}\n                                labelHidden\n                                severity={value.total_risk}\n                            />\n                        </div>\n                    }, {\n                        title: <div key={key}> {value.reports_shown ?\n                            `${value.impacted_systems_count.toLocaleString()}`\n                            : intl.formatMessage(messages.nA)}</div>\n                    }, {\n                        title: <div className=\"pf-m-center \" key={key}>\n                            {value.playbook_count ? <CheckCircleIcon className='ansibleCheck' /> : intl.formatMessage(messages.no)}\n                        </div>\n                    }]\n                }, {\n                    parent: key * 2,\n                    fullWidth: true,\n                    cells: [{\n                        title: <Main className='pf-m-light'>\n                            <Stack gutter=\"md\">\n                                {value.hosts_acked_count ? <StackItem>\n                                    <BellSlashIcon size='sm' />\n                                    &nbsp;{value.hosts_acked_count && !value.impacted_systems_count ?\n                                        intl.formatMessage(messages.ruleIsDisabledForAllSystems) :\n                                        intl.formatMessage(messages.ruleIsDisabledForSystemsBody, { systems: value.hosts_acked_count })}\n                                    &nbsp; <Button isInline variant='link'\n                                        onClick={() => { setViewSystemsModalRule(value); setViewSystemsModalOpen(true); }}>\n                                        {intl.formatMessage(messages.viewSystems)}\n                                    </Button>\n                                </StackItem>\n                                    : <React.Fragment></React.Fragment>}\n                                <RuleDetails rule={value} />\n                            </Stack>\n                        </Main>\n                    }]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchAction, filters, rules, setFilters]);\n\n    useEffect(() => {\n        filters.text === undefined ? setSearchText('') : setSearchText(filters.text);\n    }, [filters.text]);\n\n    // Debounced function, sets text filter after specified time (800ms)\n    useEffect(() => {\n        if (!filterBuilding) {\n            const filter = { ...filters };\n            const text = searchText.length ? { text: searchText } : {};\n            delete filter.text;\n            setFilters({ ...filter, ...text });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters };\n        delete filter[param];\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        values.length > 0 ? setFilters({ ...filters, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const actions = [\n        '', {\n            label: intl.formatMessage(impacting ? messages.rulesTableActionShow : messages.rulesTableActionHide),\n            onClick: () => toggleRulesWithHits(!impacting)\n        }\n    ];\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.description),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: FC.total_risk.title,\n        type: FC.total_risk.type,\n        id: FC.total_risk.urlParam,\n        value: `checkbox-${FC.total_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.total_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.total_risk.urlParam, values),\n            value: filters.total_risk,\n            items: FC.total_risk.values\n        }\n    }, {\n        label: FC.res_risk.title,\n        type: FC.res_risk.type,\n        id: FC.res_risk.urlParam,\n        value: `checkbox-${FC.res_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.res_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.res_risk.urlParam, values),\n            value: filters.res_risk,\n            items: FC.res_risk.values\n        }\n    }, {\n        label: FC.impact.title,\n        type: FC.impact.type,\n        id: FC.impact.urlParam,\n        value: `checkbox-${FC.impact.urlParam}`,\n        filterValues: {\n            key: `${FC.impact.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.impact.urlParam, values),\n            value: filters.impact,\n            items: FC.impact.values\n        }\n    }, {\n        label: FC.likelihood.title,\n        type: FC.likelihood.type,\n        id: FC.likelihood.urlParam,\n        value: `checkbox-${FC.likelihood.urlParam}`,\n        filterValues: {\n            key: `${FC.likelihood.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.likelihood.urlParam, values),\n            value: filters.likelihood,\n            items: FC.likelihood.values\n        }\n    }, {\n        label: FC.category.title,\n        type: FC.category.type,\n        id: FC.category.urlParam,\n        value: `checkbox-${FC.category.urlParam}`,\n        filterValues: {\n            key: `${FC.category.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.category.urlParam, values),\n            value: filters.category,\n            items: FC.category.values\n        }\n    }, {\n        label: FC.reports_shown.title,\n        type: FC.reports_shown.type,\n        id: FC.reports_shown.urlParam,\n        value: `radio-${FC.reports_shown.urlParam}`,\n        filterValues: {\n            key: `${FC.reports_shown.urlParam}-filter`,\n            onChange: (event, value) => toggleRulesDisabled(value),\n            value: filters.reports_shown === undefined ? 'undefined' : `${filters.reports_shown}`,\n            items: FC.reports_shown.values\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setFilters({ impacting: true, reports_shown: 'true' });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]:\n                            filters[item.urlParam].filter(value => Number(value) !== Number(item.chips[0].value))\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const afterViewSystemsFn = () => {\n        fetchRulesFn();\n    };\n\n    return <React.Fragment>\n        {viewSystemsModalOpen && <ViewHostAcks\n            handleModalToggle={(toggleModal) => setViewSystemsModalOpen(toggleModal)}\n            isModalOpen={viewSystemsModalOpen}\n            afterFn={afterViewSystemsFn}\n            rule={viewSystemsModalRule}\n        />}\n        {disableRuleOpen && <DisableRule\n            handleModalToggle={setDisableRuleOpen}\n            isModalOpen={disableRuleOpen}\n            rule={selectedRule}\n            afterFn={fetchRulesFn}\n        />}\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            exportConfig={{\n                onSelect: (event, exportType) => window.location = `${BASE_URL}/export/hits.${exportType === 'json' ? 'json' : 'csv'}/${queryString}`\n            }}\n            actionsConfig={{ actions }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {rulesFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'}\n                actionResolver={actionResolver} onCollapse={handleOnCollapse} sortBy={sortBy}\n                onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>}\n        {rulesFetchStatus === 'pending' && (<Loading />)}\n        {rulesFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.rulesTableFetchRulesError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nRulesTable.propTypes = {\n    fetchRules: PropTypes.func,\n    rulesFetchStatus: PropTypes.string,\n    rules: PropTypes.object,\n    filters: PropTypes.object,\n    addNotification: PropTypes.func,\n    setFilters: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rules: state.AdvisorStore.rules,\n    rulesFetchStatus: state.AdvisorStore.rulesFetchStatus,\n    filters: state.AdvisorStore.filters,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRules: (url) => dispatch(AppActions.fetchRules(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFilters(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(RulesTable)));\n"],"sourceRoot":""}