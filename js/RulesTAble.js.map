{"version":3,"sources":["webpack:///./src/PresentationalComponents/RulesTable/RulesTable.js"],"names":["RulesTable","rules","filters","rulesFetchStatus","setFilters","fetchRules","addNotification","history","intl","useState","title","formatMessage","messages","description","transforms","sortable","added","cellWidth","totalRisk","systems","size","ansible","dataLabel","cols","rows","setRows","sortBy","setSortBy","impacting","setImpacting","limit","setLimit","offset","setOffset","filterBuilding","setFilterBuilding","queryString","setQueryString","searchText","setSearchText","disableRuleOpen","setDisableRuleOpen","selectedRule","setSelectedRule","viewSystemsModalOpen","setViewSystemsModalOpen","viewSystemsModalRule","setViewSystemsModalRule","debouncedSearchText","debounce","results","meta","count","sortIndices","1","2","3","4","5","filterFetchBuilder","Object","assign","entries","map","filter","Array","isArray","join","fetchRulesFn","onSetPage","pageNumber","hideReports","rowId","a","rule","reports_shown","API","BASE_URL","rule_id","variant","dismissable","rulesTableHideReportsErrorDisabled","rulesTableHideReportsErrorEnabled","fetchAction","useCallback","useEffect","location","search","searchParams","URLSearchParams","paramsObject","from","reduce","acc","key","value","JSON","parse","split","undefined","sort","keys","replace","sortIndex","Number","find","item","sortDirection","index","direction","data","length","cells","icon","CheckIcon","iconClass","rulesTableNoRuleHitsTitle","text","rulesTableNoRuleHitsEnabledRulesBody","rulesTableNoRuleHitsAnyRulesBody","style","paddingTop","onClick","rulesTableNoRuleHitsAddDisabledButton","props","colSpan","flatMap","isOpen","isRead","disabled","to","moment","publish_date","fromNow","className","verticalAlign","label","labelHidden","severity","total_risk","impacted_systems_count","toLocaleString","nA","playbook_count","no","parent","fullWidth","gutter","hosts_acked_count","ruleIsDisabledForSystemsBody","isInline","viewSystems","Fragment","asMutable","removeFilterParam","param","addFilterParam","values","actions","rulesTableActionShow","rulesTableActionHide","toggleRulesWithHits","filterConfigItems","filterValues","onChange","event","FC","type","id","urlParam","items","res_risk","impact","likelihood","category","activeFiltersConfig","localFilters","topic","prunedFilters","chips","name","String","buildFilterChips","onDelete","itemsToRemove","isAll","newFilter","handleModalToggle","toggleModal","isModalOpen","afterFn","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","exportConfig","onSelect","exportType","window","actionsConfig","filterConfig","aria-label","actionResolver","rowData","rowIndex","disableRule","enableRule","onCollapse","collapseRows","onSort","_event","orderParam","message","rulesTableFetchRulesError","widgetId","PaginationVariant","bottom","propTypes","PropTypes","func","string","object","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","url","AppActions"],"mappings":"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","file":"js/RulesTAble.js","sourcesContent":["import * as AppActions from '../../AppActions';\n\nimport { AnsibeTowerIcon, BellSlashIcon, CheckCircleIcon, CheckIcon } from '@patternfly/react-icons';\nimport { Badge, Button, Pagination, PaginationVariant, Stack, StackItem } from '@patternfly/react-core';\nimport { Battery, Main, PrimaryToolbar, TableToolbar } from '@redhat-cloud-services/frontend-components';\n/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader, cellWidth, sortable } from '@patternfly/react-table';\n\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport DisableRule from '../Modals/DisableRule';\nimport { FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport Failed from '../../PresentationalComponents/Loading/Failed';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport PropTypes from 'prop-types';\nimport RuleDetails from '../RuleDetails/RuleDetails';\nimport ViewHostAcks from '../../PresentationalComponents/Modals/ViewHostAcks';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport moment from 'moment';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst RulesTable = ({ rules, filters, rulesFetchStatus, setFilters, fetchRules, addNotification, history, intl }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.description), transforms: [sortable] },\n        { title: intl.formatMessage(messages.added), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.totalRisk), transforms: [sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [sortable] },\n        {\n            title: <><AnsibeTowerIcon size='md' /> {intl.formatMessage(messages.ansible)}</>,\n            transforms: [sortable],\n            dataLabel: intl.formatMessage(messages.ansible)\n        }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [impacting, setImpacting] = useState(filters.impacting);\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const [queryString, setQueryString] = useState('');\n    const [searchText, setSearchText] = useState('');\n    const [disableRuleOpen, setDisableRuleOpen] = useState(false);\n    const [selectedRule, setSelectedRule] = useState({});\n    const [viewSystemsModalOpen, setViewSystemsModalOpen] = useState(false);\n    const [viewSystemsModalRule, setViewSystemsModalRule] = useState({});\n    const debouncedSearchText = debounce(searchText, 800);\n    const results = rules.meta ? rules.meta.count : 0;\n    const sortIndices = { 1: 'description', 2: 'publish_date', 3: 'total_risk', 4: 'impacted_count', 5: 'playbook_count' };\n\n    // transforms array of strings -> comma seperated strings, required by advisor api\n    const filterFetchBuilder = (filters) => (Object.assign({},\n        ...Object.entries(filters).map((filter) => (Array.isArray(filter[1]) ? { [filter[0]]: filter[1].join() }\n            : { [filter[0]]: filter[1] })))\n    );\n\n    const fetchRulesFn = () => {\n        fetchRules({\n            ...filterFetchBuilder(filters),\n            offset: 0,\n            limit,\n            impacting\n        });\n    };\n\n    const onSort = (_event, index, direction) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setSortBy({ index, direction });\n        setFilters({ ...filters, sort: orderParam });\n        setOffset(0);\n    };\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    const toggleRulesWithHits = (impacting) => {\n        setFilters({ ...filters, impacting });\n        setImpacting(impacting);\n        setOffset(0);\n    };\n\n    const toggleRulesDisabled = (param) => {\n        let reports_shown = param === 'undefined' ? undefined : param;\n        setFilters({ ...filters, reports_shown });\n        setOffset(0);\n    };\n\n    const handleOnCollapse = (event, rowId, isOpen) => {\n        const collapseRows = [...rows];\n        collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n        setRows(collapseRows);\n    };\n\n    const hideReports = async (rowId) => {\n        const rule = rows[rowId].rule;\n\n        try {\n            if (rule.reports_shown) {\n                setSelectedRule(rule);\n                setDisableRuleOpen(true);\n            } else {\n                await API.delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n                fetchRulesFn();\n            }\n        } catch (error) {\n            addNotification({\n                variant: 'danger',\n                dismissable: true,\n                title: rule.reports_shown ? intl.formatMessage(messages.rulesTableHideReportsErrorDisabled)\n                    : intl.formatMessage(messages.rulesTableHideReportsErrorEnabled),\n                description: `${error}`\n            });\n        }\n    };\n\n    const actionResolver = (rowData, { rowIndex }) => {\n        const rule = rows[rowIndex].rule ? rows[rowIndex].rule : null;\n        if (rowIndex % 2 !== 0 || !rule) {\n            return null;\n        }\n\n        return rule && rule.reports_shown ?\n            [{\n                title: intl.formatMessage(messages.disableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }]\n            : [{\n                title: intl.formatMessage(messages.enableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }];\n    };\n\n    const fetchAction = useCallback(() => {\n        setOffset(0);\n    }, []);\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        delete localFilters.text;\n        delete localFilters.impacting;\n        delete localFilters.reports_shown;\n        delete localFilters.topic;\n        delete localFilters.sort;\n        const prunedFilters = Object.entries(localFilters);\n\n        return prunedFilters.length > 0 ? prunedFilters.map(item => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value =>\n                ({ name: category.values.find(values => values.value === String(value)).label, value }))\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: category.title, chips, urlParam: category.urlParam };\n        })\n            : [];\n    };\n\n    // Builds table filters from url params\n    useEffect(() => {\n        if (history.location.search) {\n            const searchParams = new URLSearchParams(history.location.search);\n            const paramsObject = Array.from(searchParams).reduce((acc, [key, value]) => ({\n                ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n            }), {});\n            paramsObject.reports_shown = paramsObject.reports_shown === undefined || paramsObject.reports_shown[0] === 'undefined' ? undefined\n                : paramsObject.reports_shown;\n            paramsObject.sort = paramsObject.sort === undefined ? '-publish_date'\n                : paramsObject.sort[0];\n\n            setImpacting(paramsObject.impacting);\n            setFilters({ ...paramsObject });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // Builds and pushes url params from table filters\n    useEffect(() => {\n        const queryString = Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&');\n        setQueryString(`?${queryString}`);\n        history.replace({\n            search: `?${queryString}`\n        });\n    }, [filters, history]);\n\n    useEffect(() => {\n        if (!filterBuilding) {\n            fetchRules({\n                ...filterFetchBuilder(filters),\n                offset,\n                limit\n            });\n        }\n    }, [fetchRules, filterBuilding, filters, limit, offset]);\n\n    useEffect(() => {\n        if (filters.sort !== undefined) {\n            const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n            const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n            setSortBy({ index: sortIndex, direction: sortDirection });\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filters, filters.sort]);\n\n    useEffect(() => {\n        if (rules.data) {\n            if (rules.data.length === 0) {\n                setRows([{\n                    cells: [{\n                        title: (\n                            <MessageState icon={CheckIcon} iconClass='ansibleCheck' size='sm'\n                                title={intl.formatMessage(messages.rulesTableNoRuleHitsTitle)} text={filters.reports_shown ?\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsEnabledRulesBody) :\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsAnyRulesBody)}>\n                                {filters.reports_shown && <Button variant=\"link\" style={{ paddingTop: 24 }} onClick={() => {\n                                    setFilters({ ...filters, reports_shown: undefined });\n                                    fetchAction();\n                                }}>\n                                    {intl.formatMessage(messages.rulesTableNoRuleHitsAddDisabledButton)}\n                                </Button>}\n                            </MessageState>),\n                        props: { colSpan: 5 }\n                    }]\n                }]\n                );\n            } else {\n                const rows = rules.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    rule: value,\n                    cells: [{\n                        title:\n                            <span key={key}>\n                                {!value.reports_shown && <Badge isRead>\n                                    <BellSlashIcon size='md' />&nbsp;\n                                    {intl.formatMessage(messages.disabled)}</Badge>}\n                                <Link key={key} to={`/rules/${value.rule_id}`}> {value.description} </Link>\n                            </span>\n                    }, {\n                        title: <div key={key}>\n                            {moment(value.publish_date).fromNow()}\n                        </div>\n                    }, {\n                        title: <div className=\"pf-m-center\" key={key} style={{ verticalAlign: 'top' }}>\n                            <Battery\n                                label={intl.formatMessage(messages.totalRisk)}\n                                labelHidden\n                                severity={value.total_risk}\n                            />\n                        </div>\n                    }, {\n                        title: <div key={key}> {value.reports_shown ?\n                            `${value.impacted_systems_count.toLocaleString()}`\n                            : intl.formatMessage(messages.nA)}</div>\n                    }, {\n                        title: <div className=\"pf-m-center \" key={key}>\n                            {value.playbook_count ? <CheckCircleIcon className='ansibleCheck' /> : intl.formatMessage(messages.no)}\n                        </div>\n                    }]\n                }, {\n                    parent: key * 2,\n                    fullWidth: true,\n                    cells: [{\n                        title: <Main className='pf-m-light'>\n                            <Stack gutter=\"md\">\n                                {value.hosts_acked_count ? <StackItem>\n                                    <BellSlashIcon size='sm' />\n                                    &nbsp;{intl.formatMessage(messages.ruleIsDisabledForSystemsBody, { systems: value.hosts_acked_count })}\n                                    &nbsp; <Button isInline variant='link'\n                                        onClick={() => { setViewSystemsModalRule(value); setViewSystemsModalOpen(true); }}>\n                                        {intl.formatMessage(messages.viewSystems)}\n                                    </Button>\n                                </StackItem>\n                                    : <React.Fragment></React.Fragment>}\n                                <RuleDetails rule={value} />\n                            </Stack>\n                        </Main>\n                    }]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchAction, filters, rules, setFilters]);\n\n    useEffect(() => {\n        filters.text === undefined ? setSearchText('') : setSearchText(filters.text);\n    }, [filters.text]);\n\n    // Debounced function, sets text filter after specified time (800ms)\n    useEffect(() => {\n        if (!filterBuilding) {\n            const filter = { ...filters };\n            const text = searchText.length ? { text: searchText } : {};\n            delete filter.text;\n            setFilters({ ...filter, ...text });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters };\n        delete filter[param];\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        values.length > 0 ? setFilters({ ...filters, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const actions = [\n        '', {\n            label: intl.formatMessage(impacting ? messages.rulesTableActionShow : messages.rulesTableActionHide),\n            onClick: () => toggleRulesWithHits(!impacting)\n        }\n    ];\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.description),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: FC.total_risk.title,\n        type: FC.total_risk.type,\n        id: FC.total_risk.urlParam,\n        value: `checkbox-${FC.total_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.total_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.total_risk.urlParam, values),\n            value: filters.total_risk,\n            items: FC.total_risk.values\n        }\n    }, {\n        label: FC.res_risk.title,\n        type: FC.res_risk.type,\n        id: FC.res_risk.urlParam,\n        value: `checkbox-${FC.res_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.res_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.res_risk.urlParam, values),\n            value: filters.res_risk,\n            items: FC.res_risk.values\n        }\n    }, {\n        label: FC.impact.title,\n        type: FC.impact.type,\n        id: FC.impact.urlParam,\n        value: `checkbox-${FC.impact.urlParam}`,\n        filterValues: {\n            key: `${FC.impact.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.impact.urlParam, values),\n            value: filters.impact,\n            items: FC.impact.values\n        }\n    }, {\n        label: FC.likelihood.title,\n        type: FC.likelihood.type,\n        id: FC.likelihood.urlParam,\n        value: `checkbox-${FC.likelihood.urlParam}`,\n        filterValues: {\n            key: `${FC.likelihood.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.likelihood.urlParam, values),\n            value: filters.likelihood,\n            items: FC.likelihood.values\n        }\n    }, {\n        label: FC.category.title,\n        type: FC.category.type,\n        id: FC.category.urlParam,\n        value: `checkbox-${FC.category.urlParam}`,\n        filterValues: {\n            key: `${FC.category.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.category.urlParam, values),\n            value: filters.category,\n            items: FC.category.values\n        }\n    }, {\n        label: FC.reports_shown.title,\n        type: FC.reports_shown.type,\n        id: FC.reports_shown.urlParam,\n        value: `radio-${FC.reports_shown.urlParam}`,\n        filterValues: {\n            key: `${FC.reports_shown.urlParam}-filter`,\n            onChange: (event, value) => toggleRulesDisabled(value),\n            value: filters.reports_shown === undefined ? 'undefined' : `${filters.reports_shown}`,\n            items: FC.reports_shown.values\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setFilters({ impacting: true, reports_shown: 'true' });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]:\n                            filters[item.urlParam].filter(value => Number(value) !== Number(item.chips[0].value))\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const afterViewSystemsFn = () => {\n        fetchRulesFn();\n    };\n\n    return <React.Fragment>\n        {viewSystemsModalOpen && <ViewHostAcks\n            handleModalToggle={(toggleModal) => setViewSystemsModalOpen(toggleModal)}\n            isModalOpen={viewSystemsModalOpen}\n            afterFn={afterViewSystemsFn}\n            rule={viewSystemsModalRule}\n        />}\n        {disableRuleOpen && <DisableRule\n            handleModalToggle={setDisableRuleOpen}\n            isModalOpen={disableRuleOpen}\n            rule={selectedRule}\n            afterFn={fetchRulesFn}\n        />}\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            exportConfig={{\n                onSelect: (event, exportType) => window.location = `${BASE_URL}/export/hits.${exportType === 'json' ? 'json' : 'csv'}/${queryString}`\n            }}\n            actionsConfig={{ actions }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {rulesFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'}\n                actionResolver={actionResolver} onCollapse={handleOnCollapse} sortBy={sortBy}\n                onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>}\n        {rulesFetchStatus === 'pending' && (<Loading />)}\n        {rulesFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.rulesTableFetchRulesError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nRulesTable.propTypes = {\n    fetchRules: PropTypes.func,\n    rulesFetchStatus: PropTypes.string,\n    rules: PropTypes.object,\n    filters: PropTypes.object,\n    addNotification: PropTypes.func,\n    setFilters: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rules: state.AdvisorStore.rules,\n    rulesFetchStatus: state.AdvisorStore.rulesFetchStatus,\n    filters: state.AdvisorStore.filters,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRules: (url) => dispatch(AppActions.fetchRules(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFilters(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(RulesTable)));\n"],"sourceRoot":""}