{"version":3,"sources":["webpack:///./src/PresentationalComponents/RulesTable/RulesTable.js"],"names":["RulesTable","rules","filters","rulesFetchStatus","setFilters","fetchRules","addNotification","history","intl","useState","title","formatMessage","messages","description","transforms","sortable","added","cellWidth","totalRisk","systems","size","ansible","dataLabel","cols","rows","setRows","sortBy","setSortBy","sort","setSort","impacting","setImpacting","limit","setLimit","offset","setOffset","filterBuilding","setFilterBuilding","queryString","setQueryString","searchText","setSearchText","debouncedSearchText","debounce","results","meta","count","filterFetchBuilder","Object","assign","entries","map","filter","Array","isArray","join","onSort","useCallback","_event","index","direction","orderParam","1","2","3","4","5","onSetPage","pageNumber","hideReports","rowId","a","rule","reports_shown","API","post","BASE_URL","rule_id","variant","dismissable","rulesTableHideReportsErrorDisabled","rulesTableHideReportsErrorEnabled","rulesTableHideReportsErrorBody","ruleName","fetchAction","useEffect","location","search","searchParams","URLSearchParams","paramsObject","from","reduce","acc","key","value","JSON","parse","split","undefined","keys","replace","length","data","cells","icon","CheckIcon","iconClass","rulesTableNoRuleHitsTitle","text","rulesTableNoRuleHitsEnabledRulesBody","rulesTableNoRuleHitsAnyRulesBody","style","paddingTop","onClick","rulesTableNoRuleHitsAddDisabledButton","props","colSpan","flatMap","isOpen","to","isRead","disabled","moment","publish_date","fromNow","className","verticalAlign","label","labelHidden","severity","total_risk","impacted_systems_count","toLocaleString","nA","playbook_count","no","parent","fullWidth","asMutable","removeFilterParam","param","addFilterParam","values","actions","rulesTableActionShow","rulesTableActionHide","toggleRulesWithHits","filterConfigItems","filterValues","onChange","event","FC","type","id","urlParam","items","res_risk","impact","likelihood","category","activeFiltersConfig","localFilters","topic","prunedFilters","item","chips","name","find","String","buildFilterChips","onDelete","itemsToRemove","isAll","newFilter","Number","Fragment","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","exportConfig","onSelect","exportType","window","actionsConfig","filterConfig","aria-label","actionResolver","rowData","rowIndex","disableRule","enableRule","onCollapse","collapseRows","message","rulesTableFetchRulesError","widgetId","PaginationVariant","bottom","propTypes","PropTypes","func","string","object","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","url","AppActions"],"mappings":"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","file":"js/RulesTAble.js","sourcesContent":["/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Battery, Main, TableToolbar, PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport PropTypes from 'prop-types';\nimport { AnsibeTowerIcon, CheckCircleIcon, CheckIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Badge, Button, Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { cellWidth, sortable, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { injectIntl } from 'react-intl';\n\nimport * as AppActions from '../../AppActions';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport Failed from '../../PresentationalComponents/Loading/Failed';\nimport API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport MessageState from '../MessageState/MessageState';\nimport RuleDetails from '../RuleDetails/RuleDetails';\nimport messages from '../../Messages';\nimport { FILTER_CATEGORIES as FC } from '../../AppConstants';\nimport debounce from '../../Utilities/Debounce';\n\nconst RulesTable = ({ rules, filters, rulesFetchStatus, setFilters, fetchRules, addNotification, history, intl }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.description), transforms: [sortable] },\n        { title: intl.formatMessage(messages.added), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.totalRisk), transforms: [sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [sortable] },\n        {\n            title: <><AnsibeTowerIcon size='md' /> {intl.formatMessage(messages.ansible)}</>,\n            transforms: [sortable],\n            dataLabel: intl.formatMessage(messages.ansible)\n        }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [sort, setSort] = useState('-publish_date');\n    const [impacting, setImpacting] = useState(filters.impacting);\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const [queryString, setQueryString] = useState('');\n    const [searchText, setSearchText] = useState('');\n    const debouncedSearchText = debounce(searchText, 800);\n    const results = rules.meta ? rules.meta.count : 0;\n\n    // transforms array of strings -> comma seperated strings, required by advisor api\n    const filterFetchBuilder = (filters) => (Object.assign({},\n        ...Object.entries(filters).map((filter) => (Array.isArray(filter[1]) ? { [filter[0]]: filter[1].join() }\n            : { [filter[0]]: filter[1] })))\n    );\n\n    const onSort = useCallback((_event, index, direction) => {\n        const attrIndex = {\n            1: 'description',\n            2: 'publish_date',\n            3: 'total_risk',\n            4: 'impacted_count',\n            5: 'playbook_count'\n        };\n        const orderParam = `${direction === 'asc' ? '' : '-'}${attrIndex[index]}`;\n        setSortBy({ index, direction });\n        setSort(orderParam);\n        setOffset(0);\n    }, [setSort, setSortBy, setOffset]);\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    const toggleRulesWithHits = (impacting) => {\n        setFilters({ ...filters, impacting });\n        setImpacting(impacting);\n        setOffset(0);\n    };\n\n    const toggleRulesDisabled = (param) => {\n        let reports_shown = param === 'undefined' ? undefined : param;\n        setFilters({ ...filters, reports_shown });\n        setOffset(0);\n    };\n\n    const handleOnCollapse = (event, rowId, isOpen) => {\n        const collapseRows = [...rows];\n        collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n        setRows(collapseRows);\n    };\n\n    const hideReports = async (rowId) => {\n        const rule = rows[rowId].rule;\n        try {\n            if (rule.reports_shown) {\n                await API.post(`${BASE_URL}/ack/`, { rule_id: rule.rule_id });\n\n            } else {\n                await API.delete(`${BASE_URL}/ack/${rule.rule_id}/`);\n            }\n\n            fetchRules({\n                ...filterFetchBuilder(filters),\n                offset: 0,\n                limit,\n                impacting,\n                sort\n            });\n        } catch (error) {\n            addNotification({\n                variant: 'danger',\n                dismissable: true,\n                title: rule.reports_shown ? intl.formatMessage(messages.rulesTableHideReportsErrorDisabled)\n                    : intl.formatMessage(messages.rulesTableHideReportsErrorEnabled),\n                description: intl.formatMessage(messages.rulesTableHideReportsErrorBody, { ruleName: rule.description })\n            });\n        }\n    };\n\n    const actionResolver = (rowData, { rowIndex }) => {\n        const rule = rows[rowIndex].rule ? rows[rowIndex].rule : null;\n        if (rowIndex % 2 !== 0 || !rule) {\n            return null;\n        }\n\n        return rule && rule.reports_shown ?\n            [{\n                title: intl.formatMessage(messages.disableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }]\n            : [{\n                title: intl.formatMessage(messages.enableRule),\n                onClick: (event, rowId) => hideReports(rowId)\n            }];\n    };\n\n    const fetchAction = useCallback(() => {\n        setOffset(0);\n    }, []);\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        delete localFilters.text;\n        delete localFilters.impacting;\n        delete localFilters.reports_shown;\n        delete localFilters.topic;\n        const prunedFilters = Object.entries(localFilters);\n\n        return prunedFilters.length > 0 ? prunedFilters.map(item => {\n            const category = FC[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value =>\n                ({ name: category.values.find(values => values.value === String(value)).label, value }))\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: category.title, chips, urlParam: category.urlParam };\n        })\n            : [];\n    };\n\n    // Builds table filters from url params\n    useEffect(() => {\n        if (history.location.search) {\n            const searchParams = new URLSearchParams(history.location.search);\n            const paramsObject = Array.from(searchParams).reduce((acc, [key, value]) => ({\n                ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n            }), {});\n            paramsObject.reports_shown = paramsObject.reports_shown === undefined || paramsObject.reports_shown[0] === 'undefined' ? undefined\n                : paramsObject.reports_shown;\n            setImpacting(paramsObject.impacting);\n            setFilters({ ...paramsObject });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // Builds and pushes url params from table filters\n    useEffect(() => {\n        const queryString = Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&');\n        setQueryString(`?${queryString}`);\n        history.replace({\n            search: `?${queryString}`\n        });\n    }, [filters, history]);\n\n    useEffect(() => {\n        if (!filterBuilding) {\n            fetchRules({\n                ...filterFetchBuilder(filters),\n                offset,\n                limit,\n                sort\n            });\n        }\n    }, [fetchRules, filterBuilding, filters, limit, offset, sort]);\n\n    useEffect(() => {\n        if (!rows.length) {\n            onSort(null, 2, 'desc');\n        }\n    }, [onSort, rows.length]);\n\n    useEffect(() => {\n        if (rules.data) {\n            if (rules.data.length === 0) {\n                setRows([{\n                    cells: [{\n                        title: (\n                            <MessageState icon={CheckIcon} iconClass='ansibleCheck' size='sm'\n                                title={intl.formatMessage(messages.rulesTableNoRuleHitsTitle)} text={filters.reports_shown ?\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsEnabledRulesBody) :\n                                    intl.formatMessage(messages.rulesTableNoRuleHitsAnyRulesBody)}>\n                                {filters.reports_shown && <Button variant=\"link\" style={{ paddingTop: 24 }} onClick={() => {\n                                    setFilters({ ...filters, reports_shown: undefined });\n                                    fetchAction();\n                                }}>\n                                    {intl.formatMessage(messages.rulesTableNoRuleHitsAddDisabledButton)}\n                                </Button>}\n                            </MessageState>),\n                        props: { colSpan: 5 }\n                    }]\n                }]\n                );\n            } else {\n                const rows = rules.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    rule: value,\n                    cells: [{\n                        title: value.reports_shown ?\n                            <Link key={key} to={`/rules/${value.rule_id}`}>\n                                {value.description}\n                            </Link>\n                            : <span key={key}> <Badge isRead>{intl.formatMessage(messages.disabled)}</Badge> {value.description}</span>\n                    }, {\n                        title: <div key={key}>\n                            {moment(value.publish_date).fromNow()}\n                        </div>\n                    }, {\n                        title: <div className=\"pf-m-center\" key={key} style={{ verticalAlign: 'top' }}>\n                            <Battery\n                                label={intl.formatMessage(messages.totalRisk)}\n                                labelHidden\n                                severity={value.total_risk}\n                            />\n                        </div>\n                    }, {\n                        title: <div key={key}> {value.reports_shown ?\n                            `${value.impacted_systems_count.toLocaleString()}`\n                            : intl.formatMessage(messages.nA)}</div>\n                    }, {\n                        title: <div className=\"pf-m-center \" key={key}>\n                            {value.playbook_count ? <CheckCircleIcon className='ansibleCheck' /> : intl.formatMessage(messages.no)}\n                        </div>\n                    }]\n                }, {\n                    parent: key * 2,\n                    fullWidth: true,\n                    cells: [{ title: <Main className='pf-m-light'> <RuleDetails rule={value} /></Main> }]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchAction, filters, rules, setFilters]);\n\n    useEffect(() => {\n        filters.text === undefined ? setSearchText('') : setSearchText(filters.text);\n    }, [filters.text]);\n\n    // Debounced function, sets text filter after specified time (800ms)\n    useEffect(() => {\n        if (!filterBuilding) {\n            const filter = { ...filters };\n            const text = searchText.length ? { text: searchText } : {};\n            delete filter.text;\n            setFilters({ ...filter, ...text });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters };\n        delete filter[param];\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        values.length > 0 ? setFilters({ ...filters, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const actions = [\n        '', {\n            label: intl.formatMessage(impacting ? messages.rulesTableActionShow : messages.rulesTableActionHide),\n            onClick: () => toggleRulesWithHits(!impacting)\n        }\n    ];\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.description),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: FC.total_risk.title,\n        type: FC.total_risk.type,\n        id: FC.total_risk.urlParam,\n        value: `checkbox-${FC.total_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.total_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.total_risk.urlParam, values),\n            value: filters.total_risk,\n            items: FC.total_risk.values\n        }\n    }, {\n        label: FC.res_risk.title,\n        type: FC.res_risk.type,\n        id: FC.res_risk.urlParam,\n        value: `checkbox-${FC.res_risk.urlParam}`,\n        filterValues: {\n            key: `${FC.res_risk.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.res_risk.urlParam, values),\n            value: filters.res_risk,\n            items: FC.res_risk.values\n        }\n    }, {\n        label: FC.impact.title,\n        type: FC.impact.type,\n        id: FC.impact.urlParam,\n        value: `checkbox-${FC.impact.urlParam}`,\n        filterValues: {\n            key: `${FC.impact.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.impact.urlParam, values),\n            value: filters.impact,\n            items: FC.impact.values\n        }\n    }, {\n        label: FC.likelihood.title,\n        type: FC.likelihood.type,\n        id: FC.likelihood.urlParam,\n        value: `checkbox-${FC.likelihood.urlParam}`,\n        filterValues: {\n            key: `${FC.likelihood.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.likelihood.urlParam, values),\n            value: filters.likelihood,\n            items: FC.likelihood.values\n        }\n    }, {\n        label: FC.category.title,\n        type: FC.category.type,\n        id: FC.category.urlParam,\n        value: `checkbox-${FC.category.urlParam}`,\n        filterValues: {\n            key: `${FC.category.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(FC.category.urlParam, values),\n            value: filters.category,\n            items: FC.category.values\n        }\n    }, {\n        label: FC.reports_shown.title,\n        type: FC.reports_shown.type,\n        id: FC.reports_shown.urlParam,\n        value: `radio-${FC.reports_shown.urlParam}`,\n        filterValues: {\n            key: `${FC.reports_shown.urlParam}-filter`,\n            onChange: (event, value) => toggleRulesDisabled(value),\n            value: filters.reports_shown === undefined ? 'undefined' : `${filters.reports_shown}`,\n            items: FC.reports_shown.values\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setFilters({ impacting: true, reports_shown: 'true' });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]:\n                            filters[item.urlParam].filter(value => Number(value) !== Number(item.chips[0].value))\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            exportConfig={{\n                onSelect: (event, exportType) => window.location = `${BASE_URL}/export/hits.${exportType === 'json' ? 'json' : 'csv'}/${queryString}`\n            }}\n            actionsConfig={{ actions }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {rulesFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'}\n                actionResolver={actionResolver} onCollapse={handleOnCollapse} sortBy={sortBy}\n                onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>}\n        {rulesFetchStatus === 'pending' && (<Loading />)}\n        {rulesFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.rulesTableFetchRulesError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nRulesTable.propTypes = {\n    fetchRules: PropTypes.func,\n    rulesFetchStatus: PropTypes.string,\n    rules: PropTypes.object,\n    filters: PropTypes.object,\n    addNotification: PropTypes.func,\n    setFilters: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rules: state.AdvisorStore.rules,\n    rulesFetchStatus: state.AdvisorStore.rulesFetchStatus,\n    filters: state.AdvisorStore.filters,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRules: (url) => dispatch(AppActions.fetchRules(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFilters(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(RulesTable)));\n"],"sourceRoot":""}