{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/SmartComponents/Common/ClassicRedirect.js"],"names":["Loading","ClassicRedirect","useState","fetchStatus","setFetchStatus","redirect","setRedirect","intl","useIntl","dispatch","useDispatch","getData","pathname","patharray","split","start","some","val","Error","formatMessage","messages","invalidPathname","useEffect","a","window","location","classicId","redirectBase","Api","get","inventoryId","data","results","id","addNotification","variant","dismissable","title","error","description","Fragment","to","icon","TimesCircleIcon","inventoryIdNotFound"],"mappings":"2FAAA,+CAWeA,IAPC,kBAAM,oCAClB,kBAAC,OAAD,KACI,kBAAC,WAAD,KACI,kBAAC,OAAD,W,8MCgDGC,UA3CS,WAAM,MACYC,mBAAS,WADrB,WACnBC,EADmB,KACNC,EADM,OAEMF,qBAFN,WAEnBG,EAFmB,KAETC,EAFS,KAGpBC,EAAOC,cACPC,EAAWC,wBAEXC,EAAU,SAACC,GACb,IAAMC,EAAYD,EAASE,MAAM,KAC3BC,EAAQF,EAAUG,MAAK,SAAAC,GAAG,MAAY,SAARA,KAAkB,EAAI,EAC1D,OAAQJ,aAAR,EAAQA,EAAY,IAChB,IAAK,UACD,MAAO,CAACA,aAAD,EAACA,EAAYE,GAAb,YACX,IAAK,kBACD,MAAO,CAACF,aAAD,EAACA,EAAYE,EAAQ,GAArB,2BAA6CF,aAA7C,EAA6CA,EAAYE,KACpE,QACI,MAAM,IAAIG,MAAMX,EAAKY,cAAcC,IAASC,oBAoBxD,OAhBAC,qBAAU,WACN,cAAC,oCAAAC,EAAA,wEAEyCZ,EAAQa,OAAOC,SAASb,UAFjE,WAEcc,EAFd,KAEyBC,EAFzB,cAGkCC,IAAIC,IAAJ,8CAA+CH,IAHjF,OAGaI,EAHb,OAG+FC,KAAKC,QAAQ,GAAGC,GACxG3B,EAAY,GAAD,OAAIqB,EAAJ,YAAoBG,IAC/B1B,EAAe,aALtB,gDAOOK,EAASyB,0BAAgB,CACrBC,QAAS,SAAUC,aAAa,EAAMC,MAAO9B,EAAKY,cAAcC,IAASkB,OAAQC,YAAa,GAAF,gBAChGnC,EAAe,YATtB,wDAAD,KAaD,CAACE,EAAaF,EAAgBG,EAAME,IAEhC,kBAAC,IAAM+B,SAAP,KACc,YAAhBrC,GAA6B,kBAAC,IAAD,MACb,cAAhBA,GAA+B,kBAAC,IAAD,CAAUsC,GAAIpC,IAC7B,aAAhBF,GAA8B,kBAAC,IAAD,CAC3BuC,KAAMC,IAAiBN,MAAO9B,EAAKY,cAAcC,IAASwB","file":"js/ClassicRedirect.9b9966acd02cb5abb073.js","sourcesContent":["import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => <>\n    <Card>\n        <CardBody>\n            <List />\n        </CardBody>\n    </Card></>;\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\n\nimport Api from '../../Utilities/Api';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { Redirect } from 'react-router-dom';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nconst ClassicRedirect = () => {\n    const [fetchStatus, setFetchStatus] = useState('pending');\n    const [redirect, setRedirect] = useState();\n    const intl = useIntl();\n    const dispatch = useDispatch();\n\n    const getData = (pathname) => {\n        const patharray = pathname.split('/');\n        const start = patharray.some(val => val === 'beta') ? 6 : 5;\n        switch (patharray?.[3]) {\n            case 'systems':\n                return [patharray?.[start], `/systems`];\n            case 'recommendations':\n                return [patharray?.[start + 1], `/recommendations/${patharray?.[start]}`];\n            default:\n                throw new Error(intl.formatMessage(messages.invalidPathname));\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const [classicId, redirectBase] = getData(window.location.pathname);\n                const inventoryId = (await Api.get(`/api/inventory/v1/hosts?insights_id=${classicId}`)).data.results[0].id;\n                setRedirect(`${redirectBase}/${inventoryId}`);\n                setFetchStatus('fulfilled');\n            } catch (error) {\n                dispatch(addNotification({\n                    variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${error}` }));\n                setFetchStatus('rejected');\n            }\n        })();\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [setRedirect, setFetchStatus, intl, dispatch]);\n\n    return <React.Fragment>\n        {fetchStatus === 'pending' && <Loading/>}\n        {fetchStatus === 'fulfilled' && <Redirect to={redirect}/>}\n        {fetchStatus === 'rejected' && <MessageState\n            icon={TimesCircleIcon} title={intl.formatMessage(messages.inventoryIdNotFound)}/>}\n    </React.Fragment>;\n};\n\nexport default ClassicRedirect;\n"],"sourceRoot":""}