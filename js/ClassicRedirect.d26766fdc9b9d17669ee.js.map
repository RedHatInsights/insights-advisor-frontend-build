{"version":3,"sources":["webpack:///./src/SmartComponents/Recs/ClassicRedirect.js"],"names":["ClassicRedirect","useState","fetchStatus","setFetchStatus","inventoryId","setInventoryId","intl","useIntl","dispatch","useDispatch","pathname","window","location","split","id","classicId","useEffect","a","Api","get","data","results","addNotification","variant","dismissable","title","formatMessage","messages","error","description","Fragment","to","icon","TimesCircleIcon","inventoryIdNotFound"],"mappings":"sQA0CeA,UA9BS,WAAM,MACYC,mBAAS,WADrB,WACnBC,EADmB,KACNC,EADM,OAEYF,qBAFZ,WAEnBG,EAFmB,KAENC,EAFM,KAGpBC,EAAOC,cACPC,EAAWC,wBACXC,EAAWC,OAAOC,SAASF,SAASG,MAAM,KAC1CC,EAAKJ,aAAH,EAAGA,EAAW,GAChBK,EAAYL,aAAH,EAAGA,EAAW,GAe7B,OAbAM,qBAAU,WACN,cAAC,sBAAAC,EAAA,2EAEOZ,EAFP,SAE6Ba,IAAIC,IAAJ,8CAA+CJ,IAF5E,mBAE0FK,KAAKC,QAAQ,GAAGP,IAF1G,cAGOX,EAAe,aAHtB,gDAKOK,EAASc,0BAAgB,CACrBC,QAAS,SAAUC,aAAa,EAAMC,MAAOnB,EAAKoB,cAAcC,IAASC,OAAQC,YAAa,GAAF,gBAChG1B,EAAe,YAPtB,wDAAD,KAUD,CAACE,EAAgBF,EAAgBY,EAAWT,EAAME,IAE9C,kBAAC,IAAMsB,SAAP,KACc,YAAhB5B,GAA6B,kBAAC,IAAD,MACb,cAAhBA,GAA+B,kBAAC,IAAD,CAAU6B,GAAE,2BAAsBjB,EAAtB,YAA4BV,EAA5B,OAC3B,aAAhBF,GAA8B,kBAAC,IAAD,CAC3B8B,KAAMC,IAAiBR,MAAOnB,EAAKoB,cAAcC,IAASO","file":"js/ClassicRedirect.d26766fdc9b9d17669ee.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Api from '../../Utilities/Api';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { Redirect } from 'react-router-dom';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport messages from '../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nconst ClassicRedirect = () => {\n    const [fetchStatus, setFetchStatus] = useState('pending');\n    const [inventoryId, setInventoryId] = useState();\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const pathname = window.location.pathname.split('/');\n    const id = pathname?.[5];\n    const classicId = pathname?.[6];\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setInventoryId((await Api.get(`/api/inventory/v1/hosts?insights_id=${classicId}`)).data.results[0].id);\n                setFetchStatus('fulfilled');\n            } catch (error) {\n                dispatch(addNotification({\n                    variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${error}` }));\n                setFetchStatus('rejected');\n            }\n        })();\n    }, [setInventoryId, setFetchStatus, classicId, intl, dispatch]);\n\n    return <React.Fragment>\n        {fetchStatus === 'pending' && <Loading/>}\n        {fetchStatus === 'fulfilled' && <Redirect to={`/recommendations/${id}/${inventoryId}/`}/>}\n        {fetchStatus === 'rejected' && <MessageState\n            icon={TimesCircleIcon} title={intl.formatMessage(messages.inventoryIdNotFound)}/>}\n    </React.Fragment>;\n};\n\nexport default ClassicRedirect;\n"],"sourceRoot":""}