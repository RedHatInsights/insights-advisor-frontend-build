{"version":3,"sources":["webpack:///./node_modules/lodash/intersection.js","webpack:///./node_modules/lodash/_baseIntersection.js","webpack:///./node_modules/lodash/_castArrayLikeObject.js"],"names":["arrayMap","baseIntersection","baseRest","castArrayLikeObject","intersection","arrays","mapped","length","module","exports","SetCache","arrayIncludes","arrayIncludesWith","baseUnary","cacheHas","nativeMin","Math","min","iteratee","comparator","includes","othLength","othIndex","caches","Array","maxLength","Infinity","result","array","undefined","index","seen","outer","value","computed","cache","push","isArrayLikeObject"],"mappings":"8EAAA,IAAIA,EAAW,EAAQ,MACnBC,EAAmB,EAAQ,MAC3BC,EAAW,EAAQ,KACnBC,EAAsB,EAAQ,MAmB9BC,EAAeF,GAAS,SAASG,GACnC,IAAIC,EAASN,EAASK,EAAQF,GAC9B,OAAQG,EAAOC,QAAUD,EAAO,KAAOD,EAAO,GAC1CJ,EAAiBK,GACjB,MAGNE,EAAOC,QAAUL,G,qBC7BjB,IAAIM,EAAW,EAAQ,KACnBC,EAAgB,EAAQ,MACxBC,EAAoB,EAAQ,MAC5BZ,EAAW,EAAQ,MACnBa,EAAY,EAAQ,MACpBC,EAAW,EAAQ,KAGnBC,EAAYC,KAAKC,IAiErBT,EAAOC,QArDP,SAA0BJ,EAAQa,EAAUC,GAS1C,IARA,IAAIC,EAAWD,EAAaP,EAAoBD,EAC5CJ,EAASF,EAAO,GAAGE,OACnBc,EAAYhB,EAAOE,OACnBe,EAAWD,EACXE,EAASC,MAAMH,GACfI,EAAYC,IACZC,EAAS,GAENL,KAAY,CACjB,IAAIM,EAAQvB,EAAOiB,GACfA,GAAYJ,IACdU,EAAQ5B,EAAS4B,EAAOf,EAAUK,KAEpCO,EAAYV,EAAUa,EAAMrB,OAAQkB,GACpCF,EAAOD,IAAaH,IAAeD,GAAaX,GAAU,KAAOqB,EAAMrB,QAAU,KAC7E,IAAIG,EAASY,GAAYM,QACzBC,EAEND,EAAQvB,EAAO,GAEf,IAAIyB,GAAS,EACTC,EAAOR,EAAO,GAElBS,EACA,OAASF,EAAQvB,GAAUoB,EAAOpB,OAASkB,GAAW,CACpD,IAAIQ,EAAQL,EAAME,GACdI,EAAWhB,EAAWA,EAASe,GAASA,EAG5C,GADAA,EAASd,GAAwB,IAAVc,EAAeA,EAAQ,IACxCF,EACEjB,EAASiB,EAAMG,GACfd,EAASO,EAAQO,EAAUf,IAC5B,CAEL,IADAG,EAAWD,IACFC,GAAU,CACjB,IAAIa,EAAQZ,EAAOD,GACnB,KAAMa,EACErB,EAASqB,EAAOD,GAChBd,EAASf,EAAOiB,GAAWY,EAAUf,IAE3C,SAASa,EAGTD,GACFA,EAAKK,KAAKF,GAEZP,EAAOS,KAAKH,IAGhB,OAAON,I,qBCtET,IAAIU,EAAoB,EAAQ,KAahC7B,EAAOC,QAJP,SAA6BwB,GAC3B,OAAOI,EAAkBJ,GAASA,EAAQ","file":"js/vendors~Details~RulesTable~TagsToolbar~TopicDetails.a528d43d7f5a58079dd9.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIntersection = require('./_baseIntersection'),\n    baseRest = require('./_baseRest'),\n    castArrayLikeObject = require('./_castArrayLikeObject');\n\n/**\n * Creates an array of unique values that are included in all given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersection([2, 1], [2, 3]);\n * // => [2]\n */\nvar intersection = baseRest(function(arrays) {\n  var mapped = arrayMap(arrays, castArrayLikeObject);\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped)\n    : [];\n});\n\nmodule.exports = intersection;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n","var isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n */\nfunction castArrayLikeObject(value) {\n  return isArrayLikeObject(value) ? value : [];\n}\n\nmodule.exports = castArrayLikeObject;\n"],"sourceRoot":""}