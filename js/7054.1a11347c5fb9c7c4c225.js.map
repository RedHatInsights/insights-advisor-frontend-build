{"version":3,"sources":["webpack://advisor-frontend/./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js"],"names":["Breadcrumbs","current","fetchRule","match","ruleFetchStatus","rule","intl","useState","items","setItems","ruleDescriptionLoaded","setRuleDescription","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","push","title","formatMessage","messages","navigate","undefined","params","id","inventoryId","description","useEffect","rule_id","length","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","AppActions"],"mappings":"yhBAcA,IAAMA,EAAc,SAAC,GAA+D,IAA7DC,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAAW,GACtDC,cAAS,IAD6C,WACzEC,EADyE,KAClEC,EADkE,QAE5BF,eAAS,GAFmB,WAEzEG,EAFyE,KAElDC,EAFkD,KAG1EC,GAAmBC,kBAAY,WACjC,IAAMC,EAAS,GACTC,EAAWZ,EAAMa,IAAIC,MAAM,KAGjCH,EAAOI,KAAK,CAAEC,MAAO,GAAF,OAAKb,EAAKc,cAAcC,oBAAxB,YAAoDN,EAAS,IAAMO,SAAU,IAAF,OAAMP,EAAS,WAGrFQ,IAApBpB,EAAMqB,OAAOC,SAAiDF,IAA7BpB,EAAMqB,OAAOE,aAC9CZ,EAAOI,KAAK,CACRC,MAAOd,EAAKsB,YACZL,SAAU,IAAF,OAAMnB,EAAMa,IAAIC,MAAM,KAAK,GAA3B,YAAiCd,EAAMqB,OAAOC,MAI9DhB,EAASK,KACV,CAACR,EAAMH,EAAMqB,OAAOC,GAAItB,EAAMqB,OAAOE,YAAavB,EAAMa,IAAKX,EAAKsB,cAgBrE,OAdAC,gBAAU,WACN,IAAMb,EAAWZ,EAAMa,IAAIC,MAAM,UACJM,IAA7BpB,EAAMqB,OAAOE,aAA6C,YAAhBX,EAAS,GAC/Cb,EAAU,CAAE2B,QAAS1B,EAAMqB,OAAOC,KAChCb,MACP,CAACA,EAAkBV,EAAWC,EAAMqB,OAAOC,GAAItB,EAAMqB,OAAOE,YAAavB,EAAMa,OAElFY,gBAAU,WACkB,cAApBxB,GAAoCM,IACpCC,GAAmB,GACnBC,OAEL,CAACA,EAAkBR,EAAiBM,IAGnC,kBAAC,aAAD,MAC0B,cAApBN,GAAmCI,EAAMsB,OAAS,IAChD,kBAAC,IAAD,CAAYC,OAAO,UACdvB,EAAMwB,KAAI,SAACC,EAASC,GAAV,OACP,kBAAC,IAAD,CAAgBA,IAAKA,GACjB,kBAAC,EAAAC,KAAD,CAAMC,GAAIH,EAAQX,UAAWW,EAAQd,WAG7C,kBAAC,IAAD,CAAgBkB,UAAQ,GAAEpC,IAGb,YAApBG,GAAiCE,EAAKc,cAAcC,eAKjErB,EAAYsC,UAAY,CACpBrC,QAASsC,WACTrC,UAAWqC,SACXpC,MAAOoC,WACPlC,KAAMkC,WACNnC,gBAAiBmC,WACjBjC,KAAMiC,SAaV,SAAeC,QAAWC,KAAaC,cAVf,SAACC,EAAOC,GAAR,O,iWAAA,EACpBvC,KAAMsC,EAAME,aAAaxC,KACzBD,gBAAiBuC,EAAME,aAAazC,iBACjCwC,MAGoB,SAAAE,GAAQ,MAAK,CACpC5C,UAAW,SAACc,GAAD,OAAS8B,EAASC,KAAqB/B,QAGf0B,CAGrC1C","file":"js/7054.1a11347c5fb9c7c4c225.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as AppActions from '../../AppActions';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst Breadcrumbs = ({ current, fetchRule, match, ruleFetchStatus, rule, intl }) => {\n    const [items, setItems] = useState([]);\n    const [ruleDescriptionLoaded, setRuleDescription] = useState(false);\n    const buildBreadcrumbs = useCallback(() => {\n        const crumbs = [];\n        const splitUrl = match.url.split('/');\n\n        // add base\n        crumbs.push({ title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`, navigate: `/${splitUrl[1]}` });\n\n        // if applicable, add :id breadcrumb\n        if (match.params.id !== undefined && match.params.inventoryId !== undefined) {\n            crumbs.push({\n                title: rule.description,\n                navigate: `/${match.url.split('/')[1]}/${match.params.id}`\n            });\n        }\n\n        setItems(crumbs);\n    }, [intl, match.params.id, match.params.inventoryId, match.url, rule.description]);\n\n    useEffect(() => {\n        const splitUrl = match.url.split('/');\n        match.params.inventoryId !== undefined && splitUrl[1] !== 'systems' ?\n            fetchRule({ rule_id: match.params.id })\n            : buildBreadcrumbs();\n    }, [buildBreadcrumbs, fetchRule, match.params.id, match.params.inventoryId, match.url]);\n\n    useEffect(() => {\n        if (ruleFetchStatus === 'fulfilled' && !ruleDescriptionLoaded) {\n            setRuleDescription(true);\n            buildBreadcrumbs();\n        }\n    }, [buildBreadcrumbs, ruleFetchStatus, ruleDescriptionLoaded]);\n\n    return (\n        <React.Fragment>\n            {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n                <Breadcrumb ouiaId=\"detail\">\n                    {items.map((oneLink, key) => (\n                        <BreadcrumbItem key={key}>\n                            <Link to={oneLink.navigate}>{oneLink.title}</Link>\n                        </BreadcrumbItem>\n                    ))}\n                    <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n                </Breadcrumb>\n            )}\n            {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n        </React.Fragment>\n    );\n};\n\nBreadcrumbs.propTypes = {\n    current: PropTypes.string,\n    fetchRule: PropTypes.func,\n    match: PropTypes.object,\n    rule: PropTypes.object,\n    ruleFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rule: state.AdvisorStore.rule,\n    ruleFetchStatus: state.AdvisorStore.ruleFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRule: (url) => dispatch(AppActions.fetchRule(url))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Breadcrumbs)));\n"],"sourceRoot":""}