{"version":3,"sources":["webpack:///./src/Utilities/Debounce.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Loading/Failed.js"],"names":["Debounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","downloadHelper","format","params","a","API","get","BASE_URL","payload","data","JSON","stringify","downloadFile","SystemsTable","localFilters","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","selectedTags","inventory","useRef","InventoryTable","setInventory","store","useStore","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","filterBuilding","setFilterBuilding","sortIndices","0","1","2","3","4","5","6","fetchSystemsFn","useCallback","options","length","tags","join","filterFetchBuilder","removeFilterParam","param","filter","offset","undefined","hits","filterConfigItems","label","formatMessage","messages","name","filterValues","key","onChange","event","SFC","title","type","id","urlParam","values","includes","shift","addFilterParam","items","activeFiltersConfig","sort","limit","pruneFilters","onDelete","itemsToRemove","isAll","map","item","newFilter","Array","isArray","String","chips","rows","transforms","pfReactTable","numberRuleHits","critical","important","moderate","low","lastSeen","insights","loadInventory","react","React","reactRouterDom","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","copyFilters","window","location","search","paramsObject","paramParser","Number","urlBuilder","ref","system","system_uuid","sortBy","Object","entries","find","index","direction","onSort","orderParam","hasCheckbox","page","total","isLoaded","perPage","onRefresh","per_page","filterConfig","exportConfig","exportCsv","exportJson","_e","fileType","downloadReport","message","systemTableFetchError","propTypes","PropTypes","func","string","object","addNotification","any","array","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","url","AppActions","URL","queryString","keys","URLSearchParams","set","history","replaceState","origin","pathname","toString","assign","filterName","filterValue","searchParams","from","reduce","acc","parse","capitalize","toUpperCase","substring","filterCategories","prunedFilters","category","selectedCategoryValue","text","Failed","className","size"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst Debounce = (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {setDebouncedValue(value);}, delay);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [delay, value]);\n\n    return debouncedValue;\n};\n\nexport default Debounce;\n","import API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nconst fileName = (exportTable) => {\n    const defaultParams = {\n        date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n    };\n\n    return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (exportTable, format, params) => {\n    try {\n        const payload = await API.get(`${BASE_URL}/export/${exportTable}.${format === 'json' ? 'json' : 'csv'}${params}`);\n        let data = format === 'json' ? JSON.stringify(payload.data) : payload.data;\n        downloadFile(data, fileName(exportTable), format);\n    } catch (error) {\n        throw `${error}`;\n    }\n};\n\nexport default downloadHelper;\n","/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { filterFetchBuilder, paramParser, pruneFilters, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport downloadReport from '../Common/DownloadHelper';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, selectedTags }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, 800);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'critical_hits',\n        3: 'important_hits',\n        4: 'moderate_hits',\n        5: 'low_hits',\n        6: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        const options = selectedTags.length && ({ tags: selectedTags.join() });\n        fetchSystems({ ...filterFetchBuilder(filters), ...options });\n\n    }, [fetchSystems, filters, selectedTags]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters, offset: 0 };\n        param === 'text' && setSearchText('');\n        delete filter[param];\n        param === 'hits' && filter.hits === undefined && (filter.hits = ['yes']);\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        // remove 'yes' from the hits filter if the user chooses any other filters (its always the first item)\n        param === 'hits' && values.length > 1 && values.includes('yes') && values.shift();\n        values.length > 0 ? setFilters({ ...filters, offset: 0, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: SFC.hits.title,\n        type: SFC.hits.type,\n        id: SFC.hits.urlParam,\n        value: `checkbox-${SFC.hits.urlParam}`,\n        filterValues: {\n            key: `${SFC.hits.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(SFC.hits.urlParam, values),\n            value: filters.hits,\n            items: SFC.hits.values\n        }\n    }];\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        localFilters.hits && localFilters.hits.includes('yes') && delete localFilters.hits;\n        delete localFilters.sort;\n        delete localFilters.offset;\n        delete localFilters.limit;\n\n        return pruneFilters(localFilters, SFC);\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setSearchText('');\n                setFilters({ sort: filters.sort, limit: filters.limit, offset: filters.offset, hits: ['yes'] });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam]) ?\n                            filters[item.urlParam].filter(value => String(value) !== String(item.chips[0].value))\n                            : ''\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 6 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const rows = [{\n                title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(90)], key: 'display_name'\n            },\n            { title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'hits' },\n            { title: intl.formatMessage(messages.critical), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'critical_hits' },\n            { title: intl.formatMessage(messages.important), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'important_hits' },\n            { title: intl.formatMessage(messages.moderate), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'moderate_hits' },\n            { title: intl.formatMessage(messages.low), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'low_hits' },\n            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'updated' }];\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                react: React,\n                reactRouterDom,\n                pfReactTable\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [...rows],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        const copyFilters = { ...filters };\n        delete copyFilters.display_name;\n        setFilters({\n            ...copyFilters,\n            ...(searchText.length ? { display_name: searchText } : {}),\n            offset: 0\n        });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (window.location.search) {\n            const paramsObject = paramParser();\n            delete paramsObject.tags;\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.hits === undefined && (paramsObject.hits = ['yes']);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...filters, ...paramsObject });\n        } else if (filters.limit === undefined || filters.offset === undefined || filters.hits === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10, hits: ['yes'] });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, selectedTags);\n    }, [filters, selectedTags]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && selectedTags !== null && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n                exportConfig={{\n                    label: intl.formatMessage(messages.exportCsv),\n                    // eslint-disable-next-line no-dupe-keys\n                    label: intl.formatMessage(messages.exportJson),\n                    onSelect: (_e, fileType) => downloadReport('systems', fileType, urlBuilder(filters, selectedTags))\n                }}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.map(item => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return { name: selectedCategoryValue.text || selectedCategoryValue.label, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: capitalize(category.title), chips, urlParam: category.urlParam };\n        } else {\n            return { category: 'Description', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] };\n        }\n    })\n        : [];\n};\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';\nimport  FrownOpenIcon  from '@patternfly/react-icons/dist/js/icons/frown-open-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Failed = ({ message }) => <>\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size='lg'/>\n        </CardHeader>\n        <CardBody>\n            { message }\n        </CardBody>\n    </Card></>;\n\nexport default Failed;\n\nFailed.propTypes = {\n    message: propTypes.string\n};\n\n"],"sourceRoot":""}