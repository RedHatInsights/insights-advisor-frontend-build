{"version":3,"sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Loading/Failed.js"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","downloadHelper","format","params","a","API","get","BASE_URL","payload","data","JSON","stringify","downloadFile","SystemsTable","localFilters","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","selectedTags","inventory","useRef","useState","InventoryTable","setInventory","store","useStore","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","DEBOUNCE_DELAY","filterBuilding","setFilterBuilding","sortIndices","0","1","2","3","4","5","6","fetchSystemsFn","useCallback","options","length","tags","join","filterFetchBuilder","removeFilterParam","param","filter","offset","undefined","hits","filterConfigItems","label","formatMessage","messages","name","filterValues","key","onChange","event","value","SFC","title","type","id","urlParam","values","includes","shift","addFilterParam","items","activeFiltersConfig","sort","limit","pruneFilters","onDelete","itemsToRemove","isAll","map","item","newFilter","Array","isArray","String","chips","useEffect","rows","transforms","pfReactTable","numberRuleHits","critical","important","moderate","low","lastSeen","insights","loadInventory","react","React","reactRouterDom","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","copyFilters","window","location","search","paramsObject","paramParser","Number","urlBuilder","ref","system","system_uuid","sortBy","Object","entries","find","index","direction","onSort","orderParam","hasCheckbox","page","total","isLoaded","perPage","onRefresh","per_page","filterConfig","exportConfig","exportCsv","exportJson","_e","fileType","downloadReport","message","systemTableFetchError","propTypes","PropTypes","func","string","object","addNotification","any","array","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","url","AppActions","URL","queryString","keys","URLSearchParams","set","history","replaceState","origin","pathname","toString","assign","filterName","filterValue","searchParams","from","reduce","acc","parse","capitalize","toUpperCase","substring","filterCategories","prunedFilters","category","selectedCategoryValue","text","Failed","className","size"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nconst fileName = (exportTable) => {\n    const defaultParams = {\n        date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n    };\n\n    return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (exportTable, format, params) => {\n    try {\n        const payload = await API.get(`${BASE_URL}/export/${exportTable}.${format === 'json' ? 'json' : 'csv'}${params}`);\n        let data = format === 'json' ? JSON.stringify(payload.data) : payload.data;\n        downloadFile(data, fileName(exportTable), format);\n    } catch (error) {\n        throw `${error}`;\n    }\n};\n\nexport default downloadHelper;\n","/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport { DEBOUNCE_DELAY, SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { filterFetchBuilder, paramParser, pruneFilters, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport downloadReport from '../Common/DownloadHelper';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, selectedTags }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'critical_hits',\n        3: 'important_hits',\n        4: 'moderate_hits',\n        5: 'low_hits',\n        6: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        const options = selectedTags.length && ({ tags: selectedTags.join() });\n        fetchSystems({ ...filterFetchBuilder(filters), ...options });\n\n    }, [fetchSystems, filters, selectedTags]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters, offset: 0 };\n        param === 'text' && setSearchText('');\n        delete filter[param];\n        param === 'hits' && filter.hits === undefined && (filter.hits = ['yes']);\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        // remove 'yes' from the hits filter if the user chooses any other filters (its always the first item)\n        param === 'hits' && values.length > 1 && values.includes('yes') && values.shift();\n        values.length > 0 ? setFilters({ ...filters, offset: 0, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: SFC.hits.title,\n        type: SFC.hits.type,\n        id: SFC.hits.urlParam,\n        value: `checkbox-${SFC.hits.urlParam}`,\n        filterValues: {\n            key: `${SFC.hits.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(SFC.hits.urlParam, values),\n            value: filters.hits,\n            items: SFC.hits.values\n        }\n    }];\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        localFilters.hits && localFilters.hits.includes('yes') && delete localFilters.hits;\n        delete localFilters.sort;\n        delete localFilters.offset;\n        delete localFilters.limit;\n\n        return pruneFilters(localFilters, SFC);\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setSearchText('');\n                setFilters({ sort: filters.sort, limit: filters.limit, offset: filters.offset, hits: ['yes'] });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam]) ?\n                            filters[item.urlParam].filter(value => String(value) !== String(item.chips[0].value))\n                            : ''\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 6 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const rows = [{\n                title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(80)], key: 'display_name'\n            },\n            { title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'hits' },\n            { title: intl.formatMessage(messages.critical), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'critical_hits' },\n            { title: intl.formatMessage(messages.important), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'important_hits' },\n            { title: intl.formatMessage(messages.moderate), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'moderate_hits' },\n            { title: intl.formatMessage(messages.low), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'low_hits' },\n            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(10)], key: 'updated' }];\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                react: React,\n                reactRouterDom,\n                pfReactTable\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [...rows],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        if (!filterBuilding && systemsFetchStatus !== 'pending') {\n            const copyFilters = { ...filters };\n            delete copyFilters.display_name;\n            setFilters({\n                ...copyFilters, ...(searchText.length ? { display_name: searchText } : {}), offset: 0\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (window.location.search) {\n            const paramsObject = paramParser();\n            delete paramsObject.tags;\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.hits === undefined && (paramsObject.hits = ['yes']);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...filters, ...paramsObject });\n        } else if (filters.limit === undefined || filters.offset === undefined || filters.hits === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10, hits: ['yes'] });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, selectedTags);\n    }, [filters, selectedTags]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && selectedTags !== null && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n                exportConfig={{\n                    label: intl.formatMessage(messages.exportCsv),\n                    // eslint-disable-next-line no-dupe-keys\n                    label: intl.formatMessage(messages.exportJson),\n                    onSelect: (_e, fileType) => downloadReport('systems', fileType, urlBuilder(filters, selectedTags))\n                }}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.map(item => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return selectedCategoryValue ? { name: selectedCategoryValue.text || selectedCategoryValue.label, value } : { name: value, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: capitalize(category.title), chips, urlParam: category.urlParam };\n        } else {\n            return { category: 'Description', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] };\n        }\n    })\n        : [];\n};\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';\nimport  FrownOpenIcon  from '@patternfly/react-icons/dist/js/icons/frown-open-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Failed = ({ message }) => <>\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size='lg'/>\n        </CardHeader>\n        <CardBody>\n            { message }\n        </CardBody>\n    </Card></>;\n\nexport default Failed;\n\nFailed.propTypes = {\n    message: propTypes.string\n};\n\n"],"sourceRoot":""}