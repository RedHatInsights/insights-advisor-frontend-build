{"version":3,"sources":["webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js"],"names":["SystemsTable","systemsFetchStatus","fetchSystems","systems","intl","useState","title","formatMessage","messages","name","transforms","sortable","numberRuleHits","cellWidth","lastSeen","cols","rows","setRows","sortBy","setSortBy","sort","setSort","limit","setLimit","offset","setOffset","results","meta","count","searchText","setSearchText","debouncedSearchText","debounce","onSort","useCallback","_event","index","direction","orderParam","0","1","2","onSetPage","pageNumber","fetchAction","useEffect","length","display_name","data","flatMap","value","key","isOpen","system","cells","to","system_uuid","hits","moment","last_seen","fromNow","asMutable","icon","SearchIcon","noHitsTitle","item","toLowerCase","text","noHitsBody","props","colSpan","filterConfigItems","label","filterValues","onChange","event","activeFiltersConfig","filters","category","chips","onDelete","Fragment","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","filterConfig","items","aria-label","message","systemTableFetchError","widgetId","variant","PaginationVariant","bottom","propTypes","PropTypes","func","string","object","addNotification","history","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","url","AppActions"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import * as AppActions from '../../AppActions';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar, TableToolbar } from '@redhat-cloud-services/frontend-components';\n/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader, cellWidth, sortable } from '@patternfly/react-table';\n\nimport Failed from '../Loading/Failed';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport PropTypes from 'prop-types';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport moment from 'moment';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        { title: intl.formatMessage(messages.numberRuleHits), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.lastSeen), transforms: [sortable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [sort, setSort] = useState('-last_seen');\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState('');\n    const debouncedSearchText = debounce(searchText, 800);\n\n    const onSort = useCallback((_event, index, direction) => {\n        const attrIndex = {\n            0: 'display_name',\n            1: 'hits',\n            2: 'last_seen'\n        };\n        const orderParam = `${direction === 'asc' ? '' : '-'}${attrIndex[index]}`;\n        setSortBy({ index, direction });\n        setSort(orderParam);\n        setOffset(0);\n    }, [setSort, setSortBy, setOffset]);\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    const fetchAction = useCallback(() => {\n        setOffset(0);\n    }, []);\n\n    useEffect(() => {\n        fetchSystems(searchText.length && { display_name: searchText, sort });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        fetchSystems({\n            offset,\n            limit,\n            sort\n        });\n    }, [fetchSystems, limit, offset, sort]);\n\n    useEffect(() => {\n        !rows.length && onSort(null, 2, 'desc');\n    }, [onSort, rows.length]);\n\n    useEffect(() => {\n        if (systems.data) {\n            if (!systems.meta.count) {\n                setRows([{\n                    cells: [{\n                        title: (<MessageState icon={SearchIcon}\n                            title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.systems).toLowerCase() })}\n                            text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.systems).toLowerCase() })} />),\n                        props: { colSpan: 5 }\n                    }]\n                }]);\n            } else {\n                const rows = systems.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    system: value,\n                    cells: [\n                        {\n                            title: <Link key={key} to={`/rules/systems/${value.system_uuid}`}>\n                                {value.display_name}\n                            </Link>\n                        }, {\n                            title: <div key={key}> {value.hits}</div>\n                        }, {\n                            title: <div key={key}>\n                                {moment(value.last_seen).fromNow()}\n                            </div>\n                        }\n                    ]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n    }, [fetchAction, intl, systems]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: searchText.length > 0 && [({ category: 'Description', chips: [{ name: searchText }] })] || [],\n        onDelete: () => setSearchText('')\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {systemsFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'} sortBy={sortBy} onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>\n        }\n        {systemsFetchStatus === 'pending' && (<Loading />)}\n        {systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    systems: state.AdvisorStore.systems,\n    systemsFetchStatus: state.AdvisorStore.systemsFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTable)));\n"],"sourceRoot":""}