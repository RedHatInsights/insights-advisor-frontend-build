{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Failed.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/frown-open-icon.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js"],"names":["Failed","message","className","size","propTypes","string","Object","defineProperty","exports","value","FrownOpenIconConfig","obj","_createIcon","__esModule","name","height","width","svgPath","yOffset","xOffset","transform","_default","SystemsTable","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","history","useState","title","formatMessage","messages","transforms","sortable","numberRuleHits","cellWidth","lastSeen","cols","rows","setRows","sortBy","setSortBy","limit","setLimit","offset","setOffset","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","filterBuilding","setFilterBuilding","sortIndices","0","1","2","onSetPage","pageNumber","useEffect","undefined","filter","text","length","location","search","paramsObject","paramParser","sort","urlBuilder","sortIndex","Number","entries","find","item","sortDirection","index","direction","data","flatMap","key","isOpen","system","cells","to","system_uuid","hits","date","last_seen","variant","asMutable","icon","SearchIcon","noHitsTitle","toLowerCase","noHitsBody","props","colSpan","filterConfigItems","label","filterValues","onChange","event","activeFiltersConfig","category","chips","onDelete","Fragment","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","filterConfig","items","aria-label","onSort","_event","orderParam","systemTableFetchError","widgetId","PaginationVariant","bottom","PropTypes","func","object","addNotification","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","filtersSystems","dispatch","url","AppActions"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';\nimport  FrownOpenIcon  from '@patternfly/react-icons/dist/js/icons/frown-open-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Failed = ({ message }) => <>\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size='lg'/>\n        </CardHeader>\n        <CardBody>\n            { message }\n        </CardBody>\n    </Card></>;\n\nexport default Failed;\n\nFailed.propTypes = {\n    message: propTypes.string\n};\n\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.FrownOpenIconConfig = void 0;\n\nvar _createIcon = _interopRequireDefault(require(\"../createIcon\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* This file is generated by createIcons.js any changes will be lost. */\nvar FrownOpenIconConfig = {\n  name: 'FrownOpenIcon',\n  height: 512,\n  width: 496,\n  svgPath: 'M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM136 208c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm187.3 183.3c-31.2-9.6-59.4-15.3-75.3-15.3s-44.1 5.7-75.3 15.3c-11.5 3.5-22.5-6.3-20.5-18.1 7-40 60.1-61.2 95.8-61.2s88.8 21.3 95.8 61.2c2 11.9-9.1 21.6-20.5 18.1zM328 240c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z',\n  yOffset: '',\n  xOffset: '',\n  transform: ''\n};\nexports.FrownOpenIconConfig = FrownOpenIconConfig;\n\nvar _default = (0, _createIcon[\"default\"])(FrownOpenIconConfig);\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=frown-open-icon.js.map","/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/js/components/Pagination/Pagination';\nimport React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader, cellWidth, sortable } from '@patternfly/react-table';\nimport { paramParser, urlBuilder } from '../Common/Tables';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport Failed from '../Loading/Failed';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/components/TableToolbar';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, history }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        { title: intl.formatMessage(messages.numberRuleHits), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.lastSeen), transforms: [sortable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, 800);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'last_seen'\n    };\n\n    const onSort = (_event, index, direction) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setSortBy({ index, direction });\n        setFilters({ ...filters, sort: orderParam });\n        setOffset(0);\n    };\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        const filter = { ...filters };\n        const text = searchText.length ? { display_name: searchText } : {};\n        delete filter.display_name;\n        setFilters({ ...filter, ...text });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (history.location.search) {\n            const paramsObject = paramParser(history);\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            setFilters({ ...paramsObject });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, history);\n    }, [filters, history]);\n\n    useEffect(() => {\n        if (filters.sort !== undefined) {\n            const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n            const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n            setSortBy({ index: sortIndex, direction: sortDirection });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filters.sort]);\n\n    useEffect(() => {\n        if (!filterBuilding) {\n            fetchSystems({\n                offset,\n                limit,\n                ...filters\n            });\n        }\n    }, [fetchSystems, limit, offset, filters, filterBuilding]);\n\n    useEffect(() => {\n        if (systems.data) {\n            if (!systems.meta.count) {\n                setRows([{\n                    cells: [{\n                        title: (<MessageState icon={SearchIcon}\n                            title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.systems).toLowerCase() })}\n                            text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.systems).toLowerCase() })} />),\n                        props: { colSpan: 5 }\n                    }]\n                }]);\n            } else {\n                const rows = systems.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    system: value,\n                    cells: [\n                        {\n                            title: <Link key={key} to={`/rules/systems/${value.system_uuid}`}>\n                                {value.display_name}\n                            </Link>\n                        }, {\n                            title: <div key={key}> {value.hits}</div>\n                        }, {\n\n                            title: <DateFormat key={key} date={value.last_seen} variant='relative' />\n                        }\n                    ]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n    }, [intl, systems]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: searchText.length > 0 && [({ category: 'Description', chips: [{ name: searchText }] })] || [],\n        onDelete: () => setSearchText('')\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {systemsFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'} sortBy={sortBy} onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>\n        }\n        {systemsFetchStatus === 'pending' && (<Loading />)}\n        {systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    systems: state.AdvisorStore.systems,\n    systemsFetchStatus: state.AdvisorStore.systemsFetchStatus,\n    filters: state.AdvisorStore.filtersSystems,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTable)));\n"],"sourceRoot":""}