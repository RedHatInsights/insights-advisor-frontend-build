{"version":3,"sources":["webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/Export/_Export.scss","webpack:///./src/PresentationalComponents/Export/_Export.scss?3c1a","webpack:///./src/PresentationalComponents/Export/SystemsPdfBuild.js","webpack:///./src/PresentationalComponents/Export/SystemsPdf.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Loading/Failed.js"],"names":["fileName","exportTable","defaultParams","date","Date","toISOString","replace","split","downloadHelper","format","params","a","API","get","BASE_URL","payload","data","JSON","stringify","downloadFile","exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","options","transform","undefined","update","locals","hot","accept","newContent","b","key","idx","Error","dispose","styles","StyleSheet","create","bold","fontWeight","global_FontWeight_bold","value","link","color","global_link_Color","text","marginTop","global_spacer_md","endColumn","width","hitColumn","tablePage","page","systems","intl","header","formatMessage","messages","name","style","recommendations","critical","important","moderate","low","lastSeen","hitColumns","rowBuilder","rows","map","system","last_seen","toUTCString","month","year","time","sysDate","slice","join","system_uuid","src","display_name","item","Fragment","withHeader","propTypes","PropTypes","object","number","any","leadPage","systemsTotal","filters","tags","insightsHeader","sysTableCount","execReportHeaderSystems","filtersApplied","Object","entries","tagsApplied","decodeURIComponent","noTags","title","array","SystemsPdf","selectedTags","systemsCount","useIntl","useState","loading","setLoading","dataFetch","length","Promise","SYSTEMS_FETCH_URL","limit","all","firstPage","meta","count","otherPages","reduce","resultArray","index","chunkIndex","Math","floor","pageSystems","useMemo","label","exportPdf","asyncFunction","buttonProps","variant","component","className","isDisabled","reportName","type","size","string","SystemsTable","localFilters","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","setFilters","inventory","useRef","InventoryTable","setInventory","store","useStore","results","searchText","setSearchText","debouncedSearchText","debounce","DEBOUNCE_DELAY","filterBuilding","setFilterBuilding","sortIndices","0","1","2","3","4","5","6","fetchSystemsFn","useCallback","filterFetchBuilder","removeFilterParam","param","filter","offset","hits","filterConfigItems","filterValues","onChange","event","SFC","id","urlParam","values","includes","shift","addFilterParam","items","activeFiltersConfig","sort","pruneFilters","onDelete","itemsToRemove","isAll","newFilter","Array","isArray","String","chips","useEffect","transforms","pfReactTable","numberRuleHits","insights","loadInventory","react","React","reactRouterDom","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","copyFilters","window","location","search","paramsObject","paramParser","Number","urlBuilder","ref","sortBy","find","direction","onSort","orderParam","hasCheckbox","total","isLoaded","perPage","onRefresh","per_page","filterConfig","exportConfig","onSelect","_e","fileType","downloadReport","extraItems","role","Failed","message","systemTableFetchError","Loading","func","addNotification","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","url","AppActions","URL","queryString","keys","URLSearchParams","set","history","replaceState","origin","pathname","toString","assign","filterName","filterValue","searchParams","from","acc","parse","capitalize","toUpperCase","substring","filterCategories","prunedFilters","category","selectedCategoryValue"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nconst fileName = (exportTable) => {\n    const defaultParams = {\n        date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n    };\n\n    return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (exportTable, format, params) => {\n    try {\n        const payload = await API.get(`${BASE_URL}/export/${exportTable}.${format === 'json' ? 'json' : 'csv'}${params}`);\n        let data = format === 'json' ? JSON.stringify(payload.data) : payload.data;\n        downloadFile(data, fileName(exportTable), format);\n    } catch (error) {\n        throw `${error}`;\n    }\n};\n\nexport default downloadHelper;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".systemsPdfOverride{text-align:left !important;border-radius:0 !important}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/* eslint-disable camelcase */\nimport { Column, Section, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Link, StyleSheet, Text } from '@react-pdf/renderer';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport messages from '../../Messages';\n\nconst styles = StyleSheet.create({\n    bold: { fontWeight: global_FontWeight_bold.value },\n    link: { color: global_link_Color.value },\n    text: { marginTop: global_spacer_md.value },\n    endColumn: { width: '100px' },\n    hitColumn: { width: '4px' }\n});\n\nexport const tablePage = ({ page, systems, intl }) => {\n    const header = [{ value: intl.formatMessage(messages.name), style: styles.endColumn },\n        { value: intl.formatMessage(messages.recommendations), style: styles.hitColumn },\n        { value: intl.formatMessage(messages.critical), style: styles.hitColumn },\n        { value: intl.formatMessage(messages.important), style: styles.hitColumn },\n        { value: intl.formatMessage(messages.moderate), style: styles.hitColumn },\n        { value: intl.formatMessage(messages.low), style: styles.hitColumn },\n        { value: intl.formatMessage(messages.lastSeen), style: styles.endColumn }];\n    const hitColumns = ['hits', 'critical_hits', 'important_hits', 'moderate_hits', 'low_hits'];\n\n    // eslint-disable-next-line react/prop-types\n    const rowBuilder = ({ value, style }) => <Text style={style}>{value}</Text>;\n    const rows = [\n        ...systems.map(system => {\n            const [, date, month, year, time] = new Date(system.last_seen).toUTCString().split(' ');\n            const sysDate = `${date} ${month} ${year}, ${time.split(':').slice(0, 2).join(':')} UTC`;\n            return [\n                <Text key={system.system_uuid} style={styles.endColumn}><Link style={styles.link}\n                    src={`https://cloud.redhat.com/insights/advisor/systems/${system.system_uuid}/`}>{system.display_name}</Link></Text>,\n                ...hitColumns.map(item => rowBuilder({ style: styles.hitColumn, value: system[item] })),\n                <Text key={system.last_seen} style={styles.endColumn}>{`${sysDate}`}</Text>\n            ];\n        })];\n\n    return <React.Fragment key={page}>\n        <Column>\n            <Table withHeader rows={[header.map(item => rowBuilder(item)), ...rows]} />\n        </Column>\n    </React.Fragment >;\n};\n\ntablePage.propTypes = {\n    systems: PropTypes.object,\n    page: PropTypes.number,\n    intl: PropTypes.any\n};\n\nexport const leadPage = ({ systemsTotal, systems, filters, tags, intl }) => {\n    return <React.Fragment key={`${intl.formatMessage(messages.insightsHeader)}: ${intl.formatMessage(messages.systems)}`}>\n        <Text key='sys-count' style={styles.text}>\n            {intl.formatMessage(messages.sysTableCount, {\n                systems: <Text key='sys-count-count' style={styles.bold}>\n                    {intl.formatMessage(messages.execReportHeaderSystems, { systems: systemsTotal })}\n                </Text>\n            })}\n        </Text>\n        <Text key='sys-filters' style={styles.text}>\n            {intl.formatMessage(messages.filtersApplied)}\n        </Text>\n        <Text key='sys-filters-values' style={styles.bold}>\n            {Object.entries(filters).map(value => <Text key={value}>{`${value[0]}: ${value[1]} `}</Text>)}\n        </Text>\n        <Text key='sys-tags' style={styles.text}>\n            {intl.formatMessage(messages.tagsApplied)}\n        </Text>\n        <Text key='sys-tags-values' style={styles.bold}>{tags ? decodeURIComponent(tags) : intl.formatMessage(messages.noTags)}</Text>\n        <Section key='systems' title='Systems'>\n            {tablePage({ systems, intl })}\n        </Section>\n    </React.Fragment >;\n};\n\nleadPage.propTypes = {\n    systems: PropTypes.object,\n    systemsTotal: PropTypes.number,\n    filters: PropTypes.object,\n    tags: PropTypes.array,\n    intl: PropTypes.any\n};\n","import './_Export.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { leadPage, tablePage } from './SystemsPdfBuild';\n\nimport API from '../../Utilities/Api';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport PropTypes from 'prop-types';\nimport { SYSTEMS_FETCH_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SystemsPdf = ({ filters, selectedTags, systemsCount }) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n\n    const dataFetch = async () => {\n        setLoading(true);\n        const options = selectedTags.length && ({ tags: selectedTags });\n        const [systems] = await Promise.all([(await API.get(SYSTEMS_FETCH_URL, {}, { ...filters, ...options, limit: systemsCount })).data]);\n        const firstPage = leadPage({ systemsTotal: systems.meta.count, systems: systems.data.slice(0, 10), filters, tags: selectedTags, intl });\n\n        const otherPages = systems.data.slice(10, systems.data.length).reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / 16);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((pageSystems, index) => tablePage({ page: index, systems: pageSystems, intl }))];\n    };\n\n    return useMemo(() => {\n        return <DownloadButton\n            label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.exportPdf)}\n            asyncFunction={dataFetch}\n            buttonProps={{\n                variant: '', component: 'button', className: 'pf-c-dropdown__menu-item systemsPdfOverride', ...(loading ? { isDisabled: true } : null)\n            }}\n            reportName={`${intl.formatMessage(messages.insightsHeader)}:`}\n            type={intl.formatMessage(messages.systems)}\n            fileName={`Advisor_systems--${(new Date()).toUTCString().replace(/ /g, '-')}.pdf`}\n            size={[841.89, 595.28]}\n        />;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [loading]);\n};\n\nSystemsPdf.propTypes = {\n    filters: PropTypes.object,\n    selectedTags: PropTypes.string,\n    systemsCount: PropTypes.number\n};\n\nexport default SystemsPdf;\n","/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport { DEBOUNCE_DELAY, SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { filterFetchBuilder, paramParser, pruneFilters, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport SystemsPdf from '../Export/SystemsPdf';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport downloadReport from '../Common/DownloadHelper';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, selectedTags }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'critical_hits',\n        3: 'important_hits',\n        4: 'moderate_hits',\n        5: 'low_hits',\n        6: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        const options = selectedTags.length && ({ tags: selectedTags.join() });\n        fetchSystems({ ...filterFetchBuilder(filters), ...options });\n\n    }, [fetchSystems, filters, selectedTags]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters, offset: 0 };\n        param === 'text' && setSearchText('');\n        delete filter[param];\n        param === 'hits' && filter.hits === undefined && (filter.hits = ['yes']);\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        // remove 'yes' from the hits filter if the user chooses any other filters (its always the first item)\n        param === 'hits' && values.length > 1 && values.includes('yes') && values.shift();\n        values.length > 0 ? setFilters({ ...filters, offset: 0, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: SFC.hits.title,\n        type: SFC.hits.type,\n        id: SFC.hits.urlParam,\n        value: `checkbox-${SFC.hits.urlParam}`,\n        filterValues: {\n            key: `${SFC.hits.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(SFC.hits.urlParam, values),\n            value: filters.hits,\n            items: SFC.hits.values\n        }\n    }];\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        localFilters.hits && localFilters.hits.includes('yes') && delete localFilters.hits;\n        delete localFilters.sort;\n        delete localFilters.offset;\n        delete localFilters.limit;\n\n        return pruneFilters(localFilters, SFC);\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setSearchText('');\n                setFilters({ sort: filters.sort, limit: filters.limit, offset: filters.offset, hits: ['yes'] });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam]) ?\n                            filters[item.urlParam].filter(value => String(value) !== String(item.chips[0].value))\n                            : ''\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 6 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const rows = [{\n                title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(80)], key: 'display_name'\n            },\n            { title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'hits' },\n            { title: intl.formatMessage(messages.critical), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'critical_hits' },\n            { title: intl.formatMessage(messages.important), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'important_hits' },\n            { title: intl.formatMessage(messages.moderate), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'moderate_hits' },\n            { title: intl.formatMessage(messages.low), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(1)], key: 'low_hits' },\n            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(10)], key: 'updated' }];\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                react: React,\n                reactRouterDom,\n                pfReactTable\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [...rows],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        if (!filterBuilding && systemsFetchStatus !== 'pending') {\n            const copyFilters = { ...filters };\n            delete copyFilters.display_name;\n            setFilters({\n                ...copyFilters, ...(searchText.length ? { display_name: searchText } : {}), offset: 0\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (window.location.search) {\n            const paramsObject = paramParser();\n            delete paramsObject.tags;\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.hits === undefined && (paramsObject.hits = ['yes']);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...filters, ...paramsObject });\n        } else if (filters.limit === undefined || filters.offset === undefined || filters.hits === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10, hits: ['yes'] });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, selectedTags);\n    }, [filters, selectedTags]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && selectedTags !== null && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n                exportConfig={{\n                    onSelect: (_e, fileType) => downloadReport('systems', fileType, urlBuilder(filters, selectedTags)),\n                    extraItems: [<li key='download-pd' role=\"menuitem\">\n                        <SystemsPdf filters={{ ...filterFetchBuilder(filters) }} selectedTags={selectedTags.join()}\n                            systemsCount={systems && systems.meta && systems.meta.count} />\n                    </li>]\n                }}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.map(item => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return selectedCategoryValue ? { name: selectedCategoryValue.text || selectedCategoryValue.label, value } : { name: value, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: capitalize(category.title), chips, urlParam: category.urlParam };\n        } else {\n            return { category: 'Description', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] };\n        }\n    })\n        : [];\n};\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';\nimport  FrownOpenIcon  from '@patternfly/react-icons/dist/js/icons/frown-open-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Failed = ({ message }) => <>\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size='lg'/>\n        </CardHeader>\n        <CardBody>\n            { message }\n        </CardBody>\n    </Card></>;\n\nexport default Failed;\n\nFailed.propTypes = {\n    message: propTypes.string\n};\n\n"],"sourceRoot":""}