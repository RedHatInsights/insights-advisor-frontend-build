{"version":3,"sources":["webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js","webpack:///./src/AppActions.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Loading/Failed.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/frown-open-icon.js","webpack:///./src/Utilities/Debounce.js"],"names":["SystemsTable","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","history","selectedTags","inventory","useRef","useState","InventoryTable","setInventory","store","useStore","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","filterBuilding","setFilterBuilding","sortIndices","0","1","2","fetchSystemsFn","useCallback","options","length","tags","join","filterConfigItems","label","formatMessage","messages","name","filterValues","key","onChange","event","value","activeFiltersConfig","category","chips","onDelete","useEffect","a","insights","loadInventory","react","React","reactRouterDom","pfReactTable","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","title","transforms","numberRuleHits","lastSeen","undefined","copyFilters","offset","location","search","paramsObject","paramParser","sort","Number","limit","offest","urlBuilder","ref","items","data","map","system","id","system_uuid","sortBy","Object","entries","find","item","index","direction","onSort","orderParam","hasCheckbox","page","total","isLoaded","perPage","onRefresh","per_page","filterConfig","message","systemTableFetchError","propTypes","PropTypes","func","string","object","addNotification","any","array","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","url","AppActions","fetchData","headers","chrome","auth","getUser","API","get","response","setData","post","fetchRules","type","ActionTypes","payload","fetchRule","rule_id","fetchSystem","fetchTopics","fetchTopicsAdmin","fetchTopic","topic_id","fetchRuleAck","setAck","fetchHostAcks","setFiltersSystems","setSelectedTags","setRule","rule","setSystem","queryString","keys","Array","isArray","replace","filterFetchBuilder","assign","filterName","filterValue","searchParams","URLSearchParams","from","reduce","acc","JSON","parse","split","capitalize","toUpperCase","substring","Failed","className","size","defineProperty","exports","FrownOpenIconConfig","obj","_createIcon","__esModule","height","width","svgPath","yOffset","xOffset","transform","_default","Debounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { paramParser, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, history, selectedTags }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, 800);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        const options = selectedTags.length && ({ tags: selectedTags.join() });\n        fetchSystems({ ...filters, ...options });\n\n    }, [fetchSystems, filters, selectedTags]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: searchText.length > 0 && [({ category: 'Description', chips: [{ name: searchText }] })] || [],\n        onDelete: () => setSearchText('')\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 2 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                react: React,\n                reactRouterDom,\n                pfReactTable\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [\n                            { title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable], key: 'display_name' },\n                            {\n                                title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(15)],\n                                key: 'hits'\n                            },\n                            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable], key: 'updated' }\n                        ],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        const copyFilters = { ...filters };\n        delete copyFilters.display_name;\n        setFilters({\n            ...copyFilters,\n            ...(searchText.length ? { display_name: searchText } : {}),\n            offset: 0\n        });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (history.location.search) {\n            const paramsObject = paramParser(history);\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...paramsObject });\n        } else if (filters.limit === undefined || filters.offest === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10 });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, history);\n    }, [filters, history]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n","import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.get(url, headers, options);\n    return response.data;\n};\n\nconst setData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.post(url, headers, options);\n    return response.data;\n};\n\nexport const fetchStatsRules = (options) => ({\n    type: ActionTypes.STATS_RULES_FETCH,\n    payload: fetchData(ActionTypes.STATS_RULES_FETCH_URL, {}, options)\n});\nexport const fetchStatsSystems = (options) => ({\n    type: ActionTypes.STATS_SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.STATS_SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchStatsStaleHosts = (options) => ({\n    type: ActionTypes.STATS_STALEHOSTS_FETCH,\n    payload: fetchData(ActionTypes.STATS_STALEHOSTS_FETCH_URL, {}, options)\n});\nexport const fetchRules = (options) => ({\n    type: ActionTypes.RULES_FETCH,\n    payload: fetchData(ActionTypes.RULES_FETCH_URL, {}, options)\n});\nexport const fetchRule = (options) => ({\n    type: ActionTypes.RULE_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/`, {}, options.tags && { tags: options.tags })\n});\nexport const fetchSystem = (options) => ({\n    type: ActionTypes.SYSTEM_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/systems/`, {}, options.tags && { tags: options.tags })\n});\nexport const setFilters = (filters) => ({\n    type: ActionTypes.FILTERS_SET,\n    payload: filters\n});\nexport const fetchTopics = (options) => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(ActionTypes.TOPICS_FETCH_URL, {}, options)\n});\nexport const fetchTopicsAdmin = () => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}?show_disabled=true`)\n});\nexport const fetchTopic = (options) => ({\n    type: ActionTypes.TOPIC_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}${options.topic_id}/`)\n});\nexport const fetchSystems = (options) => ({\n    type: ActionTypes.SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchRuleAck = (options) => ({\n    type: ActionTypes.RULE_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.RULE_ACK_URL}${options.rule_id}/`)\n});\nexport const setAck = (options) => ({\n    type: ActionTypes[`${options.type}_ACK_SET`],\n    payload: setData(ActionTypes[`${options.type}_ACK_URL`], {}, options.options)\n});\nexport const fetchHostAcks = (options) => ({\n    type: ActionTypes.HOST_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.HOST_ACK_URL}`, {}, options)\n});\nexport const setFiltersSystems = (filters) => ({\n    type: ActionTypes.FILTERS_SYSTEMS_SET,\n    payload: filters\n});\nexport const setSelectedTags = (tags) => ({\n    type: ActionTypes.SELECTED_TAGS_SET,\n    payload: tags\n});\nexport const setRule = (rule) => ({\n    type: ActionTypes.RULE_SET,\n    payload: rule\n});\nexport const setSystem = (system) => ({\n    type: ActionTypes.SYSTEM_SET,\n    payload: system\n});\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, history) => {\n    const queryString = `?${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    history && history.replace({\n        search: queryString\n    });\n    return queryString;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = (history) => {\n    const searchParams = new URLSearchParams(history.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';\nimport  FrownOpenIcon  from '@patternfly/react-icons/dist/js/icons/frown-open-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Failed = ({ message }) => <>\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size='lg'/>\n        </CardHeader>\n        <CardBody>\n            { message }\n        </CardBody>\n    </Card></>;\n\nexport default Failed;\n\nFailed.propTypes = {\n    message: propTypes.string\n};\n\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.FrownOpenIconConfig = void 0;\n\nvar _createIcon = _interopRequireDefault(require(\"../createIcon\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* This file is generated by createIcons.js any changes will be lost. */\nvar FrownOpenIconConfig = {\n  name: 'FrownOpenIcon',\n  height: 512,\n  width: 496,\n  svgPath: 'M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM136 208c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm187.3 183.3c-31.2-9.6-59.4-15.3-75.3-15.3s-44.1 5.7-75.3 15.3c-11.5 3.5-22.5-6.3-20.5-18.1 7-40 60.1-61.2 95.8-61.2s88.8 21.3 95.8 61.2c2 11.9-9.1 21.6-20.5 18.1zM328 240c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z',\n  yOffset: '',\n  xOffset: '',\n  transform: ''\n};\nexports.FrownOpenIconConfig = FrownOpenIconConfig;\n\nvar _default = (0, _createIcon[\"default\"])(FrownOpenIconConfig);\n\nexports[\"default\"] = _default;\n//# sourceMappingURL=frown-open-icon.js.map","import { useEffect, useState } from 'react';\n\nconst Debounce = (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {setDebouncedValue(value);}, delay);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [delay, value]);\n\n    return debouncedValue;\n};\n\nexport default Debounce;\n"],"sourceRoot":""}