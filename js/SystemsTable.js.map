{"version":3,"sources":["webpack:///./src/Utilities/Debounce.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js","webpack:///./src/PresentationalComponents/Common/Tables.js"],"names":["Debounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","SystemsTable","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","selectedTags","inventory","useRef","InventoryTable","setInventory","store","useStore","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","filterBuilding","setFilterBuilding","sortIndices","0","1","2","3","4","5","6","fetchSystemsFn","useCallback","options","length","tags","join","filterConfigItems","label","formatMessage","messages","name","filterValues","key","onChange","event","activeFiltersConfig","category","chips","onDelete","a","insights","loadInventory","react","React","reactRouterDom","pfReactTable","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","title","transforms","numberRuleHits","critical","important","moderate","low","lastSeen","undefined","copyFilters","offset","window","location","search","paramsObject","paramParser","sort","Number","limit","offest","urlBuilder","ref","items","data","map","system","id","system_uuid","sortBy","Object","entries","find","item","index","direction","onSort","orderParam","hasCheckbox","page","total","isLoaded","perPage","onRefresh","per_page","filterConfig","message","systemTableFetchError","propTypes","PropTypes","func","string","object","addNotification","any","array","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","url","AppActions","URL","queryString","keys","Array","isArray","params","URLSearchParams","set","history","replaceState","origin","pathname","toString","filterFetchBuilder","assign","filterName","filterValue","searchParams","from","reduce","acc","JSON","parse","split","capitalize","toUpperCase","substring"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst Debounce = (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => {setDebouncedValue(value);}, delay);\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [delay, value]);\n\n    return debouncedValue;\n};\n\nexport default Debounce;\n","/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { paramParser, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, selectedTags }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, 800);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'critical_hits',\n        3: 'important_hits',\n        4: 'moderate_hits',\n        5: 'low_hits',\n        6: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        const options = selectedTags.length && ({ tags: selectedTags.join() });\n        fetchSystems({ ...filters, ...options });\n\n    }, [fetchSystems, filters, selectedTags]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: searchText.length > 0 && [({ category: 'Description', chips: [{ name: searchText }] })] || [],\n        onDelete: () => setSearchText('')\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 2 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                react: React,\n                reactRouterDom,\n                pfReactTable\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [\n                            { title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable], key: 'display_name' },\n                            {\n                                title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(15)],\n                                key: 'hits'\n                            },\n                            { title: intl.formatMessage(messages.critical), key: 'critical_hits' },\n                            { title: intl.formatMessage(messages.important), key: 'important_hits' },\n                            { title: intl.formatMessage(messages.moderate), key: 'moderate_hits' },\n                            { title: intl.formatMessage(messages.low), key: 'low_hits' },\n                            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable], key: 'updated' }\n                        ],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        const copyFilters = { ...filters };\n        delete copyFilters.display_name;\n        setFilters({\n            ...copyFilters,\n            ...(searchText.length ? { display_name: searchText } : {}),\n            offset: 0\n        });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (window.location.search) {\n            const paramsObject = paramParser();\n            delete paramsObject.tags;\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...filters, ...paramsObject });\n        } else if (filters.limit === undefined || filters.offest === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10 });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, selectedTags);\n    }, [filters, selectedTags]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && selectedTags !== null && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `?${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n"],"sourceRoot":""}