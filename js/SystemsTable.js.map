{"version":3,"sources":["webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js"],"names":["SystemsTable","systemsFetchStatus","fetchSystems","systems","intl","filters","setFilters","history","useState","title","formatMessage","messages","name","transforms","sortable","numberRuleHits","cellWidth","lastSeen","cols","rows","setRows","sortBy","setSortBy","limit","setLimit","offset","setOffset","results","meta","count","display_name","searchText","setSearchText","debouncedSearchText","debounce","filterBuilding","setFilterBuilding","sortIndices","0","1","2","onSetPage","pageNumber","useEffect","undefined","filter","text","length","location","search","paramsObject","paramParser","sort","urlBuilder","sortIndex","Number","Object","entries","find","item","sortDirection","index","direction","data","flatMap","value","key","isOpen","system","cells","to","system_uuid","hits","moment","last_seen","fromNow","asMutable","icon","SearchIcon","noHitsTitle","toLowerCase","noHitsBody","props","colSpan","filterConfigItems","label","filterValues","onChange","event","activeFiltersConfig","category","chips","onDelete","Fragment","pagination","itemCount","page","perPage","onPerPageSelect","isCompact","filterConfig","items","aria-label","onSort","_event","orderParam","message","systemTableFetchError","widgetId","variant","PaginationVariant","bottom","propTypes","PropTypes","func","string","object","addNotification","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","filtersSystems","dispatch","url","AppActions"],"mappings":"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","file":"js/SystemsTable.js","sourcesContent":["/* eslint camelcase: 0 */\nimport * as AppActions from '../../AppActions';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { PrimaryToolbar, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableHeader, cellWidth, sortable } from '@patternfly/react-table';\nimport { paramParser, urlBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport PropTypes from 'prop-types';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport moment from 'moment';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, history }) => {\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        { title: intl.formatMessage(messages.numberRuleHits), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.lastSeen), transforms: [sortable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sortBy, setSortBy] = useState({});\n    const [limit, setLimit] = useState(10);\n    const [offset, setOffset] = useState(0);\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, 800);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'last_seen'\n    };\n\n    const onSort = (_event, index, direction) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setSortBy({ index, direction });\n        setFilters({ ...filters, sort: orderParam });\n        setOffset(0);\n    };\n\n    const onSetPage = (pageNumber) => {\n        const newOffset = pageNumber * limit - limit;\n        setOffset(newOffset);\n    };\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        const filter = { ...filters };\n        const text = searchText.length ? { display_name: searchText } : {};\n        delete filter.display_name;\n        setFilters({ ...filter, ...text });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (history.location.search) {\n            const paramsObject = paramParser(history);\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            setFilters({ ...paramsObject });\n            setFilterBuilding(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, history);\n    }, [filters, history]);\n\n    useEffect(() => {\n        if (filters.sort !== undefined) {\n            const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n            const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n            setSortBy({ index: sortIndex, direction: sortDirection });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filters.sort]);\n\n    useEffect(() => {\n        if (!filterBuilding) {\n            fetchSystems({\n                offset,\n                limit,\n                ...filters\n            });\n        }\n    }, [fetchSystems, limit, offset, filters, filterBuilding]);\n\n    useEffect(() => {\n        if (systems.data) {\n            if (!systems.meta.count) {\n                setRows([{\n                    cells: [{\n                        title: (<MessageState icon={SearchIcon}\n                            title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.systems).toLowerCase() })}\n                            text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.systems).toLowerCase() })} />),\n                        props: { colSpan: 5 }\n                    }]\n                }]);\n            } else {\n                const rows = systems.data.flatMap((value, key) => ([{\n                    isOpen: false,\n                    system: value,\n                    cells: [\n                        {\n                            title: <Link key={key} to={`/rules/systems/${value.system_uuid}`}>\n                                {value.display_name}\n                            </Link>\n                        }, {\n                            title: <div key={key}> {value.hits}</div>\n                        }, {\n                            title: <div key={key}>\n                                {moment(value.last_seen).fromNow()}\n                            </div>\n                        }\n                    ]\n                }\n                ]));\n                setRows(rows.asMutable());\n            }\n        }\n    }, [intl, systems]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }];\n\n    const activeFiltersConfig = {\n        filters: searchText.length > 0 && [({ category: 'Description', chips: [{ name: searchText }] })] || [],\n        onDelete: () => setSearchText('')\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: results,\n                page: offset / limit + 1,\n                perPage: limit,\n                onSetPage(event, page) { onSetPage(page); },\n                onPerPageSelect(event, perPage) { setLimit(perPage); },\n                isCompact: false\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {systemsFetchStatus === 'fulfilled' &&\n            <Table aria-label={'rule-table'} sortBy={sortBy} onSort={onSort} cells={cols} rows={rows}>\n                <TableHeader />\n                <TableBody />\n            </Table>\n        }\n        {systemsFetchStatus === 'pending' && (<Loading />)}\n        {systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)}\n        <TableToolbar>\n            <Pagination\n                itemCount={results}\n                perPage={limit}\n                page={(offset / limit + 1)}\n                onSetPage={(event, page) => { onSetPage(page); }}\n                widgetId={`pagination-options-menu-bottom`}\n                variant={PaginationVariant.bottom}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    history: PropTypes.object,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    systems: state.AdvisorStore.systems,\n    systemsFetchStatus: state.AdvisorStore.systemsFetchStatus,\n    filters: state.AdvisorStore.filtersSystems,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTable)));\n"],"sourceRoot":""}