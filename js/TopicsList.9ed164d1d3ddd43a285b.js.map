{"version":3,"sources":["webpack://advisor-frontend/./src/PresentationalComponents/TopicsTable/TopicsTable.js","webpack://advisor-frontend/./src/SmartComponents/Topics/List.js"],"names":["intl","useIntl","topics","useSelector","AdvisorStore","topicsFetchStatus","useState","searchText","setSearchText","title","formatMessage","messages","transforms","sortable","wrappable","cols","rows","setRows","index","direction","sort","setSort","buildRows","list","flatMap","value","key","length","name","toLowerCase","includes","topic","cells","Link","to","slug","props","colSpan","featured","Label","color","icon","className","impacted_systems_count","onSort","_event","sortedReports","0","result","2","3","sortedTopicsDirectional","SortByDirection","reverse","activeFiltersConfig","filters","category","chips","onDelete","useEffect","asMutable","filterConfigItems","label","filterValues","onChange","event","Loading","PrimaryToolbar","filterConfig","items","Table","aria-label","sortBy","ouiaId","isStickyHeader","TableHeader","TableBody","MessageState","SearchIcon","item","text","TimesCircleIcon","List","fetchTopics","selectedTags","workloads","SID","document","subnav","options","tags","workloadQueryBuilder","PageHeader","PageHeaderTitle","Main","displayName","propTypes","PropTypes","injectIntl","routerParams","connect","ownProps","dispatch","AppActions"],"mappings":"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","file":"js/TopicsList.9ed164d1d3ddd43a285b.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SortByDirection, Table, TableBody, TableHeader, sortable, wrappable } from '@patternfly/react-table';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport messages from '../../Messages';\nimport { sortBy } from 'lodash';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nconst TopicsTable = () => {\n    const intl = useIntl();\n    const topics = useSelector(({ AdvisorStore }) => AdvisorStore.topics);\n    const topicsFetchStatus = useSelector(({ AdvisorStore }) => AdvisorStore.topicsFetchStatus);\n    const [searchText, setSearchText] = useState('');\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        '',\n        { title: intl.formatMessage(messages.featured), transforms: [sortable, wrappable] },\n        { title: intl.formatMessage(messages.affectedSystems), transforms: [sortable, wrappable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sort, setSort] = useState({ index: 2, direction: 'desc' });\n\n    const buildRows = (list) => list.flatMap((value, key) => {\n        const isValidSearchText = searchText.length === 0 || value.name.toLowerCase().includes(searchText.toLowerCase());\n\n        return isValidSearchText ? [{\n            topic: value,\n            cells: [{\n                title: <span key={key}><Link key={key} to={`/topics/${value.slug}`}> {value.name} </Link></span>,\n                props: { colSpan: 2 }\n            }, {\n                title: <span key={key}> {value.featured &&\n                    <Label color='blue' icon={<StarIcon />}>{intl.formatMessage(messages.featured)}</Label>\n                } </span>\n            }, {\n                title: <span className='pf-m-center' key={key}> {value.impacted_systems_count}</span>\n            }]\n        }] : [];\n    });\n\n    const onSort = (_event, index, direction) => {\n        const sortedReports = {\n            0: sortBy(topics, [result => result.name]),\n            2: sortBy(topics, [result => result.featured]),\n            3: sortBy(topics, [result => result.impacted_systems_count])\n        };\n        const sortedTopicsDirectional = direction === SortByDirection.asc ? sortedReports[index] : sortedReports[index].reverse();\n        setSort({ index, direction });\n        setRows(buildRows(sortedTopicsDirectional));\n    };\n\n    const activeFiltersConfig = {\n        filters: searchText.length ? [{ category: 'Description', chips: [{ name: searchText, value: searchText }] }] : [],\n        onDelete: () => { setSearchText(''); setSort({}); }\n    };\n\n    useEffect(() => {\n        sort.index ? onSort(null, sort.index, sort.direction) : setRows(buildRows(topics).asMutable());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [topics, searchText]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => { setSearchText(value); setSort({}); },\n            value: searchText\n        }\n    }];\n\n    return <React.Fragment>\n        {topicsFetchStatus === '' || topicsFetchStatus === 'pending' && <Loading />}\n        {topicsFetchStatus === 'fulfilled' && topics.length > 0 &&\n            <React.Fragment>\n                <PrimaryToolbar\n                    filterConfig={{ items: filterConfigItems }}\n                    activeFiltersConfig={activeFiltersConfig}\n                />\n                <Table aria-label={'topics-table'} sortBy={sort} onSort={onSort} cells={cols} rows={rows}\n                    ouiaId='topicTable' isStickyHeader>\n                    <TableHeader />\n                    <TableBody />\n                    {rows.length === 0 && topicsFetchStatus !== 'pending' && setRows([{\n                        cells: [{\n                            title: (\n                                <MessageState icon={SearchIcon}\n                                    title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.topics).toLowerCase() })}\n                                    text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.topics).toLowerCase() })} />),\n                            props: { colSpan: 4 }\n                        }]\n                    }])\n                    }\n                </Table>\n            </React.Fragment>\n        }\n        {topicsFetchStatus === 'failed' || topicsFetchStatus === 'rejected' || (topicsFetchStatus === 'fulfilled' && topics.length === 0) &&\n            < MessageState icon={TimesCircleIcon}\n                title={intl.formatMessage(messages.topicsListNotopicsTitle)}\n                text={intl.formatMessage(messages.topicsListNotopicsBody)} />\n        }\n    </React.Fragment>;\n};\n\nexport default TopicsTable;\n\n","import * as AppActions from '../../AppActions';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport PropTypes from 'prop-types';\nimport TopicsTable from '../../PresentationalComponents/TopicsTable/TopicsTable';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst List = ({ fetchTopics, intl, selectedTags, workloads, SID }) => {\n    document.title = intl.formatMessage(messages.documentTitle, { subnav: messages.topics.defaultMessage });\n\n    useEffect(() => {\n        let options = selectedTags !== null && selectedTags.length && ({ tags: selectedTags });\n        workloads && (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n        fetchTopics(options);\n    }, [fetchTopics, selectedTags, workloads, SID]);\n\n    return <React.Fragment>\n        <PageHeader>\n            <PageHeaderTitle title={`${intl.formatMessage(messages.insightsHeader)} ${intl.formatMessage(messages.topics).toLowerCase()}`} />\n        </PageHeader>\n        <Main>\n            <TopicsTable />\n        </Main>\n    </React.Fragment>;\n};\n\nList.displayName = 'list-topics';\nList.propTypes = {\n    fetchTopics: PropTypes.func, intl: PropTypes.any,\n    selectedTags: PropTypes.array, workloads: PropTypes.object, SID: PropTypes.object\n};\nconst mapStateToProps = ({ AdvisorStore, ownProps }) => ({\n    selectedTags: AdvisorStore.selectedTags,\n    workloads: AdvisorStore.workloads,\n    SID: AdvisorStore.SID,\n    ...ownProps\n});\nconst mapDispatchToProps = dispatch => ({ fetchTopics: (options) => dispatch(AppActions.fetchTopics(options)) });\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(List)));\n"],"sourceRoot":""}