{"version":3,"sources":["webpack:///./src/PresentationalComponents/TagsToolbar/_TagsToolbar.scss?1dc4","webpack:///./src/PresentationalComponents/TagsToolbar/ManageTags.js","webpack:///./src/PresentationalComponents/TagsToolbar/Common.js","webpack:///./src/PresentationalComponents/TagsToolbar/TagsToolbar.js","webpack:///./src/PresentationalComponents/TagsToolbar/_TagsToolbar.scss"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","ManageTags","toggleModal","fetchTags","selectedTags","setSelectedTags","isOpen","useState","tags","setTags","loaded","setLoaded","selected","setSelected","perPage","setPerPage","page","setPage","searchText","setSearchText","intl","useIntl","debouncedSearchText","debounce","DEBOUNCE_DELAY","activeFiltersConfig","useMemo","filters","map","tag","namespace","filter","value","index","self","indexOf","category","chips","name","id","urlParam","buildFilterChips","total","data","useEffect","length","split","decodeURIComponent","Fragment","TagModal","title","formatMessage","messages","tagsCount","count","pagination","rows","find","selection","cells","width","label","filterTagsInModal","placeholder","filterValues","onChange","event","onUpdateData","columns","tagsModalName","tagsModalValue","tagsModalSources","systems","onSelect","onApply","tableProps","canSelectAll","primaryToolbarProps","onDelete","e","items","isAll","ids","flatMap","item","chip","propTypes","PropTypes","func","isRequired","bool","array","connect","AdvisorStore","dispatch","tagUrlBuilder","tagsToSet","url","URL","window","location","params","URLSearchParams","search","set","join","history","replaceState","origin","pathname","toString","TagsToolbar","setIsOpen","setParams","manageTagsModalOpen","setManageTagsModalOpen","groupTags","Set","source","formatTags","encodeURIComponent","formattedTags","API","get","INV_BASE_URL","toLowerCase","response","results","intersection","addNotification","variant","dismissable","error","description","urlParams","className","Select","SelectVariant","checkbox","aria-label","onToggle","includes","selections","placeholderText","filterResults","allSystems","noTags","ariaLabelledBy","isDisabled","InputGroup","TextInput","filterTagsInToolbar","Divider","group","tagIndex","isChecked","Tooltip","position","TooltipPosition","right","Badge","Button","onClick","countMoreTags","manageTags","any","state","___CSS_LOADER_API_IMPORT___","push"],"mappings":"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","file":"js/24.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_TagsToolbar.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { DEBOUNCE_DELAY } from '../../AppConstants';\nimport PropTypes from 'prop-types';\nimport { TagModal } from '@redhat-cloud-services/frontend-components/components/TagModal';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport messages from '../../Messages';\nimport { setSelectedTags } from '../../AppActions';\nimport { useIntl } from 'react-intl';\n\nconst buildFilterChips = (selected) => {\n    const filters = selected.map(tag => tag.namespace).filter(\n        (value, index, self) =>\n            self.indexOf(value) === index\n    ).map(category => ({\n        category,\n        chips: selected.filter(tag =>\n            tag.namespace === category\n        ).map(tag => ({\n            name: tag.value,\n            id: tag.id,\n            value: true\n        })),\n        urlParam: 'tags'\n    }));\n    return { filters };\n};\n\nconst ManageTags = ({ toggleModal, fetchTags, selectedTags, setSelectedTags, isOpen }) => {\n    const [tags, setTags] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [selected, setSelected] = useState([]);\n    const [perPage, setPerPage] = useState(10);\n    const [page, setPage] = useState(1);\n    const [searchText, setSearchText] = useState();\n    const intl = useIntl();\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const activeFiltersConfig = useMemo(() => buildFilterChips(selected), [selected]);\n    const { total, data } = tags;\n\n    useEffect(() => {\n        (async () => {\n            setPage(1);\n            setTags(await fetchTags(perPage, 1, null, searchText));\n            setLoaded(true);\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        (async () => {\n            setTags(await fetchTags(perPage, page, null, debouncedSearchText));\n            setLoaded(true);\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [perPage, page]);\n\n    useEffect(() => {\n        setSelected(selectedTags.length ? selectedTags.map(id => ({\n            id,\n            namespace: id.split('/')[0],\n            key: decodeURIComponent(id.split('/')[1].split('=')[0]),\n            value: decodeURIComponent(id.split('/')[1].split('=')[1])\n        })) : []);\n    }, [selectedTags, setSelected]);\n\n    const onDelete = (e, items, isAll) => {\n        if (isAll) {\n            setSelected([]);\n        } else {\n            const ids = items.flatMap(item => item.chips.map(chip => chip.id));\n            setSelected(selected.filter(tag => ids.filter(id => id !== tag.id).length));\n        }\n    };\n\n    return <React.Fragment>\n        {data && <TagModal\n            title={intl.formatMessage(messages.tagsCount, { count: total })}\n            {...loaded && {\n                loaded,\n                pagination: {\n                    perPage,\n                    page,\n                    count: total\n                },\n                rows: data.map(tag => ({\n                    ...tag,\n                    selected: selected.find(selection => selection.id === tag.id),\n                    cells: [tag.key, tag.value, tag.namespace, tag.count]\n                }))\n            }}\n            loaded={ loaded }\n            width='50%'\n            isOpen={ isOpen }\n            toggleModal={() => {\n                setPerPage(10);\n                setPage(1);\n                setSearchText();\n                setSelected([]);\n                toggleModal();\n            }}\n            filters={[\n                {\n                    label: intl.formatMessage(messages.filterTagsInModal),\n                    placeholder: intl.formatMessage(messages.filterTagsInModal),\n                    value: 'tags-filter',\n                    filterValues: {\n                        key: 'text-filter',\n                        onChange: (event, value) => setSearchText(value),\n                        value: searchText\n                    }\n                }\n            ]}\n            onUpdateData={(data) => {\n                setLoaded(false);\n                setPerPage(data.perPage);\n                setPage(data.page);\n            }}\n            columns={ [\n                { title: intl.formatMessage(messages.tagsModalName) },\n                { title: intl.formatMessage(messages.tagsModalValue) },\n                { title: intl.formatMessage(messages.tagsModalSources) },\n                { title: intl.formatMessage(messages.systems) }\n            ] }\n            selected={selected}\n            onSelect={(selected) => setSelected(selected.map(tag => ({\n                id: tag.id,\n                namespace: tag.namespace,\n                value: tag.value,\n                selected: true\n            })))}\n            onApply={() => {\n                setSelectedTags(selected.map(tag => tag.id));\n                setSelected([]);\n            }}\n            tableProps={{ canSelectAll: false }}\n            primaryToolbarProps={{\n                activeFiltersConfig: {\n                    ...activeFiltersConfig,\n                    onDelete\n                }\n            }}\n        />}\n    </React.Fragment>;\n};\n\nManageTags.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    fetchTags: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    selectedTags: PropTypes.array,\n    setSelectedTags: PropTypes.func\n};\n\nexport default connect(\n    ({ AdvisorStore }) => ({ selectedTags: AdvisorStore.selectedTags }),\n    dispatch => ({\n        setSelectedTags: (tags) => dispatch(setSelectedTags(tags))\n    }))(ManageTags);\n","const tagUrlBuilder = (tagsToSet) => {\n    if (tagsToSet !== null) {\n        const url = new URL(window.location);\n        let params = new URLSearchParams(url.search);\n        tagsToSet.length ? params.set('tags', tagsToSet.join()) : params.delete('tags');\n        window.history.replaceState(null, null, `${url.origin}${url.pathname}${params.toString().length ? '?' : ''}${params.toString()}`);\n    }\n};\n\nexport { tagUrlBuilder };\n","import './_TagsToolbar.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport { Select, SelectGroup, SelectOption, SelectVariant } from '@patternfly/react-core/dist/js/components/Select/index';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n\nimport API from '../../Utilities/Api';\nimport { Badge } from '@patternfly/react-core/dist/js/components/Badge/Badge';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { DEBOUNCE_DELAY } from '../../AppConstants';\nimport { Divider } from '@patternfly/react-core/dist/js/components/Divider/Divider';\nimport { INV_BASE_URL } from '../../AppConstants';\nimport { InputGroup } from '@patternfly/react-core/dist/js/components/InputGroup/InputGroup';\nimport ManageTags from './ManageTags';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport TagIcon from '@patternfly/react-icons/dist/js/icons/tag-icon';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { connect } from 'react-redux';\nimport debounce from '../../Utilities/Debounce';\nimport intersection from 'lodash/intersection';\nimport messages from '../../Messages';\nimport { setSelectedTags } from '../../AppActions';\nimport { tagUrlBuilder } from './Common';\nimport { useIntl } from 'react-intl';\n\nconst TagsToolbar = ({ selectedTags, setSelectedTags }) => {\n    const intl = useIntl();\n    const [isOpen, setIsOpen] = useState(false);\n    const [tags, setTags] = useState({});\n    const [searchText, setSearchText] = useState();\n    const [params, setParams] = useState();\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const [manageTagsModalOpen, setManageTagsModalOpen] = useState(false);\n    const showMoreCount = 20;\n    const { total, count, data } = tags;\n\n    const groupTags = (tags) => {\n        return {\n            total: tags.total,\n            count: tags.count,\n            data: [...new Set(tags.data.map(tag => tag.namespace))].map(source => ({\n                source,\n                data: tags.data.filter(tag => tag.namespace === source)\n            }))\n        };\n    };\n\n    const formatTags = (tags, total, count) => {\n        return {\n            total,\n            count,\n            data: tags.map(item => {\n                const { namespace, key, value } = item.tag;\n                return {\n                    ...item.tag,\n                    count: item.count,\n                    id: `${namespace}/${encodeURIComponent(key)}=${encodeURIComponent(value)}`\n                };\n            })\n        };\n    };\n\n    const fetchTags = async (perPage, page, params, filter) => {\n        let formattedTags = [];\n        try {\n            const response = (filter === '' || !filter) ?\n                await API.get(`${INV_BASE_URL}/tags?per_page=${perPage}&page=${page}&registered_with=insights`) :\n                await API.get(`${INV_BASE_URL}/tags?per_page=${perPage}&page=${page}&search=${filter.toLowerCase()}&registered_with=insights`);\n            formattedTags = formatTags(response.data.results, response.data.total, response.data.count);\n            params === null && selectedTags === null && setSelectedTags([]);\n            if (params.length) {\n                const tagsToSet = intersection(params.split(','), selectedTags);\n                tagUrlBuilder(tagsToSet);\n                setSelectedTags(tagsToSet);\n            }\n        } catch (error) {\n            addNotification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${error}` });\n        }\n\n        return formattedTags;\n    };\n\n    // Force triggers the debounce function on mount (i.e. deleting this will break things)\n    useEffect(() => {\n        setSearchText('');\n    }, []);\n\n    useEffect(() => {\n        const url = new URL(window.location);\n        let params = new URLSearchParams(url.search);\n        setParams(params.get('tags'));\n    }, [selectedTags]);\n\n    useEffect(() => {\n        const url = new URL(window.location);\n        let urlParams = new URLSearchParams(url.search);\n        urlParams.get('tags') === params ?\n            (async () => setTags(groupTags(await fetchTags(showMoreCount, 1, null, searchText))))() :\n            (async () => setTags(groupTags(await fetchTags(showMoreCount, 1, urlParams, searchText))))();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        tagUrlBuilder(selectedTags);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [window.location]);\n\n    const titleFn = () => <React.Fragment>\n        <TagIcon />&nbsp;\n        {data && data.length > 0 ?\n            <React.Fragment>\n                {intl.formatMessage(messages.filterResults)} {selectedTags.length === 0 && intl.formatMessage(messages.allSystems)}\n            </React.Fragment>\n            : intl.formatMessage(messages.noTags)}\n    </React.Fragment>;\n\n    const onToggle = isOpen => {\n        setSearchText('');\n        setIsOpen(isOpen);\n    };\n\n    const onSelect = (e, selection) => {\n        const tagsToSet = selectedTags.includes(selection) ? selectedTags.filter(item => item !== selection)\n            : [...selectedTags, selection];\n        setSelectedTags(tagsToSet);\n        tagUrlBuilder(tagsToSet);\n    };\n\n    return selectedTags !== null && <div className='tagsToolbarContainer'>\n        {<ManageTags\n            toggleModal={() => setManageTagsModalOpen(!manageTagsModalOpen)}\n            isOpen={manageTagsModalOpen}\n            fetchTags={fetchTags}\n        />}\n        {data && <Select\n            className='dropDownOverride'\n            variant={SelectVariant.checkbox}\n            aria-label='Select Group Input'\n            onToggle={onToggle}\n            onSelect={onSelect}\n            selections={selectedTags}\n            isOpen={isOpen}\n            placeholderText={titleFn()}\n            ariaLabelledBy='select-group-input'\n            isDisabled={data.length === 0}\n        >\n            <InputGroup className='tags-filter-group'>\n                <TextInput\n                    aria-label='tags-filter-input'\n                    placeholder={intl.formatMessage(messages.filterTagsInToolbar)}\n                    value={searchText}\n                    onChange={setSearchText}\n                />\n                <SearchIcon className='tags-filter-search-icon'/>\n            </InputGroup>\n            <Divider key=\"inline-filter-divider\"/>\n            {data.map((group, index) =>\n                <SelectGroup key={`group${index}`} label={group.source}>\n                    {group.data.map((tag, tagIndex) =>\n                        <span key={tagIndex} className='tags-select-group'>\n                            <SelectOption value={tag.id} isChecked={\n                                selectedTags.find(selection => selection === tag.id)\n                            }>\n                                <Tooltip content={`${decodeURIComponent(tag.id)}`} position={TooltipPosition.right}>\n                                    <span>{`${decodeURIComponent(tag.key + '=' + tag.value)}`}</span>\n                                </Tooltip>\n                            </SelectOption>\n                            <Badge className='tags-select-badge'> {tag.count} </Badge>\n                        </span>\n                    )}\n                </SelectGroup>\n            )}\n            <Button key='manage all tags'\n                variant='link' onClick={() => setManageTagsModalOpen(true)}>\n                {(showMoreCount > 0 && count >= showMoreCount) ?\n                    intl.formatMessage(\n                        messages.countMoreTags, {\n                            count: total - count\n                        }) : intl.formatMessage(messages.manageTags)\n                }\n            </Button>\n        </Select>}\n    </div >;\n};\n\nTagsToolbar.propTypes = {\n    selectedTags: PropTypes.array,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    setSelectedTags: PropTypes.func,\n    history: PropTypes.any\n};\n\nexport default connect(\n    state => ({ selectedTags: state.AdvisorStore.selectedTags }),\n    dispatch => ({\n        addNotification: data => dispatch(addNotification(data)),\n        setSelectedTags: (tags) => dispatch(setSelectedTags(tags))\n    }))(TagsToolbar);\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}.tagsToolbarContainer{background-color:var(--pf-global--BackgroundColor--100);border-bottom:var(--pf-global--BorderWidth--sm) solid var(--pf-global--BorderColor--light-100)}.tagsToolbarContainer .pf-c-dropdown__menu{top:36px !important}.tagsToolbarContainer .dropDownOverride{padding-left:var(--pf-global--spacer--md)}.tagsToolbarContainer .dropDownOverride button::before{border:none !important}.tagsToolbarContainer .tags-filter-group{display:flex;padding:var(--pf-global--spacer--sm) 0 var(--pf-global--spacer--md) var(--pf-global--spacer--md)}.tagsToolbarContainer .tags-filter-group .tags-filter-search-icon{position:relative;left:-30px;left:-1.875rem;top:10px;top:.625rem}.tagsToolbarContainer .tags-select-group{display:flex}.tagsToolbarContainer .tags-select-group:hover{background-color:var(--pf-c-select__menu-item--hover--BackgroundColor)}.tagsToolbarContainer .tags-select-group .tags-select-badge{position:relative;margin-top:var(--pf-global--spacer--md);left:-15px;left:-.9375rem;bottom:8px;bottom:.5rem}.tagsToolbarContainer .pf-c-select__toggle{width:220px;font-size:small}.tagsToolbarContainer .pf-c-select__toggle.pf-m-disabled,.tagsToolbarContainer .pf-c-select__toggle:disabled{background-color:var(--pf-global--BackgroundColor--100)}.tagsToolbarContainer .pf-c-select__toggle.pf-m-disabled .pf-c-select__toggle-arrow,.tagsToolbarContainer .pf-c-select__toggle:disabled .pf-c-select__toggle-arrow{color:var(--pf-global--BackgroundColor--100)}.tagsToolbarContainer .pf-c-select{max-width:400px !important}.tagsToolbarContainer .pf-c-check__label{max-width:400px !important;width:400px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tagsListContainer .pf-c-data-list{border:none}.tagsListContainer .pf-c-data-list__item{border:none}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-control{padding:8px 0 8px !important}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-content{padding-bottom:8px !important}.tagsListContainer .pf-c-data-list__item .pf-c-data-list__item-content .pf-c-data-list__cell{padding-top:8px !important}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}