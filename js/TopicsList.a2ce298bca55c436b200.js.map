{"version":3,"sources":["webpack:///./src/PresentationalComponents/MessageState/MessageState.js","webpack:///./src/PresentationalComponents/TopicsTable/TopicsTable.js","webpack:///./src/SmartComponents/Topics/List.js","webpack:///./src/PresentationalComponents/Loading/Loading.js"],"names":["MessageState","className","children","icon","iconClass","iconStyle","text","title","variant","style","headingLevel","size","marginBottom","propTypes","PropTypes","any","string","defaultProps","CubesIcon","EmptyStateVariant","full","TopicsTable","topics","topicsFetchStatus","intl","useState","searchText","setSearchText","formatMessage","messages","name","transforms","sortable","featured","wrappable","affectedSystems","cols","rows","setRows","index","direction","sort","setSort","buildRows","list","flatMap","value","key","length","toLowerCase","includes","topic","cells","to","slug","props","colSpan","Label","color","impacted_systems_count","onSort","_event","sortedReports","0","result","2","3","sortedTopicsDirectional","SortByDirection","asc","reverse","activeFiltersConfig","filters","category","chips","onDelete","useEffect","asMutable","filterConfigItems","label","filterValues","onChange","event","Fragment","Loading","PrimaryToolbar","filterConfig","items","Table","aria-label","sortBy","SearchIcon","noHitsTitle","item","noHitsBody","TimesCircleIcon","topicsListNotopicsTitle","topicsListNotopicsBody","array","injectIntl","routerParams","connect","state","AdvisorStore","TagsToolbar","asyncComponent","List","fetchTopics","selectedTags","options","tags","join","isGlobalFilter","PageHeader","insightsHeader","Main","displayName","func","ownProps","dispatch","AppActions"],"mappings":"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","file":"js/TopicsList.a2ce298bca55c436b200.js","sourcesContent":["import { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport  CubesIcon  from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) => (\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>\n);\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React, { useEffect, useState } from 'react';\nimport { SortByDirection, Table, TableBody, TableHeader, sortable, wrappable } from '@patternfly/react-table';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { sortBy } from 'lodash';\n\nconst TopicsTable = ({ topics, topicsFetchStatus, intl }) => {\n    const [searchText, setSearchText] = useState('');\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        '',\n        { title: intl.formatMessage(messages.featured), transforms: [sortable, wrappable] },\n        { title: intl.formatMessage(messages.affectedSystems), transforms: [sortable, wrappable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sort, setSort] = useState({ index: 2, direction: 'desc' });\n\n    const buildRows = (list) => list.flatMap((value, key) => {\n        const isValidSearchText = searchText.length === 0 || value.name.toLowerCase().includes(searchText.toLowerCase());\n\n        return isValidSearchText ? [{\n            topic: value,\n            cells: [{\n                title: <span key={key}><Link key={key} to={`/topics/${value.slug}`}> {value.name} </Link></span>,\n                props: { colSpan: 2 }\n            }, {\n                title: <span key={key}> {value.featured &&\n                    <Label color=\"blue\" icon={<StarIcon />}>{intl.formatMessage(messages.featured)}</Label>\n                } </span>\n            }, {\n                title: <span className=\"pf-m-center\" key={key}> {value.impacted_systems_count}                </span>\n            }]\n        }] : [];\n    });\n\n    const onSort = (_event, index, direction) => {\n        const sortedReports = {\n            0: sortBy(topics, [result => result.name]),\n            2: sortBy(topics, [result => result.featured]),\n            3: sortBy(topics, [result => result.impacted_systems_count])\n        };\n        const sortedTopicsDirectional = direction === SortByDirection.asc ? sortedReports[index] : sortedReports[index].reverse();\n        setSort({ index, direction });\n        setRows(buildRows(sortedTopicsDirectional));\n    };\n\n    const activeFiltersConfig = {\n        filters: searchText.length ? [{ category: 'Description', chips: [{ name: searchText, value: searchText }] }] : [],\n        onDelete: () => { setSearchText(''); setSort({}); }\n    };\n\n    useEffect(() => {\n        sort.index ? onSort(null, sort.index, sort.direction) : setRows(buildRows(topics).asMutable());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [topics, searchText]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => { setSearchText(value); setSort({}); },\n            value: searchText\n        }\n    }];\n\n    return <React.Fragment>\n        {topicsFetchStatus === '' || topicsFetchStatus === 'pending' && <Loading />}\n        {topicsFetchStatus === 'fulfilled' && topics.length > 0 &&\n            <React.Fragment>\n                <PrimaryToolbar\n                    filterConfig={{ items: filterConfigItems }}\n                    activeFiltersConfig={activeFiltersConfig}\n                />\n                <Table aria-label={'topics-table'} sortBy={sort} onSort={onSort} cells={cols} rows={rows} >\n                    <TableHeader />\n                    <TableBody />\n                    {rows.length === 0 && topicsFetchStatus !== 'pending' && setRows([{\n                        cells: [{\n                            title: (\n                                <MessageState icon={SearchIcon}\n                                    title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.topics).toLowerCase() })}\n                                    text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.topics).toLowerCase() })} />),\n                            props: { colSpan: 4 }\n                        }]\n                    }])\n                    }\n                </Table>\n            </React.Fragment>\n        }\n        {topicsFetchStatus === 'failed' || topicsFetchStatus === 'rejected' || (topicsFetchStatus === 'fulfilled' && topics.length === 0) &&\n            < MessageState icon={TimesCircleIcon}\n                title={intl.formatMessage(messages.topicsListNotopicsTitle)}\n                text={intl.formatMessage(messages.topicsListNotopicsBody)} />\n        }\n    </React.Fragment>;\n};\n\nTopicsTable.propTypes = {\n    topics: PropTypes.array,\n    topicsFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(routerParams(connect((state) => ({\n    topics: state.AdvisorStore.topics,\n    topicsFetchStatus: state.AdvisorStore.topicsFetchStatus\n}), null)(TopicsTable)));\n\n","import * as AppActions from '../../AppActions';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport PropTypes from 'prop-types';\nimport TopicsTable from '../../PresentationalComponents/TopicsTable/TopicsTable';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { isGlobalFilter } from '../../AppConstants';\n\nconst TagsToolbar = asyncComponent(() => import(/* webpackChunkName: \"TagsToolbar\" */ '../../PresentationalComponents/TagsToolbar/TagsToolbar'));\n\nconst List = ({ fetchTopics, intl, selectedTags }) => {\n    useEffect(() => {\n        const options = selectedTags !== null && selectedTags.length && ({ tags: selectedTags.join() });\n        fetchTopics(options);\n    }, [fetchTopics, selectedTags]);\n\n    return <React.Fragment>\n        { !isGlobalFilter() && <TagsToolbar /> }\n        <PageHeader>\n            <PageHeaderTitle title={`${intl.formatMessage(messages.insightsHeader)} ${intl.formatMessage(messages.topics).toLowerCase()}`} />\n        </PageHeader>\n        <Main>\n            <TopicsTable />\n        </Main>\n    </React.Fragment>;\n};\n\nList.displayName = 'list-topics';\nList.propTypes = { fetchTopics: PropTypes.func, intl: PropTypes.any, selectedTags: PropTypes.array };\nconst mapStateToProps = (state, ownProps) => ({\n    selectedTags: state.AdvisorStore.selectedTags,\n    ...ownProps\n});\nconst mapDispatchToProps = dispatch => ({ fetchTopics: (options) => dispatch(AppActions.fetchTopics(options)) });\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(List)));\n","import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => <>\n    <Card>\n        <CardBody>\n            <List />\n        </CardBody>\n    </Card></>;\n\nexport default Loading;\n"],"sourceRoot":""}