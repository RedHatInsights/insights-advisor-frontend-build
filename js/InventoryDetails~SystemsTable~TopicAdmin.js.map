{"version":3,"sources":["webpack:///./src/AppActions.js"],"names":["fetchData","url","headers","options","search","a","insights","chrome","auth","getUser","API","get","response","data","setData","post","fetchRules","type","ActionTypes","payload","fetchRule","rule_id","fetchSystem","ruleId","encodeURI","setFilters","filters","fetchTopics","fetchTopicsAdmin","fetchTopic","topic_id","fetchSystems","fetchRuleAck","setAck","fetchHostAcks","setFiltersSystems","setSelectedTags","tags","setRule","rule","setSystem","system"],"mappings":"ipBAIMA,EAAS,+BAAG,WAAOC,EAAKC,EAASC,EAASC,GAA9B,eAAAC,EAAA,sEACRC,SAASC,OAAOC,KAAKC,UADb,WAEGL,EAFH,gCAGJM,IAAIC,IAAJ,UAAWV,EAAX,YAAkBG,GAAUF,EAASC,GAHjC,2DAIJO,IAAIC,IAAJ,UAAWV,GAAOC,EAASC,GAJvB,mCAERS,EAFQ,uBAKPA,EAASC,MALF,4CAAH,4DAQTC,EAAO,+BAAG,WAAOb,EAAKC,EAASC,GAArB,eAAAE,EAAA,sEACNC,SAASC,OAAOC,KAAKC,UADf,uBAEWC,IAAIK,KAAKd,EAAKC,EAASC,GAFlC,cAENS,EAFM,yBAGLA,EAASC,MAHJ,2CAAH,0DAkBAG,EAAa,SAACb,EAASC,GAAV,MAAsB,CAC5Ca,KAAMC,cACNC,QAASnB,EAAUkB,kBAA6B,GAAIf,EAASC,GAAUA,KAE9DgB,EAAY,SAACjB,EAASC,GAAV,MAAsB,CAC3Ca,KAAMC,aACNC,QAASnB,EAAU,GAAD,OAAIkB,mBAAJ,OAAkCf,EAAQkB,QAA1C,KAAsD,GAAIlB,EAASC,GAAUA,KAEtFkB,EAAc,SAACC,EAAQpB,EAASC,GAAlB,MAA8B,CACrDa,KAAMC,eACNC,QAASnB,EAAU,GAAD,OAAIkB,mBAAJ,OAAkCM,UAAUD,GAA5C,YAA+D,GAAIpB,EAASC,GAAUA,KAE/FqB,EAAa,SAACC,GAAD,MAAc,CACpCT,KAAMC,cACNC,QAASO,IAEAC,EAAc,SAACxB,GAAD,MAAc,CACrCc,KAAMC,eACNC,QAASnB,EAAUkB,mBAA8B,GAAIf,KAE5CyB,EAAmB,iBAAO,CACnCX,KAAMC,eACNC,QAASnB,EAAU,GAAD,OAAIkB,mBAAJ,0BAETW,EAAa,SAAC1B,GAAD,MAAc,CACpCc,KAAMC,cACNC,QAASnB,EAAU,GAAD,OAAIkB,oBAAJ,OAAmCf,EAAQ2B,SAA3C,QAETC,EAAe,SAAC5B,GAAD,MAAc,CACtCc,KAAMC,gBACNC,QAASnB,EAAUkB,oBAA+B,GAAIf,KAE7C6B,EAAe,SAAC7B,GAAD,MAAc,CACtCc,KAAMC,iBACNC,QAASnB,EAAU,GAAD,OAAIkB,gBAAJ,OAA+Bf,EAAQkB,QAAvC,QAETY,EAAS,SAAC9B,GAAD,MAAc,CAChCc,KAAMC,EAAY,GAAD,OAAIf,EAAQc,KAAZ,aACjBE,QAASL,EAAQI,EAAY,GAAD,OAAIf,EAAQc,KAAZ,aAA6B,GAAId,EAAQA,WAE5D+B,EAAgB,SAAC/B,GAAD,MAAc,CACvCc,KAAMC,iBACNC,QAASnB,EAAU,GAAD,OAAIkB,gBAA4B,GAAIf,KAE7CgC,EAAoB,SAACT,GAAD,MAAc,CAC3CT,KAAMC,sBACNC,QAASO,IAEAU,EAAkB,SAACC,GAAD,MAAW,CACtCpB,KAAMC,oBACNC,QAASkB,IAEAC,EAAU,SAACC,GAAD,MAAW,CAC9BtB,KAAMC,WACNC,QAASoB,IAEAC,EAAY,SAACC,GAAD,MAAa,CAClCxB,KAAMC,aACNC,QAASsB","file":"js/InventoryDetails~SystemsTable~TopicAdmin.js","sourcesContent":["import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options, search) => {\n    await insights.chrome.auth.getUser();\n    const response = search ?\n        await API.get(`${url}?${search}`, headers, options) :\n        await API.get(`${url}`, headers, options);\n    return response.data;\n};\n\nconst setData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.post(url, headers, options);\n    return response.data;\n};\n\nexport const fetchStatsRules = (options) => ({\n    type: ActionTypes.STATS_RULES_FETCH,\n    payload: fetchData(ActionTypes.STATS_RULES_FETCH_URL, {}, options)\n});\nexport const fetchStatsSystems = (options) => ({\n    type: ActionTypes.STATS_SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.STATS_SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchStatsStaleHosts = (options) => ({\n    type: ActionTypes.STATS_STALEHOSTS_FETCH,\n    payload: fetchData(ActionTypes.STATS_STALEHOSTS_FETCH_URL, {}, options)\n});\nexport const fetchRules = (options, search) => ({\n    type: ActionTypes.RULES_FETCH,\n    payload: fetchData(ActionTypes.RULES_FETCH_URL, {}, options, search && search)\n});\nexport const fetchRule = (options, search) => ({\n    type: ActionTypes.RULE_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/`, {}, options, search && search)\n});\nexport const fetchSystem = (ruleId, options, search) => ({\n    type: ActionTypes.SYSTEM_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${encodeURI(ruleId)}/systems`, {}, options, search && search)\n});\nexport const setFilters = (filters) => ({\n    type: ActionTypes.FILTERS_SET,\n    payload: filters\n});\nexport const fetchTopics = (options) => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(ActionTypes.TOPICS_FETCH_URL, {}, options)\n});\nexport const fetchTopicsAdmin = () => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}?show_disabled=true`)\n});\nexport const fetchTopic = (options) => ({\n    type: ActionTypes.TOPIC_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}${options.topic_id}/`)\n});\nexport const fetchSystems = (options) => ({\n    type: ActionTypes.SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchRuleAck = (options) => ({\n    type: ActionTypes.RULE_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.RULE_ACK_URL}${options.rule_id}/`)\n});\nexport const setAck = (options) => ({\n    type: ActionTypes[`${options.type}_ACK_SET`],\n    payload: setData(ActionTypes[`${options.type}_ACK_URL`], {}, options.options)\n});\nexport const fetchHostAcks = (options) => ({\n    type: ActionTypes.HOST_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.HOST_ACK_URL}`, {}, options)\n});\nexport const setFiltersSystems = (filters) => ({\n    type: ActionTypes.FILTERS_SYSTEMS_SET,\n    payload: filters\n});\nexport const setSelectedTags = (tags) => ({\n    type: ActionTypes.SELECTED_TAGS_SET,\n    payload: tags\n});\nexport const setRule = (rule) => ({\n    type: ActionTypes.RULE_SET,\n    payload: rule\n});\nexport const setSystem = (system) => ({\n    type: ActionTypes.SYSTEM_SET,\n    payload: system\n});\n"],"sourceRoot":""}