{"version":3,"sources":["webpack:///./src/AppActions.js"],"names":["fetchData","url","headers","options","a","insights","chrome","auth","getUser","API","get","response","data","setData","post","fetchRules","type","ActionTypes","payload","fetchRule","rule_id","tags","fetchSystem","ruleId","encodeURI","setFilters","filters","fetchTopics","fetchTopicsAdmin","fetchTopic","topic_id","fetchSystems","fetchRuleAck","setAck","fetchHostAcks","setFiltersSystems","setSelectedTags","setRule","rule","setSystem","system"],"mappings":"ipBAIMA,EAAS,+BAAG,WAAOC,EAAKC,EAASC,GAArB,eAAAC,EAAA,sEACRC,SAASC,OAAOC,KAAKC,UADb,uBAESC,IAAIC,IAAIT,EAAKC,EAASC,GAF/B,cAERQ,EAFQ,yBAGPA,EAASC,MAHF,2CAAH,0DAMTC,EAAO,+BAAG,WAAOZ,EAAKC,EAASC,GAArB,eAAAC,EAAA,sEACNC,SAASC,OAAOC,KAAKC,UADf,uBAEWC,IAAIK,KAAKb,EAAKC,EAASC,GAFlC,cAENQ,EAFM,yBAGLA,EAASC,MAHJ,2CAAH,0DAkBAG,EAAa,SAACZ,GAAD,MAAc,CACpCa,KAAMC,cACNC,QAASlB,EAAUiB,kBAA6B,GAAId,KAE3CgB,EAAY,SAAChB,GAAD,MAAc,CACnCa,KAAMC,aACNC,QAASlB,EAAU,GAAD,OAAIiB,mBAAJ,OAAkCd,EAAQiB,QAA1C,KAAsD,GAAIjB,EAAQkB,MAAQ,CAAEA,KAAMlB,EAAQkB,SAEnGC,EAAc,SAACC,EAAQpB,GAAT,MAAsB,CAC7Ca,KAAMC,eACNC,QAASlB,EAAU,GAAD,OAAIiB,mBAAJ,OAAkCO,UAAUD,GAA5C,YAA+D,GAAIpB,KAE5EsB,EAAa,SAACC,GAAD,MAAc,CACpCV,KAAMC,cACNC,QAASQ,IAEAC,EAAc,SAACxB,GAAD,MAAc,CACrCa,KAAMC,eACNC,QAASlB,EAAUiB,mBAA8B,GAAId,KAE5CyB,EAAmB,iBAAO,CACnCZ,KAAMC,eACNC,QAASlB,EAAU,GAAD,OAAIiB,mBAAJ,0BAETY,EAAa,SAAC1B,GAAD,MAAc,CACpCa,KAAMC,cACNC,QAASlB,EAAU,GAAD,OAAIiB,oBAAJ,OAAmCd,EAAQ2B,SAA3C,QAETC,EAAe,SAAC5B,GAAD,MAAc,CACtCa,KAAMC,gBACNC,QAASlB,EAAUiB,oBAA+B,GAAId,KAE7C6B,EAAe,SAAC7B,GAAD,MAAc,CACtCa,KAAMC,iBACNC,QAASlB,EAAU,GAAD,OAAIiB,gBAAJ,OAA+Bd,EAAQiB,QAAvC,QAETa,EAAS,SAAC9B,GAAD,MAAc,CAChCa,KAAMC,EAAY,GAAD,OAAId,EAAQa,KAAZ,aACjBE,QAASL,EAAQI,EAAY,GAAD,OAAId,EAAQa,KAAZ,aAA6B,GAAIb,EAAQA,WAE5D+B,EAAgB,SAAC/B,GAAD,MAAc,CACvCa,KAAMC,iBACNC,QAASlB,EAAU,GAAD,OAAIiB,gBAA4B,GAAId,KAE7CgC,EAAoB,SAACT,GAAD,MAAc,CAC3CV,KAAMC,sBACNC,QAASQ,IAEAU,EAAkB,SAACf,GAAD,MAAW,CACtCL,KAAMC,oBACNC,QAASG,IAEAgB,EAAU,SAACC,GAAD,MAAW,CAC9BtB,KAAMC,WACNC,QAASoB,IAEAC,EAAY,SAACC,GAAD,MAAa,CAClCxB,KAAMC,aACNC,QAASsB","file":"js/InventoryDetails~SystemsTable~TopicAdmin.js","sourcesContent":["import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.get(url, headers, options);\n    return response.data;\n};\n\nconst setData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.post(url, headers, options);\n    return response.data;\n};\n\nexport const fetchStatsRules = (options) => ({\n    type: ActionTypes.STATS_RULES_FETCH,\n    payload: fetchData(ActionTypes.STATS_RULES_FETCH_URL, {}, options)\n});\nexport const fetchStatsSystems = (options) => ({\n    type: ActionTypes.STATS_SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.STATS_SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchStatsStaleHosts = (options) => ({\n    type: ActionTypes.STATS_STALEHOSTS_FETCH,\n    payload: fetchData(ActionTypes.STATS_STALEHOSTS_FETCH_URL, {}, options)\n});\nexport const fetchRules = (options) => ({\n    type: ActionTypes.RULES_FETCH,\n    payload: fetchData(ActionTypes.RULES_FETCH_URL, {}, options)\n});\nexport const fetchRule = (options) => ({\n    type: ActionTypes.RULE_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/`, {}, options.tags && { tags: options.tags })\n});\nexport const fetchSystem = (ruleId, options) => ({\n    type: ActionTypes.SYSTEM_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${encodeURI(ruleId)}/systems`, {}, options)\n});\nexport const setFilters = (filters) => ({\n    type: ActionTypes.FILTERS_SET,\n    payload: filters\n});\nexport const fetchTopics = (options) => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(ActionTypes.TOPICS_FETCH_URL, {}, options)\n});\nexport const fetchTopicsAdmin = () => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}?show_disabled=true`)\n});\nexport const fetchTopic = (options) => ({\n    type: ActionTypes.TOPIC_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}${options.topic_id}/`)\n});\nexport const fetchSystems = (options) => ({\n    type: ActionTypes.SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchRuleAck = (options) => ({\n    type: ActionTypes.RULE_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.RULE_ACK_URL}${options.rule_id}/`)\n});\nexport const setAck = (options) => ({\n    type: ActionTypes[`${options.type}_ACK_SET`],\n    payload: setData(ActionTypes[`${options.type}_ACK_URL`], {}, options.options)\n});\nexport const fetchHostAcks = (options) => ({\n    type: ActionTypes.HOST_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.HOST_ACK_URL}`, {}, options)\n});\nexport const setFiltersSystems = (filters) => ({\n    type: ActionTypes.FILTERS_SYSTEMS_SET,\n    payload: filters\n});\nexport const setSelectedTags = (tags) => ({\n    type: ActionTypes.SELECTED_TAGS_SET,\n    payload: tags\n});\nexport const setRule = (rule) => ({\n    type: ActionTypes.RULE_SET,\n    payload: rule\n});\nexport const setSystem = (system) => ({\n    type: ActionTypes.SYSTEM_SET,\n    payload: system\n});\n"],"sourceRoot":""}