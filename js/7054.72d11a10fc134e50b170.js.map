{"version":3,"sources":["webpack://advisor-frontend/./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js"],"names":["Breadcrumbs","current","fetchRule","match","ruleFetchStatus","rule","intl","useState","items","setItems","ruleDescriptionLoaded","setRuleDescription","buildBreadcrumbs","useCallback","crumbs","splitUrl","url","split","push","title","formatMessage","messages","navigate","undefined","params","id","inventoryId","description","useEffect","rule_id","length","ouiaId","map","oneLink","key","Link","to","isActive","propTypes","PropTypes","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","AppActions"],"mappings":"8fAaA,IAAMA,EAAc,SAAC,GAOf,IANJC,EAMI,EANJA,QACAC,EAKI,EALJA,UACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,KACAC,EACI,EADJA,KAEA,GAA0BC,cAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoDF,eAAS,GAA7D,eAAOG,EAAP,KAA8BC,EAA9B,KACMC,GAAmBC,kBAAY,WACnC,IAAMC,EAAS,GACTC,EAAWZ,EAAMa,IAAIC,MAAM,KAGjCH,EAAOI,KAAK,CACVC,MAAO,GAAF,OAAKb,EAAKc,cAAcC,oBAAxB,YAAoDN,EAAS,IAClEO,SAAU,IAAF,OAAMP,EAAS,WAKHQ,IAApBpB,EAAMqB,OAAOC,SACgBF,IAA7BpB,EAAMqB,OAAOE,aAEbZ,EAAOI,KAAK,CACVC,MAAOd,EAAKsB,YACZL,SAAU,IAAF,OAAMnB,EAAMa,IAAIC,MAAM,KAAK,GAA3B,YAAiCd,EAAMqB,OAAOC,MAI1DhB,EAASK,KACR,CACDR,EACAH,EAAMqB,OAAOC,GACbtB,EAAMqB,OAAOE,YACbvB,EAAMa,IACNX,EAAKsB,cAuBP,OApBAC,gBAAU,WACR,IAAMb,EAAWZ,EAAMa,IAAIC,MAAM,UACJM,IAA7BpB,EAAMqB,OAAOE,aAA6C,YAAhBX,EAAS,GAC/Cb,EAAU,CAAE2B,QAAS1B,EAAMqB,OAAOC,KAClCb,MACH,CACDA,EACAV,EACAC,EAAMqB,OAAOC,GACbtB,EAAMqB,OAAOE,YACbvB,EAAMa,OAGRY,gBAAU,WACgB,cAApBxB,GAAoCM,IACtCC,GAAmB,GACnBC,OAED,CAACA,EAAkBR,EAAiBM,IAGrC,kBAAC,aAAD,MACwB,cAApBN,GAAmCI,EAAMsB,OAAS,IAClD,kBAAC,IAAD,CAAYC,OAAO,UAChBvB,EAAMwB,KAAI,SAACC,EAASC,GAAV,OACT,kBAAC,IAAD,CAAgBA,IAAKA,GACnB,kBAAC,EAAAC,KAAD,CAAMC,GAAIH,EAAQX,UAAWW,EAAQd,WAGzC,kBAAC,IAAD,CAAgBkB,UAAQ,GAAEpC,IAGT,YAApBG,GAAiCE,EAAKc,cAAcC,eAK3DrB,EAAYsC,UAAY,CACtBrC,QAASsC,WACTrC,UAAWqC,SACXpC,MAAOoC,WACPlC,KAAMkC,WACNnC,gBAAiBmC,WACjBjC,KAAMiC,SAaR,SAAeC,SACbC,QAAaC,cAXS,SAACC,EAAOC,GAAR,O,qWAAA,EACtBvC,KAAMsC,EAAME,aAAaxC,KACzBD,gBAAiBuC,EAAME,aAAazC,iBACjCwC,MAGsB,SAACE,GAAD,MAAe,CACxC5C,UAAW,SAACc,GAAD,OAAS8B,EAASC,KAAqB/B,QAIrC0B,CAA6C1C","file":"js/7054.72d11a10fc134e50b170.js","sourcesContent":["import * as AppActions from '../../AppActions';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\n\nconst Breadcrumbs = ({\n  current,\n  fetchRule,\n  match,\n  ruleFetchStatus,\n  rule,\n  intl,\n}) => {\n  const [items, setItems] = useState([]);\n  const [ruleDescriptionLoaded, setRuleDescription] = useState(false);\n  const buildBreadcrumbs = useCallback(() => {\n    const crumbs = [];\n    const splitUrl = match.url.split('/');\n\n    // add base\n    crumbs.push({\n      title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`,\n      navigate: `/${splitUrl[1]}`,\n    });\n\n    // if applicable, add :id breadcrumb\n    if (\n      match.params.id !== undefined &&\n      match.params.inventoryId !== undefined\n    ) {\n      crumbs.push({\n        title: rule.description,\n        navigate: `/${match.url.split('/')[1]}/${match.params.id}`,\n      });\n    }\n\n    setItems(crumbs);\n  }, [\n    intl,\n    match.params.id,\n    match.params.inventoryId,\n    match.url,\n    rule.description,\n  ]);\n\n  useEffect(() => {\n    const splitUrl = match.url.split('/');\n    match.params.inventoryId !== undefined && splitUrl[1] !== 'systems'\n      ? fetchRule({ rule_id: match.params.id })\n      : buildBreadcrumbs();\n  }, [\n    buildBreadcrumbs,\n    fetchRule,\n    match.params.id,\n    match.params.inventoryId,\n    match.url,\n  ]);\n\n  useEffect(() => {\n    if (ruleFetchStatus === 'fulfilled' && !ruleDescriptionLoaded) {\n      setRuleDescription(true);\n      buildBreadcrumbs();\n    }\n  }, [buildBreadcrumbs, ruleFetchStatus, ruleDescriptionLoaded]);\n\n  return (\n    <React.Fragment>\n      {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n        <Breadcrumb ouiaId=\"detail\">\n          {items.map((oneLink, key) => (\n            <BreadcrumbItem key={key}>\n              <Link to={oneLink.navigate}>{oneLink.title}</Link>\n            </BreadcrumbItem>\n          ))}\n          <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n        </Breadcrumb>\n      )}\n      {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n    </React.Fragment>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  current: PropTypes.string,\n  fetchRule: PropTypes.func,\n  match: PropTypes.object,\n  rule: PropTypes.object,\n  ruleFetchStatus: PropTypes.string,\n  intl: PropTypes.any,\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  rule: state.AdvisorStore.rule,\n  ruleFetchStatus: state.AdvisorStore.ruleFetchStatus,\n  ...ownProps,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchRule: (url) => dispatch(AppActions.fetchRule(url)),\n});\n\nexport default injectIntl(\n  routerParams(connect(mapStateToProps, mapDispatchToProps)(Breadcrumbs))\n);\n"],"sourceRoot":""}