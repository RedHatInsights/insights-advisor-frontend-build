{"version":3,"sources":["webpack:///./src/PresentationalComponents/Inventory/InventoryDetails.js","webpack:///./src/Utilities/Api.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js"],"names":["InventoryDetails","entity","match","useState","InventoryDetail","setInventoryDetail","AppInfo","setAppInfo","store","useStore","fetchInventoryDetails","a","insights","loadInventory","ReactRedux","react","React","reactRouterDom","pfReactTable","inventoryConnector","mergeWithDetail","INVENTORY_ACTION_TYPES","InventoryDetailHead","getRegistry","register","entitiesDetailsReducer","useEffect","Fragment","className","current","display_name","id","hideBack","gutter","span","contextTypes","PropTypes","object","propTypes","history","addAlert","func","any","routerParams","connect","entityDetails","props","get","url","headers","params","axios","put","data","post","urlBuilder","filters","selectedTags","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","URLSearchParams","length","set","replaceState","origin","pathname","toString","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","capitalize","string","toUpperCase","substring","pruneFilters","localFilters","filterCategories","prunedFilters","item","category","chips","selectedCategoryValue","values","find","String","name","text","label","title","urlParam","Breadcrumbs","fetchRule","ruleFetchStatus","rule","intl","items","setItems","ruleDescriptionLoaded","setRuleDescription","buildBreadcrumbs","useCallback","crumbs","splitUrl","push","navigate","undefined","inventoryId","description","rule_id","oneLink","to","isActive","formatMessage","messages","loading","injectIntl","state","ownProps","AdvisorStore","dispatch","AppActions"],"mappings":"03BAmBA,IAAMA,EAAmB,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAAY,EACEC,qBADF,WACrCC,EADqC,KACpBC,EADoB,OAEdF,qBAFc,WAErCG,EAFqC,KAE5BC,EAF4B,KAGtCC,EAAQC,qBAERC,EAAqB,+BAAG,wCAAAC,EAAA,sEACoDC,SAASC,cAAc,CACjGC,aACAC,MAAOC,IACPC,iBACAC,iBALsB,gBAClBC,EADkB,EAClBA,mBAAoBC,EADF,EACEA,gBAAiBC,EADnB,EACmBA,uBADnB,EAOeF,EAAmBX,GAApDc,EAPkB,EAOlBA,oBAAqBhB,EAPH,EAOGA,QAE7BiB,wBAAcC,SAAd,KACOJ,EAAgBK,YAAuBJ,MAE9ChB,GAAmB,kBAAMiB,KACzBf,GAAW,kBAAMD,KAbS,4CAAH,qDAmB3B,OAFAoB,qBAAU,WAAQhB,MAA4B,IAEvC,kBAAC,IAAMiB,SAAP,KACH,kBAAC,aAAD,CAAYC,UAAU,mCACjB3B,GAAU,kBAAC,IAAD,CACP4B,QAAS5B,EAAO6B,cAAgB7B,EAAO8B,GACvC7B,MAAOA,IAEVE,GAAmB,kBAACA,EAAD,CAAiB4B,UAAQ,KAEjD,kBAAC,OAAD,KACI,kBAAC,OAAD,CAAMC,OAAO,MACT,kBAAC,WAAD,CAAUC,KAAM,IACX5B,GAAW,kBAACA,EAAD,WAOhCN,EAAiBmC,aAAe,CAC5B3B,MAAO4B,IAAUC,QAGrBrC,EAAiBsC,UAAY,CACzBC,QAASH,IAAUC,OACnBpC,OAAQmC,IAAUC,OAClBG,SAAUJ,IAAUK,KACpBvC,MAAOkC,IAAUM,KAQNC,cAAaC,mBALJ,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,MAAlB,UACpB7C,OAAQ4C,GAAiBA,EAAc5C,QACpC6C,KAG8C,KAAzBF,CAA+B5C,K,iCC7E3D,sBAEe,KACX+C,IADW,SACPC,GAAgC,IAA3BC,EAA2B,uDAAjB,GAAIC,EAAa,uDAAJ,GAC5B,OAAOC,IAAMJ,IAAIC,EAAK,CAClBC,UACAC,YAGRE,IAPW,SAOPJ,GAA8B,IAAzBK,EAAyB,uDAAlB,GAAIJ,EAAc,uDAAJ,GAC1B,OAAOE,IAAMC,IAAIJ,EAAKK,EAAM,CACxBJ,aAGRK,KAZW,SAYNN,GAA8B,IAAzBC,EAAyB,uDAAf,GAAII,EAAW,uDAAJ,GAC3B,OAAOF,IAAMG,KAAKN,EAAKK,EAAM,CACzBJ,aAdG,gBAiBJD,GAA8B,IAAzBK,EAAyB,uDAAlB,GAAIJ,EAAc,uDAAJ,GAC7B,OAAOE,IAAK,OAAQH,EAAKK,EAAM,CAC3BJ,e,s0BCpBL,IAAMM,EAAa,SAACC,EAASC,GAChC,IAAMT,EAAM,IAAIU,IAAIC,OAAOC,UACrBC,EAAc,GAAH,OAAMC,OAAOC,KAAKP,GAASQ,KAAI,SAAAC,GAAG,gBAAOA,EAAP,YAAcC,MAAMC,QAAQX,EAAQS,IAAQT,EAAQS,GAAKG,OAASZ,EAAQS,OAAQG,KAAK,MACpIlB,EAAS,IAAImB,gBAAgBR,GAGnC,OAFiB,OAAjBJ,GAAyBA,EAAaa,OAASpB,EAAOqB,IAAI,OAAQd,EAAaW,QAAUlB,EAAM,OAAQ,QACvGS,OAAOpB,QAAQiC,aAAa,KAAM,KAAlC,UAA2CxB,EAAIyB,QAA/C,OAAwDzB,EAAI0B,SAA5D,YAAwExB,EAAOyB,aAC/E,WAAWd,IAIFe,EAAqB,SAACpB,GAAD,OAAaM,OAAOe,OAAP,MAAAf,OAAM,CAAQ,IAAR,WAC9CA,OAAOgB,QAAQtB,GAASQ,KAAI,2BAAEe,EAAF,KAAcC,EAAd,YAA+Bd,MAAMC,QAAQa,IACnD,SAAnBA,EAAY,IAAsC,UAAnBA,EAAY,KAAoBA,EAAYV,OAAS,EAAI,KAA1F,OACSS,EAAaC,EAAYZ,QAFwB,OAGrDW,EAAaC,UAIbC,EAAc,WACvB,IAAMC,EAAe,IAAIb,gBAAgBV,OAAOC,SAASuB,QACzD,OAAOjB,MAAMkB,KAAKF,GAAcG,QAAO,SAACC,EAAD,kBAAOrB,EAAP,KAAYsB,EAAZ,mBAChCD,GADgC,UAC1BrB,EAAiB,SAAVsB,GAA8B,UAAVA,EAAqBC,KAAKC,MAAMF,GAASA,EAAMG,MAAM,SACzF,KAIKC,EAAa,SAACC,GAAD,OAAYA,EAAO,GAAGC,cAAgBD,EAAOE,UAAU,IAEpEC,EAAe,SAACC,EAAcC,GACvC,IAAMC,EAAgBpC,OAAOgB,QAAQkB,GACrC,OAAOE,EAAc5B,OAAS,EAAI4B,EAAclC,KAAI,SAAAmC,GAChD,GAAIF,EAAiBE,EAAK,IAAK,CAC3B,IAAMC,EAAWH,EAAiBE,EAAK,IACjCE,EAAQnC,MAAMC,QAAQgC,EAAK,IAAMA,EAAK,GAAGnC,KAAI,SAAAuB,GAC/C,IAAMe,EAAwBF,EAASG,OAAOC,MAAK,SAAAD,GAAM,OAAIA,EAAOhB,QAAUkB,OAAOlB,MACrF,OAAOe,EAAwB,CAAEI,KAAMJ,EAAsBK,MAAQL,EAAsBM,MAAOrB,SAAU,CAAEmB,KAAMnB,EAAOA,YAEzH,CAAC,CAAEmB,KAAMN,EAASG,OAAOC,MAAK,SAAAD,GAAM,OAAIA,EAAOhB,QAAUkB,OAAON,EAAK,OAAKS,MAAOrB,MAAOY,EAAK,KACnG,MAAO,CAAEC,SAAUT,EAAWS,EAASS,OAAQR,QAAOS,SAAUV,EAASU,UAEzE,MAAO,CAAEV,SAAU,OAAQC,MAAO,CAAC,CAAEK,KAAMP,EAAK,GAAIZ,MAAOY,EAAK,KAAOW,SAAUX,EAAK,OAGxF,K,8ZC7BV,IAAMY,EAAc,SAAC,GAA+D,IAA7DlF,EAA6D,EAA7DA,QAASmF,EAAoD,EAApDA,UAAW9G,EAAyC,EAAzCA,MAAO+G,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAAW,EACtDhH,mBAAS,IAD6C,WACzEiH,EADyE,KAClEC,EADkE,OAE5BlH,oBAAS,GAFmB,WAEzEmH,EAFyE,KAElDC,EAFkD,KAG1EC,EAAmBC,uBAAY,WACjC,IAAMC,EAAS,GACTC,EAAWzH,EAAM8C,IAAI0C,MAAM,KAGjCgC,EAAOE,KAAK,CAAEf,MAAOlB,YAAWgC,EAAS,IAAKE,SAAU,IAAF,OAAMF,EAAS,WAG7CG,IAApB5H,EAAMgD,OAAOnB,SAAiD+F,IAA7B5H,EAAMgD,OAAO6E,aAC9CL,EAAOE,KAAK,CACRf,MAAOK,EAAKc,YACZH,SAAU,IAAF,OAAM3H,EAAM8C,IAAI0C,MAAM,KAAK,GAA3B,YAAiCxF,EAAMgD,OAAOnB,MAI9DsF,EAASK,KACV,CAACP,EAAMjH,EAAMgD,OAAOnB,GAAI7B,EAAMgD,OAAO6E,YAAa7H,EAAM8C,IAAKkE,EAAKc,cAgBrE,OAdAtG,qBAAU,WACN,IAAMiG,EAAWzH,EAAM8C,IAAI0C,MAAM,UACJoC,IAA7B5H,EAAMgD,OAAO6E,aAA6C,YAAhBJ,EAAS,GAC/CX,EAAU,CAAEiB,QAAS/H,EAAMgD,OAAOnB,KAChCyF,MACP,CAACA,EAAkBR,EAAW9G,EAAMgD,OAAOnB,GAAI7B,EAAMgD,OAAO6E,YAAa7H,EAAM8C,MAElFtB,qBAAU,WACkB,cAApBuF,GAAoCK,IACpCC,GAAmB,GACnBC,OAEL,CAACA,EAAkBP,EAAiBK,IAGnC,kBAAC,IAAM3F,SAAP,MAC0B,cAApBsF,GAAmCG,EAAM9C,OAAS,IAChD,kBAAC,aAAD,KACK8C,EAAMpD,KAAI,SAACkE,EAASjE,GAAV,OACP,kBAAC,iBAAD,CAAgBA,IAAKA,GACjB,kBAAC,OAAD,CAAMkE,GAAID,EAAQL,UAAWK,EAAQrB,WAG7C,kBAAC,iBAAD,CAAgBuB,UAAQ,GAAEvG,IAGb,YAApBoF,GAAiCE,EAAKkB,cAAcC,IAASC,WAK1ExB,EAAYzE,UAAY,CACpBT,QAASO,IAAUwD,OACnBoB,UAAW5E,IAAUK,KACrBvC,MAAOkC,IAAUC,OACjB6E,KAAM9E,IAAUC,OAChB4E,gBAAiB7E,IAAUwD,OAC3BuB,KAAM/E,IAAUM,KAaL8F,gBAAW7F,IAAaC,mBAVf,SAAC6F,EAAOC,GAAR,O,iWAAA,EACpBxB,KAAMuB,EAAME,aAAazB,KACzBD,gBAAiBwB,EAAME,aAAa1B,iBACjCyB,MAGoB,SAAAE,GAAQ,MAAK,CACpC5B,UAAW,SAAChE,GAAD,OAAS4F,EAASC,IAAqB7F,QAGfJ,CAGrCmE","file":"js/InventoryDetails.js","sourcesContent":["import '@redhat-cloud-services/frontend-components-inventory-insights/index.css';\n\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { entitiesDetailsReducer } from '../../AppReducer';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useStore } from 'react-redux';\n\nconst InventoryDetails = ({ entity, match }) => {\n    const [InventoryDetail, setInventoryDetail] = useState();\n    const [AppInfo, setAppInfo] = useState();\n    const store = useStore();\n\n    const fetchInventoryDetails = async () => {\n        const { inventoryConnector, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable\n        });\n        const { InventoryDetailHead, AppInfo } = inventoryConnector(store);\n\n        getRegistry().register({\n            ...mergeWithDetail(entitiesDetailsReducer(INVENTORY_ACTION_TYPES))\n        });\n        setInventoryDetail(() => InventoryDetailHead);\n        setAppInfo(() => AppInfo);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => { fetchInventoryDetails(); }, []);\n\n    return <React.Fragment>\n        <PageHeader className=\"pf-m-light ins-inventory-detail\">\n            {entity && <Breadcrumbs\n                current={entity.display_name || entity.id}\n                match={match}\n            />}\n            {InventoryDetail && <InventoryDetail hideBack />}\n        </PageHeader>\n        <Main>\n            <Grid gutter=\"md\">\n                <GridItem span={12}>\n                    {AppInfo && <AppInfo />}\n                </GridItem>\n            </Grid>\n        </Main>\n    </React.Fragment>;\n};\n\nInventoryDetails.contextTypes = {\n    store: PropTypes.object\n};\n\nInventoryDetails.propTypes = {\n    history: PropTypes.object,\n    entity: PropTypes.object,\n    addAlert: PropTypes.func,\n    match: PropTypes.any\n};\n\nconst mapStateToProps = ({ entityDetails, props }) => ({\n    entity: entityDetails && entityDetails.entity,\n    ...props\n});\n\nexport default routerParams(connect(mapStateToProps, null)(InventoryDetails));\n","import axios from 'axios';\n\nexport default {\n    get(url, headers = {}, params = {}) {\n        return axios.get(url, {\n            headers,\n            params\n        });\n    },\n    put(url, data = {}, headers = {}) {\n        return axios.put(url, data, {\n            headers\n        });\n    },\n    post(url, headers = {}, data = {}) {\n        return axios.post(url, data, {\n            headers\n        });\n    },\n    delete(url, data = {}, headers = {}) {\n        return axios.delete(url, data, {\n            headers\n        });\n    }\n};\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.map(item => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return selectedCategoryValue ? { name: selectedCategoryValue.text || selectedCategoryValue.label, value } : { name: value, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return { category: capitalize(category.title), chips, urlParam: category.urlParam };\n        } else {\n            return { category: 'Name', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] };\n        }\n    })\n        : [];\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as AppActions from '../../AppActions';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../Common/Tables';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst Breadcrumbs = ({ current, fetchRule, match, ruleFetchStatus, rule, intl }) => {\n    const [items, setItems] = useState([]);\n    const [ruleDescriptionLoaded, setRuleDescription] = useState(false);\n    const buildBreadcrumbs = useCallback(() => {\n        const crumbs = [];\n        const splitUrl = match.url.split('/');\n\n        // add recommendations base\n        crumbs.push({ title: capitalize(splitUrl[1]), navigate: `/${splitUrl[1]}` });\n\n        // if applicable, add :id breadcrumb\n        if (match.params.id !== undefined && match.params.inventoryId !== undefined) {\n            crumbs.push({\n                title: rule.description,\n                navigate: `/${match.url.split('/')[1]}/${match.params.id}`\n            });\n        }\n\n        setItems(crumbs);\n    }, [intl, match.params.id, match.params.inventoryId, match.url, rule.description]);\n\n    useEffect(() => {\n        const splitUrl = match.url.split('/');\n        match.params.inventoryId !== undefined && splitUrl[1] !== 'systems' ?\n            fetchRule({ rule_id: match.params.id }) // eslint-disable-line camelcase\n            : buildBreadcrumbs();\n    }, [buildBreadcrumbs, fetchRule, match.params.id, match.params.inventoryId, match.url]);\n\n    useEffect(() => {\n        if (ruleFetchStatus === 'fulfilled' && !ruleDescriptionLoaded) {\n            setRuleDescription(true);\n            buildBreadcrumbs();\n        }\n    }, [buildBreadcrumbs, ruleFetchStatus, ruleDescriptionLoaded]);\n\n    return (\n        <React.Fragment>\n            {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n                <Breadcrumb>\n                    {items.map((oneLink, key) => (\n                        <BreadcrumbItem key={key}>\n                            <Link to={oneLink.navigate}>{oneLink.title}</Link>\n                        </BreadcrumbItem>\n                    ))}\n                    <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n                </Breadcrumb>\n            )}\n            {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n        </React.Fragment>\n    );\n};\n\nBreadcrumbs.propTypes = {\n    current: PropTypes.string,\n    fetchRule: PropTypes.func,\n    match: PropTypes.object,\n    rule: PropTypes.object,\n    ruleFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rule: state.AdvisorStore.rule,\n    ruleFetchStatus: state.AdvisorStore.ruleFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRule: (url) => dispatch(AppActions.fetchRule(url))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Breadcrumbs)));\n"],"sourceRoot":""}