{"version":3,"sources":["webpack:///./src/Utilities/Api.js","webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js","webpack:///./src/PresentationalComponents/Inventory/InventoryDetails.js"],"names":["get","url","headers","params","axios","put","data","post","Breadcrumbs","current","fetchRule","match","ruleFetchStatus","rule","intl","useState","items","setItems","ruleDescriptionLoaded","setRuleDescription","buildBreadcrumbs","useCallback","crumbs","splitUrl","split","push","title","formatMessage","messages","insightsHeader","navigate","undefined","id","inventoryId","description","useEffect","rule_id","Fragment","length","map","oneLink","key","to","isActive","loading","propTypes","PropTypes","string","func","object","any","injectIntl","routerParams","connect","state","ownProps","AdvisorStore","dispatch","AppActions","InventoryDetails","entity","InventoryDetail","setInventoryDetail","AppInfo","setAppInfo","InvWrapper","setInvWrapper","store","useStore","fetchInventoryDetails","a","insights","loadInventory","ReactRedux","react","React","reactRouterDom","pfReactTable","pfReact","reactCore","inventoryConnector","mergeWithDetail","INVENTORY_ACTION_TYPES","InventoryDetailHead","DetailWrapper","getRegistry","register","entitiesDetailsReducer","Wrapper","className","display_name","hideBack","hasGutter","span","contextTypes","history","addAlert","entityDetails","props"],"mappings":"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","file":"js/InventoryDetails.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    get(url, headers = {}, params = {}) {\n        return axios.get(url, {\n            headers,\n            params\n        });\n    },\n    put(url, data = {}, headers = {}) {\n        return axios.put(url, data, {\n            headers\n        });\n    },\n    post(url, headers = {}, data = {}) {\n        return axios.post(url, data, {\n            headers\n        });\n    },\n    delete(url, data = {}, headers = {}) {\n        return axios.delete(url, data, {\n            headers\n        });\n    }\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as AppActions from '../../AppActions';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst Breadcrumbs = ({ current, fetchRule, match, ruleFetchStatus, rule, intl }) => {\n    const [items, setItems] = useState([]);\n    const [ruleDescriptionLoaded, setRuleDescription] = useState(false);\n    const buildBreadcrumbs = useCallback(() => {\n        const crumbs = [];\n        const splitUrl = match.url.split('/');\n\n        // add base\n        crumbs.push({ title: `${intl.formatMessage(messages.insightsHeader)} ${splitUrl[1]}`, navigate: `/${splitUrl[1]}` });\n\n        // if applicable, add :id breadcrumb\n        if (match.params.id !== undefined && match.params.inventoryId !== undefined) {\n            crumbs.push({\n                title: rule.description,\n                navigate: `/${match.url.split('/')[1]}/${match.params.id}`\n            });\n        }\n\n        setItems(crumbs);\n    }, [intl, match.params.id, match.params.inventoryId, match.url, rule.description]);\n\n    useEffect(() => {\n        const splitUrl = match.url.split('/');\n        match.params.inventoryId !== undefined && splitUrl[1] !== 'systems' ?\n            fetchRule({ rule_id: match.params.id }) // eslint-disable-line camelcase\n            : buildBreadcrumbs();\n    }, [buildBreadcrumbs, fetchRule, match.params.id, match.params.inventoryId, match.url]);\n\n    useEffect(() => {\n        if (ruleFetchStatus === 'fulfilled' && !ruleDescriptionLoaded) {\n            setRuleDescription(true);\n            buildBreadcrumbs();\n        }\n    }, [buildBreadcrumbs, ruleFetchStatus, ruleDescriptionLoaded]);\n\n    return (\n        <React.Fragment>\n            {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n                <Breadcrumb>\n                    {items.map((oneLink, key) => (\n                        <BreadcrumbItem key={key}>\n                            <Link to={oneLink.navigate}>{oneLink.title}</Link>\n                        </BreadcrumbItem>\n                    ))}\n                    <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n                </Breadcrumb>\n            )}\n            {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n        </React.Fragment>\n    );\n};\n\nBreadcrumbs.propTypes = {\n    current: PropTypes.string,\n    fetchRule: PropTypes.func,\n    match: PropTypes.object,\n    rule: PropTypes.object,\n    ruleFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rule: state.AdvisorStore.rule,\n    ruleFetchStatus: state.AdvisorStore.ruleFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRule: (url) => dispatch(AppActions.fetchRule(url))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Breadcrumbs)));\n","import '@redhat-cloud-services/frontend-components-inventory-insights/index.css';\n\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { entitiesDetailsReducer } from '../../AppReducer';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useStore } from 'react-redux';\n\nconst InventoryDetails = ({ entity, match }) => {\n    const [InventoryDetail, setInventoryDetail] = useState();\n    const [AppInfo, setAppInfo] = useState();\n    const [InvWrapper, setInvWrapper] = useState();\n    const store = useStore();\n\n    const fetchInventoryDetails = async () => {\n        const { inventoryConnector, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable,\n            pfReact: reactCore\n        });\n        const { InventoryDetailHead, AppInfo, DetailWrapper } = inventoryConnector(store);\n\n        getRegistry().register({\n            ...mergeWithDetail(entitiesDetailsReducer(INVENTORY_ACTION_TYPES))\n        });\n        setInventoryDetail(() => InventoryDetailHead);\n        setAppInfo(() => AppInfo);\n        setInvWrapper(() => DetailWrapper);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => { fetchInventoryDetails(); }, []);\n    const Wrapper = InvWrapper || React.Fragment;\n\n    return <Wrapper>\n        <PageHeader className=\"pf-m-light ins-inventory-detail\">\n            {entity && <Breadcrumbs\n                current={entity.display_name || entity.id}\n                match={match}\n            />}\n            {InventoryDetail && <InventoryDetail hideBack />}\n        </PageHeader>\n        <Main>\n            <Grid hasGutter>\n                <GridItem span={12}>\n                    {AppInfo && <AppInfo />}\n                </GridItem>\n            </Grid>\n        </Main>\n    </Wrapper>;\n};\n\nInventoryDetails.contextTypes = {\n    store: PropTypes.object\n};\n\nInventoryDetails.propTypes = {\n    history: PropTypes.object,\n    entity: PropTypes.object,\n    addAlert: PropTypes.func,\n    match: PropTypes.any\n};\n\nconst mapStateToProps = ({ entityDetails, props }) => ({\n    entity: entityDetails && entityDetails.entity,\n    ...props\n});\n\nexport default routerParams(connect(mapStateToProps, null)(InventoryDetails));\n"],"sourceRoot":""}