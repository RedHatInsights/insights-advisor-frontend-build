{"version":3,"sources":["webpack:///./src/PresentationalComponents/Inventory/InventoryDetails.js","webpack:///./src/Utilities/Api.js","webpack:///./src/AppActions.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Breadcrumbs/Breadcrumbs.js"],"names":["InventoryDetails","entity","match","useState","InventoryDetail","setInventoryDetail","AppInfo","setAppInfo","store","useStore","fetchInventoryDetails","a","insights","loadInventory","react","React","reactRouterDom","pfReactTable","inventoryConnector","mergeWithDetail","INVENTORY_ACTION_TYPES","InventoryDetailHead","getRegistry","register","entitiesDetailsReducer","useEffect","Fragment","className","current","display_name","id","hideBack","gutter","span","contextTypes","PropTypes","object","propTypes","history","addAlert","func","any","routerParams","connect","entityDetails","props","get","url","headers","params","axios","put","data","post","fetchData","options","chrome","auth","getUser","API","response","setData","fetchRules","type","ActionTypes","payload","fetchRule","rule_id","tags","fetchSystem","ruleId","encodeURI","setFilters","filters","fetchTopics","fetchTopicsAdmin","fetchTopic","topic_id","fetchSystems","fetchRuleAck","setAck","fetchHostAcks","setFiltersSystems","setSelectedTags","setRule","rule","setSystem","system","urlBuilder","selectedTags","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","URLSearchParams","length","set","replaceState","origin","pathname","toString","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","capitalize","string","toUpperCase","substring","Breadcrumbs","ruleFetchStatus","intl","items","setItems","ruleDescriptionLoaded","setRuleDescription","buildBreadcrumbs","useCallback","crumbs","splitUrl","push","title","navigate","formatMessage","messages","systems","undefined","inventoryId","description","oneLink","to","isActive","loading","injectIntl","state","ownProps","AdvisorStore","dispatch","AppActions"],"mappings":"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","file":"js/InventoryDetails.js","sourcesContent":["import '@redhat-cloud-services/frontend-components-inventory-insights/index.css';\n\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\nimport React, { useEffect, useState } from 'react';\n\nimport Breadcrumbs from '../../PresentationalComponents/Breadcrumbs/Breadcrumbs';\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { entitiesDetailsReducer } from '../../AppReducer';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useStore } from 'react-redux';\n\nconst InventoryDetails = ({ entity, match }) => {\n    const [InventoryDetail, setInventoryDetail] = useState();\n    const [AppInfo, setAppInfo] = useState();\n    const store = useStore();\n\n    const fetchInventoryDetails = async () => {\n        const { inventoryConnector, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            pfReactTable\n        });\n        const { InventoryDetailHead, AppInfo } = inventoryConnector(store);\n\n        getRegistry().register({\n            ...mergeWithDetail(entitiesDetailsReducer(INVENTORY_ACTION_TYPES))\n        });\n        setInventoryDetail(() => InventoryDetailHead);\n        setAppInfo(() => AppInfo);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => { fetchInventoryDetails(); }, []);\n\n    return <React.Fragment>\n        <PageHeader className=\"pf-m-light ins-inventory-detail\">\n            {entity && <Breadcrumbs\n                current={entity.display_name || entity.id}\n                match={match}\n            />}\n            {InventoryDetail && <InventoryDetail hideBack />}\n        </PageHeader>\n        <Main>\n            <Grid gutter=\"md\">\n                <GridItem span={12}>\n                    {AppInfo && <AppInfo />}\n                </GridItem>\n            </Grid>\n        </Main>\n    </React.Fragment>;\n};\n\nInventoryDetails.contextTypes = {\n    store: PropTypes.object\n};\n\nInventoryDetails.propTypes = {\n    history: PropTypes.object,\n    entity: PropTypes.object,\n    addAlert: PropTypes.func,\n    match: PropTypes.any\n};\n\nconst mapStateToProps = ({ entityDetails, props }) => ({\n    entity: entityDetails && entityDetails.entity,\n    ...props\n});\n\nexport default routerParams(connect(mapStateToProps, null)(InventoryDetails));\n","import axios from 'axios';\n\nexport default {\n    get(url, headers = {}, params = {}) {\n        return axios.get(url, {\n            headers,\n            params\n        });\n    },\n    put(url, data = {}, headers = {}) {\n        return axios.put(url, data, {\n            headers\n        });\n    },\n    post(url, headers = {}, data = {}) {\n        return axios.post(url, data, {\n            headers\n        });\n    },\n    delete(url, data = {}, headers = {}) {\n        return axios.delete(url, data, {\n            headers\n        });\n    }\n};\n","import * as ActionTypes from './AppConstants';\n\nimport API from './Utilities/Api';\n\nconst fetchData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.get(url, headers, options);\n    return response.data;\n};\n\nconst setData = async (url, headers, options) => {\n    await insights.chrome.auth.getUser();\n    const response = await API.post(url, headers, options);\n    return response.data;\n};\n\nexport const fetchStatsRules = (options) => ({\n    type: ActionTypes.STATS_RULES_FETCH,\n    payload: fetchData(ActionTypes.STATS_RULES_FETCH_URL, {}, options)\n});\nexport const fetchStatsSystems = (options) => ({\n    type: ActionTypes.STATS_SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.STATS_SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchStatsStaleHosts = (options) => ({\n    type: ActionTypes.STATS_STALEHOSTS_FETCH,\n    payload: fetchData(ActionTypes.STATS_STALEHOSTS_FETCH_URL, {}, options)\n});\nexport const fetchRules = (options) => ({\n    type: ActionTypes.RULES_FETCH,\n    payload: fetchData(ActionTypes.RULES_FETCH_URL, {}, options)\n});\nexport const fetchRule = (options) => ({\n    type: ActionTypes.RULE_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${options.rule_id}/`, {}, options.tags && { tags: options.tags })\n});\nexport const fetchSystem = (ruleId, options) => ({\n    type: ActionTypes.SYSTEM_FETCH,\n    payload: fetchData(`${ActionTypes.RULES_FETCH_URL}${encodeURI(ruleId)}/systems`, {}, options)\n});\nexport const setFilters = (filters) => ({\n    type: ActionTypes.FILTERS_SET,\n    payload: filters\n});\nexport const fetchTopics = (options) => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(ActionTypes.TOPICS_FETCH_URL, {}, options)\n});\nexport const fetchTopicsAdmin = () => ({\n    type: ActionTypes.TOPICS_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}?show_disabled=true`)\n});\nexport const fetchTopic = (options) => ({\n    type: ActionTypes.TOPIC_FETCH,\n    payload: fetchData(`${ActionTypes.TOPICS_FETCH_URL}${options.topic_id}/`)\n});\nexport const fetchSystems = (options) => ({\n    type: ActionTypes.SYSTEMS_FETCH,\n    payload: fetchData(ActionTypes.SYSTEMS_FETCH_URL, {}, options)\n});\nexport const fetchRuleAck = (options) => ({\n    type: ActionTypes.RULE_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.RULE_ACK_URL}${options.rule_id}/`)\n});\nexport const setAck = (options) => ({\n    type: ActionTypes[`${options.type}_ACK_SET`],\n    payload: setData(ActionTypes[`${options.type}_ACK_URL`], {}, options.options)\n});\nexport const fetchHostAcks = (options) => ({\n    type: ActionTypes.HOST_ACK_FETCH,\n    payload: fetchData(`${ActionTypes.HOST_ACK_URL}`, {}, options)\n});\nexport const setFiltersSystems = (filters) => ({\n    type: ActionTypes.FILTERS_SYSTEMS_SET,\n    payload: filters\n});\nexport const setSelectedTags = (tags) => ({\n    type: ActionTypes.SELECTED_TAGS_SET,\n    payload: tags\n});\nexport const setRule = (rule) => ({\n    type: ActionTypes.RULE_SET,\n    payload: rule\n});\nexport const setSystem = (system) => ({\n    type: ActionTypes.SYSTEM_SET,\n    payload: system\n});\n","// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n    selectedTags !== null && selectedTags.length ? params.set('tags', selectedTags.join()) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as AppActions from '../../AppActions';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/js/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/BreadcrumbItem';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { capitalize } from '../Common/Tables';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nconst Breadcrumbs = ({ current, fetchRule, match, ruleFetchStatus, rule, intl }) => {\n    const [items, setItems] = useState([]);\n    const [ruleDescriptionLoaded, setRuleDescription] = useState(false);\n    const buildBreadcrumbs = useCallback(() => {\n        const crumbs = [];\n        const splitUrl = match.url.split('/');\n\n        // add recommendations base\n        crumbs.push({ title: capitalize(splitUrl[1]), navigate: `/${splitUrl[1]}` });\n        // if applicable, add tab\n        if (splitUrl[1] === 'recommendations') {\n            splitUrl[1] + splitUrl[2] === 'recommendationssystems' &&\n                crumbs.push({ title: intl.formatMessage(messages.systems), navigate: '/recommendations/systems' });\n        }\n\n        // if applicable, add :id breadcrumb\n        if (match.params.id !== undefined && match.params.inventoryId !== undefined) {\n            crumbs.push({\n                title: rule.description,\n                navigate: `/${match.url.split('/')[1]}/${match.params.id}`\n            });\n        }\n\n        setItems(crumbs);\n    }, [intl, match.params.id, match.params.inventoryId, match.url, rule.description]);\n\n    useEffect(() => {\n        const splitUrl = match.url.split('/');\n        match.params.inventoryId !== undefined && splitUrl[2] !== 'systems' ?\n            fetchRule({ rule_id: match.params.id }) // eslint-disable-line camelcase\n            : buildBreadcrumbs();\n    }, [buildBreadcrumbs, fetchRule, match.params.id, match.params.inventoryId, match.url]);\n\n    useEffect(() => {\n        if (ruleFetchStatus === 'fulfilled' && !ruleDescriptionLoaded) {\n            setRuleDescription(true);\n            buildBreadcrumbs();\n        }\n    }, [buildBreadcrumbs, ruleFetchStatus, ruleDescriptionLoaded]);\n\n    return (\n        <React.Fragment>\n            {(ruleFetchStatus === 'fulfilled' || items.length > 0) && (\n                <Breadcrumb>\n                    {items.map((oneLink, key) => (\n                        <BreadcrumbItem key={key}>\n                            <Link to={oneLink.navigate}>{oneLink.title}</Link>\n                        </BreadcrumbItem>\n                    ))}\n                    <BreadcrumbItem isActive>{current}</BreadcrumbItem>\n                </Breadcrumb>\n            )}\n            {ruleFetchStatus === 'pending' && intl.formatMessage(messages.loading)}\n        </React.Fragment>\n    );\n};\n\nBreadcrumbs.propTypes = {\n    current: PropTypes.string,\n    fetchRule: PropTypes.func,\n    match: PropTypes.object,\n    rule: PropTypes.object,\n    ruleFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    rule: state.AdvisorStore.rule,\n    ruleFetchStatus: state.AdvisorStore.ruleFetchStatus,\n    ...ownProps\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchRule: (url) => dispatch(AppActions.fetchRule(url))\n});\n\nexport default injectIntl(routerParams(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Breadcrumbs)));\n"],"sourceRoot":""}