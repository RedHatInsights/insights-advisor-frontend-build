{"version":3,"sources":["webpack://advisor-frontend/./src/Utilities/asyncComponent.js"],"names":["asyncComponent","importComponent","props","state","component","this","setState","C","Component"],"mappings":"ySAoBe,SAASA,EAAeC,GAyBnC,OAzBoD,2B,IAAA,G,EAAA,E,gZAEhD,WAAYC,GAAO,0BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAW,MAJA,EAF6B,oKAWPH,IAXO,gBAW3BG,EAX2B,UAa5CC,KAAKC,SAAS,CACVF,cAdwC,4HAmB5C,IAAMG,EAAIF,KAAKF,MAAMC,UAErB,OAAOG,EAAI,kBAACA,EAAOF,KAAKH,OAAa,SArBO,GACvBM","file":"js/6895.2129c22e6ff643dbe08c.js","sourcesContent":["import React, { Component } from 'react';\n\n/**\n * Webpack allows loading components asynchronously by using import().\n *\n *      Ex) const Component = asyncComponent(() => import('component');\n *\n *          class aClass extends React.Component {\n *              render() {\n *                  return (<Component prop1=\"prop1\" prop2=\"prop2\" ... />);\n *              }\n *          }\n *\n *  https://reactjs.org/docs/higher-order-components.html\n *\n * @param importComponent a function that contains and async import statement\n *      Ex) () => import('react-component')\n *\n * @returns {AsyncComponent} The imported component or can return a loading\n */\nexport default function asyncComponent(importComponent) {\n    class AsyncComponent extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                component: null\n            };\n        }\n\n        async componentDidMount() {\n            const { default: component } = await importComponent();\n\n            this.setState({\n                component\n            });\n        }\n\n        render() {\n            const C = this.state.component;\n\n            return C ? <C { ...this.props } /> : null;\n        }\n    }\n\n    return AsyncComponent;\n}\n"],"sourceRoot":""}