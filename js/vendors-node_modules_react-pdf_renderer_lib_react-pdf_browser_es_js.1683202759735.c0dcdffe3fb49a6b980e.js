(self["webpackChunkadvisor_frontend"] = self["webpackChunkadvisor_frontend"] || []).push([["vendors-node_modules_react-pdf_renderer_lib_react-pdf_browser_es_js"],{

/***/ "./node_modules/@react-pdf/font/lib/index.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/font/lib/index.browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];


Object.defineProperty(exports, "__esModule", ({ value: true }));

var _asyncToGenerator = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/asyncToGenerator.js");
var _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/extends.js");
var _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/regenerator/index.js");
var _objectWithoutPropertiesLoose = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");
__webpack_require__(/*! is-url */ "./node_modules/is-url/index.js");
var fetch = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
var fontkit = __webpack_require__(/*! @react-pdf/fontkit */ "./node_modules/@react-pdf/fontkit/lib/fontkit.browser.es.js");

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);
var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);
var fontkit__default = /*#__PURE__*/_interopDefaultLegacy(fontkit);

var _excluded = ["src", "fontWeight", "fontStyle"];
var FONT_WEIGHTS = {
  thin: 100,
  hairline: 100,
  ultralight: 200,
  extralight: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  demibold: 600,
  bold: 700,
  ultrabold: 800,
  extrabold: 800,
  heavy: 900,
  black: 900
};

var fetchFont = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(src, options) {
    var response, buffer;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch__default["default"](src, options);

          case 2:
            response = _context.sent;
            _context.next = 5;
            return response.buffer ? response.buffer() : response.arrayBuffer();

          case 5:
            buffer = _context.sent;
            return _context.abrupt("return", buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchFont(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var isDataUrl = function isDataUrl(dataUrl) {
  var header = dataUrl.split(',')[0];
  var hasDataPrefix = header.substring(0, 5) === 'data:';
  var hasBase64Prefix = header.split(';')[1] === 'base64';
  return hasDataPrefix && hasBase64Prefix;
};

var resolveFontWeight = function resolveFontWeight(value) {
  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;
};

var sortByFontWeight = function sortByFontWeight(a, b) {
  return a.fontWeight - b.fontWeight;
};

var FontSource = /*#__PURE__*/function () {
  function FontSource(src, fontFamily, fontStyle, fontWeight, options) {
    this.src = src;
    this.fontFamily = fontFamily;
    this.fontStyle = fontStyle || 'normal';
    this.fontWeight = fontWeight || 400;
    this.data = null;
    this.loading = false;
    this.options = options;
  }

  var _proto = FontSource.prototype;

  _proto.load = /*#__PURE__*/function () {
    var _load = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
      var _this = this;

      var postscriptName, _this$options, headers, body, _this$options$method, method, data;

      return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.loading = true;
              postscriptName = this.options.postscriptName;

              if (!isDataUrl(this.src)) {
                _context2.next = 6;
                break;
              }

              this.data = fontkit__default["default"].create(Buffer.from(this.src.split(',')[1], 'base64'), postscriptName);
              _context2.next = 17;
              break;

            case 6:

              _this$options = this.options, headers = _this$options.headers, body = _this$options.body, _this$options$method = _this$options.method, method = _this$options$method === void 0 ? 'GET' : _this$options$method;
              _context2.next = 10;
              return fetchFont(this.src, {
                method: method,
                body: body,
                headers: headers
              });

            case 10:
              data = _context2.sent;
              this.data = fontkit__default["default"].create(data, postscriptName);
              _context2.next = 17;
              break;

            case 14:
              _context2.next = 16;
              return new Promise(function (resolve, reject) {
                return fontkit__default["default"].open(_this.src, postscriptName, function (err, data) {
                  return err ? reject(err) : resolve(data);
                });
              });

            case 16:
              this.data = _context2.sent;

            case 17:
              this.loading = false;

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function load() {
      return _load.apply(this, arguments);
    }

    return load;
  }();

  return FontSource;
}();

var Font = /*#__PURE__*/function () {
  Font.create = function create(family) {
    return new Font(family);
  };

  function Font(family) {
    this.family = family;
    this.sources = [];
  }

  var _proto2 = Font.prototype;

  _proto2.register = function register(_ref2) {
    var src = _ref2.src,
        fontWeight = _ref2.fontWeight,
        fontStyle = _ref2.fontStyle,
        options = _objectWithoutPropertiesLoose__default["default"](_ref2, _excluded);

    var numericFontWeight = resolveFontWeight(fontWeight);
    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));
  };

  _proto2.resolve = function resolve(descriptor) {
    var _descriptor$fontWeigh = descriptor.fontWeight,
        fontWeight = _descriptor$fontWeigh === void 0 ? 400 : _descriptor$fontWeigh,
        _descriptor$fontStyle = descriptor.fontStyle,
        fontStyle = _descriptor$fontStyle === void 0 ? 'normal' : _descriptor$fontStyle;
    var styleSources = this.sources.filter(function (s) {
      return s.fontStyle === fontStyle;
    }); // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights

    var exactFit = styleSources.find(function (s) {
      return s.fontWeight === fontWeight;
    });
    if (exactFit) return exactFit;
    var res;

    if (fontWeight >= 400 && fontWeight <= 500) {
      var leftOffset = styleSources.filter(function (s) {
        return s.fontWeight <= fontWeight;
      });
      var rightOffset = styleSources.filter(function (s) {
        return s.fontWeight > 500;
      });
      var fit = styleSources.filter(function (s) {
        return s.fontWeight >= fontWeight && s.fontWeight < 500;
      });
      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];
    }

    var lt = styleSources.filter(function (s) {
      return s.fontWeight < fontWeight;
    }).sort(sortByFontWeight);
    var gt = styleSources.filter(function (s) {
      return s.fontWeight > fontWeight;
    }).sort(sortByFontWeight);

    if (fontWeight < 400) {
      res = lt[lt.length - 1] || gt[0];
    }

    if (fontWeight > 500) {
      res = gt[0] || lt[lt.length - 1];
    }

    if (!res) {
      throw new Error("Could not resolve font for " + this.family + ", fontWeight " + fontWeight);
    }

    return res;
  };

  return Font;
}();

var standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];

function FontStore() {
  var _this = this;

  var fonts = {};
  var emojiSource = null;
  var hyphenationCallback = null;

  this.register = function (data) {
    var family = data.family;

    if (!fonts[family]) {
      fonts[family] = Font.create(family);
    } // Bulk loading


    if (data.fonts) {
      for (var i = 0; i < data.fonts.length; i += 1) {
        fonts[family].register(_extends__default["default"]({
          family: family
        }, data.fonts[i]));
      }
    } else {
      fonts[family].register(data);
    }
  };

  this.registerEmojiSource = function (_ref) {
    var url = _ref.url,
        _ref$format = _ref.format,
        format = _ref$format === void 0 ? 'png' : _ref$format;
    emojiSource = {
      url: url,
      format: format
    };
  };

  this.registerHyphenationCallback = function (callback) {
    hyphenationCallback = callback;
  };

  this.getFont = function (descriptor) {
    var fontFamily = descriptor.fontFamily;
    var isStandard = standard.includes(fontFamily);
    if (isStandard) return null;

    if (!fonts[fontFamily]) {
      throw new Error("Font family not registered: " + fontFamily + ". Please register it calling Font.register() method.");
    }

    return fonts[fontFamily].resolve(descriptor);
  };

  this.load = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(descriptor) {
      var fontFamily, isStandard, f;
      return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fontFamily = descriptor.fontFamily;
              isStandard = standard.includes(fontFamily);

              if (!isStandard) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              f = _this.getFont(descriptor); // We cache the font to avoid fetching it many times

              if (!(!f.data && !f.loading)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return f.load();

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  this.reset = function () {
    var keys = Object.keys(fonts);

    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      fonts[key].data = null;
    }
  };

  this.clear = function () {
    fonts = {};
  };

  this.getRegisteredFonts = function () {
    return fonts;
  };

  this.getEmojiSource = function () {
    return emojiSource;
  };

  this.getHyphenationCallback = function () {
    return hyphenationCallback;
  };

  this.getRegisteredFontFamilies = function () {
    return Object.keys(fonts);
  };
}

exports["default"] = FontStore;
//# sourceMappingURL=index.browser.js.map


/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/extends.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/extends.js ***!
  \*************************************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}

module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \**********************************************************************************************************/
/***/ ((module) => {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/typeof.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/typeof.js ***!
  \************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/regenerator/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-pdf/font/node_modules/@babel/runtime/regenerator/index.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@react-pdf/font/node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/lib/fontkit.browser.es.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/lib/fontkit.browser.es.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ fontkit)
/* harmony export */ });
/* harmony import */ var restructure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! restructure */ "./node_modules/restructure/index.js");
/* harmony import */ var restructure__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(restructure__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelperLoose */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/applyDecoratedDescriptor */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js");
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var restructure_src_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! restructure/src/utils */ "./node_modules/restructure/src/utils.js");
/* harmony import */ var restructure_src_utils__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(restructure_src_utils__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! deep-equal */ "./node_modules/deep-equal/index.js");
/* harmony import */ var deep_equal__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(deep_equal__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @react-pdf/unicode-properties */ "./node_modules/@react-pdf/unicode-properties/lib/unicode-properties.es.js");
/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! unicode-trie */ "./node_modules/unicode-trie/index.js");
/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(unicode_trie__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var clone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! clone */ "./node_modules/clone/clone.js");
/* harmony import */ var clone__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(clone__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tiny-inflate */ "./node_modules/tiny-inflate/index.js");
/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(tiny_inflate__WEBPACK_IMPORTED_MODULE_11__);
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];













var fontkit = {};
fontkit.logErrors = false;
var formats = [];

fontkit.registerFormat = function (format) {
  formats.push(format);
};

fontkit.openSync = function (filename, postscriptName) {
  {
    throw new Error('fontkit.openSync unavailable for browser build');
  }
};

fontkit.open = function (filename, postscriptName, callback) {
  {
    throw new Error('fontkit.open unavailable for browser build');
  }
};

fontkit.create = function (buffer, postscriptName) {
  for (var i = 0; i < formats.length; i++) {
    var format = formats[i];

    if (format.probe(buffer)) {
      var font = new format(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(buffer));

      if (postscriptName) {
        return font.getFont(postscriptName);
      }

      return font;
    }
  }

  throw new Error('Unknown font format');
};

fontkit.defaultLanguage = 'en';

fontkit.setDefaultLanguage = function (lang) {
  if (lang === void 0) {
    lang = 'en';
  }

  fontkit.defaultLanguage = lang;
};

/**
 * This decorator caches the results of a getter or method such that
 * the results are lazily computed once, and then cached.
 * @private
 */
function cache(target, key, descriptor) {
  if (descriptor.get) {
    var get = descriptor.get;

    descriptor.get = function () {
      var value = get.call(this);
      Object.defineProperty(this, key, {
        value: value
      });
      return value;
    };
  } else if (typeof descriptor.value === 'function') {
    var fn = descriptor.value;
    return {
      get: function get() {
        var cache = new Map();

        function memoized() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var key = args.length > 0 ? args[0] : 'value';

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = fn.apply(this, args);
          cache.set(key, result);
          return result;
        }
        Object.defineProperty(this, key, {
          value: memoized
        });
        return memoized;
      }
    };
  }
}

var SubHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  firstCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  entryCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  idDelta: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  idRangeOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var CmapGroup = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  startCharCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  endCharCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  glyphID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var UnicodeValueRange = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  startUnicodeValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24),
  additionalCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var UVSMapping = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  unicodeValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24),
  glyphID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var DefaultUVS = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(UnicodeValueRange, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32));
var NonDefaultUVS = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(UVSMapping, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32));
var VarSelectorRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  varSelector: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24),
  defaultUVS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), DefaultUVS, {
    type: 'parent'
  }),
  nonDefaultUVS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), NonDefaultUVS, {
    type: 'parent'
  })
});
var CmapSubtable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  0: {
    // Byte encoding
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Total table length in bytes (set to 262 for format 0)
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Language code for this encoding subtable, or zero if language-independent
    codeMap: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 256)
  },
  2: {
    // High-byte mapping (CJK)
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    subHeaderKeys: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 256),
    subHeaderCount: function subHeaderCount(t) {
      return Math.max.apply(Math, t.subHeaderKeys);
    },
    subHeaders: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(SubHeader, 'subHeaderCount'),
    glyphIndexArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'subHeaderCount')
  },
  4: {
    // Segment mapping to delta values
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Total table length in bytes
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Language code
    segCountX2: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    segCount: function segCount(t) {
      return t.segCountX2 >> 1;
    },
    searchRange: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    entrySelector: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    rangeShift: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    endCode: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'segCount'),
    reservedPad: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    // This value should be zero
    startCode: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'segCount'),
    idDelta: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 'segCount'),
    idRangeOffset: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'segCount'),
    glyphIndexArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
      return (t.length - t._currentOffset) / 2;
    })
  },
  6: {
    // Trimmed table
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    firstCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    entryCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyphIndices: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'entryCount')
  },
  8: {
    // mixed 16-bit and 32-bit coverage
    reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    is32: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 8192),
    nGroups: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    groups: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(CmapGroup, 'nGroups')
  },
  10: {
    // Trimmed Array
    reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    firstCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    entryCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    glyphIndices: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numChars')
  },
  12: {
    // Segmented coverage
    reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    nGroups: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    groups: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(CmapGroup, 'nGroups')
  },
  13: {
    // Many-to-one range mappings (same as 12 except for group.startGlyphID)
    reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    language: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    nGroups: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    groups: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(CmapGroup, 'nGroups')
  },
  14: {
    // Unicode Variation Sequences
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    numRecords: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    varSelectors: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(VarSelectorRecord, 'numRecords')
  }
});
var CmapEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  platformID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Platform identifier
  encodingID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Platform-specific encoding identifier
  table: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), CmapSubtable, {
    type: 'parent',
    lazy: true
  })
}); // character to glyph mapping

var cmap = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  numSubtables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  tables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(CmapEntry, 'numSubtables')
});

var head = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int32),
  // 0x00010000 (version 1.0)
  revision: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int32),
  // set by font manufacturer
  checkSumAdjustment: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  magicNumber: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  // set to 0x5F0F3CF5
  flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  unitsPerEm: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // range from 64 to 16384
  created: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int32), 2),
  modified: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int32), 2),
  xMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // for all glyph bounding boxes
  yMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // for all glyph bounding boxes
  xMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // for all glyph bounding boxes
  yMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // for all glyph bounding boxes
  macStyle: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),
  lowestRecPPEM: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // smallest readable size in pixels
  fontDirectionHint: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  indexToLocFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // 0 for short offsets, 1 for long
  glyphDataFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16) // 0 for current format

});

var hhea = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int32),
  ascent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Distance from baseline of highest ascender
  descent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Distance from baseline of lowest descender
  lineGap: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Typographic line gap
  advanceWidthMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum advance width value in 'hmtx' table
  minLeftSideBearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Maximum advance width value in 'hmtx' table
  minRightSideBearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Minimum right sidebearing value
  xMaxExtent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  caretSlopeRise: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Used to calculate the slope of the cursor (rise/run); 1 for vertical
  caretSlopeRun: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // 0 for vertical
  caretOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Set to 0 for non-slanted fonts
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 4),
  metricDataFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // 0 for current format
  numberOfMetrics: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // Number of advance widths in 'hmtx' table

});

var HmtxEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  advance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  bearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
});
var hmtx = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  metrics: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(HmtxEntry, function (t) {
    return t.parent.hhea.numberOfMetrics;
  }),
  bearings: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), function (t) {
    return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;
  })
});

var maxp = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int32),
  numGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // The number of glyphs in the font
  maxPoints: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum points in a non-composite glyph
  maxContours: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum contours in a non-composite glyph
  maxComponentPoints: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum points in a composite glyph
  maxComponentContours: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum contours in a composite glyph
  maxZones: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // 1 if instructions do not use the twilight zone, 2 otherwise
  maxTwilightPoints: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum points used in Z0
  maxStorage: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of Storage Area locations
  maxFunctionDefs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of FDEFs
  maxInstructionDefs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of IDEFs
  maxStackElements: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum stack depth
  maxSizeOfInstructions: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum byte count for glyph instructions
  maxComponentElements: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Maximum number of components referenced at “top level” for any composite glyph
  maxComponentDepth: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // Maximum levels of recursion; 1 for simple components

});

/**
 * Gets an encoding name from platform, encoding, and language ids.
 * Returned encoding names can be used in iconv-lite to decode text.
 */
function getEncoding(platformID, encodingID, languageID) {
  if (languageID === void 0) {
    languageID = 0;
  }

  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {
    return MAC_LANGUAGE_ENCODINGS[languageID];
  }

  return ENCODINGS[platformID][encodingID];
} // Map of platform ids to encoding ids.

var ENCODINGS = [// unicode
['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'], // macintosh
// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
// 0	Roman                 17	Malayalam
// 1	Japanese	            18	Sinhalese
// 2	Traditional Chinese	  19	Burmese
// 3	Korean	              20	Khmer
// 4	Arabic	              21	Thai
// 5	Hebrew	              22	Laotian
// 6	Greek	                23	Georgian
// 7	Russian	              24	Armenian
// 8	RSymbol	              25	Simplified Chinese
// 9	Devanagari	          26	Tibetan
// 10	Gurmukhi	            27	Mongolian
// 11	Gujarati	            28	Geez
// 12	Oriya	                29	Slavic
// 13	Bengali	              30	Vietnamese
// 14	Tamil	                31	Sindhi
// 15	Telugu	              32	(Uninterpreted)
// 16	Kannada
['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'], // ISO (deprecated)
['ascii'], // windows
// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']]; // Overrides for Mac scripts by language id.
// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

var MAC_LANGUAGE_ENCODINGS = {
  15: 'maciceland',
  17: 'macturkish',
  18: 'maccroatian',
  24: 'maccenteuro',
  25: 'maccenteuro',
  26: 'maccenteuro',
  27: 'maccenteuro',
  28: 'maccenteuro',
  30: 'maciceland',
  37: 'macromania',
  38: 'maccenteuro',
  39: 'maccenteuro',
  40: 'maccenteuro',
  143: 'macinuit',
  // Unsupported by iconv-lite
  146: 'macgaelic' // Unsupported by iconv-lite

}; // Map of platform ids to BCP-47 language codes.

var LANGUAGES = [// unicode
[], {
  // macintosh
  0: 'en',
  30: 'fo',
  60: 'ks',
  90: 'rw',
  1: 'fr',
  31: 'fa',
  61: 'ku',
  91: 'rn',
  2: 'de',
  32: 'ru',
  62: 'sd',
  92: 'ny',
  3: 'it',
  33: 'zh',
  63: 'bo',
  93: 'mg',
  4: 'nl',
  34: 'nl-BE',
  64: 'ne',
  94: 'eo',
  5: 'sv',
  35: 'ga',
  65: 'sa',
  128: 'cy',
  6: 'es',
  36: 'sq',
  66: 'mr',
  129: 'eu',
  7: 'da',
  37: 'ro',
  67: 'bn',
  130: 'ca',
  8: 'pt',
  38: 'cz',
  68: 'as',
  131: 'la',
  9: 'no',
  39: 'sk',
  69: 'gu',
  132: 'qu',
  10: 'he',
  40: 'si',
  70: 'pa',
  133: 'gn',
  11: 'ja',
  41: 'yi',
  71: 'or',
  134: 'ay',
  12: 'ar',
  42: 'sr',
  72: 'ml',
  135: 'tt',
  13: 'fi',
  43: 'mk',
  73: 'kn',
  136: 'ug',
  14: 'el',
  44: 'bg',
  74: 'ta',
  137: 'dz',
  15: 'is',
  45: 'uk',
  75: 'te',
  138: 'jv',
  16: 'mt',
  46: 'be',
  76: 'si',
  139: 'su',
  17: 'tr',
  47: 'uz',
  77: 'my',
  140: 'gl',
  18: 'hr',
  48: 'kk',
  78: 'km',
  141: 'af',
  19: 'zh-Hant',
  49: 'az-Cyrl',
  79: 'lo',
  142: 'br',
  20: 'ur',
  50: 'az-Arab',
  80: 'vi',
  143: 'iu',
  21: 'hi',
  51: 'hy',
  81: 'id',
  144: 'gd',
  22: 'th',
  52: 'ka',
  82: 'tl',
  145: 'gv',
  23: 'ko',
  53: 'mo',
  83: 'ms',
  146: 'ga',
  24: 'lt',
  54: 'ky',
  84: 'ms-Arab',
  147: 'to',
  25: 'pl',
  55: 'tg',
  85: 'am',
  148: 'el-polyton',
  26: 'hu',
  56: 'tk',
  86: 'ti',
  149: 'kl',
  27: 'es',
  57: 'mn-CN',
  87: 'om',
  150: 'az',
  28: 'lv',
  58: 'mn',
  88: 'so',
  151: 'nn',
  29: 'se',
  59: 'ps',
  89: 'sw'
}, // ISO (deprecated)
[], {
  // windows                                        
  0x0436: 'af',
  0x4009: 'en-IN',
  0x0487: 'rw',
  0x0432: 'tn',
  0x041C: 'sq',
  0x1809: 'en-IE',
  0x0441: 'sw',
  0x045B: 'si',
  0x0484: 'gsw',
  0x2009: 'en-JM',
  0x0457: 'kok',
  0x041B: 'sk',
  0x045E: 'am',
  0x4409: 'en-MY',
  0x0412: 'ko',
  0x0424: 'sl',
  0x1401: 'ar-DZ',
  0x1409: 'en-NZ',
  0x0440: 'ky',
  0x2C0A: 'es-AR',
  0x3C01: 'ar-BH',
  0x3409: 'en-PH',
  0x0454: 'lo',
  0x400A: 'es-BO',
  0x0C01: 'ar',
  0x4809: 'en-SG',
  0x0426: 'lv',
  0x340A: 'es-CL',
  0x0801: 'ar-IQ',
  0x1C09: 'en-ZA',
  0x0427: 'lt',
  0x240A: 'es-CO',
  0x2C01: 'ar-JO',
  0x2C09: 'en-TT',
  0x082E: 'dsb',
  0x140A: 'es-CR',
  0x3401: 'ar-KW',
  0x0809: 'en-GB',
  0x046E: 'lb',
  0x1C0A: 'es-DO',
  0x3001: 'ar-LB',
  0x0409: 'en',
  0x042F: 'mk',
  0x300A: 'es-EC',
  0x1001: 'ar-LY',
  0x3009: 'en-ZW',
  0x083E: 'ms-BN',
  0x440A: 'es-SV',
  0x1801: 'ary',
  0x0425: 'et',
  0x043E: 'ms',
  0x100A: 'es-GT',
  0x2001: 'ar-OM',
  0x0438: 'fo',
  0x044C: 'ml',
  0x480A: 'es-HN',
  0x4001: 'ar-QA',
  0x0464: 'fil',
  0x043A: 'mt',
  0x080A: 'es-MX',
  0x0401: 'ar-SA',
  0x040B: 'fi',
  0x0481: 'mi',
  0x4C0A: 'es-NI',
  0x2801: 'ar-SY',
  0x080C: 'fr-BE',
  0x047A: 'arn',
  0x180A: 'es-PA',
  0x1C01: 'aeb',
  0x0C0C: 'fr-CA',
  0x044E: 'mr',
  0x3C0A: 'es-PY',
  0x3801: 'ar-AE',
  0x040C: 'fr',
  0x047C: 'moh',
  0x280A: 'es-PE',
  0x2401: 'ar-YE',
  0x140C: 'fr-LU',
  0x0450: 'mn',
  0x500A: 'es-PR',
  0x042B: 'hy',
  0x180C: 'fr-MC',
  0x0850: 'mn-CN',
  0x0C0A: 'es',
  0x044D: 'as',
  0x100C: 'fr-CH',
  0x0461: 'ne',
  0x040A: 'es',
  0x082C: 'az-Cyrl',
  0x0462: 'fy',
  0x0414: 'nb',
  0x540A: 'es-US',
  0x042C: 'az',
  0x0456: 'gl',
  0x0814: 'nn',
  0x380A: 'es-UY',
  0x046D: 'ba',
  0x0437: 'ka',
  0x0482: 'oc',
  0x200A: 'es-VE',
  0x042D: 'eu',
  0x0C07: 'de-AT',
  0x0448: 'or',
  0x081D: 'sv-FI',
  0x0423: 'be',
  0x0407: 'de',
  0x0463: 'ps',
  0x041D: 'sv',
  0x0845: 'bn',
  0x1407: 'de-LI',
  0x0415: 'pl',
  0x045A: 'syr',
  0x0445: 'bn-IN',
  0x1007: 'de-LU',
  0x0416: 'pt',
  0x0428: 'tg',
  0x201A: 'bs-Cyrl',
  0x0807: 'de-CH',
  0x0816: 'pt-PT',
  0x085F: 'tzm',
  0x141A: 'bs',
  0x0408: 'el',
  0x0446: 'pa',
  0x0449: 'ta',
  0x047E: 'br',
  0x046F: 'kl',
  0x046B: 'qu-BO',
  0x0444: 'tt',
  0x0402: 'bg',
  0x0447: 'gu',
  0x086B: 'qu-EC',
  0x044A: 'te',
  0x0403: 'ca',
  0x0468: 'ha',
  0x0C6B: 'qu',
  0x041E: 'th',
  0x0C04: 'zh-HK',
  0x040D: 'he',
  0x0418: 'ro',
  0x0451: 'bo',
  0x1404: 'zh-MO',
  0x0439: 'hi',
  0x0417: 'rm',
  0x041F: 'tr',
  0x0804: 'zh',
  0x040E: 'hu',
  0x0419: 'ru',
  0x0442: 'tk',
  0x1004: 'zh-SG',
  0x040F: 'is',
  0x243B: 'smn',
  0x0480: 'ug',
  0x0404: 'zh-TW',
  0x0470: 'ig',
  0x103B: 'smj-NO',
  0x0422: 'uk',
  0x0483: 'co',
  0x0421: 'id',
  0x143B: 'smj',
  0x042E: 'hsb',
  0x041A: 'hr',
  0x045D: 'iu',
  0x0C3B: 'se-FI',
  0x0420: 'ur',
  0x101A: 'hr-BA',
  0x085D: 'iu-Latn',
  0x043B: 'se',
  0x0843: 'uz-Cyrl',
  0x0405: 'cs',
  0x083C: 'ga',
  0x083B: 'se-SE',
  0x0443: 'uz',
  0x0406: 'da',
  0x0434: 'xh',
  0x203B: 'sms',
  0x042A: 'vi',
  0x048C: 'prs',
  0x0435: 'zu',
  0x183B: 'sma-NO',
  0x0452: 'cy',
  0x0465: 'dv',
  0x0410: 'it',
  0x1C3B: 'sms',
  0x0488: 'wo',
  0x0813: 'nl-BE',
  0x0810: 'it-CH',
  0x044F: 'sa',
  0x0485: 'sah',
  0x0413: 'nl',
  0x0411: 'ja',
  0x1C1A: 'sr-Cyrl-BA',
  0x0478: 'ii',
  0x0C09: 'en-AU',
  0x044B: 'kn',
  0x0C1A: 'sr',
  0x046A: 'yo',
  0x2809: 'en-BZ',
  0x043F: 'kk',
  0x181A: 'sr-Latn-BA',
  0x1009: 'en-CA',
  0x0453: 'km',
  0x081A: 'sr-Latn',
  0x2409: 'en-029',
  0x0486: 'quc',
  0x046C: 'nso'
}];

var NameRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  platformID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  encodingID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  languageID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nameID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  string: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)('length', function (t) {
    return getEncoding(t.platformID, t.encodingID, t.languageID);
  }), {
    type: 'parent',
    relativeTo: 'parent.stringOffset',
    allowNull: false
  })
});
var LangTagRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)('length', 'utf16be'), {
    type: 'parent',
    relativeTo: 'stringOffset'
  })
});
var NameTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  0: {
    count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    stringOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    records: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(NameRecord, 'count')
  },
  1: {
    count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    stringOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    records: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(NameRecord, 'count'),
    langTagCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    langTags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LangTagRecord, 'langTagCount')
  }
});
var NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.
'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved
'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];

NameTable.process = function (stream) {
  var records = {};

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.records), _step; !(_step = _iterator()).done;) {
    var record = _step.value;
    // find out what language this is for
    var language = LANGUAGES[record.platformID][record.languageID];

    if (language == null && this.langTags != null && record.languageID >= 0x8000) {
      language = this.langTags[record.languageID - 0x8000].tag;
    }

    if (language == null) {
      language = record.platformID + '-' + record.languageID;
    } // if the nameID is >= 256, it is a font feature record (AAT)


    var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;

    if (records[key] == null) {
      records[key] = {};
    }

    var obj = records[key];

    if (record.nameID >= 256) {
      obj = obj[record.nameID] || (obj[record.nameID] = {});
    }

    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {
      obj[language] = record.string;
    }
  }

  this.records = records;
};

NameTable.preEncode = function () {
  if (Array.isArray(this.records)) return;
  this.version = 0;
  var records = [];

  for (var key in this.records) {
    var val = this.records[key];
    if (key === 'fontFeatures') continue;
    records.push({
      platformID: 3,
      encodingID: 1,
      languageID: 0x409,
      nameID: NAMES.indexOf(key),
      length: Buffer.byteLength(val.en, 'utf16le'),
      string: val.en
    });

    if (key === 'postscriptName') {
      records.push({
        platformID: 1,
        encodingID: 0,
        languageID: 0,
        nameID: NAMES.indexOf(key),
        length: val.en.length,
        string: val.en
      });
    }
  }

  this.records = records;
  this.count = records.length;
  this.stringOffset = NameTable.size(this, null, false);
};

var OS2 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  header: {
    xAvgCharWidth: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // average weighted advance width of lower case letters and space
    usWeightClass: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // visual weight of stroke in glyphs
    usWidthClass: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // relative change from the normal aspect ratio (width to height ratio)
    fsType: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), [// Indicates font embedding licensing rights
    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),
    ySubscriptXSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended horizontal size in pixels for subscripts
    ySubscriptYSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended vertical size in pixels for subscripts
    ySubscriptXOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended horizontal offset for subscripts
    ySubscriptYOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended vertical offset form the baseline for subscripts
    ySuperscriptXSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended horizontal size in pixels for superscripts
    ySuperscriptYSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended vertical size in pixels for superscripts
    ySuperscriptXOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended horizontal offset for superscripts
    ySuperscriptYOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // recommended vertical offset from the baseline for superscripts
    yStrikeoutSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // width of the strikeout stroke
    yStrikeoutPosition: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // position of the strikeout stroke relative to the baseline
    sFamilyClass: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // classification of font-family design
    panose: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 10),
    // describe the visual characteristics of a given typeface
    ulCharRange: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 4),
    vendorID: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
    // four character identifier for the font vendor
    fsSelection: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), [// bit field containing information about the font
    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),
    usFirstCharIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // The minimum Unicode index in this font
    usLastCharIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // The maximum Unicode index in this font

  },
  // The Apple version of this table ends here, but the Microsoft one continues on...
  0: {},
  1: {
    typoAscender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoDescender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoLineGap: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    winAscent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    winDescent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    codePageRange: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 2)
  },
  2: {
    // these should be common with version 1 somehow
    typoAscender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoDescender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoLineGap: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    winAscent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    winDescent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    codePageRange: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 2),
    xHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    capHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    defaultChar: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    breakChar: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    maxContent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  5: {
    typoAscender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoDescender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    typoLineGap: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    winAscent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    winDescent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    codePageRange: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 2),
    xHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    capHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    defaultChar: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    breakChar: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    maxContent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    usLowerOpticalPointSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    usUpperOpticalPointSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  }
});
var versions = OS2.versions;
versions[3] = versions[4] = versions[2];

var post = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32), {
  header: {
    // these fields exist at the top of all versions
    italicAngle: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    // Italic angle in counter-clockwise degrees from the vertical.
    underlinePosition: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // Suggested distance of the top of the underline from the baseline
    underlineThickness: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // Suggested values for the underline thickness
    isFixedPitch: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    // Whether the font is monospaced
    minMemType42: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    // Minimum memory usage when a TrueType font is downloaded as a Type 42 font
    maxMemType42: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    // Maximum memory usage when a TrueType font is downloaded as a Type 42 font
    minMemType1: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    // Minimum memory usage when a TrueType font is downloaded as a Type 1 font
    maxMemType1: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32) // Maximum memory usage when a TrueType font is downloaded as a Type 1 font

  },
  1: {},
  // version 1 has no additional fields
  2: {
    numberOfGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyphNameIndex: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numberOfGlyphs'),
    names: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)))
  },
  2.5: {
    numberOfGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 'numberOfGlyphs')
  },
  3: {},
  // version 3 has no additional fields
  4: {
    map: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), function (t) {
      return t.parent.maxp.numGlyphs;
    })
  }
});

var cvt = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  controlValues: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16))
});

// These instructions are known as the font program. The main use of this table
// is for the definition of functions that are used in many different glyph programs.

var fpgm = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  instructions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8))
});

var loca = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('head.indexToLocFormat', {
  0: {
    offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))
  },
  1: {
    offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32))
  }
});

loca.process = function () {
  if (this.version === 0) {
    for (var i = 0; i < this.offsets.length; i++) {
      this.offsets[i] <<= 1;
    }
  }
};

loca.preEncode = function () {
  if (this.version === 0) {
    for (var i = 0; i < this.offsets.length; i++) {
      this.offsets[i] >>>= 1;
    }
  }
};

var prep = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  controlValueProgram: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8))
});

var glyf = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)());

var CFFIndex = /*#__PURE__*/function () {
  function CFFIndex(type) {
    this.type = type;
  }

  var _proto = CFFIndex.prototype;

  _proto.getCFFVersion = function getCFFVersion(ctx) {
    while (ctx && !ctx.hdrSize) {
      ctx = ctx.parent;
    }

    return ctx ? ctx.version : -1;
  };

  _proto.decode = function decode(stream, parent) {
    var version = this.getCFFVersion(parent);
    var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();

    if (count === 0) {
      return [];
    }

    var offSize = stream.readUInt8();
    var offsetType;

    if (offSize === 1) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8);
    } else if (offSize === 2) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16);
    } else if (offSize === 3) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24);
    } else if (offSize === 4) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32);
    } else {
      throw new Error("Bad offset size in CFFIndex: " + offSize + " " + stream.pos);
    }

    var ret = [];
    var startPos = stream.pos + (count + 1) * offSize - 1;
    var start = offsetType.decode(stream);

    for (var i = 0; i < count; i++) {
      var end = offsetType.decode(stream);

      if (this.type != null) {
        var pos = stream.pos;
        stream.pos = startPos + start;
        parent.length = end - start;
        ret.push(this.type.decode(stream, parent));
        stream.pos = pos;
      } else {
        ret.push({
          offset: startPos + start,
          length: end - start
        });
      }

      start = end;
    }

    stream.pos = startPos + start;
    return ret;
  };

  _proto.size = function size(arr, parent) {
    var size = 2;

    if (arr.length === 0) {
      return size;
    }

    var type = this.type || new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)(); // find maximum offset to detminine offset type

    var offset = 1;

    for (var i = 0; i < arr.length; i++) {
      var item = arr[i];
      offset += type.size(item, parent);
    }

    var offsetType;

    if (offset <= 0xff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8);
    } else if (offset <= 0xffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16);
    } else if (offset <= 0xffffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24);
    } else if (offset <= 0xffffffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32);
    } else {
      throw new Error("Bad offset in CFFIndex");
    }

    size += 1 + offsetType.size() * (arr.length + 1);
    size += offset - 1;
    return size;
  };

  _proto.encode = function encode(stream, arr, parent) {
    stream.writeUInt16BE(arr.length);

    if (arr.length === 0) {
      return;
    }

    var type = this.type || new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)(); // find maximum offset to detminine offset type

    var sizes = [];
    var offset = 1;

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(arr), _step; !(_step = _iterator()).done;) {
      var item = _step.value;
      var s = type.size(item, parent);
      sizes.push(s);
      offset += s;
    }

    var offsetType;

    if (offset <= 0xff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8);
    } else if (offset <= 0xffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16);
    } else if (offset <= 0xffffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24);
    } else if (offset <= 0xffffffff) {
      offsetType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32);
    } else {
      throw new Error("Bad offset in CFFIndex");
    } // write offset size


    stream.writeUInt8(offsetType.size()); // write elements

    offset = 1;
    offsetType.encode(stream, offset);

    for (var _i = 0, _sizes = sizes; _i < _sizes.length; _i++) {
      var size = _sizes[_i];
      offset += size;
      offsetType.encode(stream, offset);
    }

    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(arr), _step2; !(_step2 = _iterator2()).done;) {
      var _item = _step2.value;
      type.encode(stream, _item, parent);
    }

    return;
  };

  return CFFIndex;
}();

var FLOAT_EOF = 0xf;
var FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
var FLOAT_ENCODE_LOOKUP = {
  '.': 10,
  'E': 11,
  'E-': 12,
  '-': 14
};

var CFFOperand = /*#__PURE__*/function () {
  function CFFOperand() {}

  CFFOperand.decode = function decode(stream, value) {
    if (32 <= value && value <= 246) {
      return value - 139;
    }

    if (247 <= value && value <= 250) {
      return (value - 247) * 256 + stream.readUInt8() + 108;
    }

    if (251 <= value && value <= 254) {
      return -(value - 251) * 256 - stream.readUInt8() - 108;
    }

    if (value === 28) {
      return stream.readInt16BE();
    }

    if (value === 29) {
      return stream.readInt32BE();
    }

    if (value === 30) {
      var str = '';

      while (true) {
        var b = stream.readUInt8();
        var n1 = b >> 4;

        if (n1 === FLOAT_EOF) {
          break;
        }

        str += FLOAT_LOOKUP[n1];
        var n2 = b & 15;

        if (n2 === FLOAT_EOF) {
          break;
        }

        str += FLOAT_LOOKUP[n2];
      }

      return parseFloat(str);
    }

    return null;
  };

  CFFOperand.size = function size(value) {
    // if the value needs to be forced to the largest size (32 bit)
    // e.g. for unknown pointers, set to 32768
    if (value.forceLarge) {
      value = 32768;
    }

    if ((value | 0) !== value) {
      // floating point
      var str = '' + value;
      return 1 + Math.ceil((str.length + 1) / 2);
    } else if (-107 <= value && value <= 107) {
      return 1;
    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {
      return 2;
    } else if (-32768 <= value && value <= 32767) {
      return 3;
    } else {
      return 5;
    }
  };

  CFFOperand.encode = function encode(stream, value) {
    // if the value needs to be forced to the largest size (32 bit)
    // e.g. for unknown pointers, save the old value and set to 32768
    var val = Number(value);

    if (value.forceLarge) {
      stream.writeUInt8(29);
      return stream.writeInt32BE(val);
    } else if ((val | 0) !== val) {
      // floating point
      stream.writeUInt8(30);
      var str = '' + val;

      for (var i = 0; i < str.length; i += 2) {
        var c1 = str[i];
        var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;

        if (i === str.length - 1) {
          var n2 = FLOAT_EOF;
        } else {
          var c2 = str[i + 1];
          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;
        }

        stream.writeUInt8(n1 << 4 | n2 & 15);
      }

      if (n2 !== FLOAT_EOF) {
        return stream.writeUInt8(FLOAT_EOF << 4);
      }
    } else if (-107 <= val && val <= 107) {
      return stream.writeUInt8(val + 139);
    } else if (108 <= val && val <= 1131) {
      val -= 108;
      stream.writeUInt8((val >> 8) + 247);
      return stream.writeUInt8(val & 0xff);
    } else if (-1131 <= val && val <= -108) {
      val = -val - 108;
      stream.writeUInt8((val >> 8) + 251);
      return stream.writeUInt8(val & 0xff);
    } else if (-32768 <= val && val <= 32767) {
      stream.writeUInt8(28);
      return stream.writeInt16BE(val);
    } else {
      stream.writeUInt8(29);
      return stream.writeInt32BE(val);
    }
  };

  return CFFOperand;
}();

var CFFDict = /*#__PURE__*/function () {
  function CFFDict(ops) {
    if (ops === void 0) {
      ops = [];
    }

    this.ops = ops;
    this.fields = {};

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(ops), _step; !(_step = _iterator()).done;) {
      var field = _step.value;
      var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
      this.fields[key] = field;
    }
  }

  var _proto = CFFDict.prototype;

  _proto.decodeOperands = function decodeOperands(type, stream, ret, operands) {
    var _this = this;

    if (Array.isArray(type)) {
      return operands.map(function (op, i) {
        return _this.decodeOperands(type[i], stream, ret, [op]);
      });
    } else if (type.decode != null) {
      return type.decode(stream, ret, operands);
    } else {
      switch (type) {
        case 'number':
        case 'offset':
        case 'sid':
          return operands[0];

        case 'boolean':
          return !!operands[0];

        default:
          return operands;
      }
    }
  };

  _proto.encodeOperands = function encodeOperands(type, stream, ctx, operands) {
    var _this2 = this;

    if (Array.isArray(type)) {
      return operands.map(function (op, i) {
        return _this2.encodeOperands(type[i], stream, ctx, op)[0];
      });
    } else if (type.encode != null) {
      return type.encode(stream, operands, ctx);
    } else if (typeof operands === 'number') {
      return [operands];
    } else if (typeof operands === 'boolean') {
      return [+operands];
    } else if (Array.isArray(operands)) {
      return operands;
    } else {
      return [operands];
    }
  };

  _proto.decode = function decode(stream, parent) {
    var end = stream.pos + parent.length;
    var ret = {};
    var operands = []; // define hidden properties

    Object.defineProperties(ret, {
      parent: {
        value: parent
      },
      _startOffset: {
        value: stream.pos
      }
    }); // fill in defaults

    for (var key in this.fields) {
      var field = this.fields[key];
      ret[field[1]] = field[3];
    }

    while (stream.pos < end) {
      var b = stream.readUInt8();

      if (b < 28) {
        if (b === 12) {
          b = b << 8 | stream.readUInt8();
        }

        var _field = this.fields[b];

        if (!_field) {
          throw new Error("Unknown operator " + b);
        }

        var val = this.decodeOperands(_field[2], stream, ret, operands);

        if (val != null) {
          if (val instanceof restructure_src_utils__WEBPACK_IMPORTED_MODULE_5__.PropertyDescriptor) {
            Object.defineProperty(ret, _field[1], val);
          } else {
            ret[_field[1]] = val;
          }
        }

        operands = [];
      } else {
        operands.push(CFFOperand.decode(stream, b));
      }
    }

    return ret;
  };

  _proto.size = function size(dict, parent, includePointers) {
    if (includePointers === void 0) {
      includePointers = true;
    }

    var ctx = {
      parent: parent,
      val: dict,
      pointerSize: 0,
      startOffset: parent.startOffset || 0
    };
    var len = 0;

    for (var k in this.fields) {
      var field = this.fields[k];
      var val = dict[field[1]];

      if (val == null || deep_equal__WEBPACK_IMPORTED_MODULE_6___default()(val, field[3])) {
        continue;
      }

      var operands = this.encodeOperands(field[2], null, ctx, val);

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(operands), _step2; !(_step2 = _iterator2()).done;) {
        var op = _step2.value;
        len += CFFOperand.size(op);
      }

      var key = Array.isArray(field[0]) ? field[0] : [field[0]];
      len += key.length;
    }

    if (includePointers) {
      len += ctx.pointerSize;
    }

    return len;
  };

  _proto.encode = function encode(stream, dict, parent) {
    var ctx = {
      pointers: [],
      startOffset: stream.pos,
      parent: parent,
      val: dict,
      pointerSize: 0
    };
    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);

    for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.ops), _step3; !(_step3 = _iterator3()).done;) {
      var field = _step3.value;
      var val = dict[field[1]];

      if (val == null || deep_equal__WEBPACK_IMPORTED_MODULE_6___default()(val, field[3])) {
        continue;
      }

      var operands = this.encodeOperands(field[2], stream, ctx, val);

      for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(operands), _step4; !(_step4 = _iterator4()).done;) {
        var op = _step4.value;
        CFFOperand.encode(stream, op);
      }

      var key = Array.isArray(field[0]) ? field[0] : [field[0]];

      for (var _iterator5 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(key), _step5; !(_step5 = _iterator5()).done;) {
        var _op = _step5.value;
        stream.writeUInt8(_op);
      }
    }

    var i = 0;

    while (i < ctx.pointers.length) {
      var ptr = ctx.pointers[i++];
      ptr.type.encode(stream, ptr.val, ptr.parent);
    }

    return;
  };

  return CFFDict;
}();

var CFFPointer = /*#__PURE__*/function (_r$Pointer) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(CFFPointer, _r$Pointer);

  function CFFPointer(type, options) {
    if (options === void 0) {
      options = {};
    }

    if (options.type == null) {
      options.type = 'global';
    }

    return _r$Pointer.call(this, null, type, options) || this;
  }

  var _proto = CFFPointer.prototype;

  _proto.decode = function decode(stream, parent, operands) {
    this.offsetType = {
      decode: function decode() {
        return operands[0];
      }
    };
    return _r$Pointer.prototype.decode.call(this, stream, parent, operands);
  };

  _proto.encode = function encode(stream, value, ctx) {
    if (!stream) {
      // compute the size (so ctx.pointerSize is correct)
      this.offsetType = {
        size: function size() {
          return 0;
        }
      };
      this.size(value, ctx);
      return [new Ptr(0)];
    }

    var ptr = null;
    this.offsetType = {
      encode: function encode(stream, val) {
        return ptr = val;
      }
    };

    _r$Pointer.prototype.encode.call(this, stream, value, ctx);

    return [new Ptr(ptr)];
  };

  return CFFPointer;
}((restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer));

var Ptr = /*#__PURE__*/function () {
  function Ptr(val) {
    this.val = val;
    this.forceLarge = true;
  }

  var _proto2 = Ptr.prototype;

  _proto2.valueOf = function valueOf() {
    return this.val;
  };

  return Ptr;
}();

var CFFBlendOp = /*#__PURE__*/function () {
  function CFFBlendOp() {}

  CFFBlendOp.decode = function decode(stream, parent, operands) {
    var numBlends = operands.pop(); // TODO: actually blend. For now just consume the deltas
    // since we don't use any of the values anyway.

    while (operands.length > numBlends) {
      operands.pop();
    }
  };

  return CFFBlendOp;
}();

var CFFPrivateDict = new CFFDict([// key       name                    type                                          default
[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), {
  type: 'local'
}), null]]);

// Automatically generated from Appendix A of the CFF specification; do
// not edit. Length should be 391.
var standardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];

var StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];
var ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

var ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];
var ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
var ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];

// Scripts and Languages #
//########################

var LangSysTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  reqFeatureIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  featureCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  featureIndexes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'featureCount')
});
var LangSysRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  langSys: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LangSysTable, {
    type: 'parent'
  })
});
var Script = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  defaultLangSys: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LangSysTable),
  count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  langSysRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LangSysRecord, 'count')
});
var ScriptRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  script: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Script, {
    type: 'parent'
  })
});
var ScriptList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ScriptRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)); //#######################
// Features and Lookups #
//#######################

var Feature = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  featureParams: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // pointer
  lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupListIndexes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'lookupCount')
});
var FeatureRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  feature: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Feature, {
    type: 'parent'
  })
});
var FeatureList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatureRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var LookupFlags = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  markAttachmentType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  flags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])
});
function LookupList(SubTable) {
  var Lookup = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    lookupType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    flags: LookupFlags,
    subTableCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    subTables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), SubTable), 'subTableCount'),
    markFilteringSet: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Optional)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
      return t.flags.flags.useMarkFilteringSet;
    })
  });
  return new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Lookup), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
} //#################
// Coverage Table #
//#################

var RangeRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  start: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  end: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  startCoverageIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var Coverage = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyphs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'glyphCount')
  },
  2: {
    rangeCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    rangeRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(RangeRecord, 'rangeCount')
  }
}); //#########################
// Class Definition Table #
//#########################

var ClassRangeRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  start: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  end: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  class: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var ClassDef = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Class array
    startGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    classValueArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'glyphCount')
  },
  2: {
    // Class ranges
    classRangeCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    classRangeRecord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ClassRangeRecord, 'classRangeCount')
  }
}); //###############
// Device Table #
//###############

var Device = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  a: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // startSize for hinting Device, outerIndex for VariationIndex
  b: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // endSize for Device, innerIndex for VariationIndex
  deltaFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
}); //#############################################
// Contextual Substitution/Positioning Tables #
//#############################################

var LookupRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  sequenceIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupListIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var Rule = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  input: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.glyphCount - 1;
  }),
  lookupRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupRecord, 'lookupCount')
});
var RuleSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Rule), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var ClassRule = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  classes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.glyphCount - 1;
  }),
  lookupRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupRecord, 'lookupCount')
});
var ClassSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassRule), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var Context = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Simple context
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    ruleSetCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    ruleSets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), RuleSet), 'ruleSetCount')
  },
  2: {
    // Class-based context
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    classDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
    classSetCnt: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    classSet: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassSet), 'classSetCnt')
  },
  3: {
    glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverages: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'glyphCount'),
    lookupRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupRecord, 'lookupCount')
  }
}); //######################################################
// Chaining Contextual Substitution/Positioning Tables #
//######################################################

var ChainRule = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  backtrackGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  backtrack: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'backtrackGlyphCount'),
  inputGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  input: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.inputGlyphCount - 1;
  }),
  lookaheadGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookahead: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'lookaheadGlyphCount'),
  lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupRecord, 'lookupCount')
});
var ChainRuleSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ChainRule), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var ChainingContext = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Simple context glyph substitution
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    chainCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    chainRuleSets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ChainRuleSet), 'chainCount')
  },
  2: {
    // Class-based chaining context
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    backtrackClassDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
    inputClassDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
    lookaheadClassDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
    chainCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    chainClassSet: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ChainRuleSet), 'chainCount')
  },
  3: {
    // Coverage-based chaining context
    backtrackGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    backtrackCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'backtrackGlyphCount'),
    inputGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    inputCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'inputGlyphCount'),
    lookaheadGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookaheadCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'lookaheadGlyphCount'),
    lookupCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookupRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupRecord, 'lookupCount')
  }
});

var _;
/*******************
 * Variation Store *
 *******************/

var F2DOT14 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Fixed)(16, 'BE', 14);
var RegionAxisCoordinates = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  startCoord: F2DOT14,
  peakCoord: F2DOT14,
  endCoord: F2DOT14
});
var VariationRegionList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  axisCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  regionCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  variationRegions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(RegionAxisCoordinates, 'axisCount'), 'regionCount')
});
var DeltaSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  shortDeltas: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), function (t) {
    return t.parent.shortDeltaCount;
  }),
  regionDeltas: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int8), function (t) {
    return t.parent.regionIndexCount - t.parent.shortDeltaCount;
  }),
  deltas: function deltas(t) {
    return t.shortDeltas.concat(t.regionDeltas);
  }
});
var ItemVariationData = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  itemCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  shortDeltaCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  regionIndexCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  regionIndexes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'regionIndexCount'),
  deltaSets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(DeltaSet, 'itemCount')
});
var ItemVariationStore = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  variationRegionList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), VariationRegionList),
  variationDataCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  itemVariationData: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ItemVariationData), 'variationDataCount')
});
/**********************
 * Feature Variations *
 **********************/

var ConditionTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: (_ = {
    axisIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  }, _["axisIndex"] = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)
});
var ConditionSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  conditionCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  conditionTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ConditionTable), 'conditionCount')
});
var FeatureTableSubstitutionRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  featureIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  alternateFeatureTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), Feature, {
    type: 'parent'
  })
});
var FeatureTableSubstitution = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  substitutionCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  substitutions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatureTableSubstitutionRecord, 'substitutionCount')
});
var FeatureVariationRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  conditionSet: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ConditionSet, {
    type: 'parent'
  }),
  featureTableSubstitution: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), FeatureTableSubstitution, {
    type: 'parent'
  })
});
var FeatureVariations = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  majorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  minorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  featureVariationRecordCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  featureVariationRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatureVariationRecord, 'featureVariationRecordCount')
});

// otherwise delegates to the provided type.

var PredefinedOp = /*#__PURE__*/function () {
  function PredefinedOp(predefinedOps, type) {
    this.predefinedOps = predefinedOps;
    this.type = type;
  }

  var _proto = PredefinedOp.prototype;

  _proto.decode = function decode(stream, parent, operands) {
    if (this.predefinedOps[operands[0]]) {
      return this.predefinedOps[operands[0]];
    }

    return this.type.decode(stream, parent, operands);
  };

  _proto.size = function size(value, ctx) {
    return this.type.size(value, ctx);
  };

  _proto.encode = function encode(stream, value, ctx) {
    var index = this.predefinedOps.indexOf(value);

    if (index !== -1) {
      return index;
    }

    return this.type.encode(stream, value, ctx);
  };

  return PredefinedOp;
}();

var CFFEncodingVersion = /*#__PURE__*/function (_r$Number) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(CFFEncodingVersion, _r$Number);

  function CFFEncodingVersion() {
    return _r$Number.call(this, 'UInt8') || this;
  }

  var _proto2 = CFFEncodingVersion.prototype;

  _proto2.decode = function decode(stream) {
    return restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8.decode(stream) & 0x7f;
  };

  return CFFEncodingVersion;
}((restructure__WEBPACK_IMPORTED_MODULE_0___default().Number));

var Range1 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  first: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nLeft: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var Range2 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  first: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nLeft: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var CFFCustomEncoding = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)(new CFFEncodingVersion(), {
  0: {
    nCodes: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    codes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 'nCodes')
  },
  1: {
    nRanges: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    ranges: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Range1, 'nRanges')
  } // TODO: supplement?

});
var CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, {
  lazy: true
})); // Decodes an array of ranges until the total
// length is equal to the provided length.

var RangeArray = /*#__PURE__*/function (_r$Array) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(RangeArray, _r$Array);

  function RangeArray() {
    return _r$Array.apply(this, arguments) || this;
  }

  var _proto3 = RangeArray.prototype;

  _proto3.decode = function decode(stream, parent) {
    var length = (0,restructure_src_utils__WEBPACK_IMPORTED_MODULE_5__.resolveLength)(this.length, stream, parent);
    var count = 0;
    var res = [];

    while (count < length) {
      var range = this.type.decode(stream, parent);
      range.offset = count;
      count += range.nLeft + 1;
      res.push(range);
    }

    return res;
  };

  return RangeArray;
}((restructure__WEBPACK_IMPORTED_MODULE_0___default().Array));

var CFFCustomCharset = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), {
  0: {
    glyphs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
      return t.parent.CharStrings.length - 1;
    })
  },
  1: {
    ranges: new RangeArray(Range1, function (t) {
      return t.parent.CharStrings.length - 1;
    })
  },
  2: {
    ranges: new RangeArray(Range2, function (t) {
      return t.parent.CharStrings.length - 1;
    })
  }
});
var CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, {
  lazy: true
}));
var FDRange3 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  first: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  fd: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var FDRange4 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  first: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  fd: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var FDSelect = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), {
  0: {
    fds: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
      return t.parent.CharStrings.length;
    })
  },
  3: {
    nRanges: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    ranges: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FDRange3, 'nRanges'),
    sentinel: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  4: {
    nRanges: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    ranges: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FDRange4, 'nRanges'),
    sentinel: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
  }
});
var ptr = new CFFPointer(CFFPrivateDict);

var CFFPrivateOp = /*#__PURE__*/function () {
  function CFFPrivateOp() {}

  var _proto4 = CFFPrivateOp.prototype;

  _proto4.decode = function decode(stream, parent, operands) {
    parent.length = operands[0];
    return ptr.decode(stream, parent, [operands[1]]);
  };

  _proto4.size = function size(dict, ctx) {
    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];
  };

  _proto4.encode = function encode(stream, dict, ctx) {
    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];
  };

  return CFFPrivateOp;
}();

var FontDict = new CFFDict([// key       name                   type(s)                                 default
[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], 'PaintType', 'number', 0]]);
var CFFTopDict = new CFFDict([// key       name                   type(s)                                 default
[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null], // CID font specific
[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);
var VariationStore = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  itemVariationStore: ItemVariationStore
});
var CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);
var CFFTop = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed16), {
  1: {
    hdrSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    offSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    nameIndex: new CFFIndex(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)('length')),
    topDictIndex: new CFFIndex(CFFTopDict),
    stringIndex: new CFFIndex(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)('length')),
    globalSubrIndex: new CFFIndex()
  },
  2: {
    hdrSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    topDict: CFF2TopDict,
    globalSubrIndex: new CFFIndex()
  }
});

var CFFFont = /*#__PURE__*/function () {
  function CFFFont(stream) {
    this.stream = stream;
    this.decode();
  }

  CFFFont.decode = function decode(stream) {
    return new CFFFont(stream);
  };

  var _proto = CFFFont.prototype;

  _proto.decode = function decode() {
    this.stream.pos;
    var top = CFFTop.decode(this.stream);

    for (var key in top) {
      var val = top[key];
      this[key] = val;
    }

    if (this.version < 2) {
      if (this.topDictIndex.length !== 1) {
        throw new Error("Only a single font is allowed in CFF");
      }

      this.topDict = this.topDictIndex[0];
    }

    this.isCIDFont = this.topDict.ROS != null;
    return this;
  };

  _proto.string = function string(sid) {
    if (this.version >= 2) {
      return null;
    }

    if (sid < standardStrings.length) {
      return standardStrings[sid];
    }

    return this.stringIndex[sid - standardStrings.length];
  };

  _proto.getCharString = function getCharString(glyph) {
    this.stream.pos = this.topDict.CharStrings[glyph].offset;
    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
  };

  _proto.getGlyphName = function getGlyphName(gid) {
    // CFF2 glyph names are in the post table.
    if (this.version >= 2) {
      return null;
    } // CID-keyed fonts don't have glyph names


    if (this.isCIDFont) {
      return null;
    }

    var charset = this.topDict.charset;

    if (Array.isArray(charset)) {
      return charset[gid];
    }

    if (gid === 0) {
      return '.notdef';
    }

    gid -= 1;

    switch (charset.version) {
      case 0:
        return this.string(charset.glyphs[gid]);

      case 1:
      case 2:
        for (var i = 0; i < charset.ranges.length; i++) {
          var range = charset.ranges[i];

          if (range.offset <= gid && gid <= range.offset + range.nLeft) {
            return this.string(range.first + (gid - range.offset));
          }
        }

        break;
    }

    return null;
  };

  _proto.fdForGlyph = function fdForGlyph(gid) {
    if (!this.topDict.FDSelect) {
      return null;
    }

    switch (this.topDict.FDSelect.version) {
      case 0:
        return this.topDict.FDSelect.fds[gid];

      case 3:
      case 4:
        var ranges = this.topDict.FDSelect.ranges;
        var low = 0;
        var high = ranges.length - 1;

        while (low <= high) {
          var mid = low + high >> 1;

          if (gid < ranges[mid].first) {
            high = mid - 1;
          } else if (mid < high && gid >= ranges[mid + 1].first) {
            low = mid + 1;
          } else {
            return ranges[mid].fd;
          }
        }

      default:
        throw new Error("Unknown FDSelect version: " + this.topDict.FDSelect.version);
    }
  };

  _proto.privateDictForGlyph = function privateDictForGlyph(gid) {
    if (this.topDict.FDSelect) {
      var fd = this.fdForGlyph(gid);

      if (this.topDict.FDArray[fd]) {
        return this.topDict.FDArray[fd].Private;
      }

      return null;
    }

    if (this.version < 2) {
      return this.topDict.Private;
    }

    return this.topDict.FDArray[0].Private;
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(CFFFont, [{
    key: "postscriptName",
    get: function get() {
      if (this.version < 2) {
        return this.nameIndex[0];
      }

      return null;
    }
  }, {
    key: "fullName",
    get: function get() {
      return this.string(this.topDict.FullName);
    }
  }, {
    key: "familyName",
    get: function get() {
      return this.string(this.topDict.FamilyName);
    }
  }]);

  return CFFFont;
}();

var VerticalOrigin = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyphIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  vertOriginY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
});
var VORG = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  majorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  minorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  defaultVertOriginY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  numVertOriginYMetrics: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  metrics: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(VerticalOrigin, 'numVertOriginYMetrics')
});

var BigMetrics = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  height: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  width: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  horiBearingX: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  horiBearingY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  horiAdvance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  vertBearingX: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  vertBearingY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  vertAdvance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var SmallMetrics = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  height: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  width: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  bearingX: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  bearingY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  advance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var EBDTComponent = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  xOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  yOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8)
});

var ByteAligned = function ByteAligned() {};

var BitAligned = function BitAligned() {};

new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('version', {
  1: {
    metrics: SmallMetrics,
    data: ByteAligned
  },
  2: {
    metrics: SmallMetrics,
    data: BitAligned
  },
  // format 3 is deprecated
  // format 4 is not supported by Microsoft
  5: {
    data: BitAligned
  },
  6: {
    metrics: BigMetrics,
    data: ByteAligned
  },
  7: {
    metrics: BigMetrics,
    data: BitAligned
  },
  8: {
    metrics: SmallMetrics,
    pad: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)),
    numComponents: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    components: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(EBDTComponent, 'numComponents')
  },
  9: {
    metrics: BigMetrics,
    pad: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)),
    numComponents: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    components: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(EBDTComponent, 'numComponents')
  },
  17: {
    metrics: SmallMetrics,
    dataLen: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    data: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)('dataLen')
  },
  18: {
    metrics: BigMetrics,
    dataLen: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    data: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)('dataLen')
  },
  19: {
    dataLen: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    data: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)('dataLen')
  }
});

var SBitLineMetrics = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  ascender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  descender: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  widthMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  caretSlopeNumerator: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  caretSlopeDenominator: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  caretOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  minOriginSB: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  minAdvanceSB: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  maxBeforeBL: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  minAfterBL: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int8),
  pad: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int8), 2)
});
var CodeOffsetPair = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyphCode: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  offset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var IndexSubtable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  header: {
    imageFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    imageDataOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
  },
  1: {
    offsetArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), function (t) {
      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
    })
  },
  2: {
    imageSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    bigMetrics: BigMetrics
  },
  3: {
    offsetArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
    })
  },
  4: {
    numGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    glyphArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(CodeOffsetPair, function (t) {
      return t.numGlyphs + 1;
    })
  },
  5: {
    imageSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    bigMetrics: BigMetrics,
    numGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    glyphCodeArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numGlyphs')
  }
});
var IndexSubtableArray = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  firstGlyphIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lastGlyphIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  subtable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), IndexSubtable)
});
var BitmapSizeTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  indexSubTableArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(IndexSubtableArray, 1), {
    type: 'parent'
  }),
  indexTablesSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  numberOfIndexSubTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  colorRef: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  hori: SBitLineMetrics,
  vert: SBitLineMetrics,
  startGlyphIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  endGlyphIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  ppemX: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  ppemY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  bitDepth: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  flags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), ['horizontal', 'vertical'])
});
var EBLC = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  // 0x00020000
  numSizes: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  sizes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(BitmapSizeTable, 'numSizes')
});

var ImageTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  ppem: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  resolution: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  imageOffsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'void'), function (t) {
    return t.parent.parent.maxp.numGlyphs + 1;
  })
}); // This is the Apple sbix table, used by the "Apple Color Emoji" font.
// It includes several image tables with images for each bitmap glyph
// of several different sizes.

var sbix = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  flags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ['renderOutlines']),
  numImgTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  imageTables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ImageTable), 'numImgTables')
});

var LayerRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  gid: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Glyph ID of layer glyph (must be in z-order from bottom to top).
  paletteIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // Index value to use in the appropriate palette. This value must

}); // be less than numPaletteEntries in the CPAL table, except for
// the special case noted below. Each palette entry is 16 bits.
// A palette index of 0xFFFF is a special case indicating that
// the text foreground color should be used.

var BaseGlyphRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  gid: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Glyph ID of reference glyph. This glyph is for reference only
  // and is not rendered for color.
  firstLayerIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Index (from beginning of the Layer Records) to the layer record.
  // There will be numLayers consecutive entries for this base glyph.
  numLayers: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var COLR = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  numBaseGlyphRecords: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  baseGlyphRecord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(BaseGlyphRecord, 'numBaseGlyphRecords')),
  layerRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LayerRecord, 'numLayerRecords'), {
    lazy: true
  }),
  numLayerRecords: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});

var ColorRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  blue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  green: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  red: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  alpha: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8)
});
var CPAL = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  header: {
    numPaletteEntries: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    numPalettes: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    numColorRecords: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    colorRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ColorRecord, 'numColorRecords')),
    colorRecordIndices: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numPalettes')
  },
  0: {},
  1: {
    offsetPaletteTypeArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'numPalettes')),
    offsetPaletteLabelArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numPalettes')),
    offsetPaletteEntryLabelArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numPaletteEntries'))
  }
});

var BaseCoord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Design units only
    coordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16) // X or Y value, in design units

  },
  2: {
    // Design units plus contour point
    coordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // X or Y value, in design units
    referenceGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // GlyphID of control glyph
    baseCoordPoint: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // Index of contour point on the referenceGlyph

  },
  3: {
    // Design units plus Device table
    coordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    // X or Y value, in design units
    deviceTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device) // Device table for X or Y value

  }
});
var BaseValues = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  defaultIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Index of default baseline for this script-same index in the BaseTagList
  baseCoordCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  baseCoords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseCoord), 'baseCoordCount')
});
var FeatMinMaxRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  // 4-byte feature identification tag-must match FeatureTag in FeatureList
  minCoord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseCoord, {
    type: 'parent'
  }),
  // May be NULL
  maxCoord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseCoord, {
    type: 'parent'
  }) // May be NULL

});
var MinMax = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  minCoord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseCoord),
  // May be NULL
  maxCoord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseCoord),
  // May be NULL
  featMinMaxCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // May be 0
  featMinMaxRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order

});
var BaseLangSysRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  // 4-byte language system identification tag
  minMax: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MinMax, {
    type: 'parent'
  })
});
var BaseScript = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  baseValues: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseValues),
  // May be NULL
  defaultMinMax: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MinMax),
  // May be NULL
  baseLangSysCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // May be 0
  baseLangSysRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag

});
var BaseScriptRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  // 4-byte script identification tag
  script: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseScript, {
    type: 'parent'
  })
});
var BaseScriptList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(BaseScriptRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)); // Array of 4-byte baseline identification tags-must be in alphabetical order

var BaseTagList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var Axis$1 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  baseTagList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseTagList),
  // May be NULL
  baseScriptList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseScriptList)
});
var BASE = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), {
  header: {
    horizAxis: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Axis$1),
    // May be NULL
    vertAxis: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Axis$1) // May be NULL

  },
  0x00010000: {},
  0x00010001: {
    itemVariationStore: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ItemVariationStore)
  }
});

var AttachPoint = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var AttachList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
  glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  attachPoints: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), AttachPoint), 'glyphCount')
});
var CaretValue = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Design units only
    coordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
  },
  2: {
    // Contour point
    caretValuePoint: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  3: {
    // Design units plus Device table
    coordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    deviceTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device)
  }
});
var LigGlyph = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), CaretValue), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var LigCaretList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
  ligGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  ligGlyphs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LigGlyph), 'ligGlyphCount')
});
var MarkGlyphSetsDef = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  markSetTableFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  markSetCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), Coverage), 'markSetCount')
});
var GDEF = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), {
  header: {
    glyphClassDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
    attachList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), AttachList),
    ligCaretList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LigCaretList),
    markAttachClassDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef)
  },
  0x00010000: {},
  0x00010002: {
    markGlyphSetsDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MarkGlyphSetsDef)
  },
  0x00010003: {
    markGlyphSetsDef: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MarkGlyphSetsDef),
    itemVariationStore: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ItemVariationStore)
  }
});

var ValueFormat = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);
var types = {
  xPlacement: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yPlacement: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  xAdvance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yAdvance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  xPlaDevice: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device, {
    type: 'global',
    relativeTo: 'rel'
  }),
  yPlaDevice: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device, {
    type: 'global',
    relativeTo: 'rel'
  }),
  xAdvDevice: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device, {
    type: 'global',
    relativeTo: 'rel'
  }),
  yAdvDevice: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device, {
    type: 'global',
    relativeTo: 'rel'
  })
};

var ValueRecord = /*#__PURE__*/function () {
  function ValueRecord(key) {
    if (key === void 0) {
      key = 'valueFormat';
    }

    this.key = key;
  }

  var _proto = ValueRecord.prototype;

  _proto.buildStruct = function buildStruct(parent) {
    var struct = parent;

    while (!struct[this.key] && struct.parent) {
      struct = struct.parent;
    }

    if (!struct[this.key]) return;
    var fields = {};

    fields.rel = function () {
      return struct._startOffset;
    };

    var format = struct[this.key];

    for (var key in format) {
      if (format[key]) {
        fields[key] = types[key];
      }
    }

    return new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)(fields);
  };

  _proto.size = function size(val, ctx) {
    return this.buildStruct(ctx).size(val, ctx);
  };

  _proto.decode = function decode(stream, parent) {
    var res = this.buildStruct(parent).decode(stream, parent);
    delete res.rel;
    return res;
  };

  return ValueRecord;
}();

var PairValueRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  secondGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  value1: new ValueRecord('valueFormat1'),
  value2: new ValueRecord('valueFormat2')
});
var PairSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(PairValueRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var Class2Record = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  value1: new ValueRecord('valueFormat1'),
  value2: new ValueRecord('valueFormat2')
});
var Anchor = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  1: {
    // Design units only
    xCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    yCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
  },
  2: {
    // Design units plus contour point
    xCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    yCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    anchorPoint: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  3: {
    // Design units plus Device tables
    xCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    yCoordinate: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
    xDeviceTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device),
    yDeviceTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Device)
  }
});
var EntryExitRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  entryAnchor: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Anchor, {
    type: 'parent'
  }),
  exitAnchor: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Anchor, {
    type: 'parent'
  })
});
var MarkRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  class: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  markAnchor: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Anchor, {
    type: 'parent'
  })
});
var MarkArray = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(MarkRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var BaseRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Anchor), function (t) {
  return t.parent.classCount;
});
var BaseArray = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(BaseRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var ComponentRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Anchor), function (t) {
  return t.parent.parent.classCount;
});
var LigatureAttach = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ComponentRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var LigatureArray = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LigatureAttach), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var GPOSLookup = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('lookupType', {
  1: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
    // Single Adjustment
    1: {
      // Single positioning value
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      valueFormat: ValueFormat,
      value: new ValueRecord()
    },
    2: {
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      valueFormat: ValueFormat,
      valueCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      values: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new ValueRecord(), 'valueCount')
    }
  }),
  2: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
    // Pair Adjustment Positioning
    1: {
      // Adjustments for glyph pairs
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      valueFormat1: ValueFormat,
      valueFormat2: ValueFormat,
      pairSetCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      pairSets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), PairSet), 'pairSetCount')
    },
    2: {
      // Class pair adjustment
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      valueFormat1: ValueFormat,
      valueFormat2: ValueFormat,
      classDef1: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
      classDef2: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassDef),
      class1Count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      class2Count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      classRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(Class2Record, 'class2Count'), 'class1Count')
    }
  }),
  3: {
    // Cursive Attachment Positioning
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    entryExitCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    entryExitRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(EntryExitRecord, 'entryExitCount')
  },
  4: {
    // MarkToBase Attachment Positioning
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    markCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    baseCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    classCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    markArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MarkArray),
    baseArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseArray)
  },
  5: {
    // MarkToLigature Attachment Positioning
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    markCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    ligatureCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    classCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    markArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MarkArray),
    ligatureArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LigatureArray)
  },
  6: {
    // MarkToMark Attachment Positioning
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    mark1Coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    mark2Coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    classCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    mark1Array: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), MarkArray),
    mark2Array: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), BaseArray)
  },
  7: Context,
  // Contextual positioning
  8: ChainingContext,
  // Chaining contextual positioning
  9: {
    // Extension Positioning
    posFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookupType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // cannot also be 9
    extension: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), undefined)
  }
}); // Fix circular reference

GPOSLookup.versions[9].extension.type = GPOSLookup;
var GPOS = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), {
  header: {
    scriptList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ScriptList),
    featureList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), FeatureList),
    lookupList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new LookupList(GPOSLookup))
  },
  0x00010000: {},
  0x00010001: {
    featureVariations: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), FeatureVariations)
  }
}); // export GPOSLookup for JSTF table

var Sequence = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var AlternateSet = Sequence;
var Ligature = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  glyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  compCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  components: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.compCount - 1;
  })
});
var LigatureSet = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Ligature), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var GSUBLookup = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('lookupType', {
  1: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
    // Single Substitution
    1: {
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      deltaGlyphID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
    },
    2: {
      coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
      glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      substitute: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'glyphCount')
    }
  }),
  2: {
    // Multiple Substitution
    substFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    sequences: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Sequence), 'count')
  },
  3: {
    // Alternate Substitution
    substFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    alternateSet: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), AlternateSet), 'count')
  },
  4: {
    // Ligature Substitution
    substFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    ligatureSets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), LigatureSet), 'count')
  },
  5: Context,
  // Contextual Substitution
  6: ChainingContext,
  // Chaining Contextual Substitution
  7: {
    // Extension Substitution
    substFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookupType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // cannot also be 7
    extension: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), undefined)
  },
  8: {
    // Reverse Chaining Contextual Single Substitution
    substFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage),
    backtrackCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'backtrackGlyphCount'),
    lookaheadGlyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    lookaheadCoverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Coverage), 'lookaheadGlyphCount'),
    glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    substitutes: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'glyphCount')
  }
}); // Fix circular reference

GSUBLookup.versions[7].extension.type = GSUBLookup;
var GSUB = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), {
  header: {
    scriptList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ScriptList),
    featureList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), FeatureList),
    lookupList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new LookupList(GSUBLookup))
  },
  0x00010000: {},
  0x00010001: {
    featureVariations: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), FeatureVariations)
  }
});

var JstfGSUBModList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var JstfPriority = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  shrinkageEnableGSUB: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  shrinkageDisableGSUB: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  shrinkageEnableGPOS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  shrinkageDisableGPOS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  shrinkageJstfMax: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new LookupList(GPOSLookup)),
  extensionEnableGSUB: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  extensionDisableGSUB: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  extensionEnableGPOS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  extensionDisableGPOS: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfGSUBModList),
  extensionJstfMax: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new LookupList(GPOSLookup))
});
var JstfLangSys = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfPriority), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16));
var JstfLangSysRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  jstfLangSys: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfLangSys)
});
var JstfScript = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  extenderGlyphs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))),
  // array of glyphs to extend line length
  defaultLangSys: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfLangSys),
  langSysCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  langSysRecords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(JstfLangSysRecord, 'langSysCount')
});
var JstfScriptRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  script: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JstfScript, {
    type: 'parent'
  })
});
var JSTF = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  // should be 0x00010000
  scriptCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  scriptList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(JstfScriptRecord, 'scriptCount')
});

var VariableSizeNumber = /*#__PURE__*/function () {
  function VariableSizeNumber(size) {
    this._size = size;
  }

  var _proto = VariableSizeNumber.prototype;

  _proto.decode = function decode(stream, parent) {
    switch (this.size(0, parent)) {
      case 1:
        return stream.readUInt8();

      case 2:
        return stream.readUInt16BE();

      case 3:
        return stream.readUInt24BE();

      case 4:
        return stream.readUInt32BE();
    }
  };

  _proto.size = function size(val, parent) {
    return (0,restructure_src_utils__WEBPACK_IMPORTED_MODULE_5__.resolveLength)(this._size, null, parent);
  };

  return VariableSizeNumber;
}();

var MapDataEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  entry: new VariableSizeNumber(function (t) {
    return ((t.parent.entryFormat & 0x0030) >> 4) + 1;
  }),
  outerIndex: function outerIndex(t) {
    return t.entry >> (t.parent.entryFormat & 0x000F) + 1;
  },
  innerIndex: function innerIndex(t) {
    return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;
  }
});
var DeltaSetIndexMap = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  entryFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  mapCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  mapData: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(MapDataEntry, 'mapCount')
});
var HVAR = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  majorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  minorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  itemVariationStore: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), ItemVariationStore),
  advanceWidthMapping: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), DeltaSetIndexMap),
  LSBMapping: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), DeltaSetIndexMap),
  RSBMapping: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), DeltaSetIndexMap)
});

var Signature = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  offset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var SignatureBlock = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 2),
  cbSignature: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  // Length (in bytes) of the PKCS#7 packet in pbSignature
  signature: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)('cbSignature')
});
var DSIG = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  ulVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  // Version number of the DSIG table (0x00000001)
  usNumSigs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of signatures in the table
  usFlag: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Permission flags
  signatures: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Signature, 'usNumSigs'),
  signatureBlocks: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(SignatureBlock, 'usNumSigs')
});

var GaspRange = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  rangeMaxPPEM: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Upper limit of range, in ppem
  rangeGaspBehavior: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), [// Flags describing desired rasterizer behavior
  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType
  ])
});
var gasp = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // set to 0
  numRanges: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  gaspRanges: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(GaspRange, 'numRanges') // Sorted by ppem

});

var DeviceRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  pixelSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  maximumWidth: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  widths: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
    return t.parent.parent.maxp.numGlyphs;
  })
}); // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes

var hdmx = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  numRecords: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  sizeDeviceRecord: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int32),
  records: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(DeviceRecord, 'numRecords')
});

var KernPair = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  left: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  right: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  value: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
});
var ClassTable$1 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  firstGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'nGlyphs'),
  max: function max(t) {
    return t.offsets.length && Math.max.apply(Math, t.offsets);
  }
});
var Kern2Array = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  off: function off(t) {
    return t._startOffset - t.parent.parent._startOffset;
  },
  len: function len(t) {
    return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);
  },
  values: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 'len')
});
var KernSubtable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('format', {
  0: {
    nPairs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    searchRange: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    entrySelector: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    rangeShift: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    pairs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(KernPair, 'nPairs')
  },
  2: {
    rowWidth: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    leftTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassTable$1, {
      type: 'parent'
    }),
    rightTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassTable$1, {
      type: 'parent'
    }),
    array: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), Kern2Array, {
      type: 'parent'
    })
  },
  3: {
    glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    kernValueCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    leftClassCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    rightClassCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    kernValue: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 'kernValueCount'),
    leftClass: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 'glyphCount'),
    rightClass: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 'glyphCount'),
    kernIndex: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
      return t.leftClassCount * t.rightClassCount;
    })
  }
});
var KernTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('version', {
  0: {
    // Microsoft uses this format
    subVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Microsoft has an extra sub-table version number
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // Length of the subtable, in bytes
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    // Format of subtable
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), ['horizontal', // 1 if table has horizontal data, 0 if vertical
    'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.
    'crossStream', // If set to 1, kerning is perpendicular to the flow of the text
    'override' // If set to 1 the value in this table replaces the accumulated value
    ]),
    subtable: KernSubtable,
    padding: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
      return t.length - t._currentOffset;
    })
  },
  1: {
    // Apple uses this format
    length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    coverage: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), [null, null, null, null, null, 'variation', // Set if table has variation kerning values
    'crossStream', // Set if table has cross-stream kerning values
    'vertical' // Set if table has vertical kerning values
    ]),
    format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
    tupleIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    subtable: KernSubtable,
    padding: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
      return t.length - t._currentOffset;
    })
  }
});
var kern = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
  0: {
    // Microsoft Version
    nTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    tables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(KernTable, 'nTables')
  },
  1: {
    // Apple Version
    reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
    // the other half of the version number
    nTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    tables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(KernTable, 'nTables')
  }
});

// Records the ppem for each glyph at which the scaling becomes linear again,
// despite instructions effecting the advance width

var LTSH = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  numGlyphs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  yPels: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 'numGlyphs')
});

// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines

var PCLT = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  fontNumber: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  pitch: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  xHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  style: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  typeFamily: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  capHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  symbolSet: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  typeface: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(16),
  characterComplement: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(8),
  fileName: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(6),
  strokeWeight: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(1),
  widthType: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(1),
  serifStyle: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8))
});

// sizes. This is needed in order to match font metrics on Windows.

var Ratio = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  bCharSet: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  // Character set
  xRatio: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  // Value to use for x-Ratio
  yStartRatio: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  // Starting y-Ratio value
  yEndRatio: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8) // Ending y-Ratio value

});
var vTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  yPelHeight: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // yPelHeight to which values apply
  yMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Maximum value (in pels) for this yPelHeight
  yMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16) // Minimum value (in pels) for this yPelHeight

});
var VdmxGroup = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  recs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of height records in this group
  startsz: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  // Starting yPelHeight
  endsz: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  // Ending yPelHeight
  entries: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(vTable, 'recs') // The VDMX records

});
var VDMX = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Version number (0 or 1)
  numRecs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of VDMX groups present
  numRatios: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Number of aspect ratio groupings
  ratioRanges: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Ratio, 'numRatios'),
  // Ratio ranges
  offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numRatios'),
  // Offset to the VDMX group for this ratio range
  groups: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(VdmxGroup, 'numRecs') // The actual VDMX groupings

});

var vhea = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // Version number of the Vertical Header Table
  ascent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The vertical typographic ascender for this font
  descent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The vertical typographic descender for this font
  lineGap: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The vertical typographic line gap for this font
  advanceHeightMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The maximum advance height measurement found in the font
  minTopSideBearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The minimum top side bearing measurement found in the font
  minBottomSideBearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // The minimum bottom side bearing measurement found in the font
  yMaxExtent: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  caretSlopeRise: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Caret slope (rise/run)
  caretSlopeRun: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  caretOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Set value equal to 0 for nonslanted fonts
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 4),
  metricDataFormat: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // Set to 0
  numberOfMetrics: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16) // Number of advance heights in the Vertical Metrics table

});

var VmtxEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  advance: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  // The advance height of the glyph
  bearing: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16) // The top sidebearing of the glyph

}); // Vertical Metrics Table

var vmtx = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  metrics: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)(VmtxEntry, function (t) {
    return t.parent.vhea.numberOfMetrics;
  }),
  bearings: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().LazyArray)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), function (t) {
    return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;
  })
});

var shortFrac$1 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Fixed)(16, 'BE', 14);
var Correspondence = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  fromCoord: shortFrac$1,
  toCoord: shortFrac$1
});
var Segment = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  pairCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  correspondence: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Correspondence, 'pairCount')
});
var avar = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  axisCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  segment: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Segment, 'axisCount')
});

var UnboundedArrayAccessor = /*#__PURE__*/function () {
  function UnboundedArrayAccessor(type, stream, parent) {
    this.type = type;
    this.stream = stream;
    this.parent = parent;
    this.base = this.stream.pos;
    this._items = [];
  }

  var _proto = UnboundedArrayAccessor.prototype;

  _proto.getItem = function getItem(index) {
    if (this._items[index] == null) {
      var pos = this.stream.pos;
      this.stream.pos = this.base + this.type.size(null, this.parent) * index;
      this._items[index] = this.type.decode(this.stream, this.parent);
      this.stream.pos = pos;
    }

    return this._items[index];
  };

  _proto.inspect = function inspect() {
    return "[UnboundedArray " + this.type.constructor.name + "]";
  };

  return UnboundedArrayAccessor;
}();

var UnboundedArray = /*#__PURE__*/function (_r$Array) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(UnboundedArray, _r$Array);

  function UnboundedArray(type) {
    return _r$Array.call(this, type, 0) || this;
  }

  var _proto2 = UnboundedArray.prototype;

  _proto2.decode = function decode(stream, parent) {
    return new UnboundedArrayAccessor(this.type, stream, parent);
  };

  return UnboundedArray;
}((restructure__WEBPACK_IMPORTED_MODULE_0___default().Array));
var LookupTable = function LookupTable(ValueType) {
  if (ValueType === void 0) {
    ValueType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16);
  }

  // Helper class that makes internal structures invisible to pointers
  var Shadow = /*#__PURE__*/function () {
    function Shadow(type) {
      this.type = type;
    }

    var _proto3 = Shadow.prototype;

    _proto3.decode = function decode(stream, ctx) {
      ctx = ctx.parent.parent;
      return this.type.decode(stream, ctx);
    };

    _proto3.size = function size(val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.size(val, ctx);
    };

    _proto3.encode = function encode(stream, val, ctx) {
      ctx = ctx.parent.parent;
      return this.type.encode(stream, val, ctx);
    };

    return Shadow;
  }();

  ValueType = new Shadow(ValueType);
  var BinarySearchHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    unitSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    nUnits: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    searchRange: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    entrySelector: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    rangeShift: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  });
  var LookupSegmentSingle = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    lastGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    firstGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    value: ValueType
  });
  var LookupSegmentArray = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    lastGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    firstGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    values: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ValueType, function (t) {
      return t.lastGlyph - t.firstGlyph + 1;
    }), {
      type: 'parent'
    })
  });
  var LookupSingle = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    glyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    value: ValueType
  });
  return new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), {
    0: {
      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?

    },
    2: {
      binarySearchHeader: BinarySearchHeader,
      segments: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupSegmentSingle, function (t) {
        return t.binarySearchHeader.nUnits;
      })
    },
    4: {
      binarySearchHeader: BinarySearchHeader,
      segments: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupSegmentArray, function (t) {
        return t.binarySearchHeader.nUnits;
      })
    },
    6: {
      binarySearchHeader: BinarySearchHeader,
      segments: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(LookupSingle, function (t) {
        return t.binarySearchHeader.nUnits;
      })
    },
    8: {
      firstGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      count: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
      values: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(ValueType, 'count')
    }
  });
};
function StateTable(entryData, lookupType) {
  if (entryData === void 0) {
    entryData = {};
  }

  if (lookupType === void 0) {
    lookupType = (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16);
  }

  var entry = Object.assign({
    newState: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  }, entryData);
  var Entry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)(entry);
  var StateArray = new UnboundedArray(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.nClasses;
  }));
  var StateHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    nClasses: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    classTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new LookupTable(lookupType)),
    stateArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), StateArray),
    entryTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new UnboundedArray(Entry))
  });
  return StateHeader;
} // This is the old version of the StateTable structure

function StateTable1(entryData, lookupType) {
  if (entryData === void 0) {
    entryData = {};
  }

  var ClassLookupTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    version: function version() {
      return 8;
    },
    // simulate LookupTable
    firstGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    values: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))
  });
  var entry = Object.assign({
    newStateOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    // convert offset to stateArray index
    newState: function newState(t) {
      return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;
    },
    flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  }, entryData);
  var Entry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)(entry);
  var StateArray = new UnboundedArray(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
    return t.nClasses;
  }));
  var StateHeader1 = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
    nClasses: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    classTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassLookupTable),
    stateArray: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), StateArray),
    entryTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new UnboundedArray(Entry))
  });
  return StateHeader1;
}

var BslnSubtable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('format', {
  0: {
    // Distance-based, no mapping
    deltas: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 32)
  },
  1: {
    // Distance-based, with mapping
    deltas: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().int16), 32),
    mappingData: new LookupTable((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))
  },
  2: {
    // Control point-based, no mapping
    standardGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    controlPoints: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 32)
  },
  3: {
    // Control point-based, with mapping
    standardGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    controlPoints: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 32),
    mappingData: new LookupTable((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))
  }
});
var bsln = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  defaultBaseline: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  subtable: BslnSubtable
});

var Setting = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  setting: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nameIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  name: function name(t) {
    return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];
  }
});
var FeatureName = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  feature: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nSettings: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  settingTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Setting, 'nSettings'), {
    type: 'parent'
  }),
  featureFlags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Bitfield)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), [null, null, null, null, null, null, 'hasDefault', 'exclusive']),
  defaultSetting: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  nameIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  name: function name(t) {
    return t.parent.parent.name.records.fontFeatures[t.nameIndex];
  }
});
var feat = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  featureNameCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  reserved1: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  reserved2: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)),
  featureNames: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatureName, 'featureNameCount')
});

var Axis = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  axisTag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  minValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  defaultValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  maxValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nameID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  name: function name(t) {
    return t.parent.parent.name.records.fontFeatures[t.nameID];
  }
});
var Instance = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  nameID: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  name: function name(t) {
    return t.parent.parent.name.records.fontFeatures[t.nameID];
  },
  flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  coord: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32), function (t) {
    return t.parent.axisCount;
  }),
  postscriptNameID: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Optional)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), function (t) {
    return t.parent.instanceSize - t._currentOffset > 0;
  })
});
var fvar = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  offsetToData: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  countSizePairs: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  axisCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  axisSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  instanceCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  instanceSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  axis: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Axis, 'axisCount'),
  instance: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Instance, 'instanceCount')
});

var shortFrac = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Fixed)(16, 'BE', 14);

var Offset = /*#__PURE__*/function () {
  function Offset() {}

  Offset.decode = function decode(stream, parent) {
    // In short format, offsets are multiplied by 2.
    // This doesn't seem to be documented by Apple, but it
    // is implemented this way in Freetype.
    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
  };

  return Offset;
}();

var gvar = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  axisCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  globalCoordCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  globalCoords: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(shortFrac, 'axisCount'), 'globalCoordCount')),
  glyphCount: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  offsetToData: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)(Offset, 'void', {
    relativeTo: 'offsetToData',
    allowNull: false
  }), function (t) {
    return t.glyphCount + 1;
  })
});

var ClassTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  coverage: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  subFeatureFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  stateTable: new StateTable1()
});
var WidthDeltaRecord = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  justClass: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  beforeGrowLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  beforeShrinkLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  afterGrowLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  afterShrinkLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  growFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  shrinkFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
});
var WidthDeltaCluster = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(WidthDeltaRecord, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32));
var ActionData = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('actionType', {
  0: {
    // Decomposition action
    lowerLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    upperLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    order: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyphs: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))
  },
  1: {
    // Unconditional add glyph action
    addGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  2: {
    // Conditional add glyph action
    substThreshold: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    addGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    substGlyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  },
  3: {},
  // Stretch glyph action (no data, not supported by CoreText)
  4: {
    // Ductile glyph action (not supported by CoreText)
    variationAxis: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    minimumLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    noStretchValue: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
    maximumLimit: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32)
  },
  5: {
    // Repeated add glyph action
    flags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
    glyph: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
  }
});
var Action = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  actionClass: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  actionType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  actionLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  actionData: ActionData,
  padding: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
    return t.actionLength - t._currentOffset;
  })
});
var PostcompensationAction = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Action, (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32));
var PostCompensationTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  lookupTable: new LookupTable(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), PostcompensationAction))
});
var JustificationTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  classTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), ClassTable, {
    type: 'parent'
  }),
  wdcOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  postCompensationTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), PostCompensationTable, {
    type: 'parent'
  }),
  widthDeltaClusters: new LookupTable(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), WidthDeltaCluster, {
    type: 'parent',
    relativeTo: 'wdcOffset'
  }))
});
var just = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  horizontal: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JustificationTable),
  vertical: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), JustificationTable)
});

var LigatureData = {
  action: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
};
var ContextualData = {
  markIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  currentIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
};
var InsertionData = {
  currentInsertIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  markedInsertIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)
};
var SubstitutionTable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  items: new UnboundedArray(new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new LookupTable()))
});
var SubtableData = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)('type', {
  0: {
    // Indic Rearrangement Subtable
    stateTable: new StateTable()
  },
  1: {
    // Contextual Glyph Substitution Subtable
    stateTable: new StateTable(ContextualData),
    substitutionTable: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), SubstitutionTable)
  },
  2: {
    // Ligature subtable
    stateTable: new StateTable(LigatureData),
    ligatureActions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new UnboundedArray((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32))),
    components: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new UnboundedArray((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16))),
    ligatureList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new UnboundedArray((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)))
  },
  4: {
    // Non-contextual Glyph Substitution Subtable
    lookupTable: new LookupTable()
  },
  5: {
    // Glyph Insertion Subtable
    stateTable: new StateTable(InsertionData),
    insertionActions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), new UnboundedArray((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)))
  }
});
var Subtable = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  coverage: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24),
  type: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  subFeatureFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  table: SubtableData,
  padding: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), function (t) {
    return t.length - t._currentOffset;
  })
});
var FeatureEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  featureType: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  featureSetting: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  enableFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  disableFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var MorxChain = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  defaultFlags: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  chainLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  nFeatureEntries: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  nSubtables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  features: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(FeatureEntry, 'nFeatureEntries'),
  subtables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Subtable, 'nSubtables')
});
var morx = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  unused: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  nChains: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  chains: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(MorxChain, 'nChains')
});

var OpticalBounds = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  left: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  top: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  right: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  bottom: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
});
var opbd = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  version: (restructure__WEBPACK_IMPORTED_MODULE_0___default().fixed32),
  format: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  lookupTable: new LookupTable(OpticalBounds)
});

var tables = {};
tables.cmap = cmap;
tables.head = head;
tables.hhea = hhea;
tables.hmtx = hmtx;
tables.maxp = maxp;
tables.name = NameTable;
tables['OS/2'] = OS2;
tables.post = post; // TrueType Outlines
tables.fpgm = fpgm;
tables.loca = loca;
tables.prep = prep;
tables['cvt '] = cvt;
tables.glyf = glyf; // PostScript Outlines
tables['CFF '] = CFFFont;
tables['CFF2'] = CFFFont;
tables.VORG = VORG; // Bitmap Glyphs
tables.EBLC = EBLC;
tables.CBLC = tables.EBLC;
tables.sbix = sbix;
tables.COLR = COLR;
tables.CPAL = CPAL; // Advanced OpenType Tables
tables.BASE = BASE;
tables.GDEF = GDEF;
tables.GPOS = GPOS;
tables.GSUB = GSUB;
tables.JSTF = JSTF; // OpenType variations tables
tables.HVAR = HVAR; // Other OpenType Tables
tables.DSIG = DSIG;
tables.gasp = gasp;
tables.hdmx = hdmx;
tables.kern = kern;
tables.LTSH = LTSH;
tables.PCLT = PCLT;
tables.VDMX = VDMX;
tables.vhea = vhea;
tables.vmtx = vmtx; // Apple Advanced Typography Tables
tables.avar = avar;
tables.bsln = bsln;
tables.feat = feat;
tables.fvar = fvar;
tables.gvar = gvar;
tables.just = just;
tables.morx = morx;
tables.opbd = opbd;

var TableEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  checkSum: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  offset: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'void', {
    type: 'global'
  }),
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var Directory = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  numTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  searchRange: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  entrySelector: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  rangeShift: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  tables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(TableEntry, 'numTables')
});

Directory.process = function () {
  var tables = {};

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tables), _step; !(_step = _iterator()).done;) {
    var table = _step.value;
    tables[table.tag] = table;
  }

  this.tables = tables;
};

Directory.preEncode = function (stream) {
  var tables$1 = [];

  for (var tag in this.tables) {
    var table = this.tables[tag];

    if (table) {
      tables$1.push({
        tag: tag,
        checkSum: 0,
        offset: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VoidPointer)(tables[tag], table),
        length: tables[tag].size(table)
      });
    }
  }

  this.tag = 'true';
  this.numTables = tables$1.length;
  this.tables = tables$1;
  var maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
  var maxPowerOf2 = Math.pow(2, maxExponentFor2);
  this.searchRange = maxPowerOf2 * 16;
  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
  this.rangeShift = this.numTables * 16 - this.searchRange;
};

function binarySearch(arr, cmp) {
  var min = 0;
  var max = arr.length - 1;

  while (min <= max) {
    var mid = min + max >> 1;
    var res = cmp(arr[mid]);

    if (res < 0) {
      max = mid - 1;
    } else if (res > 0) {
      min = mid + 1;
    } else {
      return mid;
    }
  }

  return -1;
}
function range(index, end) {
  var range = [];

  while (index < end) {
    range.push(index++);
  }

  return range;
}

var _class$4;

try {
  var iconv = __webpack_require__(/*! iconv-lite */ "./node_modules/iconv-lite/lib/index.js");
} catch (err) {}

var CmapProcessor = (_class$4 = /*#__PURE__*/function () {
  function CmapProcessor(cmapTable) {
    // Attempt to find a Unicode cmap first
    this.encoding = null;
    this.cmap = this.findSubtable(cmapTable, [// 32-bit subtables
    [3, 10], [0, 6], [0, 4], // 16-bit subtables
    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]); // If not unicode cmap was found, and iconv-lite is installed,
    // take the first table with a supported encoding.

    if (!this.cmap && iconv) {
      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(cmapTable.tables), _step; !(_step = _iterator()).done;) {
        var cmap = _step.value;
        var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);

        if (iconv.encodingExists(encoding)) {
          this.cmap = cmap.table;
          this.encoding = encoding;
        }
      }
    }

    if (!this.cmap) {
      throw new Error("Could not find a supported cmap table");
    }

    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);

    if (this.uvs && this.uvs.version !== 14) {
      this.uvs = null;
    }
  }

  var _proto = CmapProcessor.prototype;

  _proto.findSubtable = function findSubtable(cmapTable, pairs) {
    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(pairs), _step2; !(_step2 = _iterator2()).done;) {
      var _step2$value = _step2.value,
          platformID = _step2$value[0],
          encodingID = _step2$value[1];

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(cmapTable.tables), _step3; !(_step3 = _iterator3()).done;) {
        var cmap = _step3.value;

        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {
          return cmap.table;
        }
      }
    }

    return null;
  };

  _proto.lookup = function lookup(codepoint, variationSelector) {
    // If there is no Unicode cmap in this font, we need to re-encode
    // the codepoint in the encoding that the cmap supports.
    if (this.encoding) {
      var buf = iconv.encode(String.fromCodePoint(codepoint), this.encoding);
      codepoint = 0;

      for (var i = 0; i < buf.length; i++) {
        codepoint = codepoint << 8 | buf[i];
      } // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.

    } else if (variationSelector) {
      var gid = this.getVariationSelector(codepoint, variationSelector);

      if (gid) {
        return gid;
      }
    }

    var cmap = this.cmap;

    switch (cmap.version) {
      case 0:
        return cmap.codeMap.get(codepoint) || 0;

      case 4:
        {
          var min = 0;
          var max = cmap.segCount - 1;

          while (min <= max) {
            var mid = min + max >> 1;

            if (codepoint < cmap.startCode.get(mid)) {
              max = mid - 1;
            } else if (codepoint > cmap.endCode.get(mid)) {
              min = mid + 1;
            } else {
              var rangeOffset = cmap.idRangeOffset.get(mid);

              var _gid = void 0;

              if (rangeOffset === 0) {
                _gid = codepoint + cmap.idDelta.get(mid);
              } else {
                var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                _gid = cmap.glyphIndexArray.get(index) || 0;

                if (_gid !== 0) {
                  _gid += cmap.idDelta.get(mid);
                }
              }

              return _gid & 0xffff;
            }
          }

          return 0;
        }

      case 8:
        throw new Error('TODO: cmap format 8');

      case 6:
      case 10:
        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;

      case 12:
      case 13:
        {
          var _min = 0;

          var _max = cmap.nGroups - 1;

          while (_min <= _max) {
            var _mid = _min + _max >> 1;

            var group = cmap.groups.get(_mid);

            if (codepoint < group.startCharCode) {
              _max = _mid - 1;
            } else if (codepoint > group.endCharCode) {
              _min = _mid + 1;
            } else {
              if (cmap.version === 12) {
                return group.glyphID + (codepoint - group.startCharCode);
              } else {
                return group.glyphID;
              }
            }
          }

          return 0;
        }

      case 14:
        throw new Error('TODO: cmap format 14');

      default:
        throw new Error("Unknown cmap format " + cmap.version);
    }
  };

  _proto.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {
    if (!this.uvs) {
      return 0;
    }

    var selectors = this.uvs.varSelectors.toArray();
    var i = binarySearch(selectors, function (x) {
      return variationSelector - x.varSelector;
    });
    var sel = selectors[i];

    if (i !== -1 && sel.defaultUVS) {
      i = binarySearch(sel.defaultUVS, function (x) {
        return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;
      });
    }

    if (i !== -1 && sel.nonDefaultUVS) {
      i = binarySearch(sel.nonDefaultUVS, function (x) {
        return codepoint - x.unicodeValue;
      });

      if (i !== -1) {
        return sel.nonDefaultUVS[i].glyphID;
      }
    }

    return 0;
  };

  _proto.getCharacterSet = function getCharacterSet() {
    var cmap = this.cmap;

    switch (cmap.version) {
      case 0:
        return range(0, cmap.codeMap.length);

      case 4:
        {
          var res = [];
          var endCodes = cmap.endCode.toArray();

          for (var i = 0; i < endCodes.length; i++) {
            var tail = endCodes[i] + 1;
            var start = cmap.startCode.get(i);
            res.push.apply(res, range(start, tail));
          }

          return res;
        }

      case 8:
        throw new Error('TODO: cmap format 8');

      case 6:
      case 10:
        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);

      case 12:
      case 13:
        {
          var _res = [];

          for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(cmap.groups.toArray()), _step4; !(_step4 = _iterator4()).done;) {
            var group = _step4.value;

            _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));
          }

          return _res;
        }

      case 14:
        throw new Error('TODO: cmap format 14');

      default:
        throw new Error("Unknown cmap format " + cmap.version);
    }
  };

  _proto.codePointsForGlyph = function codePointsForGlyph(gid) {
    var cmap = this.cmap;

    switch (cmap.version) {
      case 0:
        {
          var res = [];

          for (var i = 0; i < 256; i++) {
            if (cmap.codeMap.get(i) === gid) {
              res.push(i);
            }
          }

          return res;
        }

      case 4:
        {
          var _res2 = [];

          for (var _i = 0; _i < cmap.segCount; _i++) {
            var end = cmap.endCode.get(_i);
            var start = cmap.startCode.get(_i);
            var rangeOffset = cmap.idRangeOffset.get(_i);
            var delta = cmap.idDelta.get(_i);

            for (var c = start; c <= end; c++) {
              var g = 0;

              if (rangeOffset === 0) {
                g = c + delta;
              } else {
                var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i);
                g = cmap.glyphIndexArray.get(index) || 0;

                if (g !== 0) {
                  g += delta;
                }
              }

              if (g === gid) {
                _res2.push(c);
              }
            }
          }

          return _res2;
        }

      case 12:
        {
          var _res3 = [];

          for (var _iterator5 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(cmap.groups.toArray()), _step5; !(_step5 = _iterator5()).done;) {
            var group = _step5.value;

            if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {
              _res3.push(group.startCharCode + (gid - group.glyphID));
            }
          }

          return _res3;
        }

      case 13:
        {
          var _res4 = [];

          for (var _iterator6 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(cmap.groups.toArray()), _step6; !(_step6 = _iterator6()).done;) {
            var _group = _step6.value;

            if (gid === _group.glyphID) {
              _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));
            }
          }

          return _res4;
        }

      default:
        throw new Error("Unknown cmap format " + cmap.version);
    }
  };

  return CmapProcessor;
}(), ((0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$4.prototype, "getCharacterSet", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, "getCharacterSet"), _class$4.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$4.prototype, "codePointsForGlyph", [cache], Object.getOwnPropertyDescriptor(_class$4.prototype, "codePointsForGlyph"), _class$4.prototype)), _class$4);

var KernProcessor = /*#__PURE__*/function () {
  function KernProcessor(font) {
    this.kern = font.kern;
  }

  var _proto = KernProcessor.prototype;

  _proto.process = function process(glyphs, positions) {
    for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
      var left = glyphs[glyphIndex].id;
      var right = glyphs[glyphIndex + 1].id;
      positions[glyphIndex].xAdvance += this.getKerning(left, right);
    }
  };

  _proto.getKerning = function getKerning(left, right) {
    var res = 0;

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.kern.tables), _step; !(_step = _iterator()).done;) {
      var table = _step.value;

      if (table.coverage.crossStream) {
        continue;
      }

      switch (table.version) {
        case 0:
          if (!table.coverage.horizontal) {
            continue;
          }

          break;

        case 1:
          if (table.coverage.vertical || table.coverage.variation) {
            continue;
          }

          break;

        default:
          throw new Error("Unsupported kerning table version " + table.version);
      }

      var val = 0;
      var s = table.subtable;

      switch (table.format) {
        case 0:
          var pairIdx = binarySearch(s.pairs, function (pair) {
            return left - pair.left || right - pair.right;
          });

          if (pairIdx >= 0) {
            val = s.pairs[pairIdx].value;
          }

          break;

        case 2:
          var leftOffset = 0,
              rightOffset = 0;

          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {
            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
          } else {
            leftOffset = s.array.off;
          }

          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {
            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
          }

          var index = (leftOffset + rightOffset - s.array.off) / 2;
          val = s.array.values.get(index);
          break;

        case 3:
          if (left >= s.glyphCount || right >= s.glyphCount) {
            return 0;
          }

          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
          break;

        default:
          throw new Error("Unsupported kerning sub-table format " + table.format);
      } // Microsoft supports the override flag, which resets the result
      // Otherwise, the sum of the results from all subtables is returned


      if (table.coverage.override) {
        res = val;
      } else {
        res += val;
      }
    }

    return res;
  };

  return KernProcessor;
}();

/**
 * This class is used when GPOS does not define 'mark' or 'mkmk' features
 * for positioning marks relative to base glyphs. It uses the unicode
 * combining class property to position marks.
 *
 * Based on code from Harfbuzz, thanks!
 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc
 */

var UnicodeLayoutEngine = /*#__PURE__*/function () {
  function UnicodeLayoutEngine(font) {
    this.font = font;
  }

  var _proto = UnicodeLayoutEngine.prototype;

  _proto.positionGlyphs = function positionGlyphs(glyphs, positions) {
    // find each base + mark cluster, and position the marks relative to the base
    var clusterStart = 0;
    var clusterEnd = 0;

    for (var index = 0; index < glyphs.length; index++) {
      var glyph = glyphs[index];

      if (glyph.isMark) {
        // TODO: handle ligatures
        clusterEnd = index;
      } else {
        if (clusterStart !== clusterEnd) {
          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        }

        clusterStart = clusterEnd = index;
      }
    }

    if (clusterStart !== clusterEnd) {
      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
    }

    return positions;
  };

  _proto.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {
    var base = glyphs[clusterStart];
    var baseBox = base.cbox.copy(); // adjust bounding box for ligature glyphs

    if (base.codePoints.length > 1) {
      // LTR. TODO: RTL support.
      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
    }

    var xOffset = -positions[clusterStart].xAdvance;
    var yOffset = 0;
    var yGap = this.font.unitsPerEm / 16; // position each of the mark glyphs relative to the base glyph

    for (var index = clusterStart + 1; index <= clusterEnd; index++) {
      var mark = glyphs[index];
      var markBox = mark.cbox;
      var position = positions[index];
      var combiningClass = this.getCombiningClass(mark.codePoints[0]);

      if (combiningClass !== 'Not_Reordered') {
        position.xOffset = position.yOffset = 0; // x positioning

        switch (combiningClass) {
          case 'Double_Above':
          case 'Double_Below':
            // LTR. TODO: RTL support.
            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
            break;

          case 'Attached_Below_Left':
          case 'Below_Left':
          case 'Above_Left':
            // left align
            position.xOffset += baseBox.minX - markBox.minX;
            break;

          case 'Attached_Above_Right':
          case 'Below_Right':
          case 'Above_Right':
            // right align
            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
            break;

          default:
            // Attached_Below, Attached_Above, Below, Above, other
            // center align
            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
        } // y positioning


        switch (combiningClass) {
          case 'Double_Below':
          case 'Below_Left':
          case 'Below':
          case 'Below_Right':
          case 'Attached_Below_Left':
          case 'Attached_Below':
            // add a small gap between the glyphs if they are not attached
            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {
              baseBox.minY += yGap;
            }

            position.yOffset = -baseBox.minY - markBox.maxY;
            baseBox.minY += markBox.height;
            break;

          case 'Double_Above':
          case 'Above_Left':
          case 'Above':
          case 'Above_Right':
          case 'Attached_Above':
          case 'Attached_Above_Right':
            // add a small gap between the glyphs if they are not attached
            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {
              baseBox.maxY += yGap;
            }

            position.yOffset = baseBox.maxY - markBox.minY;
            baseBox.maxY += markBox.height;
            break;
        }

        position.xAdvance = position.yAdvance = 0;
        position.xOffset += xOffset;
        position.yOffset += yOffset;
      } else {
        xOffset -= position.xAdvance;
        yOffset -= position.yAdvance;
      }
    }

    return;
  };

  _proto.getCombiningClass = function getCombiningClass(codePoint) {
    var combiningClass = _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].getCombiningClass(codePoint); // Thai / Lao need some per-character work

    if ((codePoint & ~0xff) === 0x0e00) {
      if (combiningClass === 'Not_Reordered') {
        switch (codePoint) {
          case 0x0e31:
          case 0x0e34:
          case 0x0e35:
          case 0x0e36:
          case 0x0e37:
          case 0x0e47:
          case 0x0e4c:
          case 0x0e3d:
          case 0x0e4e:
            return 'Above_Right';

          case 0x0eb1:
          case 0x0eb4:
          case 0x0eb5:
          case 0x0eb6:
          case 0x0eb7:
          case 0x0ebb:
          case 0x0ecc:
          case 0x0ecd:
            return 'Above';

          case 0x0ebc:
            return 'Below';
        }
      } else if (codePoint === 0x0e3a) {
        // virama
        return 'Below_Right';
      }
    }

    switch (combiningClass) {
      // Hebrew
      case 'CCC10': // sheva

      case 'CCC11': // hataf segol

      case 'CCC12': // hataf patah

      case 'CCC13': // hataf qamats

      case 'CCC14': // hiriq

      case 'CCC15': // tsere

      case 'CCC16': // segol

      case 'CCC17': // patah

      case 'CCC18': // qamats

      case 'CCC20': // qubuts

      case 'CCC22':
        // meteg
        return 'Below';

      case 'CCC23':
        // rafe
        return 'Attached_Above';

      case 'CCC24':
        // shin dot
        return 'Above_Right';

      case 'CCC25': // sin dot

      case 'CCC19':
        // holam
        return 'Above_Left';

      case 'CCC26':
        // point varika
        return 'Above';

      case 'CCC21':
        // dagesh
        break;
      // Arabic and Syriac

      case 'CCC27': // fathatan

      case 'CCC28': // dammatan

      case 'CCC30': // fatha

      case 'CCC31': // damma

      case 'CCC33': // shadda

      case 'CCC34': // sukun

      case 'CCC35': // superscript alef

      case 'CCC36':
        // superscript alaph
        return 'Above';

      case 'CCC29': // kasratan

      case 'CCC32':
        // kasra
        return 'Below';
      // Thai

      case 'CCC103':
        // sara u / sara uu
        return 'Below_Right';

      case 'CCC107':
        // mai
        return 'Above_Right';
      // Lao

      case 'CCC118':
        // sign u / sign uu
        return 'Below';

      case 'CCC122':
        // mai
        return 'Above';
      // Tibetan

      case 'CCC129': // sign aa

      case 'CCC132':
        // sign u
        return 'Below';

      case 'CCC130':
        // sign i
        return 'Above';
    }

    return combiningClass;
  };

  return UnicodeLayoutEngine;
}();

/**
 * Represents a glyph bounding box
 */
var BBox = /*#__PURE__*/function () {
  function BBox(minX, minY, maxX, maxY) {
    if (minX === void 0) {
      minX = Infinity;
    }

    if (minY === void 0) {
      minY = Infinity;
    }

    if (maxX === void 0) {
      maxX = -Infinity;
    }

    if (maxY === void 0) {
      maxY = -Infinity;
    }

    /**
     * The minimum X position in the bounding box
     * @type {number}
     */
    this.minX = minX;
    /**
     * The minimum Y position in the bounding box
     * @type {number}
     */

    this.minY = minY;
    /**
     * The maxmimum X position in the bounding box
     * @type {number}
     */

    this.maxX = maxX;
    /**
     * The maxmimum Y position in the bounding box
     * @type {number}
     */

    this.maxY = maxY;
  }
  /**
   * The width of the bounding box
   * @type {number}
   */


  var _proto = BBox.prototype;

  _proto.addPoint = function addPoint(x, y) {
    if (Math.abs(x) !== Infinity) {
      if (x < this.minX) {
        this.minX = x;
      }

      if (x > this.maxX) {
        this.maxX = x;
      }
    }

    if (Math.abs(y) !== Infinity) {
      if (y < this.minY) {
        this.minY = y;
      }

      if (y > this.maxY) {
        this.maxY = y;
      }
    }
  };

  _proto.copy = function copy() {
    return new BBox(this.minX, this.minY, this.maxX, this.maxY);
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(BBox, [{
    key: "width",
    get: function get() {
      return this.maxX - this.minX;
    }
    /**
     * The height of the bounding box
     * @type {number}
     */

  }, {
    key: "height",
    get: function get() {
      return this.maxY - this.minY;
    }
  }]);

  return BBox;
}();

// Data from http://www.microsoft.com/typography/otspec/scripttags.htm
// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.

var UNICODE_SCRIPTS = {
  Caucasian_Albanian: 'aghb',
  Arabic: 'arab',
  Imperial_Aramaic: 'armi',
  Armenian: 'armn',
  Avestan: 'avst',
  Balinese: 'bali',
  Bamum: 'bamu',
  Bassa_Vah: 'bass',
  Batak: 'batk',
  Bengali: ['bng2', 'beng'],
  Bopomofo: 'bopo',
  Brahmi: 'brah',
  Braille: 'brai',
  Buginese: 'bugi',
  Buhid: 'buhd',
  Chakma: 'cakm',
  Canadian_Aboriginal: 'cans',
  Carian: 'cari',
  Cham: 'cham',
  Cherokee: 'cher',
  Coptic: 'copt',
  Cypriot: 'cprt',
  Cyrillic: 'cyrl',
  Devanagari: ['dev2', 'deva'],
  Deseret: 'dsrt',
  Duployan: 'dupl',
  Egyptian_Hieroglyphs: 'egyp',
  Elbasan: 'elba',
  Ethiopic: 'ethi',
  Georgian: 'geor',
  Glagolitic: 'glag',
  Gothic: 'goth',
  Grantha: 'gran',
  Greek: 'grek',
  Gujarati: ['gjr2', 'gujr'],
  Gurmukhi: ['gur2', 'guru'],
  Hangul: 'hang',
  Han: 'hani',
  Hanunoo: 'hano',
  Hebrew: 'hebr',
  Hiragana: 'hira',
  Pahawh_Hmong: 'hmng',
  Katakana_Or_Hiragana: 'hrkt',
  Old_Italic: 'ital',
  Javanese: 'java',
  Kayah_Li: 'kali',
  Katakana: 'kana',
  Kharoshthi: 'khar',
  Khmer: 'khmr',
  Khojki: 'khoj',
  Kannada: ['knd2', 'knda'],
  Kaithi: 'kthi',
  Tai_Tham: 'lana',
  Lao: 'lao ',
  Latin: 'latn',
  Lepcha: 'lepc',
  Limbu: 'limb',
  Linear_A: 'lina',
  Linear_B: 'linb',
  Lisu: 'lisu',
  Lycian: 'lyci',
  Lydian: 'lydi',
  Mahajani: 'mahj',
  Mandaic: 'mand',
  Manichaean: 'mani',
  Mende_Kikakui: 'mend',
  Meroitic_Cursive: 'merc',
  Meroitic_Hieroglyphs: 'mero',
  Malayalam: ['mlm2', 'mlym'],
  Modi: 'modi',
  Mongolian: 'mong',
  Mro: 'mroo',
  Meetei_Mayek: 'mtei',
  Myanmar: ['mym2', 'mymr'],
  Old_North_Arabian: 'narb',
  Nabataean: 'nbat',
  Nko: 'nko ',
  Ogham: 'ogam',
  Ol_Chiki: 'olck',
  Old_Turkic: 'orkh',
  Oriya: ['ory2', 'orya'],
  Osmanya: 'osma',
  Palmyrene: 'palm',
  Pau_Cin_Hau: 'pauc',
  Old_Permic: 'perm',
  Phags_Pa: 'phag',
  Inscriptional_Pahlavi: 'phli',
  Psalter_Pahlavi: 'phlp',
  Phoenician: 'phnx',
  Miao: 'plrd',
  Inscriptional_Parthian: 'prti',
  Rejang: 'rjng',
  Runic: 'runr',
  Samaritan: 'samr',
  Old_South_Arabian: 'sarb',
  Saurashtra: 'saur',
  Shavian: 'shaw',
  Sharada: 'shrd',
  Siddham: 'sidd',
  Khudawadi: 'sind',
  Sinhala: 'sinh',
  Sora_Sompeng: 'sora',
  Sundanese: 'sund',
  Syloti_Nagri: 'sylo',
  Syriac: 'syrc',
  Tagbanwa: 'tagb',
  Takri: 'takr',
  Tai_Le: 'tale',
  New_Tai_Lue: 'talu',
  Tamil: ['tml2', 'taml'],
  Tai_Viet: 'tavt',
  Telugu: ['tel2', 'telu'],
  Tifinagh: 'tfng',
  Tagalog: 'tglg',
  Thaana: 'thaa',
  Thai: 'thai',
  Tibetan: 'tibt',
  Tirhuta: 'tirh',
  Ugaritic: 'ugar',
  Vai: 'vai ',
  Warang_Citi: 'wara',
  Old_Persian: 'xpeo',
  Cuneiform: 'xsux',
  Yi: 'yi  ',
  Inherited: 'zinh',
  Common: 'zyyy',
  Unknown: 'zzzz'
};
var OPENTYPE_SCRIPTS = {};

for (var script in UNICODE_SCRIPTS) {
  var tag = UNICODE_SCRIPTS[script];

  if (Array.isArray(tag)) {
    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(tag), _step; !(_step = _iterator()).done;) {
      var t = _step.value;
      OPENTYPE_SCRIPTS[t] = script;
    }
  } else {
    OPENTYPE_SCRIPTS[tag] = script;
  }
}
function fromOpenType(tag) {
  return OPENTYPE_SCRIPTS[tag];
}
function forString(string) {
  var len = string.length;
  var idx = 0;

  while (idx < len) {
    var code = string.charCodeAt(idx++); // Check if this is a high surrogate

    if (0xd800 <= code && code <= 0xdbff && idx < len) {
      var next = string.charCodeAt(idx); // Check if this is a low surrogate

      if (0xdc00 <= next && next <= 0xdfff) {
        idx++;
        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
      }
    }

    var _script = _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].getScript(code);

    if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {
      return UNICODE_SCRIPTS[_script];
    }
  }

  return UNICODE_SCRIPTS.Unknown;
}
function forCodePoints(codePoints) {
  for (var i = 0; i < codePoints.length; i++) {
    var codePoint = codePoints[i];

    var _script2 = _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].getScript(codePoint);

    if (_script2 !== 'Common' && _script2 !== 'Inherited' && _script2 !== 'Unknown') {
      return UNICODE_SCRIPTS[_script2];
    }
  }

  return UNICODE_SCRIPTS.Unknown;
} // The scripts in this map are written from right to left

var RTL = {
  arab: true,
  // Arabic
  hebr: true,
  // Hebrew
  syrc: true,
  // Syriac
  thaa: true,
  // Thaana
  cprt: true,
  // Cypriot Syllabary
  khar: true,
  // Kharosthi
  phnx: true,
  // Phoenician
  'nko ': true,
  // N'Ko
  lydi: true,
  // Lydian
  avst: true,
  // Avestan
  armi: true,
  // Imperial Aramaic
  phli: true,
  // Inscriptional Pahlavi
  prti: true,
  // Inscriptional Parthian
  sarb: true,
  // Old South Arabian
  orkh: true,
  // Old Turkic, Orkhon Runic
  samr: true,
  // Samaritan
  mand: true,
  // Mandaic, Mandaean
  merc: true,
  // Meroitic Cursive
  mero: true,
  // Meroitic Hieroglyphs
  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
  mani: true,
  // Manichaean
  mend: true,
  // Mende Kikakui
  nbat: true,
  // Nabataean
  narb: true,
  // Old North Arabian
  palm: true,
  // Palmyrene
  phlp: true // Psalter Pahlavi

};
function direction(script) {
  if (RTL[script]) {
    return 'rtl';
  }

  return 'ltr';
}

/**
 * Represents a run of Glyph and GlyphPosition objects.
 * Returned by the font layout method.
 */

var GlyphRun = /*#__PURE__*/function () {
  function GlyphRun(glyphs, features, script, language, direction$1) {
    /**
     * An array of Glyph objects in the run
     * @type {Glyph[]}
     */
    this.glyphs = glyphs;
    /**
     * An array of GlyphPosition objects for each glyph in the run
     * @type {GlyphPosition[]}
     */

    this.positions = null;
    /**
     * The script that was requested for shaping. This was either passed in or detected automatically.
     * @type {string}
     */

    this.script = script;
    /**
     * The language requested for shaping, as passed in. If `null`, the default language for the
     * script was used.
     * @type {string}
     */

    this.language = language || null;
    /**
     * The direction requested for shaping, as passed in (either ltr or rtl).
     * If `null`, the default direction of the script is used.
     * @type {string}
     */

    this.direction = direction$1 || direction(script);
    /**
     * The features requested during shaping. This is a combination of user
     * specified features and features chosen by the shaper.
     * @type {object}
     */

    this.features = {}; // Convert features to an object

    if (Array.isArray(features)) {
      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(features), _step; !(_step = _iterator()).done;) {
        var tag = _step.value;
        this.features[tag] = true;
      }
    } else if (typeof features === 'object') {
      this.features = features;
    }
  }
  /**
   * The total advance width of the run.
   * @type {number}
   */


  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(GlyphRun, [{
    key: "advanceWidth",
    get: function get() {
      var width = 0;

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.positions), _step2; !(_step2 = _iterator2()).done;) {
        var position = _step2.value;
        width += position.xAdvance;
      }

      return width;
    }
    /**
     * The total advance height of the run.
     * @type {number}
     */

  }, {
    key: "advanceHeight",
    get: function get() {
      var height = 0;

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.positions), _step3; !(_step3 = _iterator3()).done;) {
        var position = _step3.value;
        height += position.yAdvance;
      }

      return height;
    }
    /**
     * The bounding box containing all glyphs in the run.
     * @type {BBox}
     */

  }, {
    key: "bbox",
    get: function get() {
      var bbox = new BBox();
      var x = 0;
      var y = 0;

      for (var index = 0; index < this.glyphs.length; index++) {
        var glyph = this.glyphs[index];
        var p = this.positions[index];
        var b = glyph.bbox;
        bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
        bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
        x += p.xAdvance;
        y += p.yAdvance;
      }

      return bbox;
    }
  }]);

  return GlyphRun;
}();

/**
 * Represents positioning information for a glyph in a GlyphRun.
 */
var GlyphPosition = function GlyphPosition(xAdvance, yAdvance, xOffset, yOffset) {
  if (xAdvance === void 0) {
    xAdvance = 0;
  }

  if (yAdvance === void 0) {
    yAdvance = 0;
  }

  if (xOffset === void 0) {
    xOffset = 0;
  }

  if (yOffset === void 0) {
    yOffset = 0;
  }

  /**
   * The amount to move the virtual pen in the X direction after rendering this glyph.
   * @type {number}
   */
  this.xAdvance = xAdvance;
  /**
   * The amount to move the virtual pen in the Y direction after rendering this glyph.
   * @type {number}
   */

  this.yAdvance = yAdvance;
  /**
   * The offset from the pen position in the X direction at which to render this glyph.
   * @type {number}
   */

  this.xOffset = xOffset;
  /**
   * The offset from the pen position in the Y direction at which to render this glyph.
   * @type {number}
   */

  this.yOffset = yOffset;
};

// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac
var features = {
  allTypographicFeatures: {
    code: 0,
    exclusive: false,
    allTypeFeatures: 0
  },
  ligatures: {
    code: 1,
    exclusive: false,
    requiredLigatures: 0,
    commonLigatures: 2,
    rareLigatures: 4,
    // logos: 6
    rebusPictures: 8,
    diphthongLigatures: 10,
    squaredLigatures: 12,
    abbrevSquaredLigatures: 14,
    symbolLigatures: 16,
    contextualLigatures: 18,
    historicalLigatures: 20
  },
  cursiveConnection: {
    code: 2,
    exclusive: true,
    unconnected: 0,
    partiallyConnected: 1,
    cursive: 2
  },
  letterCase: {
    code: 3,
    exclusive: true
  },
  // upperAndLowerCase: 0          # deprecated
  // allCaps: 1                    # deprecated
  // allLowerCase: 2               # deprecated
  // smallCaps: 3                  # deprecated
  // initialCaps: 4                # deprecated
  // initialCapsAndSmallCaps: 5    # deprecated
  verticalSubstitution: {
    code: 4,
    exclusive: false,
    substituteVerticalForms: 0
  },
  linguisticRearrangement: {
    code: 5,
    exclusive: false,
    linguisticRearrangement: 0
  },
  numberSpacing: {
    code: 6,
    exclusive: true,
    monospacedNumbers: 0,
    proportionalNumbers: 1,
    thirdWidthNumbers: 2,
    quarterWidthNumbers: 3
  },
  smartSwash: {
    code: 8,
    exclusive: false,
    wordInitialSwashes: 0,
    wordFinalSwashes: 2,
    // lineInitialSwashes: 4
    // lineFinalSwashes: 6
    nonFinalSwashes: 8
  },
  diacritics: {
    code: 9,
    exclusive: true,
    showDiacritics: 0,
    hideDiacritics: 1,
    decomposeDiacritics: 2
  },
  verticalPosition: {
    code: 10,
    exclusive: true,
    normalPosition: 0,
    superiors: 1,
    inferiors: 2,
    ordinals: 3,
    scientificInferiors: 4
  },
  fractions: {
    code: 11,
    exclusive: true,
    noFractions: 0,
    verticalFractions: 1,
    diagonalFractions: 2
  },
  overlappingCharacters: {
    code: 13,
    exclusive: false,
    preventOverlap: 0
  },
  typographicExtras: {
    code: 14,
    exclusive: false,
    // hyphensToEmDash: 0
    // hyphenToEnDash: 2
    slashedZero: 4
  },
  // formInterrobang: 6
  // smartQuotes: 8
  // periodsToEllipsis: 10
  mathematicalExtras: {
    code: 15,
    exclusive: false,
    // hyphenToMinus: 0
    // asteristoMultiply: 2
    // slashToDivide: 4
    // inequalityLigatures: 6
    // exponents: 8
    mathematicalGreek: 10
  },
  ornamentSets: {
    code: 16,
    exclusive: true,
    noOrnaments: 0,
    dingbats: 1,
    piCharacters: 2,
    fleurons: 3,
    decorativeBorders: 4,
    internationalSymbols: 5,
    mathSymbols: 6
  },
  characterAlternatives: {
    code: 17,
    exclusive: true,
    noAlternates: 0
  },
  // user defined options
  designComplexity: {
    code: 18,
    exclusive: true,
    designLevel1: 0,
    designLevel2: 1,
    designLevel3: 2,
    designLevel4: 3,
    designLevel5: 4
  },
  styleOptions: {
    code: 19,
    exclusive: true,
    noStyleOptions: 0,
    displayText: 1,
    engravedText: 2,
    illuminatedCaps: 3,
    titlingCaps: 4,
    tallCaps: 5
  },
  characterShape: {
    code: 20,
    exclusive: true,
    traditionalCharacters: 0,
    simplifiedCharacters: 1,
    JIS1978Characters: 2,
    JIS1983Characters: 3,
    JIS1990Characters: 4,
    traditionalAltOne: 5,
    traditionalAltTwo: 6,
    traditionalAltThree: 7,
    traditionalAltFour: 8,
    traditionalAltFive: 9,
    expertCharacters: 10,
    JIS2004Characters: 11,
    hojoCharacters: 12,
    NLCCharacters: 13,
    traditionalNamesCharacters: 14
  },
  numberCase: {
    code: 21,
    exclusive: true,
    lowerCaseNumbers: 0,
    upperCaseNumbers: 1
  },
  textSpacing: {
    code: 22,
    exclusive: true,
    proportionalText: 0,
    monospacedText: 1,
    halfWidthText: 2,
    thirdWidthText: 3,
    quarterWidthText: 4,
    altProportionalText: 5,
    altHalfWidthText: 6
  },
  transliteration: {
    code: 23,
    exclusive: true,
    noTransliteration: 0
  },
  // hanjaToHangul: 1
  // hiraganaToKatakana: 2
  // katakanaToHiragana: 3
  // kanaToRomanization: 4
  // romanizationToHiragana: 5
  // romanizationToKatakana: 6
  // hanjaToHangulAltOne: 7
  // hanjaToHangulAltTwo: 8
  // hanjaToHangulAltThree: 9
  annotation: {
    code: 24,
    exclusive: true,
    noAnnotation: 0,
    boxAnnotation: 1,
    roundedBoxAnnotation: 2,
    circleAnnotation: 3,
    invertedCircleAnnotation: 4,
    parenthesisAnnotation: 5,
    periodAnnotation: 6,
    romanNumeralAnnotation: 7,
    diamondAnnotation: 8,
    invertedBoxAnnotation: 9,
    invertedRoundedBoxAnnotation: 10
  },
  kanaSpacing: {
    code: 25,
    exclusive: true,
    fullWidthKana: 0,
    proportionalKana: 1
  },
  ideographicSpacing: {
    code: 26,
    exclusive: true,
    fullWidthIdeographs: 0,
    proportionalIdeographs: 1,
    halfWidthIdeographs: 2
  },
  unicodeDecomposition: {
    code: 27,
    exclusive: false,
    canonicalComposition: 0,
    compatibilityComposition: 2,
    transcodingComposition: 4
  },
  rubyKana: {
    code: 28,
    exclusive: false,
    // noRubyKana: 0     # deprecated - use rubyKanaOff instead
    // rubyKana: 1     # deprecated - use rubyKanaOn instead
    rubyKana: 2
  },
  CJKSymbolAlternatives: {
    code: 29,
    exclusive: true,
    noCJKSymbolAlternatives: 0,
    CJKSymbolAltOne: 1,
    CJKSymbolAltTwo: 2,
    CJKSymbolAltThree: 3,
    CJKSymbolAltFour: 4,
    CJKSymbolAltFive: 5
  },
  ideographicAlternatives: {
    code: 30,
    exclusive: true,
    noIdeographicAlternatives: 0,
    ideographicAltOne: 1,
    ideographicAltTwo: 2,
    ideographicAltThree: 3,
    ideographicAltFour: 4,
    ideographicAltFive: 5
  },
  CJKVerticalRomanPlacement: {
    code: 31,
    exclusive: true,
    CJKVerticalRomanCentered: 0,
    CJKVerticalRomanHBaseline: 1
  },
  italicCJKRoman: {
    code: 32,
    exclusive: false,
    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
    CJKItalicRoman: 2
  },
  caseSensitiveLayout: {
    code: 33,
    exclusive: false,
    caseSensitiveLayout: 0,
    caseSensitiveSpacing: 2
  },
  alternateKana: {
    code: 34,
    exclusive: false,
    alternateHorizKana: 0,
    alternateVertKana: 2
  },
  stylisticAlternatives: {
    code: 35,
    exclusive: false,
    noStylisticAlternates: 0,
    stylisticAltOne: 2,
    stylisticAltTwo: 4,
    stylisticAltThree: 6,
    stylisticAltFour: 8,
    stylisticAltFive: 10,
    stylisticAltSix: 12,
    stylisticAltSeven: 14,
    stylisticAltEight: 16,
    stylisticAltNine: 18,
    stylisticAltTen: 20,
    stylisticAltEleven: 22,
    stylisticAltTwelve: 24,
    stylisticAltThirteen: 26,
    stylisticAltFourteen: 28,
    stylisticAltFifteen: 30,
    stylisticAltSixteen: 32,
    stylisticAltSeventeen: 34,
    stylisticAltEighteen: 36,
    stylisticAltNineteen: 38,
    stylisticAltTwenty: 40
  },
  contextualAlternates: {
    code: 36,
    exclusive: false,
    contextualAlternates: 0,
    swashAlternates: 2,
    contextualSwashAlternates: 4
  },
  lowerCase: {
    code: 37,
    exclusive: true,
    defaultLowerCase: 0,
    lowerCaseSmallCaps: 1,
    lowerCasePetiteCaps: 2
  },
  upperCase: {
    code: 38,
    exclusive: true,
    defaultUpperCase: 0,
    upperCaseSmallCaps: 1,
    upperCasePetiteCaps: 2
  },
  languageTag: {
    // indices into ltag table
    code: 39,
    exclusive: true
  },
  CJKRomanSpacing: {
    code: 103,
    exclusive: true,
    halfWidthCJKRoman: 0,
    proportionalCJKRoman: 1,
    defaultCJKRoman: 2,
    fullWidthCJKRoman: 3
  }
};

var feature = function feature(name, selector) {
  return [features[name].code, features[name][selector]];
};

var OTMapping = {
  rlig: feature('ligatures', 'requiredLigatures'),
  clig: feature('ligatures', 'contextualLigatures'),
  dlig: feature('ligatures', 'rareLigatures'),
  hlig: feature('ligatures', 'historicalLigatures'),
  liga: feature('ligatures', 'commonLigatures'),
  hist: feature('ligatures', 'historicalLigatures'),
  // ??
  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),
  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),
  frac: feature('fractions', 'diagonalFractions'),
  dnom: feature('fractions', 'diagonalFractions'),
  // ??
  numr: feature('fractions', 'diagonalFractions'),
  // ??
  afrc: feature('fractions', 'verticalFractions'),
  // aalt
  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
  // unic, vatu, vhal, vjmo, vpal, vrt2
  // dist -> trak table?
  // kern, vkrn -> kern table
  // lfbd + opbd + rtbd -> opbd table?
  // mark, mkmk -> acnt table?
  // locl -> languageTag + ltag table
  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'),
  // also caseSensitiveSpacing
  ccmp: feature('unicodeDecomposition', 'canonicalComposition'),
  // compatibilityComposition?
  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
  // guess..., probably not given below
  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
  swsh: feature('contextualAlternates', 'swashAlternates'),
  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),
  curs: feature('cursiveConnection', 'cursive'),
  // ??
  c2pc: feature('upperCase', 'upperCasePetiteCaps'),
  c2sc: feature('upperCase', 'upperCaseSmallCaps'),
  init: feature('smartSwash', 'wordInitialSwashes'),
  // ??
  fin2: feature('smartSwash', 'wordFinalSwashes'),
  // ??
  medi: feature('smartSwash', 'nonFinalSwashes'),
  // ??
  med2: feature('smartSwash', 'nonFinalSwashes'),
  // ??
  fin3: feature('smartSwash', 'wordFinalSwashes'),
  // ??
  fina: feature('smartSwash', 'wordFinalSwashes'),
  // ??
  pkna: feature('kanaSpacing', 'proportionalKana'),
  half: feature('textSpacing', 'halfWidthText'),
  // also HalfWidthCJKRoman, HalfWidthIdeographs?
  halt: feature('textSpacing', 'altHalfWidthText'),
  hkna: feature('alternateKana', 'alternateHorizKana'),
  vkna: feature('alternateKana', 'alternateVertKana'),
  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
  ital: feature('italicCJKRoman', 'CJKItalicRoman'),
  lnum: feature('numberCase', 'upperCaseNumbers'),
  onum: feature('numberCase', 'lowerCaseNumbers'),
  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),
  // nalt: not enough info. what type of annotation?
  // ornm: ditto, which ornament style?
  calt: feature('contextualAlternates', 'contextualAlternates'),
  // or more?
  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'),
  // oh... below?
  vert: feature('verticalSubstitution', 'substituteVerticalForms'),
  tnum: feature('numberSpacing', 'monospacedNumbers'),
  pnum: feature('numberSpacing', 'proportionalNumbers'),
  sups: feature('verticalPosition', 'superiors'),
  subs: feature('verticalPosition', 'inferiors'),
  ordn: feature('verticalPosition', 'ordinals'),
  pwid: feature('textSpacing', 'proportionalText'),
  hwid: feature('textSpacing', 'halfWidthText'),
  qwid: feature('textSpacing', 'quarterWidthText'),
  // also QuarterWidthNumbers?
  twid: feature('textSpacing', 'thirdWidthText'),
  // also ThirdWidthNumbers?
  fwid: feature('textSpacing', 'proportionalText'),
  //??
  palt: feature('textSpacing', 'altProportionalText'),
  trad: feature('characterShape', 'traditionalCharacters'),
  smpl: feature('characterShape', 'simplifiedCharacters'),
  jp78: feature('characterShape', 'JIS1978Characters'),
  jp83: feature('characterShape', 'JIS1983Characters'),
  jp90: feature('characterShape', 'JIS1990Characters'),
  jp04: feature('characterShape', 'JIS2004Characters'),
  expt: feature('characterShape', 'expertCharacters'),
  hojo: feature('characterShape', 'hojoCharacters'),
  nlck: feature('characterShape', 'NLCCharacters'),
  tnam: feature('characterShape', 'traditionalNamesCharacters'),
  ruby: feature('rubyKana', 'rubyKana'),
  titl: feature('styleOptions', 'titlingCaps'),
  zero: feature('typographicExtras', 'slashedZero'),
  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),
  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),
  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),
  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),
  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),
  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),
  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),
  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),
  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),
  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),
  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),
  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),
  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),
  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),
  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),
  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),
  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),
  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),
  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),
  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')
}; // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose
// Add cv01-cv99 features

for (var i = 1; i <= 99; i++) {
  OTMapping["cv" + ("00" + i).slice(-2)] = [features.characterAlternatives.code, i];
} // create inverse mapping


var AATMapping = {};

for (var ot in OTMapping) {
  var aat = OTMapping[ot];

  if (AATMapping[aat[0]] == null) {
    AATMapping[aat[0]] = {};
  }

  AATMapping[aat[0]][aat[1]] = ot;
} // Maps an array of OpenType features to AAT features
// in the form of {featureType:{featureSetting:true}}


function mapOTToAAT(features) {
  var res = {};

  for (var k in features) {
    var r = void 0;

    if (r = OTMapping[k]) {
      if (res[r[0]] == null) {
        res[r[0]] = {};
      }

      res[r[0]][r[1]] = features[k];
    }
  }

  return res;
} // Maps strings in a [featureType, featureSetting]
// to their equivalent number codes

function mapFeatureStrings(f) {
  var type = f[0],
      setting = f[1];

  if (isNaN(type)) {
    var typeCode = features[type] && features[type].code;
  } else {
    var typeCode = type;
  }

  if (isNaN(setting)) {
    var settingCode = features[type] && features[type][setting];
  } else {
    var settingCode = setting;
  }

  return [typeCode, settingCode];
} // Maps AAT features to an array of OpenType features
// Supports both arrays in the form of [[featureType, featureSetting]]
// and objects in the form of {featureType:{featureSetting:true}}
// featureTypes and featureSettings can be either strings or number codes


function mapAATToOT(features) {
  var res = {};

  if (Array.isArray(features)) {
    for (var k = 0; k < features.length; k++) {
      var r = void 0;
      var f = mapFeatureStrings(features[k]);

      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {
        res[r] = true;
      }
    }
  } else if (typeof features === 'object') {
    for (var type in features) {
      var _feature = features[type];

      for (var setting in _feature) {
        var _r = void 0;

        var _f = mapFeatureStrings([type, setting]);

        if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {
          res[_r] = true;
        }
      }
    }
  }

  return Object.keys(res);
}

var _class$3;
var AATLookupTable = (_class$3 = /*#__PURE__*/function () {
  function AATLookupTable(table) {
    this.table = table;
  }

  var _proto = AATLookupTable.prototype;

  _proto.lookup = function lookup(glyph) {
    switch (this.table.version) {
      case 0:
        // simple array format
        return this.table.values.getItem(glyph);

      case 2: // segment format

      case 4:
        {
          var min = 0;
          var max = this.table.binarySearchHeader.nUnits - 1;

          while (min <= max) {
            var mid = min + max >> 1;
            var seg = this.table.segments[mid]; // special end of search value

            if (seg.firstGlyph === 0xffff) {
              return null;
            }

            if (glyph < seg.firstGlyph) {
              max = mid - 1;
            } else if (glyph > seg.lastGlyph) {
              min = mid + 1;
            } else {
              if (this.table.version === 2) {
                return seg.value;
              } else {
                return seg.values[glyph - seg.firstGlyph];
              }
            }
          }

          return null;
        }

      case 6:
        {
          // lookup single
          var _min = 0;

          var _max = this.table.binarySearchHeader.nUnits - 1;

          while (_min <= _max) {
            var mid = _min + _max >> 1;
            var seg = this.table.segments[mid]; // special end of search value

            if (seg.glyph === 0xffff) {
              return null;
            }

            if (glyph < seg.glyph) {
              _max = mid - 1;
            } else if (glyph > seg.glyph) {
              _min = mid + 1;
            } else {
              return seg.value;
            }
          }

          return null;
        }

      case 8:
        // lookup trimmed
        return this.table.values[glyph - this.table.firstGlyph];

      default:
        throw new Error("Unknown lookup table format: " + this.table.version);
    }
  };

  _proto.glyphsForValue = function glyphsForValue(classValue) {
    var res = [];

    switch (this.table.version) {
      case 2: // segment format

      case 4:
        {
          for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.table.segments), _step; !(_step = _iterator()).done;) {
            var segment = _step.value;

            if (this.table.version === 2 && segment.value === classValue) {
              res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));
            } else {
              for (var index = 0; index < segment.values.length; index++) {
                if (segment.values[index] === classValue) {
                  res.push(segment.firstGlyph + index);
                }
              }
            }
          }

          break;
        }

      case 6:
        {
          // lookup single
          for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.table.segments), _step2; !(_step2 = _iterator2()).done;) {
            var _segment = _step2.value;

            if (_segment.value === classValue) {
              res.push(_segment.glyph);
            }
          }

          break;
        }

      case 8:
        {
          // lookup trimmed
          for (var i = 0; i < this.table.values.length; i++) {
            if (this.table.values[i] === classValue) {
              res.push(this.table.firstGlyph + i);
            }
          }

          break;
        }

      default:
        throw new Error("Unknown lookup table format: " + this.table.version);
    }

    return res;
  };

  return AATLookupTable;
}(), ((0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$3.prototype, "glyphsForValue", [cache], Object.getOwnPropertyDescriptor(_class$3.prototype, "glyphsForValue"), _class$3.prototype)), _class$3);

var START_OF_TEXT_STATE = 0;
var END_OF_TEXT_CLASS = 0;
var OUT_OF_BOUNDS_CLASS = 1;
var DELETED_GLYPH_CLASS = 2;
var DONT_ADVANCE = 0x4000;

var AATStateMachine = /*#__PURE__*/function () {
  function AATStateMachine(stateTable) {
    this.stateTable = stateTable;
    this.lookupTable = new AATLookupTable(stateTable.classTable);
  }

  var _proto = AATStateMachine.prototype;

  _proto.process = function process(glyphs, reverse, processEntry) {
    var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?

    var index = reverse ? glyphs.length - 1 : 0;
    var dir = reverse ? -1 : 1;

    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
      var glyph = null;
      var classCode = OUT_OF_BOUNDS_CLASS;
      var shouldAdvance = true;

      if (index === glyphs.length || index === -1) {
        classCode = END_OF_TEXT_CLASS;
      } else {
        glyph = glyphs[index];

        if (glyph.id === 0xffff) {
          // deleted glyph
          classCode = DELETED_GLYPH_CLASS;
        } else {
          classCode = this.lookupTable.lookup(glyph.id);

          if (classCode == null) {
            classCode = OUT_OF_BOUNDS_CLASS;
          }
        }
      }

      var row = this.stateTable.stateArray.getItem(currentState);
      var entryIndex = row[classCode];
      var entry = this.stateTable.entryTable.getItem(entryIndex);

      if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {
        processEntry(glyph, entry, index);
        shouldAdvance = !(entry.flags & DONT_ADVANCE);
      }

      currentState = entry.newState;

      if (shouldAdvance) {
        index += dir;
      }
    }

    return glyphs;
  }
  /**
   * Performs a depth-first traversal of the glyph strings
   * represented by the state machine.
   */
  ;

  _proto.traverse = function traverse(opts, state, visited) {
    if (state === void 0) {
      state = 0;
    }

    if (visited === void 0) {
      visited = new Set();
    }

    if (visited.has(state)) {
      return;
    }

    visited.add(state);
    var _this$stateTable = this.stateTable,
        nClasses = _this$stateTable.nClasses,
        stateArray = _this$stateTable.stateArray,
        entryTable = _this$stateTable.entryTable;
    var row = stateArray.getItem(state); // Skip predefined classes

    for (var classCode = 4; classCode < nClasses; classCode++) {
      var entryIndex = row[classCode];
      var entry = entryTable.getItem(entryIndex); // Try all glyphs in the class

      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.lookupTable.glyphsForValue(classCode)), _step; !(_step = _iterator()).done;) {
        var glyph = _step.value;

        if (opts.enter) {
          opts.enter(glyph, entry);
        }

        if (entry.newState !== 0) {
          this.traverse(opts, entry.newState, visited);
        }

        if (opts.exit) {
          opts.exit(glyph, entry);
        }
      }
    }
  };

  return AATStateMachine;
}();

var _class$2;

var MARK_FIRST = 0x8000;
var MARK_LAST = 0x2000;
var VERB = 0x000F; // contextual substitution and glyph insertion flag

var SET_MARK = 0x8000; // ligature entry flags

var SET_COMPONENT = 0x8000;
var PERFORM_ACTION = 0x2000; // ligature action masks

var LAST_MASK = 0x80000000;
var STORE_MASK = 0x40000000;
var OFFSET_MASK = 0x3FFFFFFF;
var REVERSE_DIRECTION = 0x400000;
var CURRENT_INSERT_BEFORE = 0x0800;
var MARKED_INSERT_BEFORE = 0x0400;
var CURRENT_INSERT_COUNT = 0x03E0;
var MARKED_INSERT_COUNT = 0x001F;
var AATMorxProcessor = (_class$2 = /*#__PURE__*/function () {
  function AATMorxProcessor(font) {
    this.processIndicRearragement = this.processIndicRearragement.bind(this);
    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
    this.processLigature = this.processLigature.bind(this);
    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
    this.font = font;
    this.morx = font.morx;
    this.inputCache = null;
  } // Processes an array of glyphs and applies the specified features
  // Features should be in the form of {featureType:{featureSetting:boolean}}


  var _proto = AATMorxProcessor.prototype;

  _proto.process = function process(glyphs, features) {
    if (features === void 0) {
      features = {};
    }

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.morx.chains), _step; !(_step = _iterator()).done;) {
      var chain = _step.value;
      var flags = chain.defaultFlags; // enable/disable the requested features

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(chain.features), _step2; !(_step2 = _iterator2()).done;) {
        var feature = _step2.value;
        var f = void 0;

        if (f = features[feature.featureType]) {
          if (f[feature.featureSetting]) {
            flags &= feature.disableFlags;
            flags |= feature.enableFlags;
          } else if (f[feature.featureSetting] === false) {
            flags |= ~feature.disableFlags;
            flags &= ~feature.enableFlags;
          }
        }
      }

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(chain.subtables), _step3; !(_step3 = _iterator3()).done;) {
        var subtable = _step3.value;

        if (subtable.subFeatureFlags & flags) {
          this.processSubtable(subtable, glyphs);
        }
      }
    } // remove deleted glyphs


    var index = glyphs.length - 1;

    while (index >= 0) {
      if (glyphs[index].id === 0xffff) {
        glyphs.splice(index, 1);
      }

      index--;
    }

    return glyphs;
  };

  _proto.processSubtable = function processSubtable(subtable, glyphs) {
    this.subtable = subtable;
    this.glyphs = glyphs;

    if (this.subtable.type === 4) {
      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
      return;
    }

    this.ligatureStack = [];
    this.markedGlyph = null;
    this.firstGlyph = null;
    this.lastGlyph = null;
    this.markedIndex = null;
    var stateMachine = this.getStateMachine(subtable);
    var process = this.getProcessor();
    var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);
    return stateMachine.process(this.glyphs, reverse, process);
  };

  _proto.getStateMachine = function getStateMachine(subtable) {
    return new AATStateMachine(subtable.table.stateTable);
  };

  _proto.getProcessor = function getProcessor() {
    switch (this.subtable.type) {
      case 0:
        return this.processIndicRearragement;

      case 1:
        return this.processContextualSubstitution;

      case 2:
        return this.processLigature;

      case 4:
        return this.processNoncontextualSubstitutions;

      case 5:
        return this.processGlyphInsertion;

      default:
        throw new Error("Invalid morx subtable type: " + this.subtable.type);
    }
  };

  _proto.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {
    if (entry.flags & MARK_FIRST) {
      this.firstGlyph = index;
    }

    if (entry.flags & MARK_LAST) {
      this.lastGlyph = index;
    }

    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);
  };

  _proto.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {
    var subsitutions = this.subtable.table.substitutionTable.items;

    if (entry.markIndex !== 0xffff) {
      var lookup = subsitutions.getItem(entry.markIndex);
      var lookupTable = new AATLookupTable(lookup);
      glyph = this.glyphs[this.markedGlyph];
      var gid = lookupTable.lookup(glyph.id);

      if (gid) {
        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
      }
    }

    if (entry.currentIndex !== 0xffff) {
      var _lookup = subsitutions.getItem(entry.currentIndex);

      var _lookupTable = new AATLookupTable(_lookup);

      glyph = this.glyphs[index];

      var gid = _lookupTable.lookup(glyph.id);

      if (gid) {
        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
      }
    }

    if (entry.flags & SET_MARK) {
      this.markedGlyph = index;
    }
  };

  _proto.processLigature = function processLigature(glyph, entry, index) {
    if (entry.flags & SET_COMPONENT) {
      this.ligatureStack.push(index);
    }

    if (entry.flags & PERFORM_ACTION) {
      var _this$ligatureStack;

      var actions = this.subtable.table.ligatureActions;
      var components = this.subtable.table.components;
      var ligatureList = this.subtable.table.ligatureList;
      var actionIndex = entry.action;
      var last = false;
      var ligatureIndex = 0;
      var codePoints = [];
      var ligatureGlyphs = [];

      while (!last) {
        var _codePoints;

        var componentGlyph = this.ligatureStack.pop();

        (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);

        var action = actions.getItem(actionIndex++);
        last = !!(action & LAST_MASK);
        var store = !!(action & STORE_MASK);
        var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits

        offset += this.glyphs[componentGlyph].id;
        var component = components.getItem(offset);
        ligatureIndex += component;

        if (last || store) {
          var ligatureEntry = ligatureList.getItem(ligatureIndex);
          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
          ligatureGlyphs.push(componentGlyph);
          ligatureIndex = 0;
          codePoints = [];
        } else {
          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
        }
      } // Put ligature glyph indexes back on the stack


      (_this$ligatureStack = this.ligatureStack).push.apply(_this$ligatureStack, ligatureGlyphs);
    }
  };

  _proto.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {
    var lookupTable = new AATLookupTable(subtable.table.lookupTable);

    for (index = 0; index < glyphs.length; index++) {
      var glyph = glyphs[index];

      if (glyph.id !== 0xffff) {
        var gid = lookupTable.lookup(glyph.id);

        if (gid) {
          // 0 means do nothing
          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
        }
      }
    }
  };

  _proto._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
    var _this$glyphs;

    var insertions = [];

    while (count--) {
      var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
      insertions.push(this.font.getGlyph(gid));
    }

    if (!isBefore) {
      glyphIndex++;
    }

    (_this$glyphs = this.glyphs).splice.apply(_this$glyphs, [glyphIndex, 0].concat(insertions));
  };

  _proto.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {
    if (entry.flags & SET_MARK) {
      this.markedIndex = index;
    }

    if (entry.markedInsertIndex !== 0xffff) {
      var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;
      var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);

      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
    }

    if (entry.currentInsertIndex !== 0xffff) {
      var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;

      var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);

      this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);
    }
  };

  _proto.getSupportedFeatures = function getSupportedFeatures() {
    var features = [];

    for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.morx.chains), _step4; !(_step4 = _iterator4()).done;) {
      var chain = _step4.value;

      for (var _iterator5 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(chain.features), _step5; !(_step5 = _iterator5()).done;) {
        var feature = _step5.value;
        features.push([feature.featureType, feature.featureSetting]);
      }
    }

    return features;
  };

  _proto.generateInputs = function generateInputs(gid) {
    if (!this.inputCache) {
      this.generateInputCache();
    }

    return this.inputCache[gid] || [];
  };

  _proto.generateInputCache = function generateInputCache() {
    this.inputCache = {};

    for (var _iterator6 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.morx.chains), _step6; !(_step6 = _iterator6()).done;) {
      var chain = _step6.value;
      var flags = chain.defaultFlags;

      for (var _iterator7 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(chain.subtables), _step7; !(_step7 = _iterator7()).done;) {
        var subtable = _step7.value;

        if (subtable.subFeatureFlags & flags) {
          this.generateInputsForSubtable(subtable);
        }
      }
    }
  };

  _proto.generateInputsForSubtable = function generateInputsForSubtable(subtable) {
    var _this = this;

    // Currently, only supporting ligature subtables.
    if (subtable.type !== 2) {
      return;
    }

    var reverse = !!(subtable.coverage & REVERSE_DIRECTION);

    if (reverse) {
      throw new Error('Reverse subtable, not supported.');
    }

    this.subtable = subtable;
    this.ligatureStack = [];
    var stateMachine = this.getStateMachine(subtable);
    var process = this.getProcessor();
    var input = [];
    var stack = [];
    this.glyphs = [];
    stateMachine.traverse({
      enter: function enter(glyph, entry) {
        var glyphs = _this.glyphs;
        stack.push({
          glyphs: glyphs.slice(),
          ligatureStack: _this.ligatureStack.slice()
        }); // Add glyph to input and glyphs to process.

        var g = _this.font.getGlyph(glyph);

        input.push(g);
        glyphs.push(input[input.length - 1]); // Process ligature substitution

        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1); // Add input to result if only one matching (non-deleted) glyph remains.

        var count = 0;
        var found = 0;

        for (var i = 0; i < glyphs.length && count <= 1; i++) {
          if (glyphs[i].id !== 0xffff) {
            count++;
            found = glyphs[i].id;
          }
        }

        if (count === 1) {
          var result = input.map(function (g) {
            return g.id;
          });
          var _cache = _this.inputCache[found];

          if (_cache) {
            _cache.push(result);
          } else {
            _this.inputCache[found] = [result];
          }
        }
      },
      exit: function exit() {
        var _stack$pop = stack.pop();

        _this.glyphs = _stack$pop.glyphs;
        _this.ligatureStack = _stack$pop.ligatureStack;
        input.pop();
      }
    });
  };

  return AATMorxProcessor;
}(), ((0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$2.prototype, "getStateMachine", [cache], Object.getOwnPropertyDescriptor(_class$2.prototype, "getStateMachine"), _class$2.prototype)), _class$2);
// reverse the glyphs inside those ranges if specified
// ranges are in [offset, length] format

function swap(glyphs, rangeA, rangeB, reverseA, reverseB) {
  if (reverseA === void 0) {
    reverseA = false;
  }

  if (reverseB === void 0) {
    reverseB = false;
  }

  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);

  if (reverseB) {
    end.reverse();
  }

  var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));

  if (reverseA) {
    start.reverse();
  }

  glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));
  return glyphs;
}

function reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {

  switch (verb) {
    case 0:
      // no change
      return glyphs;

    case 1:
      // Ax => xA
      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);

    case 2:
      // xD => Dx
      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);

    case 3:
      // AxD => DxA
      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);

    case 4:
      // ABx => xAB
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);

    case 5:
      // ABx => xBA
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);

    case 6:
      // xCD => CDx
      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);

    case 7:
      // xCD => DCx
      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);

    case 8:
      // AxCD => CDxA
      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);

    case 9:
      // AxCD => DCxA
      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);

    case 10:
      // ABxD => DxAB
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);

    case 11:
      // ABxD => DxBA
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);

    case 12:
      // ABxCD => CDxAB
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);

    case 13:
      // ABxCD => CDxBA
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);

    case 14:
      // ABxCD => DCxAB
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);

    case 15:
      // ABxCD => DCxBA
      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);

    default:
      throw new Error("Unknown verb: " + verb);
  }
}

var AATLayoutEngine = /*#__PURE__*/function () {
  function AATLayoutEngine(font) {
    this.font = font;
    this.morxProcessor = new AATMorxProcessor(font);
    this.fallbackPosition = false;
  }

  var _proto = AATLayoutEngine.prototype;

  _proto.substitute = function substitute(glyphRun) {
    // AAT expects the glyphs to be in visual order prior to morx processing,
    // so reverse the glyphs if the script is right-to-left.
    if (glyphRun.direction === 'rtl') {
      glyphRun.glyphs.reverse();
    }

    this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));
  };

  _proto.getAvailableFeatures = function getAvailableFeatures(script, language) {
    return mapAATToOT(this.morxProcessor.getSupportedFeatures());
  };

  _proto.stringsForGlyph = function stringsForGlyph(gid) {
    var glyphStrings = this.morxProcessor.generateInputs(gid);
    var result = new Set();

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphStrings), _step; !(_step = _iterator()).done;) {
      var glyphs = _step.value;

      this._addStrings(glyphs, 0, result, '');
    }

    return result;
  };

  _proto._addStrings = function _addStrings(glyphs, index, strings, string) {
    var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);

    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(codePoints), _step2; !(_step2 = _iterator2()).done;) {
      var codePoint = _step2.value;
      var s = string + String.fromCodePoint(codePoint);

      if (index < glyphs.length - 1) {
        this._addStrings(glyphs, index + 1, strings, s);
      } else {
        strings.add(s);
      }
    }
  };

  return AATLayoutEngine;
}();

/**
 * ShapingPlans are used by the OpenType shapers to store which
 * features should by applied, and in what order to apply them.
 * The features are applied in groups called stages. A feature
 * can be applied globally to all glyphs, or locally to only
 * specific glyphs.
 *
 * @private
 */

var ShapingPlan = /*#__PURE__*/function () {
  function ShapingPlan(font, script, direction) {
    this.font = font;
    this.script = script;
    this.direction = direction;
    this.stages = [];
    this.globalFeatures = {};
    this.allFeatures = {};
  }
  /**
   * Adds the given features to the last stage.
   * Ignores features that have already been applied.
   */


  var _proto = ShapingPlan.prototype;

  _proto._addFeatures = function _addFeatures(features, global) {
    var stageIndex = this.stages.length - 1;
    var stage = this.stages[stageIndex];

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(features), _step; !(_step = _iterator()).done;) {
      var feature = _step.value;

      if (this.allFeatures[feature] == null) {
        stage.push(feature);
        this.allFeatures[feature] = stageIndex;

        if (global) {
          this.globalFeatures[feature] = true;
        }
      }
    }
  }
  /**
   * Add features to the last stage
   */
  ;

  _proto.add = function add(arg, global) {
    if (global === void 0) {
      global = true;
    }

    if (this.stages.length === 0) {
      this.stages.push([]);
    }

    if (typeof arg === 'string') {
      arg = [arg];
    }

    if (Array.isArray(arg)) {
      this._addFeatures(arg, global);
    } else if (typeof arg === 'object') {
      this._addFeatures(arg.global || [], true);

      this._addFeatures(arg.local || [], false);
    } else {
      throw new Error("Unsupported argument to ShapingPlan#add");
    }
  }
  /**
   * Add a new stage
   */
  ;

  _proto.addStage = function addStage(arg, global) {
    if (typeof arg === 'function') {
      this.stages.push(arg, []);
    } else {
      this.stages.push([]);
      this.add(arg, global);
    }
  };

  _proto.setFeatureOverrides = function setFeatureOverrides(features) {
    if (Array.isArray(features)) {
      this.add(features);
    } else if (typeof features === 'object') {
      for (var tag in features) {
        if (features[tag]) {
          this.add(tag);
        } else if (this.allFeatures[tag] != null) {
          var stage = this.stages[this.allFeatures[tag]];
          stage.splice(stage.indexOf(tag), 1);
          delete this.allFeatures[tag];
          delete this.globalFeatures[tag];
        }
      }
    }
  }
  /**
   * Assigns the global features to the given glyphs
   */
  ;

  _proto.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {
    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphs), _step2; !(_step2 = _iterator2()).done;) {
      var glyph = _step2.value;

      for (var feature in this.globalFeatures) {
        glyph.features[feature] = true;
      }
    }
  }
  /**
   * Executes the planned stages using the given OTProcessor
   */
  ;

  _proto.process = function process(processor, glyphs, positions) {
    for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.stages), _step3; !(_step3 = _iterator3()).done;) {
      var stage = _step3.value;

      if (typeof stage === 'function') {
        if (!positions) {
          stage(this.font, glyphs, this);
        }
      } else if (stage.length > 0) {
        processor.applyFeatures(stage, glyphs, positions);
      }
    }
  };

  return ShapingPlan;
}();

// Updated: 417af0c79c5664271a07a783574ec7fac7ebad0c
var VARIATION_FEATURES = ['rvrn'];
var COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];
var FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];
var HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];
var DIRECTIONAL_FEATURES = {
  ltr: ['ltra', 'ltrm'],
  rtl: ['rtla', 'rtlm']
};

var DefaultShaper = /*#__PURE__*/function () {
  function DefaultShaper() {}

  DefaultShaper.plan = function plan(_plan, glyphs, features) {
    // Plan the features we want to apply
    this.planPreprocessing(_plan);
    this.planFeatures(_plan);
    this.planPostprocessing(_plan, features); // Assign the global features to all the glyphs

    _plan.assignGlobalFeatures(glyphs); // Assign local features to glyphs


    this.assignFeatures(_plan, glyphs);
  };

  DefaultShaper.planPreprocessing = function planPreprocessing(plan) {
    plan.add({
      global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),
      local: FRACTIONAL_FEATURES
    });
  };

  DefaultShaper.planFeatures = function planFeatures(plan) {// Do nothing by default. Let subclasses override this.
  };

  DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {
    plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));
    plan.setFeatureOverrides(userFeatures);
  };

  DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {
    // Enable contextual fractions
    for (var i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i];

      if (glyph.codePoints[0] === 0x2044) {
        // fraction slash
        var start = i;
        var end = i + 1; // Apply numerator

        while (start > 0 && _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].isDigit(glyphs[start - 1].codePoints[0])) {
          glyphs[start - 1].features.numr = true;
          glyphs[start - 1].features.frac = true;
          start--;
        } // Apply denominator


        while (end < glyphs.length && _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].isDigit(glyphs[end].codePoints[0])) {
          glyphs[end].features.dnom = true;
          glyphs[end].features.frac = true;
          end++;
        } // Apply fraction slash


        glyph.features.frac = true;
        i = end - 1;
      }
    }
  };

  return DefaultShaper;
}();

DefaultShaper.zeroMarkWidths = 'AFTER_GPOS';

var type$2 = "Buffer";
var data$2 = [
	0,
	1,
	240,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	56,
	0,
	1,
	253,
	1,
	2,
	254,
	237,
	154,
	45,
	76,
	196,
	48,
	20,
	199,
	187,
	237,
	190,
	56,
	64,
	129,
	192,
	224,
	144,
	72,
	4,
	2,
	121,
	151,
	16,
	18,
	12,
	9,
	134,
	132,
	115,
	40,
	4,
	138,
	160,
	80,
	224,
	80,
	36,
	8,
	78,
	34,
	145,
	72,
	12,
	138,
	32,
	73,
	72,
	8,
	18,
	137,
	68,
	18,
	12,
	201,
	253,
	47,
	215,
	146,
	151,
	166,
	221,
	117,
	215,
	110,
	131,
	219,
	123,
	201,
	47,
	237,
	173,
	235,
	235,
	123,
	237,
	235,
	219,
	186,
	92,
	55,
	22,
	98,
	27,
	236,
	130,
	125,
	208,
	149,
	191,
	255,
	75,
	121,
	12,
	78,
	193,
	25,
	184,
	0,
	151,
	160,
	15,
	110,
	192,
	45,
	184,
	3,
	247,
	224,
	1,
	60,
	145,
	126,
	207,
	224,
	77,
	254,
	30,
	242,
	14,
	62,
	100,
	253,
	83,
	150,
	95,
	164,
	157,
	153,
	78,
	126,
	192,
	181,
	164,
	158,
	8,
	49,
	15,
	22,
	146,
	242,
	237,
	42,
	138,
	37,
	248,
	186,
	44,
	253,
	93,
	169,
	144,
	223,
	12,
	195,
	48,
	12,
	195,
	48,
	12,
	195,
	48,
	12,
	195,
	84,
	143,
	225,
	247,
	159,
	85,
	254,
	254,
	193,
	48,
	12,
	195,
	48,
	12,
	195,
	48,
	185,
	114,
	53,
	51,
	98,
	49,
	39,
	94,
	193,
	92,
	91,
	136,
	14,
	56,
	7,
	143,
	224,
	187,
	61,
	106,
	91,
	159,
	21,
	98,
	83,
	8,
	209,
	107,
	9,
	209,
	111,
	141,
	234,
	69,
	240,
	210,
	202,
	111,
	62,
	215,
	112,
	134,
	217,
	48,
	156,
	99,
	58,
	184,
	182,
	149,
	225,
	124,
	179,
	131,
	123,
	247,
	60,
	207,
	67,
	61,
	244,
	63,
	176,
	232,
	56,
	196,
	245,
	163,
	138,
	156,
	183,
	212,
	255,
	11,
	78,
	166,
	212,
	223,
	78,
	28,
	253,
	194,
	194,
	82,
	101,
	137,
	44,
	208,
	118,
	83,
	61,
	148,
	212,
	164,
	222,
	68,
	163,
	102,
	40,
	117,
	76,
	125,
	178,
	66,
	251,
	253,
	37,
	161,
	54,
	81,
	31,
	245,
	185,
	114,
	241,
	47,
	4,
	147,
	204,
	109,
	17,
	36,
	90,
	221,
	197,
	15,
	83,
	92,
	169,
	118,
	65,
	74,
	155,
	132,
	216,
	7,
	116,
	60,
	23,
	161,
	62,
	211,
	107,
	62,
	210,
	4,
	117,
	131,
	254,
	134,
	36,
	109,
	253,
	93,
	99,
	34,
	33,
	58,
	245,
	126,
	13,
	79,
	251,
	149,
	100,
	141,
	207,
	80,
	113,
	61,
	110,
	110,
	76,
	237,
	227,
	198,
	117,
	149,
	178,
	247,
	157,
	111,
	236,
	217,
	250,
	143,
	203,
	245,
	89,
	98,
	143,
	222,
	107,
	122,
	182,
	217,
	236,
	138,
	12,
	122,
	84,
	222,
	213,
	115,
	69,
	104,
	153,
	36,
	134,
	169,
	109,
	166,
	24,
	211,
	245,
	154,
	230,
	79,
	151,
	178,
	223,
	140,
	213,
	26,
	40,
	209,
	109,
	12,
	101,
	95,
	217,
	251,
	196,
	244,
	238,
	213,
	148,
	20,
	185,
	143,
	125,
	247,
	115,
	154,
	127,
	121,
	234,
	14,
	169,
	203,
	53,
	71,
	248,
	72,
	168,
	53,
	139,
	39,
	180,
	211,
	150,
	75,
	34,
	173,
	84,
	245,
	72,
	142,
	229,
	242,
	78,
	24,
	167,
	232,
	55,
	141,
	167,
	198,
	114,
	181,
	53,
	68,
	206,
	165,
	246,
	216,
	124,
	209,
	115,
	169,
	158,
	83,
	125,
	237,
	176,
	205,
	99,
	136,
	184,
	179,
	173,
	65,
	209,
	40,
	191,
	138,
	150,
	180,
	184,
	115,
	37,
	235,
	58,
	132,
	142,
	81,
	95,
	9,
	153,
	191,
	76,
	207,
	10,
	155,
	52,
	3,
	142,
	107,
	147,
	1
];
var trieData$2 = {
	type: type$2,
	data: data$2
};

var trie$2 = new (unicode_trie__WEBPACK_IMPORTED_MODULE_8___default())(new Uint8Array(trieData$2.data));
var FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];
var ShapingClasses = {
  Non_Joining: 0,
  Left_Joining: 1,
  Right_Joining: 2,
  Dual_Joining: 3,
  Join_Causing: 3,
  ALAPH: 4,
  'DALATH RISH': 5,
  Transparent: 6
};
var ISOL = 'isol';
var FINA = 'fina';
var FIN2 = 'fin2';
var FIN3 = 'fin3';
var MEDI = 'medi';
var MED2 = 'med2';
var INIT = 'init';
var NONE = null; // Each entry is [prevAction, curAction, nextState]

var STATE_TABLE$1 = [//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
// State 0: prev was U,  not willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]], // State 1: prev was R or ISOL/ALAPH,  not willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]], // State 2: prev was D/L in ISOL form,  willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]], // State 3: prev was D in FINA form,  willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]], // State 4: prev was FINA ALAPH,  not willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]], // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]], // State 6: prev was DALATH/RISH,  not willing to join.
[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];
/**
 * This is a shaper for Arabic, and other cursive scripts.
 * It uses data from ArabicShaping.txt in the Unicode database,
 * compiled to a UnicodeTrie by generate-data.coffee.
 *
 * The shaping state machine was ported from Harfbuzz.
 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc
 */

var ArabicShaper = /*#__PURE__*/function (_DefaultShaper) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(ArabicShaper, _DefaultShaper);

  function ArabicShaper() {
    return _DefaultShaper.apply(this, arguments) || this;
  }

  ArabicShaper.planFeatures = function planFeatures(plan) {
    plan.add(['ccmp', 'locl']);

    for (var i = 0; i < FEATURES.length; i++) {
      var feature = FEATURES[i];
      plan.addStage(feature, false);
    }

    plan.addStage('mset');
  };

  ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
    _DefaultShaper.assignFeatures.call(this, plan, glyphs);

    var prev = -1;
    var state = 0;
    var actions = []; // Apply the state machine to map glyphs to features

    for (var i = 0; i < glyphs.length; i++) {
      var curAction = void 0,
          prevAction = void 0;
      var glyph = glyphs[i];
      var type = getShapingClass(glyph.codePoints[0]);

      if (type === ShapingClasses.Transparent) {
        actions[i] = NONE;
        continue;
      }

      var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];
      prevAction = _STATE_TABLE$state$ty[0];
      curAction = _STATE_TABLE$state$ty[1];
      state = _STATE_TABLE$state$ty[2];

      if (prevAction !== NONE && prev !== -1) {
        actions[prev] = prevAction;
      }

      actions[i] = curAction;
      prev = i;
    } // Apply the chosen features to their respective glyphs


    for (var index = 0; index < glyphs.length; index++) {
      var feature = void 0;
      var glyph = glyphs[index];

      if (feature = actions[index]) {
        glyph.features[feature] = true;
      }
    }
  };

  return ArabicShaper;
}(DefaultShaper);

function getShapingClass(codePoint) {
  var res = trie$2.get(codePoint);

  if (res) {
    return res - 1;
  }

  var category = _react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].getCategory(codePoint);

  if (category === 'Mn' || category === 'Me' || category === 'Cf') {
    return ShapingClasses.Transparent;
  }

  return ShapingClasses.Non_Joining;
}

var GlyphIterator = /*#__PURE__*/function () {
  function GlyphIterator(glyphs, options) {
    this.glyphs = glyphs;
    this.reset(options);
  }

  var _proto = GlyphIterator.prototype;

  _proto.reset = function reset(options, index) {
    if (options === void 0) {
      options = {};
    }

    if (index === void 0) {
      index = 0;
    }

    this.options = options;
    this.flags = options.flags || {};
    this.markAttachmentType = options.markAttachmentType || 0;
    this.index = index;
  };

  _proto.shouldIgnore = function shouldIgnore(glyph) {
    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
  };

  _proto.move = function move(dir) {
    this.index += dir;

    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {
      this.index += dir;
    }

    if (0 > this.index || this.index >= this.glyphs.length) {
      return null;
    }

    return this.glyphs[this.index];
  };

  _proto.next = function next() {
    return this.move(+1);
  };

  _proto.prev = function prev() {
    return this.move(-1);
  };

  _proto.peek = function peek(count) {
    if (count === void 0) {
      count = 1;
    }

    var idx = this.index;
    var res = this.increment(count);
    this.index = idx;
    return res;
  };

  _proto.peekIndex = function peekIndex(count) {
    if (count === void 0) {
      count = 1;
    }

    var idx = this.index;
    this.increment(count);
    var res = this.index;
    this.index = idx;
    return res;
  };

  _proto.increment = function increment(count) {
    if (count === void 0) {
      count = 1;
    }

    var dir = count < 0 ? -1 : 1;
    count = Math.abs(count);

    while (count--) {
      this.move(dir);
    }

    return this.glyphs[this.index];
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(GlyphIterator, [{
    key: "cur",
    get: function get() {
      return this.glyphs[this.index] || null;
    }
  }]);

  return GlyphIterator;
}();

var DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];

var OTProcessor = /*#__PURE__*/function () {
  function OTProcessor(font, table) {
    this.font = font;
    this.table = table;
    this.script = null;
    this.scriptTag = null;
    this.language = null;
    this.languageTag = null;
    this.features = {};
    this.lookups = {}; // Setup variation substitutions

    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1; // initialize to default script + language

    this.selectScript(); // current context (set by applyFeatures)

    this.glyphs = [];
    this.positions = []; // only used by GPOS

    this.ligatureID = 1;
    this.currentFeature = null;
  }

  var _proto = OTProcessor.prototype;

  _proto.findScript = function findScript(script) {
    if (this.table.scriptList == null) {
      return null;
    }

    if (!Array.isArray(script)) {
      script = [script];
    }

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(script), _step; !(_step = _iterator()).done;) {
      var s = _step.value;

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.table.scriptList), _step2; !(_step2 = _iterator2()).done;) {
        var entry = _step2.value;

        if (entry.tag === s) {
          return entry;
        }
      }
    }

    return null;
  };

  _proto.selectScript = function selectScript(script, language, direction$1) {
    var changed = false;
    var entry;

    if (!this.script || script !== this.scriptTag) {
      entry = this.findScript(script);

      if (!entry) {
        entry = this.findScript(DEFAULT_SCRIPTS);
      }

      if (!entry) {
        return this.scriptTag;
      }

      this.scriptTag = entry.tag;
      this.script = entry.script;
      this.language = null;
      this.languageTag = null;
      changed = true;
    }

    if (!direction$1 || direction$1 !== this.direction) {
      this.direction = direction$1 || direction(script);
    }

    if (language && language.length < 4) {
      language += ' '.repeat(4 - language.length);
    }

    if (!language || language !== this.languageTag) {
      this.language = null;

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.script.langSysRecords), _step3; !(_step3 = _iterator3()).done;) {
        var lang = _step3.value;

        if (lang.tag === language) {
          this.language = lang.langSys;
          this.languageTag = lang.tag;
          break;
        }
      }

      if (!this.language) {
        this.language = this.script.defaultLangSys;
        this.languageTag = null;
      }

      changed = true;
    } // Build a feature lookup table


    if (changed) {
      this.features = {};

      if (this.language) {
        for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.language.featureIndexes), _step4; !(_step4 = _iterator4()).done;) {
          var featureIndex = _step4.value;
          var record = this.table.featureList[featureIndex];
          var substituteFeature = this.substituteFeatureForVariations(featureIndex);
          this.features[record.tag] = substituteFeature || record.feature;
        }
      }
    }

    return this.scriptTag;
  };

  _proto.lookupsForFeatures = function lookupsForFeatures(userFeatures, exclude) {
    if (userFeatures === void 0) {
      userFeatures = [];
    }

    var lookups = [];

    for (var _iterator5 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(userFeatures), _step5; !(_step5 = _iterator5()).done;) {
      var tag = _step5.value;
      var feature = this.features[tag];

      if (!feature) {
        continue;
      }

      for (var _iterator6 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(feature.lookupListIndexes), _step6; !(_step6 = _iterator6()).done;) {
        var lookupIndex = _step6.value;

        if (exclude && exclude.indexOf(lookupIndex) !== -1) {
          continue;
        }

        lookups.push({
          feature: tag,
          index: lookupIndex,
          lookup: this.table.lookupList.get(lookupIndex)
        });
      }
    }

    lookups.sort(function (a, b) {
      return a.index - b.index;
    });
    return lookups;
  };

  _proto.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {
    if (this.variationsIndex === -1) {
      return null;
    }

    var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
    var substitutions = record.featureTableSubstitution.substitutions;

    for (var _iterator7 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(substitutions), _step7; !(_step7 = _iterator7()).done;) {
      var substitution = _step7.value;

      if (substitution.featureIndex === featureIndex) {
        return substitution.alternateFeatureTable;
      }
    }

    return null;
  };

  _proto.findVariationsIndex = function findVariationsIndex(coords) {
    var variations = this.table.featureVariations;

    if (!variations) {
      return -1;
    }

    var records = variations.featureVariationRecords;

    for (var i = 0; i < records.length; i++) {
      var conditions = records[i].conditionSet.conditionTable;

      if (this.variationConditionsMatch(conditions, coords)) {
        return i;
      }
    }

    return -1;
  };

  _proto.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {
    return conditions.every(function (condition) {
      var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
    });
  };

  _proto.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
    var lookups = this.lookupsForFeatures(userFeatures);
    this.applyLookups(lookups, glyphs, advances);
  };

  _proto.applyLookups = function applyLookups(lookups, glyphs, positions) {
    this.glyphs = glyphs;
    this.positions = positions;
    this.glyphIterator = new GlyphIterator(glyphs);

    for (var _iterator8 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(lookups), _step8; !(_step8 = _iterator8()).done;) {
      var _step8$value = _step8.value,
          feature = _step8$value.feature,
          lookup = _step8$value.lookup;
      this.currentFeature = feature;
      this.glyphIterator.reset(lookup.flags);

      while (this.glyphIterator.index < glyphs.length) {
        if (!(feature in this.glyphIterator.cur.features)) {
          this.glyphIterator.next();
          continue;
        }

        for (var _iterator9 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(lookup.subTables), _step9; !(_step9 = _iterator9()).done;) {
          var table = _step9.value;
          var res = this.applyLookup(lookup.lookupType, table);

          if (res) {
            break;
          }
        }

        this.glyphIterator.next();
      }
    }
  };

  _proto.applyLookup = function applyLookup(lookup, table) {
    throw new Error("applyLookup must be implemented by subclasses");
  };

  _proto.applyLookupList = function applyLookupList(lookupRecords) {
    var options = this.glyphIterator.options;
    var glyphIndex = this.glyphIterator.index;

    for (var _iterator10 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(lookupRecords), _step10; !(_step10 = _iterator10()).done;) {
      var lookupRecord = _step10.value;
      // Reset flags and find glyph index for this lookup record
      this.glyphIterator.reset(options, glyphIndex);
      this.glyphIterator.increment(lookupRecord.sequenceIndex); // Get the lookup and setup flags for subtables

      var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index); // Apply lookup subtables until one matches

      for (var _iterator11 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(lookup.subTables), _step11; !(_step11 = _iterator11()).done;) {
        var table = _step11.value;

        if (this.applyLookup(lookup.lookupType, table)) {
          break;
        }
      }
    }

    this.glyphIterator.reset(options, glyphIndex);
    return true;
  };

  _proto.coverageIndex = function coverageIndex(coverage, glyph) {
    if (glyph == null) {
      glyph = this.glyphIterator.cur.id;
    }

    switch (coverage.version) {
      case 1:
        return coverage.glyphs.indexOf(glyph);

      case 2:
        for (var _iterator12 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(coverage.rangeRecords), _step12; !(_step12 = _iterator12()).done;) {
          var range = _step12.value;

          if (range.start <= glyph && glyph <= range.end) {
            return range.startCoverageIndex + glyph - range.start;
          }
        }

        break;
    }

    return -1;
  };

  _proto.match = function match(sequenceIndex, sequence, fn, matched) {
    var pos = this.glyphIterator.index;
    var glyph = this.glyphIterator.increment(sequenceIndex);
    var idx = 0;

    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
      if (matched) {
        matched.push(this.glyphIterator.index);
      }

      idx++;
      glyph = this.glyphIterator.next();
    }

    this.glyphIterator.index = pos;

    if (idx < sequence.length) {
      return false;
    }

    return matched || true;
  };

  _proto.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {
    return this.match(sequenceIndex, sequence, function (component, glyph) {
      return component === glyph.id;
    });
  };

  _proto.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {
    var _this = this;

    return this.match(sequenceIndex, sequence, function (component, glyph) {
      // If the current feature doesn't apply to this glyph,
      if (!(_this.currentFeature in glyph.features)) {
        return false;
      }

      return component === glyph.id;
    }, []);
  };

  _proto.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {
    var _this2 = this;

    return this.match(sequenceIndex, sequence, function (coverage, glyph) {
      return _this2.coverageIndex(coverage, glyph.id) >= 0;
    });
  };

  _proto.getClassID = function getClassID(glyph, classDef) {
    switch (classDef.version) {
      case 1:
        // Class array
        var i = glyph - classDef.startGlyph;

        if (i >= 0 && i < classDef.classValueArray.length) {
          return classDef.classValueArray[i];
        }

        break;

      case 2:
        for (var _iterator13 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(classDef.classRangeRecord), _step13; !(_step13 = _iterator13()).done;) {
          var range = _step13.value;

          if (range.start <= glyph && glyph <= range.end) {
            return range.class;
          }
        }

        break;
    }

    return 0;
  };

  _proto.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {
    var _this3 = this;

    return this.match(sequenceIndex, sequence, function (classID, glyph) {
      return classID === _this3.getClassID(glyph.id, classDef);
    });
  };

  _proto.applyContext = function applyContext(table) {
    var index;

    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);

        if (index === -1) {
          return false;
        }

        var set = table.ruleSets[index];

        for (var _iterator14 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(set), _step14; !(_step14 = _iterator14()).done;) {
          var rule = _step14.value;

          if (this.sequenceMatches(1, rule.input)) {
            return this.applyLookupList(rule.lookupRecords);
          }
        }

        break;

      case 2:
        if (this.coverageIndex(table.coverage) === -1) {
          return false;
        }

        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);

        if (index === -1) {
          return false;
        }

        set = table.classSet[index];

        for (var _iterator15 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(set), _step15; !(_step15 = _iterator15()).done;) {
          var _rule = _step15.value;

          if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {
            return this.applyLookupList(_rule.lookupRecords);
          }
        }

        break;

      case 3:
        if (this.coverageSequenceMatches(0, table.coverages)) {
          return this.applyLookupList(table.lookupRecords);
        }

        break;
    }

    return false;
  };

  _proto.applyChainingContext = function applyChainingContext(table) {
    var index;

    switch (table.version) {
      case 1:
        index = this.coverageIndex(table.coverage);

        if (index === -1) {
          return false;
        }

        var set = table.chainRuleSets[index];

        for (var _iterator16 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(set), _step16; !(_step16 = _iterator16()).done;) {
          var rule = _step16.value;

          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {
            return this.applyLookupList(rule.lookupRecords);
          }
        }

        break;

      case 2:
        if (this.coverageIndex(table.coverage) === -1) {
          return false;
        }

        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
        var rules = table.chainClassSet[index];

        if (!rules) {
          return false;
        }

        for (var _iterator17 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(rules), _step17; !(_step17 = _iterator17()).done;) {
          var _rule2 = _step17.value;

          if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {
            return this.applyLookupList(_rule2.lookupRecords);
          }
        }

        break;

      case 3:
        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {
          return this.applyLookupList(table.lookupRecords);
        }

        break;
    }

    return false;
  };

  return OTProcessor;
}();

var GlyphInfo = /*#__PURE__*/function () {
  function GlyphInfo(font, id, codePoints, features) {
    if (codePoints === void 0) {
      codePoints = [];
    }

    this._font = font;
    this.codePoints = codePoints;
    this.id = id;
    this.features = {};

    if (Array.isArray(features)) {
      for (var i = 0; i < features.length; i++) {
        var feature = features[i];
        this.features[feature] = true;
      }
    } else if (typeof features === 'object') {
      Object.assign(this.features, features);
    }

    this.ligatureID = null;
    this.ligatureComponent = null;
    this.isLigated = false;
    this.cursiveAttachment = null;
    this.markAttachment = null;
    this.shaperInfo = null;
    this.substituted = false;
    this.isMultiplied = false;
  }

  var _proto = GlyphInfo.prototype;

  _proto.copy = function copy() {
    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(GlyphInfo, [{
    key: "id",
    get: function get() {
      return this._id;
    },
    set: function set(id) {
      this._id = id;
      this.substituted = true;
      var GDEF = this._font.GDEF;

      if (GDEF && GDEF.glyphClassDef) {
        // TODO: clean this up
        var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);
        this.isBase = classID === 1;
        this.isLigature = classID === 2;
        this.isMark = classID === 3;
        this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
      } else {
        this.isMark = this.codePoints.length > 0 && this.codePoints.every(_react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].isMark);
        this.isBase = !this.isMark;
        this.isLigature = this.codePoints.length > 1;
        this.markAttachmentType = 0;
      }
    }
  }]);

  return GlyphInfo;
}();

/**
 * This is a shaper for the Hangul script, used by the Korean language.
 * It does the following:
 *   - decompose if unsupported by the font:
 *     <LV>   -> <L,V>
 *     <LVT>  -> <L,V,T>
 *     <LV,T> -> <L,V,T>
 *
 *   - compose if supported by the font:
 *     <L,V>   -> <LV>
 *     <L,V,T> -> <LVT>
 *     <LV,T>  -> <LVT>
 *
 *   - reorder tone marks (S is any valid syllable):
 *     <S, M> -> <M, S>
 *
 *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.
 *
 * This logic is based on the following documents:
 *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm
 *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf
 */

var HangulShaper = /*#__PURE__*/function (_DefaultShaper) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(HangulShaper, _DefaultShaper);

  function HangulShaper() {
    return _DefaultShaper.apply(this, arguments) || this;
  }

  HangulShaper.planFeatures = function planFeatures(plan) {
    plan.add(['ljmo', 'vjmo', 'tjmo'], false);
  };

  HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {
    var state = 0;
    var i = 0;

    while (i < glyphs.length) {
      var action = void 0;
      var glyph = glyphs[i];
      var code = glyph.codePoints[0];
      var type = getType(code);
      var _STATE_TABLE$state$ty = STATE_TABLE[state][type];
      action = _STATE_TABLE$state$ty[0];
      state = _STATE_TABLE$state$ty[1];

      switch (action) {
        case DECOMPOSE:
          // Decompose the composed syllable if it is not supported by the font.
          if (!plan.font.hasGlyphForCodePoint(code)) {
            i = decompose(glyphs, i, plan.font);
          }

          break;

        case COMPOSE:
          // Found a decomposed syllable. Try to compose if supported by the font.
          i = compose(glyphs, i, plan.font);
          break;

        case TONE_MARK:
          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.
          reorderToneMark(glyphs, i, plan.font);
          break;

        case INVALID:
          // Tone mark has no valid syllable to attach to, so insert a dotted circle
          i = insertDottedCircle(glyphs, i, plan.font);
          break;
      }

      i++;
    }
  };

  return HangulShaper;
}(DefaultShaper);

HangulShaper.zeroMarkWidths = 'NONE';
var HANGUL_BASE = 0xac00;
var HANGUL_END = 0xd7a4;
var HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;
var L_BASE = 0x1100; // lead

var V_BASE = 0x1161; // vowel

var T_BASE = 0x11a7; // trail

var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var L_END = L_BASE + L_COUNT - 1;
var V_END = V_BASE + V_COUNT - 1;
var T_END = T_BASE + T_COUNT - 1;
var DOTTED_CIRCLE = 0x25cc;

var isL = function isL(code) {
  return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;
};

var isV = function isV(code) {
  return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;
};

var isT = function isT(code) {
  return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;
};

var isTone = function isTone(code) {
  return 0x302e <= code && code <= 0x302f;
};

var isLVT = function isLVT(code) {
  return HANGUL_BASE <= code && code <= HANGUL_END;
};

var isLV = function isLV(code) {
  return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;
};

var isCombiningL = function isCombiningL(code) {
  return L_BASE <= code && code <= L_END;
};

var isCombiningV = function isCombiningV(code) {
  return V_BASE <= code && code <= V_END;
};

var isCombiningT = function isCombiningT(code) {
  return 1 <= code && code <= T_END;
}; // Character categories


var X = 0; // Other character

var L = 1; // Leading consonant

var V = 2; // Medial vowel

var T = 3; // Trailing consonant

var LV = 4; // Composed <LV> syllable

var LVT = 5; // Composed <LVT> syllable

var M = 6; // Tone mark
// This function classifies a character using the above categories.

function getType(code) {
  if (isL(code)) {
    return L;
  }

  if (isV(code)) {
    return V;
  }

  if (isT(code)) {
    return T;
  }

  if (isLV(code)) {
    return LV;
  }

  if (isLVT(code)) {
    return LVT;
  }

  if (isTone(code)) {
    return M;
  }

  return X;
} // State machine actions


var NO_ACTION = 0;
var DECOMPOSE = 1;
var COMPOSE = 2;
var TONE_MARK = 4;
var INVALID = 5; // Build a state machine that accepts valid syllables, and applies actions along the way.
// The logic this is implementing is documented at the top of the file.

var STATE_TABLE = [//       X                 L                 V                T                  LV                LVT               M
// State 0: start state
[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 1: <L>
[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]], // State 2: <L,V> or <LV>
[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]], // State 3: <L,V,T> or <LVT>
[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];

function getGlyph(font, code, features) {
  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);
}

function decompose(glyphs, i, font) {
  var glyph = glyphs[i];
  var code = glyph.codePoints[0];
  var s = code - HANGUL_BASE;
  var t = T_BASE + s % T_COUNT;
  s = s / T_COUNT | 0;
  var l = L_BASE + s / V_COUNT | 0;
  var v = V_BASE + s % V_COUNT; // Don't decompose if all of the components are not available

  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {
    return i;
  } // Replace the current glyph with decomposed L, V, and T glyphs,
  // and apply the proper OpenType features to each component.


  var ljmo = getGlyph(font, l, glyph.features);
  ljmo.features.ljmo = true;
  var vjmo = getGlyph(font, v, glyph.features);
  vjmo.features.vjmo = true;
  var insert = [ljmo, vjmo];

  if (t > T_BASE) {
    var tjmo = getGlyph(font, t, glyph.features);
    tjmo.features.tjmo = true;
    insert.push(tjmo);
  }

  glyphs.splice.apply(glyphs, [i, 1].concat(insert));
  return i + insert.length - 1;
}

function compose(glyphs, i, font) {
  var glyph = glyphs[i];
  var code = glyphs[i].codePoints[0];
  var type = getType(code);
  var prev = glyphs[i - 1].codePoints[0];
  var prevType = getType(prev); // Figure out what type of syllable we're dealing with

  var lv, ljmo, vjmo, tjmo;

  if (prevType === LV && type === T) {
    // <LV,T>
    lv = prev;
    tjmo = glyph;
  } else {
    if (type === V) {
      // <L,V>
      ljmo = glyphs[i - 1];
      vjmo = glyph;
    } else {
      // <L,V,T>
      ljmo = glyphs[i - 2];
      vjmo = glyphs[i - 1];
      tjmo = glyph;
    }

    var l = ljmo.codePoints[0];
    var v = vjmo.codePoints[0]; // Make sure L and V are combining characters

    if (isCombiningL(l) && isCombiningV(v)) {
      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;
    }
  }

  var t = tjmo && tjmo.codePoints[0] || T_BASE;

  if (lv != null && (t === T_BASE || isCombiningT(t))) {
    var s = lv + (t - T_BASE); // Replace with a composed glyph if supported by the font,
    // otherwise apply the proper OpenType features to each component.

    if (font.hasGlyphForCodePoint(s)) {
      var del = prevType === V ? 3 : 2;
      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));
      return i - del + 1;
    }
  } // Didn't compose (either a non-combining component or unsupported by font).


  if (ljmo) {
    ljmo.features.ljmo = true;
  }

  if (vjmo) {
    vjmo.features.vjmo = true;
  }

  if (tjmo) {
    tjmo.features.tjmo = true;
  }

  if (prevType === LV) {
    // Sequence was originally <L,V>, which got combined earlier.
    // Either the T was non-combining, or the LVT glyph wasn't supported.
    // Decompose the glyph again and apply OT features.
    decompose(glyphs, i - 1, font);
    return i + 1;
  }

  return i;
}

function getLength(code) {
  switch (getType(code)) {
    case LV:
    case LVT:
      return 1;

    case V:
      return 2;

    case T:
      return 3;
  }
}

function reorderToneMark(glyphs, i, font) {
  var glyph = glyphs[i];
  var code = glyphs[i].codePoints[0]; // Move tone mark to the beginning of the previous syllable, unless it is zero width

  if (font.glyphForCodePoint(code).advanceWidth === 0) {
    return;
  }

  var prev = glyphs[i - 1].codePoints[0];
  var len = getLength(prev);
  glyphs.splice(i, 1);
  return glyphs.splice(i - len, 0, glyph);
}

function insertDottedCircle(glyphs, i, font) {
  var glyph = glyphs[i];
  var code = glyphs[i].codePoints[0];

  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {
    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features); // If the tone mark is zero width, insert the dotted circle before, otherwise after

    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
    glyphs.splice(idx, 0, dottedCircle);
    i++;
  }

  return i;
}

var INITIAL_STATE = 1;
var FAIL_STATE = 0;
/**
 * A StateMachine represents a deterministic finite automaton.
 * It can perform matches over a sequence of values, similar to a regular expression.
 */

var StateMachine = /*#__PURE__*/function () {
  function StateMachine(dfa) {
    this.stateTable = dfa.stateTable;
    this.accepting = dfa.accepting;
    this.tags = dfa.tags;
  }
  /**
   * Returns an iterable object that yields pattern matches over the input sequence.
   * Matches are of the form [startIndex, endIndex, tags].
   */


  var _proto = StateMachine.prototype;

  _proto.match = function match(str) {
    var _ref;

    var self = this;
    return _ref = {}, _ref[Symbol.iterator] = /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {
      var state, startRun, lastAccepting, lastState, p, c;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              state = INITIAL_STATE;
              startRun = null;
              lastAccepting = null;
              lastState = null;
              p = 0;

            case 5:
              if (!(p < str.length)) {
                _context.next = 21;
                break;
              }

              c = str[p];
              lastState = state;
              state = self.stateTable[state][c];

              if (!(state === FAIL_STATE)) {
                _context.next = 15;
                break;
              }

              if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                _context.next = 13;
                break;
              }

              _context.next = 13;
              return [startRun, lastAccepting, self.tags[lastState]];

            case 13:
              // reset the state as if we started over from the initial state
              state = self.stateTable[INITIAL_STATE][c];
              startRun = null;

            case 15:
              // start a run if not in the failure state
              if (state !== FAIL_STATE && startRun == null) {
                startRun = p;
              } // if accepting, mark the potential match end


              if (self.accepting[state]) {
                lastAccepting = p;
              } // reset the state to the initial state if we get into the failure state


              if (state === FAIL_STATE) {
                state = INITIAL_STATE;
              }

            case 18:
              p++;
              _context.next = 5;
              break;

            case 21:
              if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                _context.next = 24;
                break;
              }

              _context.next = 24;
              return [startRun, lastAccepting, self.tags[state]];

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }), _ref;
  }
  /**
   * For each match over the input sequence, action functions matching
   * the tag definitions in the input pattern are called with the startIndex,
   * endIndex, and sub-match sequence.
   */
  ;

  _proto.apply = function apply(str, actions) {
    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.match(str)), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          start = _step$value[0],
          end = _step$value[1],
          tags = _step$value[2];

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(tags), _step2; !(_step2 = _iterator2()).done;) {
        var tag = _step2.value;

        if (typeof actions[tag] === 'function') {
          actions[tag](start, end, str.slice(start, end + 1));
        }
      }
    }
  };

  return StateMachine;
}();

var dfa = StateMachine;

var stateTable$1 = [
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		2,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
		0,
		10,
		11,
		11,
		12,
		13,
		14,
		15,
		16,
		17
	],
	[
		0,
		0,
		0,
		18,
		19,
		20,
		21,
		22,
		23,
		0,
		24,
		0,
		0,
		25,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		28,
		29,
		30,
		31,
		32,
		33,
		0,
		34,
		0,
		0,
		35,
		36,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		38,
		5,
		7,
		7,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		13,
		0,
		0,
		16,
		0
	],
	[
		0,
		39,
		0,
		0,
		0,
		40,
		41,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		39,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		43,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		12,
		43,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		43,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		43,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		45,
		46,
		47,
		48,
		49,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		50,
		0,
		0,
		51,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		52,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		53,
		54,
		55,
		56,
		57,
		58,
		0,
		59,
		0,
		0,
		60,
		61,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		4,
		5,
		7,
		7,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		13,
		0,
		0,
		16,
		0
	],
	[
		0,
		63,
		64,
		0,
		0,
		40,
		41,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		63,
		0,
		0
	],
	[
		0,
		2,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
		0,
		10,
		11,
		11,
		12,
		13,
		0,
		2,
		16,
		0
	],
	[
		0,
		0,
		0,
		18,
		65,
		20,
		21,
		22,
		23,
		0,
		24,
		0,
		0,
		25,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		69,
		0,
		70,
		70,
		0,
		71,
		0,
		72,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		73,
		19,
		74,
		74,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		75,
		0,
		0,
		0,
		76,
		77,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		75,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		79,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		25,
		79,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		18,
		19,
		20,
		74,
		22,
		23,
		0,
		24,
		0,
		0,
		25,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		81,
		82,
		83,
		84,
		85,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		86,
		0,
		0,
		87,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		88,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		18,
		19,
		74,
		74,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		89,
		90,
		0,
		0,
		76,
		77,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		89,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		94,
		29,
		95,
		31,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		36,
		0,
		0,
		37,
		0
	],
	[
		0,
		96,
		0,
		0,
		0,
		97,
		98,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		96,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		100,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		35,
		100,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		100,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		100,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		102,
		103,
		104,
		105,
		106,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		107,
		0,
		0,
		108,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		109,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		28,
		29,
		95,
		31,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		36,
		0,
		0,
		37,
		0
	],
	[
		0,
		110,
		111,
		0,
		0,
		97,
		98,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		110,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		5,
		7,
		7,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		13,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		115,
		116,
		117,
		118,
		8,
		9,
		0,
		10,
		0,
		0,
		119,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		39,
		0,
		122,
		0,
		123,
		123,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		39,
		0,
		0
	],
	[
		0,
		124,
		64,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		124,
		0,
		0
	],
	[
		0,
		39,
		0,
		0,
		0,
		121,
		125,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		39,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		126,
		126,
		8,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		46,
		47,
		48,
		49,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		47,
		47,
		49,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		127,
		127,
		49,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		128,
		127,
		127,
		49,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		129,
		130,
		131,
		132,
		133,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		50,
		0,
		0,
		0,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		134,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		135,
		54,
		56,
		56,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		61,
		0,
		0,
		62,
		0
	],
	[
		0,
		136,
		0,
		0,
		0,
		137,
		138,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		136,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		140,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		60,
		140,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		140,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		140,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		142,
		143,
		144,
		145,
		146,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		147,
		0,
		0,
		148,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		149,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		53,
		54,
		56,
		56,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		61,
		0,
		0,
		62,
		0
	],
	[
		0,
		150,
		151,
		0,
		0,
		137,
		138,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		150,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		155,
		116,
		156,
		157,
		8,
		9,
		0,
		10,
		0,
		0,
		158,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		75,
		3,
		4,
		5,
		159,
		160,
		8,
		161,
		0,
		162,
		0,
		11,
		12,
		163,
		0,
		75,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		40,
		164,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		165,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		165,
		0,
		0,
		0,
		0
	],
	[
		0,
		124,
		64,
		0,
		0,
		40,
		164,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		124,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		70,
		70,
		0,
		71,
		0,
		72,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		71,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		166,
		0,
		0,
		167,
		0,
		72,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		168,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		19,
		74,
		74,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		26,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		79,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		79,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		169,
		170,
		171,
		172,
		22,
		23,
		0,
		24,
		0,
		0,
		173,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		75,
		0,
		176,
		0,
		177,
		177,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		75,
		0,
		0
	],
	[
		0,
		178,
		90,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		178,
		0,
		0
	],
	[
		0,
		75,
		0,
		0,
		0,
		175,
		179,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		75,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		180,
		180,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		82,
		83,
		84,
		85,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		83,
		83,
		85,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		181,
		181,
		85,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		182,
		181,
		181,
		85,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		183,
		184,
		185,
		186,
		187,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		86,
		0,
		0,
		0,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		188,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		189,
		170,
		190,
		191,
		22,
		23,
		0,
		24,
		0,
		0,
		192,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		76,
		193,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		194,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		194,
		0,
		0,
		0,
		0
	],
	[
		0,
		178,
		90,
		0,
		0,
		76,
		193,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		178,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		29,
		95,
		31,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		36,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		100,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		100,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		195,
		196,
		197,
		198,
		32,
		33,
		0,
		34,
		0,
		0,
		199,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		96,
		0,
		202,
		0,
		203,
		203,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		96,
		0,
		0
	],
	[
		0,
		204,
		111,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		204,
		0,
		0
	],
	[
		0,
		96,
		0,
		0,
		0,
		201,
		205,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		96,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		206,
		206,
		32,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		103,
		104,
		105,
		106,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		104,
		104,
		106,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		207,
		207,
		106,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		208,
		207,
		207,
		106,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		209,
		210,
		211,
		212,
		213,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		107,
		0,
		0,
		0,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		214,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		215,
		196,
		216,
		217,
		32,
		33,
		0,
		34,
		0,
		0,
		218,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		97,
		219,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		220,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		220,
		0,
		0,
		0,
		0
	],
	[
		0,
		204,
		111,
		0,
		0,
		97,
		219,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		204,
		0,
		0
	],
	[
		0,
		0,
		0,
		221,
		116,
		222,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		223,
		0,
		0,
		0,
		40,
		224,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		223,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		119,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		115,
		116,
		117,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		119,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		115,
		116,
		222,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		226,
		64,
		0,
		0,
		40,
		224,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		226,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		39,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		39,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		227,
		0,
		228,
		229,
		0,
		9,
		0,
		10,
		0,
		0,
		230,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		39,
		0,
		122,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		39,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		8,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		231,
		231,
		49,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		232,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		130,
		131,
		132,
		133,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		131,
		131,
		133,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		233,
		233,
		133,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		234,
		233,
		233,
		133,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		235,
		236,
		237,
		238,
		239,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		54,
		56,
		56,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		61,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		240,
		241,
		242,
		243,
		57,
		58,
		0,
		59,
		0,
		0,
		244,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		136,
		0,
		247,
		0,
		248,
		248,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		136,
		0,
		0
	],
	[
		0,
		249,
		151,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		249,
		0,
		0
	],
	[
		0,
		136,
		0,
		0,
		0,
		246,
		250,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		136,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		251,
		251,
		57,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		143,
		144,
		145,
		146,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		144,
		144,
		146,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		252,
		252,
		146,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		253,
		252,
		252,
		146,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		254,
		255,
		256,
		257,
		258,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		147,
		0,
		0,
		0,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		259,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		260,
		241,
		261,
		262,
		57,
		58,
		0,
		59,
		0,
		0,
		263,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		137,
		264,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		265,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		265,
		0,
		0,
		0,
		0
	],
	[
		0,
		249,
		151,
		0,
		0,
		137,
		264,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		249,
		0,
		0
	],
	[
		0,
		0,
		0,
		221,
		116,
		222,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		158,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		155,
		116,
		156,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		158,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		155,
		116,
		222,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		43,
		266,
		266,
		8,
		161,
		0,
		24,
		0,
		0,
		12,
		267,
		0,
		0,
		0,
		0
	],
	[
		0,
		75,
		0,
		176,
		43,
		268,
		268,
		269,
		161,
		0,
		24,
		0,
		0,
		0,
		267,
		0,
		75,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		270,
		0,
		0,
		271,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		272,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		273,
		274,
		0,
		0,
		40,
		41,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		273,
		0,
		0
	],
	[
		0,
		0,
		0,
		40,
		0,
		123,
		123,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		121,
		275,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		72,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		166,
		0,
		0,
		0,
		0,
		72,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		276,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		277,
		170,
		278,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		279,
		0,
		0,
		0,
		76,
		280,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		279,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		281,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		173,
		281,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		169,
		170,
		171,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		173,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		169,
		170,
		278,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		282,
		90,
		0,
		0,
		76,
		280,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		282,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		75,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		75,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		283,
		0,
		284,
		285,
		0,
		23,
		0,
		24,
		0,
		0,
		286,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		75,
		0,
		176,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		75,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		287,
		287,
		85,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		288,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		184,
		185,
		186,
		187,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		185,
		185,
		187,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		289,
		289,
		187,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		290,
		289,
		289,
		187,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		291,
		292,
		293,
		294,
		295,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		277,
		170,
		278,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		281,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		192,
		281,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		189,
		170,
		190,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		192,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		189,
		170,
		278,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		76,
		0,
		177,
		177,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		175,
		296,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		297,
		196,
		298,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		299,
		0,
		0,
		0,
		97,
		300,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		299,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		301,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		199,
		301,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		195,
		196,
		197,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		199,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		195,
		196,
		298,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		302,
		111,
		0,
		0,
		97,
		300,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		302,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		96,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		96,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		303,
		0,
		304,
		305,
		0,
		33,
		0,
		34,
		0,
		0,
		306,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		96,
		0,
		202,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		96,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		32,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		307,
		307,
		106,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		308,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		210,
		211,
		212,
		213,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		211,
		211,
		213,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		309,
		309,
		213,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		310,
		309,
		309,
		213,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		311,
		312,
		313,
		314,
		315,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		297,
		196,
		298,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		301,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		218,
		301,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		215,
		196,
		216,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		218,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		215,
		196,
		298,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		97,
		0,
		203,
		203,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		201,
		316,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		116,
		222,
		222,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		317,
		318,
		319,
		320,
		8,
		9,
		0,
		10,
		0,
		0,
		321,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		223,
		0,
		323,
		0,
		123,
		123,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		223,
		0,
		0
	],
	[
		0,
		223,
		0,
		0,
		0,
		121,
		324,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		223,
		0,
		0
	],
	[
		0,
		0,
		0,
		325,
		318,
		326,
		327,
		8,
		9,
		0,
		10,
		0,
		0,
		328,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		64,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		9,
		0,
		0,
		0,
		0,
		230,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		227,
		0,
		228,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		230,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		227,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		49,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		46,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		329,
		329,
		133,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		330,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		236,
		237,
		238,
		239,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		237,
		237,
		239,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		331,
		331,
		239,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		332,
		331,
		331,
		239,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		333,
		40,
		121,
		334,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		335,
		241,
		336,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		337,
		0,
		0,
		0,
		137,
		338,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		337,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		339,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		244,
		339,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		240,
		241,
		242,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		244,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		240,
		241,
		336,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		340,
		151,
		0,
		0,
		137,
		338,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		340,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		136,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		136,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		341,
		0,
		342,
		343,
		0,
		58,
		0,
		59,
		0,
		0,
		344,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		136,
		0,
		247,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		136,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		57,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		345,
		345,
		146,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		346,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		255,
		256,
		257,
		258,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		256,
		256,
		258,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		347,
		347,
		258,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		348,
		347,
		347,
		258,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		349,
		350,
		351,
		352,
		353,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		335,
		241,
		336,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		339,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		263,
		339,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		260,
		241,
		261,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		263,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		260,
		241,
		336,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		137,
		0,
		248,
		248,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		246,
		354,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		126,
		126,
		8,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		355,
		90,
		0,
		0,
		121,
		125,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		355,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		356,
		356,
		269,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		357,
		358,
		359,
		360,
		361,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		270,
		0,
		0,
		0,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		363,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		364,
		116,
		365,
		366,
		8,
		161,
		0,
		162,
		0,
		0,
		367,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		368,
		368,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		40,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		170,
		278,
		278,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		174,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		281,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		281,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		369,
		370,
		371,
		372,
		22,
		23,
		0,
		24,
		0,
		0,
		373,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		279,
		0,
		375,
		0,
		177,
		177,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		279,
		0,
		0
	],
	[
		0,
		279,
		0,
		0,
		0,
		175,
		376,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		279,
		0,
		0
	],
	[
		0,
		0,
		0,
		377,
		370,
		378,
		379,
		22,
		23,
		0,
		24,
		0,
		0,
		380,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		90,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		286,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		283,
		0,
		284,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		286,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		283,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		85,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		82,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		381,
		381,
		187,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		382,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		292,
		293,
		294,
		295,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		293,
		293,
		295,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		383,
		383,
		295,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		384,
		383,
		383,
		295,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		385,
		76,
		175,
		386,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		76,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		196,
		298,
		298,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		200,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		301,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		301,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		387,
		388,
		389,
		390,
		32,
		33,
		0,
		34,
		0,
		0,
		391,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		299,
		0,
		393,
		0,
		203,
		203,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		299,
		0,
		0
	],
	[
		0,
		299,
		0,
		0,
		0,
		201,
		394,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		299,
		0,
		0
	],
	[
		0,
		0,
		0,
		395,
		388,
		396,
		397,
		32,
		33,
		0,
		34,
		0,
		0,
		398,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		111,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		33,
		0,
		0,
		0,
		0,
		306,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		303,
		0,
		304,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		306,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		303,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		106,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		103,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		399,
		399,
		213,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		400,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		312,
		313,
		314,
		315,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		313,
		313,
		315,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		401,
		401,
		315,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		402,
		401,
		401,
		315,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		403,
		97,
		201,
		404,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		97,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		405,
		318,
		406,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		407,
		0,
		0,
		0,
		40,
		408,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		407,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		409,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		321,
		409,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		317,
		318,
		319,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		321,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		317,
		318,
		406,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		410,
		64,
		0,
		0,
		40,
		408,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		410,
		0,
		0
	],
	[
		0,
		223,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		223,
		0,
		0
	],
	[
		0,
		223,
		0,
		323,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		223,
		0,
		0
	],
	[
		0,
		0,
		0,
		405,
		318,
		406,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		409,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		328,
		409,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		325,
		318,
		326,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		328,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		325,
		318,
		406,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		133,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		130,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		411,
		411,
		239,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		412,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		40,
		121,
		334,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		413,
		0,
		0,
		0,
		9,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		241,
		336,
		336,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		245,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		339,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		339,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		414,
		415,
		416,
		417,
		57,
		58,
		0,
		59,
		0,
		0,
		418,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		337,
		0,
		420,
		0,
		248,
		248,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		337,
		0,
		0
	],
	[
		0,
		337,
		0,
		0,
		0,
		246,
		421,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		337,
		0,
		0
	],
	[
		0,
		0,
		0,
		422,
		415,
		423,
		424,
		57,
		58,
		0,
		59,
		0,
		0,
		425,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		151,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		58,
		0,
		0,
		0,
		0,
		344,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		341,
		0,
		342,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		344,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		341,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		146,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		143,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		426,
		426,
		258,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		427,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		350,
		351,
		352,
		353,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		351,
		351,
		353,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		428,
		428,
		353,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		429,
		428,
		428,
		353,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		430,
		137,
		246,
		431,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		137,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		432,
		116,
		433,
		434,
		8,
		161,
		0,
		162,
		0,
		0,
		435,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		180,
		180,
		269,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		358,
		359,
		360,
		361,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		359,
		359,
		361,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		436,
		436,
		361,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		437,
		436,
		436,
		361,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		438,
		439,
		440,
		441,
		442,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		443,
		274,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		443,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		444,
		116,
		445,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		161,
		0,
		0,
		0,
		0,
		367,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		364,
		116,
		365,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		367,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		364,
		116,
		445,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		446,
		370,
		447,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		448,
		0,
		0,
		0,
		76,
		449,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		448,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		450,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		373,
		450,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		369,
		370,
		371,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		373,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		369,
		370,
		447,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		451,
		90,
		0,
		0,
		76,
		449,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		451,
		0,
		0
	],
	[
		0,
		279,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		279,
		0,
		0
	],
	[
		0,
		279,
		0,
		375,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		279,
		0,
		0
	],
	[
		0,
		0,
		0,
		446,
		370,
		447,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		450,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		380,
		450,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		377,
		370,
		378,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		380,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		377,
		370,
		447,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		187,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		184,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		452,
		452,
		295,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		453,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		76,
		175,
		386,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		454,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		455,
		388,
		456,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		457,
		0,
		0,
		0,
		97,
		458,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		457,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		459,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		391,
		459,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		387,
		388,
		389,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		391,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		387,
		388,
		456,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		460,
		111,
		0,
		0,
		97,
		458,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		460,
		0,
		0
	],
	[
		0,
		299,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		299,
		0,
		0
	],
	[
		0,
		299,
		0,
		393,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		299,
		0,
		0
	],
	[
		0,
		0,
		0,
		455,
		388,
		456,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		459,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		398,
		459,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		395,
		388,
		396,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		398,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		395,
		388,
		456,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		213,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		210,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		461,
		461,
		315,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		462,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		97,
		201,
		404,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		463,
		0,
		0,
		0,
		33,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		318,
		406,
		406,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		322,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		409,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		409,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		464,
		465,
		466,
		467,
		8,
		9,
		0,
		10,
		0,
		0,
		468,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		407,
		0,
		470,
		0,
		123,
		123,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		407,
		0,
		0
	],
	[
		0,
		407,
		0,
		0,
		0,
		121,
		471,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		407,
		0,
		0
	],
	[
		0,
		0,
		0,
		472,
		465,
		473,
		474,
		8,
		9,
		0,
		10,
		0,
		0,
		475,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		239,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		236,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		476,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		477,
		415,
		478,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		479,
		0,
		0,
		0,
		137,
		480,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		479,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		481,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		418,
		481,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		414,
		415,
		416,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		418,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		414,
		415,
		478,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		482,
		151,
		0,
		0,
		137,
		480,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		482,
		0,
		0
	],
	[
		0,
		337,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		337,
		0,
		0
	],
	[
		0,
		337,
		0,
		420,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		337,
		0,
		0
	],
	[
		0,
		0,
		0,
		477,
		415,
		478,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		481,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		425,
		481,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		422,
		415,
		423,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		425,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		422,
		415,
		478,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		258,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		255,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		483,
		483,
		353,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		484,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		137,
		246,
		431,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		485,
		0,
		0,
		0,
		58,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		444,
		116,
		445,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		161,
		0,
		0,
		0,
		0,
		435,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		432,
		116,
		433,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		435,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		432,
		116,
		445,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		486,
		486,
		361,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		487,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		439,
		440,
		441,
		442,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		440,
		440,
		442,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		488,
		488,
		442,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		489,
		488,
		488,
		442,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		490,
		491,
		492,
		493,
		494,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		495,
		0,
		496,
		497,
		0,
		161,
		0,
		162,
		0,
		0,
		498,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		116,
		445,
		445,
		8,
		161,
		0,
		162,
		0,
		0,
		0,
		120,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		225,
		44,
		44,
		8,
		161,
		0,
		0,
		0,
		0,
		0,
		225,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		370,
		447,
		447,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		374,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		450,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		450,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		499,
		500,
		501,
		502,
		22,
		23,
		0,
		24,
		0,
		0,
		503,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		448,
		0,
		505,
		0,
		177,
		177,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		448,
		0,
		0
	],
	[
		0,
		448,
		0,
		0,
		0,
		175,
		506,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		448,
		0,
		0
	],
	[
		0,
		0,
		0,
		507,
		500,
		508,
		509,
		22,
		23,
		0,
		24,
		0,
		0,
		510,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		295,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		292,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		511,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		388,
		456,
		456,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		392,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		459,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		459,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		512,
		513,
		514,
		515,
		32,
		33,
		0,
		34,
		0,
		0,
		516,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		457,
		0,
		518,
		0,
		203,
		203,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		457,
		0,
		0
	],
	[
		0,
		457,
		0,
		0,
		0,
		201,
		519,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		457,
		0,
		0
	],
	[
		0,
		0,
		0,
		520,
		513,
		521,
		522,
		32,
		33,
		0,
		34,
		0,
		0,
		523,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		315,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		312,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		524,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		525,
		465,
		526,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		527,
		0,
		0,
		0,
		40,
		528,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		527,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		529,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		468,
		529,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		464,
		465,
		466,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		468,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		464,
		465,
		526,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		530,
		64,
		0,
		0,
		40,
		528,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		530,
		0,
		0
	],
	[
		0,
		407,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		407,
		0,
		0
	],
	[
		0,
		407,
		0,
		470,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		407,
		0,
		0
	],
	[
		0,
		0,
		0,
		525,
		465,
		526,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		529,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		475,
		529,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		472,
		465,
		473,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		475,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		472,
		465,
		526,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		40,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		415,
		478,
		478,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		419,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		481,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		481,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		531,
		532,
		533,
		534,
		57,
		58,
		0,
		59,
		0,
		0,
		535,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		479,
		0,
		537,
		0,
		248,
		248,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		479,
		0,
		0
	],
	[
		0,
		479,
		0,
		0,
		0,
		246,
		538,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		479,
		0,
		0
	],
	[
		0,
		0,
		0,
		539,
		532,
		540,
		541,
		57,
		58,
		0,
		59,
		0,
		0,
		542,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		353,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		350,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		543,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		361,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		358,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		544,
		544,
		442,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		545,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		491,
		492,
		493,
		494,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		492,
		492,
		494,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		546,
		546,
		494,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		547,
		546,
		546,
		494,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		548,
		549,
		368,
		550,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		274,
		0,
		368,
		368,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		161,
		0,
		0,
		0,
		0,
		498,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		495,
		0,
		496,
		368,
		0,
		161,
		0,
		162,
		0,
		0,
		498,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		495,
		0,
		368,
		368,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		551,
		500,
		552,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		553,
		0,
		0,
		0,
		76,
		554,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		553,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		555,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		503,
		555,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		499,
		500,
		501,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		503,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		499,
		500,
		552,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		556,
		90,
		0,
		0,
		76,
		554,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		556,
		0,
		0
	],
	[
		0,
		448,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		448,
		0,
		0
	],
	[
		0,
		448,
		0,
		505,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		448,
		0,
		0
	],
	[
		0,
		0,
		0,
		551,
		500,
		552,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		555,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		510,
		555,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		507,
		500,
		508,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		510,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		507,
		500,
		552,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		76,
		0,
		0
	],
	[
		0,
		0,
		0,
		557,
		513,
		558,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		559,
		0,
		0,
		0,
		97,
		560,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		559,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		561,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		516,
		561,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		512,
		513,
		514,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		516,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		512,
		513,
		558,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		562,
		111,
		0,
		0,
		97,
		560,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		562,
		0,
		0
	],
	[
		0,
		457,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		457,
		0,
		0
	],
	[
		0,
		457,
		0,
		518,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		457,
		0,
		0
	],
	[
		0,
		0,
		0,
		557,
		513,
		558,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		561,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		523,
		561,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		520,
		513,
		521,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		523,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		520,
		513,
		558,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		97,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		465,
		526,
		526,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		469,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		529,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		0,
		529,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		563,
		66,
		564,
		565,
		8,
		9,
		0,
		10,
		0,
		0,
		566,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		527,
		0,
		567,
		0,
		123,
		123,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		527,
		0,
		0
	],
	[
		0,
		527,
		0,
		0,
		0,
		121,
		568,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		527,
		0,
		0
	],
	[
		0,
		0,
		0,
		569,
		66,
		570,
		571,
		8,
		9,
		0,
		10,
		0,
		0,
		572,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		573,
		532,
		574,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		575,
		0,
		0,
		0,
		137,
		576,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		575,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		577,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		535,
		577,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		531,
		532,
		533,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		535,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		531,
		532,
		574,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		578,
		151,
		0,
		0,
		137,
		576,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		578,
		0,
		0
	],
	[
		0,
		479,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		479,
		0,
		0
	],
	[
		0,
		479,
		0,
		537,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		479,
		0,
		0
	],
	[
		0,
		0,
		0,
		573,
		532,
		574,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		577,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		542,
		577,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		539,
		532,
		540,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		542,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		539,
		532,
		574,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		137,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		442,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		439,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		579,
		579,
		494,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		580,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		549,
		368,
		550,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		368,
		368,
		0,
		161,
		0,
		162,
		0,
		0,
		0,
		362,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		581,
		0,
		0,
		0,
		161,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		500,
		552,
		552,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		504,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		555,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		0,
		555,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		582,
		91,
		583,
		584,
		22,
		23,
		0,
		24,
		0,
		0,
		585,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		553,
		0,
		586,
		0,
		177,
		177,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		553,
		0,
		0
	],
	[
		0,
		553,
		0,
		0,
		0,
		175,
		587,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		553,
		0,
		0
	],
	[
		0,
		0,
		0,
		588,
		91,
		589,
		590,
		22,
		23,
		0,
		24,
		0,
		0,
		591,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		513,
		558,
		558,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		517,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		561,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		0,
		561,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		592,
		112,
		593,
		594,
		32,
		33,
		0,
		34,
		0,
		0,
		595,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		559,
		0,
		596,
		0,
		203,
		203,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		559,
		0,
		0
	],
	[
		0,
		559,
		0,
		0,
		0,
		201,
		597,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		559,
		0,
		0
	],
	[
		0,
		0,
		0,
		598,
		112,
		599,
		600,
		32,
		33,
		0,
		34,
		0,
		0,
		601,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		602,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		165,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		566,
		165,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		563,
		66,
		564,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		566,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		563,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		527,
		0,
		0,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		527,
		0,
		0
	],
	[
		0,
		527,
		0,
		567,
		0,
		121,
		121,
		0,
		9,
		0,
		10,
		0,
		0,
		0,
		42,
		0,
		527,
		0,
		0
	],
	[
		0,
		0,
		0,
		602,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		165,
		44,
		44,
		8,
		9,
		0,
		0,
		0,
		0,
		572,
		165,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		569,
		66,
		570,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		572,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		569,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		0,
		532,
		574,
		574,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		536,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		577,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		0,
		577,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		603,
		152,
		604,
		605,
		57,
		58,
		0,
		59,
		0,
		0,
		606,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		575,
		0,
		607,
		0,
		248,
		248,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		575,
		0,
		0
	],
	[
		0,
		575,
		0,
		0,
		0,
		246,
		608,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		575,
		0,
		0
	],
	[
		0,
		0,
		0,
		609,
		152,
		610,
		611,
		57,
		58,
		0,
		59,
		0,
		0,
		612,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		494,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		491,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		613,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		614,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		194,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		585,
		194,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		582,
		91,
		583,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		585,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		582,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		553,
		0,
		0,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		553,
		0,
		0
	],
	[
		0,
		553,
		0,
		586,
		0,
		175,
		175,
		0,
		23,
		0,
		24,
		0,
		0,
		0,
		78,
		0,
		553,
		0,
		0
	],
	[
		0,
		0,
		0,
		614,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		194,
		80,
		80,
		22,
		23,
		0,
		0,
		0,
		0,
		591,
		194,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		588,
		91,
		589,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		591,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		588,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		615,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		220,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		595,
		220,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		592,
		112,
		593,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		595,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		592,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		559,
		0,
		0,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		559,
		0,
		0
	],
	[
		0,
		559,
		0,
		596,
		0,
		201,
		201,
		0,
		33,
		0,
		34,
		0,
		0,
		0,
		99,
		0,
		559,
		0,
		0
	],
	[
		0,
		0,
		0,
		615,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		220,
		101,
		101,
		32,
		33,
		0,
		0,
		0,
		0,
		601,
		220,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		598,
		112,
		599,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		601,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		598,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		66,
		67,
		67,
		8,
		9,
		0,
		10,
		0,
		0,
		0,
		68,
		0,
		0,
		16,
		0
	],
	[
		0,
		0,
		0,
		616,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		265,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		606,
		265,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		603,
		152,
		604,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		606,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		603,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		575,
		0,
		0,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		575,
		0,
		0
	],
	[
		0,
		575,
		0,
		607,
		0,
		246,
		246,
		0,
		58,
		0,
		59,
		0,
		0,
		0,
		139,
		0,
		575,
		0,
		0
	],
	[
		0,
		0,
		0,
		616,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		265,
		141,
		141,
		57,
		58,
		0,
		0,
		0,
		0,
		612,
		265,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		609,
		152,
		610,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		612,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		609,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		62,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		549,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		91,
		92,
		92,
		22,
		23,
		0,
		24,
		0,
		0,
		0,
		93,
		0,
		0,
		27,
		0
	],
	[
		0,
		0,
		0,
		0,
		112,
		113,
		113,
		32,
		33,
		0,
		34,
		0,
		0,
		0,
		114,
		0,
		0,
		37,
		0
	],
	[
		0,
		0,
		0,
		0,
		152,
		153,
		153,
		57,
		58,
		0,
		59,
		0,
		0,
		0,
		154,
		0,
		0,
		62,
		0
	]
];
var accepting$1 = [
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	true,
	false,
	true,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	false,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	false,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	false,
	false,
	false,
	false,
	true,
	true,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	false,
	false,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	false,
	true,
	true,
	true
];
var tags$1 = [
	[
	],
	[
		"broken_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"symbol_cluster"
	],
	[
	],
	[
		"symbol_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
		"consonant_syllable",
		"broken_cluster"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
	],
	[
		"vowel_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"broken_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"standalone_cluster"
	],
	[
		"standalone_cluster"
	],
	[
	],
	[
		"consonant_syllable"
	],
	[
		"vowel_syllable"
	],
	[
		"standalone_cluster"
	]
];
var indicMachine = {
	stateTable: stateTable$1,
	accepting: accepting$1,
	tags: tags$1
};

var categories$1 = [
	"O",
	"IND",
	"S",
	"GB",
	"B",
	"FM",
	"CGJ",
	"VMAbv",
	"VMPst",
	"VAbv",
	"VPst",
	"CMBlw",
	"VPre",
	"VBlw",
	"H",
	"VMBlw",
	"CMAbv",
	"MBlw",
	"CS",
	"R",
	"SUB",
	"MPst",
	"MPre",
	"FAbv",
	"FPst",
	"FBlw",
	"null",
	"SMAbv",
	"SMBlw",
	"VMPre",
	"ZWNJ",
	"ZWJ",
	"WJ",
	"M",
	"VS",
	"N",
	"HN",
	"MAbv"
];
var decompositions$2 = {
	"2507": [
		2503,
		2494
	],
	"2508": [
		2503,
		2519
	],
	"2888": [
		2887,
		2902
	],
	"2891": [
		2887,
		2878
	],
	"2892": [
		2887,
		2903
	],
	"3018": [
		3014,
		3006
	],
	"3019": [
		3015,
		3006
	],
	"3020": [
		3014,
		3031
	],
	"3144": [
		3142,
		3158
	],
	"3264": [
		3263,
		3285
	],
	"3271": [
		3270,
		3285
	],
	"3272": [
		3270,
		3286
	],
	"3274": [
		3270,
		3266
	],
	"3275": [
		3270,
		3266,
		3285
	],
	"3402": [
		3398,
		3390
	],
	"3403": [
		3399,
		3390
	],
	"3404": [
		3398,
		3415
	],
	"3546": [
		3545,
		3530
	],
	"3548": [
		3545,
		3535
	],
	"3549": [
		3545,
		3535,
		3530
	],
	"3550": [
		3545,
		3551
	],
	"3635": [
		3661,
		3634
	],
	"3763": [
		3789,
		3762
	],
	"3955": [
		3953,
		3954
	],
	"3957": [
		3953,
		3956
	],
	"3958": [
		4018,
		3968
	],
	"3959": [
		4018,
		3953,
		3968
	],
	"3960": [
		4019,
		3968
	],
	"3961": [
		4019,
		3953,
		3968
	],
	"3969": [
		3953,
		3968
	],
	"6971": [
		6970,
		6965
	],
	"6973": [
		6972,
		6965
	],
	"6976": [
		6974,
		6965
	],
	"6977": [
		6975,
		6965
	],
	"6979": [
		6978,
		6965
	],
	"69934": [
		69937,
		69927
	],
	"69935": [
		69938,
		69927
	],
	"70475": [
		70471,
		70462
	],
	"70476": [
		70471,
		70487
	],
	"70843": [
		70841,
		70842
	],
	"70844": [
		70841,
		70832
	],
	"70846": [
		70841,
		70845
	],
	"71098": [
		71096,
		71087
	],
	"71099": [
		71097,
		71087
	]
};
var stateTable = [
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		2,
		2,
		3,
		4,
		4,
		5,
		0,
		6,
		7,
		8,
		9,
		10,
		11,
		12,
		13,
		14,
		15,
		16,
		0,
		17,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		2,
		0,
		0,
		24,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		26,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		27,
		28,
		0,
		0,
		0,
		0,
		0,
		27,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		34,
		35,
		36,
		37,
		38,
		39,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		39,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		0,
		0,
		0,
		0,
		0,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		0,
		7,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		0,
		0,
		12,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		0,
		9,
		0,
		0,
		0,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		10,
		11,
		12,
		13,
		14,
		0,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		0,
		11,
		12,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		0,
		9,
		0,
		0,
		12,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		18,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		0,
		7,
		0,
		0,
		0,
		0,
		0,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		10,
		11,
		12,
		13,
		14,
		15,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		0,
		11,
		12,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		11,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		4,
		4,
		5,
		0,
		6,
		7,
		8,
		9,
		10,
		11,
		12,
		13,
		14,
		15,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		48,
		11,
		12,
		13,
		14,
		48,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		49,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		0,
		11,
		12,
		0,
		14,
		0,
		16,
		0,
		0,
		0,
		11,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		21,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		21,
		22,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		0,
		0,
		0,
		0,
		0,
		0,
		14,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		50,
		0,
		51,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		0,
		11,
		12,
		0,
		14,
		0,
		16,
		0,
		0,
		0,
		11,
		0,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		27,
		28,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		28,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		0,
		0,
		0,
		0,
		0,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		0,
		31,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		0,
		0,
		36,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		0,
		33,
		0,
		0,
		0,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		34,
		35,
		36,
		37,
		38,
		0,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		0,
		35,
		36,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		0,
		33,
		0,
		0,
		36,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		41,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		0,
		31,
		0,
		0,
		0,
		0,
		0,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		34,
		35,
		36,
		37,
		38,
		39,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		0,
		35,
		36,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		35,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		52,
		35,
		36,
		37,
		38,
		52,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		53,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		0,
		35,
		36,
		0,
		38,
		0,
		40,
		0,
		0,
		0,
		35,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		44,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		44,
		45,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		0,
		0,
		0,
		0,
		0,
		0,
		38,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		0,
		35,
		36,
		0,
		38,
		0,
		40,
		0,
		0,
		0,
		35,
		0,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		48,
		11,
		12,
		13,
		14,
		0,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		5,
		0,
		6,
		7,
		8,
		9,
		48,
		11,
		12,
		13,
		14,
		48,
		16,
		0,
		0,
		18,
		11,
		19,
		20,
		21,
		22,
		0,
		0,
		0,
		23,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		25
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		51,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		54,
		0,
		0
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		52,
		35,
		36,
		37,
		38,
		0,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		29,
		0,
		30,
		31,
		32,
		33,
		52,
		35,
		36,
		37,
		38,
		52,
		40,
		0,
		0,
		41,
		35,
		42,
		43,
		44,
		45,
		0,
		0,
		0,
		46,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		47
	],
	[
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		50,
		0,
		51,
		0
	]
];
var accepting = [
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	false,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true,
	true
];
var tags = [
	[
	],
	[
		"broken_cluster"
	],
	[
		"independent_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"numeral_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"independent_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"symbol_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"virama_terminated_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"broken_cluster"
	],
	[
		"numeral_cluster"
	],
	[
		"number_joiner_terminated_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"standard_cluster"
	],
	[
		"numeral_cluster"
	]
];
var useData = {
	categories: categories$1,
	decompositions: decompositions$2,
	stateTable: stateTable,
	accepting: accepting,
	tags: tags
};

// Updated: 417af0c79c5664271a07a783574ec7fac7ebad0c
// Cateories used in the OpenType spec:
// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx
var CATEGORIES = {
  X: 1 << 0,
  C: 1 << 1,
  V: 1 << 2,
  N: 1 << 3,
  H: 1 << 4,
  ZWNJ: 1 << 5,
  ZWJ: 1 << 6,
  M: 1 << 7,
  SM: 1 << 8,
  VD: 1 << 9,
  A: 1 << 10,
  Placeholder: 1 << 11,
  Dotted_Circle: 1 << 12,
  RS: 1 << 13,
  // Register Shifter, used in Khmer OT spec.
  Coeng: 1 << 14,
  // Khmer-style Virama.
  Repha: 1 << 15,
  // Atomically-encoded logical or visual repha.
  Ra: 1 << 16,
  CM: 1 << 17,
  // Consonant-Medial.
  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).

}; // Visual positions in a syllable from left to right.

var POSITIONS = {
  Start: 1 << 0,
  Ra_To_Become_Reph: 1 << 1,
  Pre_M: 1 << 2,
  Pre_C: 1 << 3,
  Base_C: 1 << 4,
  After_Main: 1 << 5,
  Above_C: 1 << 6,
  Before_Sub: 1 << 7,
  Below_C: 1 << 8,
  After_Sub: 1 << 9,
  Before_Post: 1 << 10,
  Post_C: 1 << 11,
  After_Post: 1 << 12,
  Final_C: 1 << 13,
  SMVD: 1 << 14,
  End: 1 << 15
};
var CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;
var JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;
var HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;
var INDIC_CONFIGS = {
  Default: {
    hasOldSpec: false,
    virama: 0,
    basePos: 'Last',
    rephPos: POSITIONS.Before_Post,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Devanagari: {
    hasOldSpec: true,
    virama: 0x094D,
    basePos: 'Last',
    rephPos: POSITIONS.Before_Post,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Bengali: {
    hasOldSpec: true,
    virama: 0x09CD,
    basePos: 'Last',
    rephPos: POSITIONS.After_Sub,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Gurmukhi: {
    hasOldSpec: true,
    virama: 0x0A4D,
    basePos: 'Last',
    rephPos: POSITIONS.Before_Sub,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Gujarati: {
    hasOldSpec: true,
    virama: 0x0ACD,
    basePos: 'Last',
    rephPos: POSITIONS.Before_Post,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Oriya: {
    hasOldSpec: true,
    virama: 0x0B4D,
    basePos: 'Last',
    rephPos: POSITIONS.After_Main,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Tamil: {
    hasOldSpec: true,
    virama: 0x0BCD,
    basePos: 'Last',
    rephPos: POSITIONS.After_Post,
    rephMode: 'Implicit',
    blwfMode: 'Pre_And_Post'
  },
  Telugu: {
    hasOldSpec: true,
    virama: 0x0C4D,
    basePos: 'Last',
    rephPos: POSITIONS.After_Post,
    rephMode: 'Explicit',
    blwfMode: 'Post_Only'
  },
  Kannada: {
    hasOldSpec: true,
    virama: 0x0CCD,
    basePos: 'Last',
    rephPos: POSITIONS.After_Post,
    rephMode: 'Implicit',
    blwfMode: 'Post_Only'
  },
  Malayalam: {
    hasOldSpec: true,
    virama: 0x0D4D,
    basePos: 'Last',
    rephPos: POSITIONS.After_Main,
    rephMode: 'Log_Repha',
    blwfMode: 'Pre_And_Post'
  },
  // Handled by UniversalShaper
  // Sinhala: {
  //   hasOldSpec: false,
  //   virama: 0x0DCA,
  //   basePos: 'Last_Sinhala',
  //   rephPos: POSITIONS.After_Main,
  //   rephMode: 'Explicit',
  //   blwfMode: 'Pre_And_Post'
  // },
  Khmer: {
    hasOldSpec: false,
    virama: 0x17D2,
    basePos: 'First',
    rephPos: POSITIONS.Ra_To_Become_Reph,
    rephMode: 'Vis_Repha',
    blwfMode: 'Pre_And_Post'
  }
}; // Additional decompositions that aren't in Unicode

var INDIC_DECOMPOSITIONS = {
  // Khmer
  0x17BE: [0x17C1, 0x17BE],
  0x17BF: [0x17C1, 0x17BF],
  0x17C0: [0x17C1, 0x17C0],
  0x17C4: [0x17C1, 0x17C4],
  0x17C5: [0x17C1, 0x17C5]
};

var type$1 = "Buffer";
var data$1 = [
	0,
	17,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	216,
	96,
	1,
	102,
	15,
	153,
	240,
	237,
	157,
	123,
	140,
	92,
	85,
	29,
	199,
	239,
	238,
	206,
	206,
	204,
	238,
	204,
	238,
	116,
	11,
	68,
	8,
	98,
	81,
	32,
	196,
	80,
	109,
	64,
	34,
	182,
	20,
	22,
	144,
	96,
	10,
	137,
	88,
	77,
	164,
	85,
	81,
	68,
	9,
	136,
	65,
	80,
	131,
	144,
	54,
	8,
	8,
	106,
	45,
	32,
	15,
	65,
	76,
	44,
	252,
	33,
	229,
	47,
	138,
	254,
	193,
	67,
	99,
	193,
	180,
	18,
	17,
	44,
	16,
	80,
	33,
	96,
	20,
	176,
	168,
	53,
	4,
	172,
	81,
	2,
	162,
	32,
	126,
	207,
	220,
	115,
	230,
	158,
	57,
	115,
	222,
	143,
	123,
	103,
	101,
	126,
	201,
	39,
	247,
	113,
	206,
	61,
	231,
	119,
	126,
	191,
	243,
	190,
	119,
	103,
	151,
	212,
	178,
	236,
	96,
	176,
	12,
	28,
	1,
	78,
	6,
	167,
	128,
	79,
	128,
	207,
	130,
	119,
	131,
	247,
	70,
	56,
	158,
	14,
	206,
	6,
	95,
	2,
	235,
	28,
	158,
	91,
	15,
	46,
	3,
	27,
	192,
	53,
	224,
	187,
	224,
	102,
	176,
	25,
	108,
	1,
	119,
	130,
	123,
	52,
	207,
	95,
	0,
	46,
	6,
	63,
	7,
	191,
	2,
	247,
	131,
	71,
	192,
	19,
	224,
	105,
	176,
	4,
	252,
	5,
	252,
	13,
	188,
	12,
	230,
	193,
	127,
	65,
	125,
	50,
	15,
	155,
	197,
	113,
	79,
	240,
	86,
	112,
	32,
	88,
	10,
	14,
	3,
	43,
	192,
	113,
	224,
	68,
	240,
	33,
	176,
	6,
	156,
	6,
	206,
	2,
	95,
	0,
	95,
	1,
	95,
	5,
	223,
	0,
	87,
	130,
	235,
	193,
	38,
	176,
	25,
	108,
	1,
	119,
	130,
	173,
	224,
	62,
	240,
	32,
	120,
	12,
	60,
	5,
	254,
	8,
	118,
	129,
	221,
	224,
	21,
	240,
	6,
	152,
	172,
	103,
	217,
	12,
	216,
	11,
	236,
	7,
	14,
	4,
	75,
	193,
	225,
	96,
	37,
	56,
	22,
	172,
	170,
	231,
	186,
	175,
	198,
	113,
	13,
	56,
	141,
	94,
	159,
	133,
	227,
	121,
	224,
	66,
	112,
	17,
	184,
	28,
	92,
	1,
	190,
	67,
	195,
	191,
	143,
	227,
	45,
	224,
	54,
	112,
	7,
	216,
	90,
	207,
	203,
	125,
	31,
	61,
	218,
	242,
	32,
	141,
	255,
	24,
	142,
	191,
	4,
	79,
	209,
	235,
	199,
	233,
	241,
	58,
	240,
	12,
	206,
	31,
	226,
	158,
	217,
	229,
	152,
	135,
	13,
	207,
	112,
	105,
	238,
	198,
	249,
	43,
	224,
	13,
	208,
	104,
	100,
	89,
	7,
	188,
	5,
	44,
	1,
	7,
	131,
	101,
	224,
	136,
	70,
	127,
	124,
	114,
	156,
	167,
	247,
	30,
	6,
	31,
	192,
	249,
	201,
	224,
	20,
	240,
	169,
	70,
	110,
	175,
	51,
	113,
	60,
	151,
	198,
	185,
	128,
	222,
	187,
	24,
	199,
	111,
	130,
	171,
	27,
	121,
	125,
	154,
	167,
	220,
	136,
	235,
	77,
	96,
	51,
	184,
	13,
	220,
	1,
	182,
	210,
	103,
	238,
	163,
	199,
	29,
	56,
	254,
	134,
	166,
	247,
	84,
	131,
	218,
	10,
	199,
	63,
	55,
	244,
	101,
	125,
	209,
	16,
	206,
	219,
	248,
	37,
	196,
	221,
	65,
	239,
	221,
	13,
	94,
	195,
	117,
	173,
	153,
	101,
	237,
	102,
	17,
	119,
	15,
	156,
	239,
	75,
	175,
	79,
	2,
	7,
	52,
	7,
	211,
	59,
	68,
	114,
	47,
	148,
	195,
	154,
	121,
	219,
	115,
	121,
	102,
	69,
	2,
	61,
	82,
	115,
	52,
	116,
	62,
	94,
	162,
	247,
	243,
	224,
	90,
	73,
	252,
	19,
	105,
	92,
	214,
	22,
	87,
	227,
	122,
	45,
	248,
	52,
	133,
	143,
	123,
	36,
	173,
	111,
	159,
	227,
	238,
	175,
	208,
	232,
	66,
	234,
	246,
	23,
	185,
	184,
	223,
	166,
	199,
	13,
	66,
	188,
	11,
	155,
	121,
	255,
	203,
	235,
	186,
	142,
	62,
	247,
	181,
	166,
	92,
	111,
	134,
	46,
	108,
	196,
	136,
	17,
	126,
	60,
	60,
	4,
	58,
	140,
	24,
	49,
	98,
	196,
	136,
	17,
	35,
	70,
	140,
	88,
	120,
	28,
	57,
	4,
	58,
	136,
	60,
	71,
	215,
	186,
	223,
	114,
	88,
	223,
	175,
	84,
	220,
	95,
	174,
	121,
	230,
	90,
	164,
	127,
	61,
	216,
	4,
	54,
	131,
	45,
	224,
	78,
	112,
	15,
	216,
	14,
	30,
	0,
	143,
	130,
	39,
	193,
	179,
	96,
	87,
	51,
	223,
	91,
	218,
	141,
	227,
	63,
	193,
	127,
	192,
	196,
	84,
	150,
	181,
	192,
	28,
	216,
	7,
	188,
	125,
	42,
	223,
	207,
	121,
	39,
	142,
	135,
	130,
	229,
	224,
	88,
	112,
	6,
	45,
	203,
	102,
	46,
	255,
	85,
	184,
	191,
	122,
	170,
	122,
	123,
	143,
	24,
	49,
	98,
	196,
	155,
	9,
	178,
	111,
	185,
	22,
	125,
	239,
	251,
	106,
	197,
	62,
	125,
	85,
	84,
	109,
	139,
	17,
	35,
	70,
	196,
	225,
	4,
	110,
	206,
	74,
	222,
	115,
	206,
	131,
	211,
	208,
	207,
	156,
	5,
	206,
	19,
	230,
	122,
	23,
	58,
	206,
	253,
	78,
	162,
	199,
	121,
	154,
	199,
	81,
	224,
	146,
	169,
	226,
	125,
	234,
	6,
	156,
	95,
	45,
	164,
	121,
	195,
	84,
	241,
	94,
	135,
	135,
	188,
	151,
	185,
	9,
	97,
	183,
	14,
	193,
	252,
	243,
	181,
	69,
	57,
	43,
	231,
	96,
	35,
	240,
	147,
	69,
	102,
	54,
	32,
	222,
	3,
	138,
	184,
	47,
	224,
	254,
	254,
	139,
	179,
	108,
	13,
	184,
	6,
	60,
	186,
	184,
	63,
	252,
	247,
	8,
	111,
	238,
	145,
	101,
	123,
	131,
	53,
	224,
	146,
	233,
	44,
	219,
	6,
	178,
	86,
	150,
	29,
	3,
	46,
	33,
	71,
	114,
	143,
	30,
	119,
	210,
	35,
	207,
	59,
	218,
	89,
	246,
	189,
	177,
	156,
	211,
	113,
	254,
	131,
	246,
	96,
	156,
	157,
	184,
	55,
	62,
	83,
	92,
	31,
	135,
	243,
	75,
	193,
	118,
	48,
	54,
	139,
	117,
	1,
	184,
	116,
	182,
	72,
	39,
	22,
	219,
	105,
	154,
	175,
	226,
	184,
	188,
	147,
	159,
	31,
	223,
	233,
	143,
	179,
	174,
	147,
	235,
	244,
	211,
	206,
	160,
	222,
	35,
	70,
	140,
	24,
	49,
	162,
	28,
	254,
	93,
	113,
	31,
	28,
	123,
	252,
	113,
	97,
	197,
	162,
	234,
	243,
	159,
	175,
	189,
	185,
	185,
	28,
	220,
	142,
	121,
	224,
	93,
	83,
	131,
	235,
	81,
	242,
	157,
	207,
	189,
	184,
	191,
	141,
	155,
	39,
	222,
	143,
	243,
	71,
	166,
	242,
	249,
	232,
	14,
	73,
	122,
	236,
	251,
	187,
	39,
	232,
	250,
	154,
	156,
	63,
	61,
	149,
	127,
	83,
	71,
	210,
	219,
	73,
	211,
	122,
	94,
	146,
	223,
	18,
	154,
	230,
	63,
	16,
	246,
	50,
	247,
	60,
	219,
	55,
	125,
	125,
	202,
	111,
	253,
	76,
	190,
	153,
	34,
	223,
	76,
	28,
	37,
	209,
	119,
	18,
	109,
	160,
	9,
	22,
	77,
	23,
	115,
	227,
	189,
	167,
	243,
	176,
	253,
	113,
	60,
	24,
	44,
	155,
	238,
	207,
	239,
	136,
	233,
	98,
	30,
	62,
	143,
	243,
	19,
	192,
	7,
	167,
	139,
	252,
	88,
	188,
	143,
	210,
	123,
	159,
	156,
	206,
	191,
	251,
	58,
	3,
	199,
	207,
	131,
	47,
	79,
	15,
	234,
	191,
	126,
	186,
	184,
	94,
	70,
	211,
	190,
	140,
	62,
	191,
	113,
	218,
	236,
	199,
	121,
	170,
	187,
	204,
	62,
	196,
	126,
	15,
	73,
	194,
	136,
	93,
	174,
	67,
	218,
	55,
	130,
	155,
	193,
	45,
	224,
	54,
	240,
	35,
	240,
	99,
	112,
	47,
	248,
	5,
	120,
	8,
	252,
	22,
	252,
	14,
	236,
	4,
	187,
	192,
	110,
	240,
	10,
	120,
	3,
	212,
	90,
	69,
	154,
	109,
	156,
	239,
	9,
	246,
	5,
	7,
	128,
	67,
	192,
	161,
	96,
	57,
	56,
	182,
	53,
	168,
	195,
	189,
	208,
	97,
	21,
	238,
	175,
	166,
	97,
	107,
	113,
	60,
	21,
	156,
	33,
	137,
	203,
	226,
	159,
	131,
	176,
	243,
	91,
	197,
	245,
	69,
	56,
	255,
	58,
	184,
	10,
	252,
	12,
	215,
	55,
	224,
	120,
	19,
	13,
	191,
	21,
	199,
	219,
	21,
	105,
	17,
	72,
	252,
	187,
	90,
	131,
	54,
	35,
	156,
	42,
	169,
	111,
	221,
	60,
	17,
	127,
	59,
	120,
	16,
	60,
	6,
	30,
	7,
	127,
	104,
	229,
	123,
	255,
	127,
	194,
	241,
	133,
	86,
	254,
	252,
	238,
	186,
	217,
	103,
	47,
	33,
	238,
	171,
	96,
	12,
	235,
	133,
	58,
	104,
	129,
	185,
	118,
	17,
	190,
	15,
	206,
	247,
	3,
	7,
	129,
	119,
	129,
	247,
	180,
	139,
	178,
	153,
	56,
	178,
	173,
	14,
	35,
	250,
	189,
	191,
	93,
	254,
	122,
	79,
	172,
	135,
	124,
	216,
	73,
	26,
	125,
	142,
	182,
	40,
	175,
	15,
	101,
	151,
	95,
	198,
	71,
	52,
	126,
	42,
	139,
	88,
	101,
	33,
	223,
	242,
	86,
	149,
	63,
	105,
	111,
	164,
	15,
	252,
	56,
	103,
	79,
	50,
	78,
	125,
	134,
	171,
	87,
	103,
	226,
	252,
	156,
	118,
	241,
	189,
	108,
	42,
	59,
	174,
	107,
	202,
	239,
	159,
	79,
	117,
	89,
	207,
	233,
	120,
	116,
	68,
	251,
	47,
	68,
	116,
	239,
	105,
	99,
	176,
	204,
	179,
	78,
	150,
	137,
	169,
	12,
	108,
	108,
	191,
	12,
	245,
	102,
	163,
	99,
	191,
	61,
	12,
	239,
	57,
	92,
	202,
	127,
	13,
	202,
	119,
	67,
	59,
	93,
	159,
	239,
	106,
	127,
	246,
	189,
	237,
	149,
	138,
	240,
	245,
	220,
	220,
	111,
	147,
	164,
	47,
	231,
	191,
	195,
	39,
	115,
	46,
	217,
	188,
	128,
	133,
	223,
	77,
	143,
	228,
	239,
	154,
	54,
	35,
	173,
	45,
	212,
	215,
	119,
	224,
	248,
	67,
	176,
	213,
	193,
	247,
	47,
	90,
	252,
	125,
	205,
	49,
	9,
	254,
	142,
	98,
	27,
	116,
	124,
	96,
	8,
	198,
	52,
	91,
	30,
	133,
	174,
	79,
	26,
	230,
	74,
	207,
	182,
	251,
	199,
	21,
	219,
	58,
	181,
	204,
	114,
	238,
	94,
	37,
	42,
	63,
	254,
	181,
	221,
	31,
	254,
	247,
	18,
	124,
	250,
	47,
	90,
	191,
	95,
	231,
	242,
	34,
	239,
	48,
	100,
	107,
	77,
	6,
	105,
	35,
	147,
	51,
	89,
	54,
	3,
	246,
	2,
	251,
	129,
	131,
	102,
	242,
	176,
	165,
	51,
	118,
	229,
	231,
	255,
	174,
	137,
	180,
	215,
	141,
	224,
	240,
	153,
	188,
	237,
	63,
	199,
	181,
	35,
	118,
	126,
	21,
	157,
	131,
	175,
	68,
	156,
	227,
	103,
	242,
	62,
	246,
	196,
	25,
	121,
	251,
	87,
	217,
	55,
	53,
	68,
	247,
	15,
	207,
	244,
	223,
	227,
	251,
	34,
	210,
	15,
	173,
	228,
	202,
	190,
	145,
	246,
	99,
	100,
	189,
	248,
	49,
	206,
	110,
	151,
	115,
	207,
	156,
	78,
	211,
	59,
	27,
	199,
	43,
	106,
	131,
	105,
	159,
	139,
	251,
	231,
	91,
	216,
	124,
	152,
	168,
	202,
	63,
	169,
	89,
	219,
	252,
	255,
	46,
	31,
	207,
	235,
	154,
	113,
	113,
	71,
	73,
	58,
	12,
	43,
	191,
	174,
	56,
	255,
	71,
	20,
	251,
	40,
	101,
	18,
	90,
	6,
	221,
	248,
	179,
	16,
	184,
	72,
	24,
	7,
	92,
	236,
	147,
	106,
	173,
	188,
	144,
	252,
	191,
	144,
	33,
	117,
	247,
	109,
	181,
	177,
	46,
	157,
	44,
	91,
	112,
	144,
	253,
	101,
	254,
	220,
	134,
	170,
	117,
	30,
	86,
	222,
	236,
	82,
	181,
	253,
	163,
	213,
	77,
	250,
	123,
	22,
	11,
	66,
	215,
	33,
	134,
	137,
	41,
	220,
	20,
	175,
	195,
	133,
	155,
	226,
	249,
	234,
	89,
	181,
	173,
	22,
	90,
	57,
	108,
	124,
	54,
	76,
	200,
	244,
	93,
	72,
	250,
	235,
	202,
	164,
	146,
	42,
	117,
	241,
	213,
	185,
	42,
	253,
	135,
	189,
	78,
	84,
	105,
	147,
	178,
	235,
	142,
	173,
	84,
	173,
	247,
	66,
	245,
	127,
	140,
	180,
	170,
	176,
	63,
	175,
	183,
	107,
	254,
	41,
	36,
	85,
	25,
	23,
	74,
	89,
	102,
	155,
	253,
	212,
	198,
	35,
	48,
	22,
	145,
	69,
	118,
	241,
	166,
	26,
	57,
	205,
	9,
	148,
	99,
	113,
	126,
	62,
	222,
	40,
	238,
	187,
	208,
	172,
	21,
	207,
	118,
	109,
	52,
	77,
	161,
	54,
	226,
	227,
	26,
	117,
	163,
	54,
	153,
	226,
	210,
	35,
	184,
	174,
	211,
	189,
	109,
	221,
	234,
	247,
	111,
	166,
	75,
	139,
	194,
	68,
	117,
	237,
	234,
	195,
	238,
	179,
	26,
	255,
	178,
	112,
	94,
	100,
	105,
	16,
	97,
	254,
	109,
	83,
	255,
	182,
	37,
	254,
	99,
	50,
	78,
	227,
	48,
	105,
	211,
	248,
	196,
	191,
	98,
	126,
	50,
	105,
	55,
	6,
	239,
	13,
	148,
	73,
	240,
	111,
	47,
	158,
	165,
	127,
	89,
	253,
	118,
	105,
	175,
	228,
	200,
	231,
	101,
	235,
	223,
	129,
	178,
	148,
	236,
	95,
	49,
	174,
	120,
	78,
	132,
	248,
	151,
	217,
	158,
	249,
	151,
	33,
	243,
	79,
	91,
	225,
	95,
	94,
	72,
	219,
	213,
	137,
	170,
	60,
	218,
	103,
	44,
	253,
	219,
	235,
	87,
	199,
	10,
	63,
	215,
	230,
	220,
	198,
	0,
	215,
	246,
	203,
	124,
	170,
	188,
	46,
	201,
	191,
	182,
	237,
	87,
	132,
	213,
	109,
	214,
	166,
	152,
	143,
	101,
	254,
	13,
	29,
	75,
	153,
	77,
	196,
	186,
	228,
	218,
	63,
	107,
	243,
	24,
	227,
	198,
	16,
	80,
	159,
	40,
	32,
	210,
	88,
	32,
	253,
	179,
	171,
	127,
	39,
	45,
	250,
	231,
	73,
	139,
	246,
	43,
	147,
	73,
	69,
	159,
	16,
	187,
	127,
	238,
	100,
	69,
	187,
	13,
	153,
	199,
	177,
	126,
	187,
	155,
	183,
	69,
	255,
	172,
	107,
	203,
	170,
	177,
	146,
	157,
	139,
	247,
	100,
	241,
	196,
	123,
	202,
	251,
	150,
	243,
	47,
	81,
	248,
	182,
	44,
	235,
	191,
	217,
	216,
	60,
	46,
	180,
	109,
	66,
	221,
	178,
	125,
	203,
	252,
	175,
	146,
	20,
	239,
	69,
	100,
	34,
	206,
	167,
	109,
	230,
	212,
	93,
	253,
	12,
	254,
	142,
	217,
	158,
	93,
	253,
	73,
	218,
	51,
	249,
	125,
	104,
	17,
	190,
	77,
	241,
	247,
	197,
	235,
	186,
	161,
	61,
	243,
	207,
	233,
	234,
	20,
	111,
	23,
	254,
	25,
	23,
	255,
	234,
	196,
	103,
	189,
	164,
	157,
	155,
	15,
	129,
	127,
	85,
	113,
	153,
	176,
	254,
	218,
	198,
	191,
	252,
	53,
	59,
	183,
	241,
	175,
	216,
	247,
	202,
	164,
	167,
	107,
	4,
	255,
	118,
	58,
	57,
	62,
	34,
	250,
	151,
	215,
	169,
	44,
	255,
	106,
	177,
	108,
	191,
	4,
	102,
	119,
	54,
	30,
	171,
	32,
	98,
	234,
	143,
	187,
	54,
	85,
	248,
	141,
	209,
	110,
	232,
	219,
	14,
	111,
	147,
	208,
	249,
	150,
	9,
	83,
	191,
	230,
	58,
	159,
	182,
	157,
	115,
	203,
	236,
	18,
	3,
	171,
	52,
	37,
	107,
	105,
	219,
	62,
	94,
	214,
	134,
	85,
	251,
	35,
	44,
	140,
	29,
	217,
	94,
	137,
	108,
	191,
	69,
	37,
	174,
	253,
	53,
	191,
	127,
	226,
	42,
	177,
	125,
	225,
	11,
	91,
	183,
	219,
	34,
	10,
	121,
	158,
	111,
	167,
	227,
	141,
	254,
	125,
	42,
	114,
	228,
	215,
	22,
	132,
	110,
	251,
	111,
	22,
	113,
	98,
	172,
	107,
	196,
	58,
	169,
	178,
	113,
	10,
	219,
	155,
	242,
	12,
	177,
	119,
	119,
	63,
	111,
	46,
	135,
	137,
	204,
	222,
	204,
	23,
	68,
	68,
	123,
	215,
	179,
	162,
	95,
	201,
	28,
	236,
	173,
	170,
	171,
	41,
	246,
	167,
	121,
	154,
	20,
	101,
	63,
	106,
	187,
	143,
	229,
	80,
	175,
	248,
	250,
	218,
	161,
	54,
	20,
	243,
	37,
	38,
	153,
	176,
	240,
	113,
	138,
	58,
	166,
	235,
	39,
	51,
	143,
	58,
	197,
	218,
	32,
	107,
	135,
	100,
	60,
	38,
	245,
	164,
	174,
	210,
	125,
	206,
	158,
	110,
	249,
	29,
	226,
	167,
	128,
	181,
	7,
	29,
	252,
	222,
	183,
	108,
	29,
	229,
	83,
	119,
	101,
	82,
	117,
	31,
	223,
	197,
	114,
	190,
	160,
	170,
	43,
	178,
	113,
	148,
	212,
	157,
	238,
	92,
	157,
	172,
	57,
	102,
	251,
	251,
	170,
	30,
	36,
	111,
	151,
	125,
	13,
	174,
	159,
	231,
	247,
	58,
	100,
	101,
	24,
	232,
	39,
	117,
	117,
	118,
	44,
	143,
	211,
	154,
	200,
	97,
	113,
	216,
	179,
	236,
	62,
	15,
	159,
	150,
	49,
	47,
	27,
	230,
	6,
	109,
	41,
	203,
	151,
	208,
	164,
	249,
	119,
	245,
	176,
	180,
	31,
	123,
	86,
	124,
	175,
	99,
	170,
	227,
	50,
	233,
	8,
	231,
	161,
	200,
	210,
	177,
	73,
	63,
	11,
	124,
	62,
	52,
	255,
	212,
	229,
	243,
	73,
	183,
	12,
	120,
	73,
	157,
	135,
	111,
	120,
	170,
	242,
	138,
	226,
	179,
	110,
	238,
	62,
	39,
	220,
	179,
	89,
	131,
	196,
	202,
	95,
	6,
	159,
	191,
	77,
	185,
	83,
	229,
	239,
	42,
	49,
	236,
	79,
	196,
	59,
	255,
	178,
	198,
	104,
	155,
	125,
	148,
	8,
	123,
	2,
	204,
	247,
	186,
	253,
	23,
	17,
	126,
	173,
	209,
	219,
	131,
	161,
	99,
	127,
	247,
	124,
	38,
	135,
	221,
	151,
	165,
	65,
	230,
	8,
	166,
	253,
	24,
	2,
	219,
	27,
	234,
	217,
	63,
	112,
	31,
	53,
	180,
	15,
	40,
	171,
	255,
	142,
	145,
	127,
	108,
	253,
	9,
	93,
	251,
	150,
	213,
	6,
	36,
	237,
	216,
	101,
	141,
	204,
	175,
	147,
	153,
	176,
	251,
	221,
	247,
	30,
	154,
	53,
	131,
	110,
	143,
	67,
	102,
	79,
	235,
	53,
	102,
	76,
	155,
	120,
	236,
	253,
	185,
	142,
	119,
	3,
	246,
	243,
	240,
	25,
	47,
	170,
	245,
	4,
	191,
	87,
	164,
	90,
	99,
	200,
	252,
	43,
	194,
	230,
	189,
	74,
	253,
	29,
	246,
	2,
	164,
	126,
	78,
	88,
	191,
	101,
	101,
	143,
	146,
	191,
	170,
	94,
	176,
	112,
	137,
	29,
	187,
	107,
	127,
	217,
	58,
	122,
	214,
	111,
	127,
	65,
	181,
	47,
	72,
	218,
	225,
	192,
	30,
	213,
	68,
	255,
	179,
	124,
	221,
	9,
	237,
	255,
	67,
	159,
	231,
	223,
	189,
	176,
	49,
	207,
	123,
	252,
	77,
	80,
	135,
	68,
	219,
	153,
	252,
	33,
	222,
	111,
	213,
	244,
	233,
	251,
	218,
	211,
	103,
	172,
	33,
	117,
	176,
	153,
	21,
	123,
	81,
	50,
	92,
	199,
	65,
	107,
	191,
	165,
	28,
	203,
	36,
	227,
	140,
	204,
	23,
	164,
	173,
	245,
	237,
	157,
	140,
	217,
	219,
	155,
	204,
	155,
	164,
	121,
	42,
	250,
	6,
	219,
	122,
	99,
	26,
	31,
	69,
	25,
	152,
	63,
	40,
	108,
	161,
	171,
	147,
	186,
	254,
	158,
	223,
	183,
	108,
	78,
	232,
	243,
	118,
	25,
	167,
	251,
	234,
	56,
	167,
	111,
	232,
	252,
	201,
	52,
	222,
	166,
	76,
	155,
	8,
	255,
	157,
	87,
	71,
	184,
	182,
	102,
	177,
	128,
	228,
	30,
	179,
	23,
	9,
	227,
	207,
	25,
	170,
	62,
	54,
	134,
	125,
	109,
	237,
	100,
	218,
	243,
	213,
	233,
	99,
	171,
	111,
	102,
	56,
	234,
	158,
	9,
	241,
	127,
	138,
	180,
	109,
	243,
	179,
	205,
	195,
	75,
	151,
	73,
	80,
	47,
	174,
	99,
	140,
	53,
	62,
	122,
	244,
	202,
	109,
	177,
	134,
	149,
	210,
	200,
	156,
	255,
	6,
	216,
	215,
	119,
	188,
	132,
	250,
	219,
	244,
	173,
	178,
	73,
	66,
	116,
	143,
	161,
	191,
	46,
	237,
	20,
	226,
	170,
	83,
	173,
	29,
	183,
	140,
	202,
	122,
	155,
	152,
	84,
	249,
	132,
	218,
	88,
	39,
	161,
	245,
	162,
	44,
	155,
	250,
	234,
	80,
	117,
	120,
	108,
	91,
	248,
	218,
	72,
	39,
	101,
	215,
	199,
	212,
	245,
	35,
	212,
	62,
	195,
	84,
	127,
	93,
	242,
	72,
	81,
	55,
	92,
	197,
	70,
	95,
	254,
	253,
	53,
	191,
	254,
	172,
	75,
	214,
	225,
	252,
	223,
	233,
	164,
	220,
	127,
	146,
	189,
	27,
	82,
	217,
	48,
	212,
	247,
	73,
	215,
	217,
	58,
	76,
	235,
	253,
	113,
	205,
	154,
	89,
	182,
	134,
	29,
	43,
	190,
	183,
	118,
	169,
	115,
	209,
	254,
	174,
	53,
	225,
	94,
	133,
	203,
	62,
	31,
	249,
	219,
	24,
	254,
	251,
	50,
	149,
	244,
	234,
	127,
	232,
	126,
	156,
	207,
	250,
	213,
	102,
	77,
	75,
	209,
	181,
	91,
	151,
	253,
	200,
	210,
	235,
	179,
	132,
	230,
	68,
	65,
	175,
	28,
	137,
	251,
	15,
	221,
	62,
	142,
	235,
	251,
	215,
	14,
	215,
	94,
	180,
	123,
	120,
	42,
	187,
	68,
	182,
	185,
	110,
	207,
	140,
	223,
	203,
	234,
	123,
	63,
	81,
	243,
	31,
	215,
	66,
	218,
	139,
	206,
	223,
	172,
	159,
	183,
	42,
	119,
	64,
	125,
	207,
	50,
	77,
	253,
	76,
	221,
	62,
	44,
	234,
	169,
	184,
	255,
	40,
	123,
	255,
	97,
	146,
	144,
	111,
	20,
	51,
	15,
	255,
	14,
	244,
	75,
	129,
	182,
	25,
	72,
	67,
	177,
	175,
	66,
	194,
	90,
	244,
	93,
	141,
	248,
	125,
	92,
	108,
	223,
	168,
	222,
	13,
	138,
	247,
	217,
	119,
	186,
	236,
	152,
	90,
	116,
	243,
	57,
	155,
	178,
	202,
	202,
	36,
	75,
	147,
	125,
	83,
	25,
	162,
	151,
	105,
	110,
	236,
	18,
	174,
	19,
	111,
	223,
	243,
	118,
	179,
	237,
	15,
	12,
	109,
	202,
	52,
	30,
	145,
	50,
	177,
	111,
	36,
	123,
	250,
	7,
	206,
	71,
	92,
	230,
	192,
	161,
	107,
	29,
	223,
	57,
	183,
	139,
	238,
	174,
	101,
	140,
	173,
	191,
	238,
	126,
	166,
	136,
	91,
	166,
	142,
	190,
	182,
	150,
	73,
	21,
	249,
	134,
	150,
	183,
	12,
	127,
	135,
	60,
	111,
	83,
	222,
	216,
	229,
	8,
	177,
	165,
	201,
	174,
	41,
	194,
	77,
	246,
	177,
	181,
	147,
	173,
	248,
	214,
	39,
	83,
	120,
	72,
	125,
	9,
	77,
	219,
	70,
	127,
	215,
	231,
	109,
	236,
	150,
	170,
	46,
	198,
	200,
	207,
	39,
	13,
	89,
	153,
	171,
	148,
	216,
	54,
	13,
	205,
	191,
	44,
	157,
	83,
	249,
	62,
	150,
	174,
	182,
	18,
	154,
	94,
	10,
	187,
	184,
	164,
	239,
	34,
	49,
	218,
	138,
	73,
	15,
	157,
	111,
	83,
	213,
	31,
	85,
	25,
	171,
	168,
	191,
	46,
	254,
	137,
	89,
	143,
	67,
	242,
	8,
	181,
	121,
	138,
	188,
	92,
	116,
	170,
	34,
	255,
	170,
	202,
	111,
	202,
	147,
	172,
	123,
	39,
	133,
	111,
	99,
	201,
	145,
	255,
	157,
	42,
	94,
	88,
	60,
	241,
	119,
	222,
	250,
	246,
	228,
	52,
	215,
	169,
	96,
	82,
	231,
	246,
	164,
	7,
	202,
	62,
	27,
	182,
	22,
	151,
	217,
	47,
	102,
	27,
	246,
	201,
	203,
	54,
	95,
	223,
	52,
	135,
	169,
	93,
	165,
	44,
	143,
	139,
	205,
	92,
	37,
	212,
	103,
	190,
	105,
	199,
	202,
	35,
	52,
	255,
	20,
	62,
	240,
	45,
	107,
	104,
	58,
	125,
	191,
	133,
	213,
	201,
	25,
	186,
	119,
	172,
	134,
	253,
	111,
	25,
	117,
	195,
	123,
	36,
	81,
	172,
	223,
	219,
	4,
	244,
	181,
	38,
	233,
	126,
	151,
	238,
	243,
	91,
	206,
	145,
	237,
	107,
	250,
	221,
	101,
	242,
	14,
	155,
	127,
	71,
	26,
	218,
	70,
	59,
	194,
	249,
	48,
	183,
	59,
	173,
	127,
	74,
	168,
	255,
	166,
	182,
	160,
	243,
	29,
	251,
	219,
	36,
	34,
	190,
	127,
	151,
	194,
	231,
	107,
	35,
	101,
	246,
	19,
	98,
	157,
	180,
	145,
	40,
	191,
	157,
	158,
	208,
	191,
	174,
	191,
	129,
	78,
	222,
	159,
	235,
	190,
	203,
	32,
	176,
	191,
	5,
	225,
	223,
	243,
	244,
	252,
	229,
	89,
	47,
	120,
	155,
	199,
	234,
	75,
	125,
	250,
	212,
	88,
	190,
	234,
	166,
	149,
	96,
	124,
	34,
	245,
	140,
	248,
	136,
	125,
	159,
	161,
	178,
	35,
	251,
	142,
	92,
	167,
	63,
	211,
	81,
	166,
	171,
	175,
	254,
	62,
	207,
	235,
	218,
	90,
	213,
	109,
	200,
	5,
	246,
	119,
	82,
	198,
	241,
	111,
	66,
	221,
	255,
	133,
	214,
	105,
	223,
	223,
	175,
	228,
	227,
	13,
	216,
	62,
	178,
	239,
	249,
	112,
	85,
	92,
	34,
	108,
	221,
	202,
	254,
	159,
	131,
	10,
	38,
	226,
	239,
	253,
	243,
	125,
	26,
	19,
	93,
	93,
	83,
	249,
	164,
	147,
	13,
	246,
	241,
	98,
	222,
	186,
	111,
	223,
	250,
	252,
	99,
	8,
	55,
	73,
	138,
	122,
	235,
	51,
	78,
	176,
	239,
	16,
	25,
	204,
	79,
	166,
	121,
	145,
	75,
	253,
	102,
	190,
	98,
	99,
	142,
	237,
	239,
	237,
	166,
	236,
	35,
	108,
	108,
	165,
	10,
	239,
	179,
	87,
	77,
	110,
	51,
	163,
	255,
	3,
	251,
	135,
	84,
	101,
	103,
	34,
	134,
	203,
	202,
	28,
	115,
	141,
	60,
	80,
	191,
	4,
	159,
	139,
	250,
	197,
	240,
	191,
	43,
	124,
	249,
	217,
	124,
	201,
	119,
	173,
	147,
	242,
	251,
	153,
	24,
	107,
	49,
	163,
	254,
	142,
	227,
	169,
	237,
	152,
	218,
	170,
	21,
	191,
	227,
	166,
	205,
	191,
	132,
	117,
	120,
	172,
	242,
	135,
	210,
	203,
	211,
	226,
	155,
	45,
	83,
	187,
	118,
	181,
	159,
	110,
	253,
	151,
	106,
	108,
	146,
	245,
	51,
	3,
	250,
	59,
	206,
	133,
	202,
	222,
	35,
	97,
	162,
	43,
	27,
	63,
	102,
	140,
	75,
	124,
	148,
	82,
	248,
	62,
	213,
	68,
	234,
	250,
	45,
	27,
	99,
	250,
	126,
	151,
	95,
	252,
	102,
	81,
	177,
	238,
	236,
	221,
	183,
	248,
	6,
	212,
	165,
	252,
	50,
	27,
	40,
	199,
	45,
	199,
	239,
	153,
	251,
	202,
	58,
	43,
	172,
	253,
	20,
	243,
	176,
	42,
	196,
	102,
	94,
	38,
	141,
	151,
	176,
	190,
	232,
	214,
	17,
	166,
	57,
	91,
	168,
	109,
	99,
	239,
	103,
	248,
	246,
	171,
	46,
	99,
	134,
	235,
	119,
	246,
	166,
	111,
	134,
	85,
	115,
	196,
	208,
	250,
	196,
	135,
	247,
	206,
	75,
	172,
	71,
	188,
	136,
	245,
	137,
	157,
	243,
	235,
	37,
	22,
	214,
	109,
	191,
	157,
	194,
	126,
	49,
	234,
	143,
	171,
	253,
	164,
	182,
	75,
	188,
	55,
	169,
	107,
	127,
	252,
	185,
	216,
	207,
	105,
	237,
	19,
	75,
	199,
	214,
	224,
	220,
	200,
	166,
	173,
	199,
	90,
	199,
	248,
	72,
	140,
	60,
	67,
	117,
	73,
	145,
	191,
	139,
	62,
	190,
	246,
	141,
	53,
	70,
	134,
	250,
	59,
	180,
	62,
	196,
	182,
	117,
	140,
	122,
	27,
	43,
	173,
	84,
	250,
	149,
	149,
	190,
	141,
	132,
	166,
	229,
	170,
	207,
	48,
	250,
	62,
	134,
	190,
	166,
	248,
	101,
	139,
	76,
	39,
	241,
	154,
	191,
	239,
	99,
	51,
	155,
	103,
	125,
	210,
	142,
	85,
	55,
	92,
	125,
	100,
	171,
	179,
	109,
	56,
	47,
	169,
	108,
	20,
	34,
	41,
	252,
	21,
	42,
	101,
	212,
	37,
	215,
	188,
	84,
	113,
	83,
	72,
	168,
	205,
	83,
	216,
	36,
	52,
	109,
	23,
	123,
	133,
	166,
	25,
	250,
	92,
	12,
	137,
	81,
	71,
	67,
	237,
	40,
	211,
	39,
	203,
	250,
	159,
	215,
	213,
	109,
	83,
	155,
	144,
	165,
	169,
	211,
	77,
	101,
	115,
	213,
	81,
	150,
	167,
	78,
	127,
	155,
	244,
	100,
	207,
	155,
	202,
	103,
	91,
	126,
	157,
	77,
	124,
	109,
	27,
	171,
	110,
	216,
	228,
	147,
	50,
	127,
	23,
	137,
	145,
	78,
	168,
	254,
	41,
	202,
	31,
	195,
	182,
	101,
	248,
	34,
	117,
	190,
	161,
	254,
	13,
	213,
	39,
	180,
	28,
	85,
	181,
	139,
	208,
	252,
	109,
	234,
	185,
	107,
	62,
	166,
	184,
	41,
	244,
	54,
	229,
	173,
	179,
	151,
	143,
	196,
	240,
	103,
	76,
	255,
	135,
	202,
	255,
	0
];
var trieData$1 = {
	type: type$1,
	data: data$1
};

var decompositions$1 = useData.decompositions;
var trie$1 = new (unicode_trie__WEBPACK_IMPORTED_MODULE_8___default())(new Uint8Array(trieData$1.data));
var stateMachine$1 = new dfa(indicMachine);
/**
 * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.
 * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc
 */

var IndicShaper = /*#__PURE__*/function (_DefaultShaper) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(IndicShaper, _DefaultShaper);

  function IndicShaper() {
    return _DefaultShaper.apply(this, arguments) || this;
  }

  IndicShaper.planFeatures = function planFeatures(plan) {
    plan.addStage(setupSyllables$1);
    plan.addStage(['locl', 'ccmp']);
    plan.addStage(initialReordering);
    plan.addStage('nukt');
    plan.addStage('akhn');
    plan.addStage('rphf', false);
    plan.addStage('rkrf');
    plan.addStage('pref', false);
    plan.addStage('blwf', false);
    plan.addStage('abvf', false);
    plan.addStage('half', false);
    plan.addStage('pstf', false);
    plan.addStage('vatu');
    plan.addStage('cjct');
    plan.addStage('cfar', false);
    plan.addStage(finalReordering);
    plan.addStage({
      local: ['init'],
      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']
    }); // Setup the indic config for the selected script

    plan.unicodeScript = fromOpenType(plan.script);
    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;
    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2'; // TODO: turn off kern (Khmer) and liga features.
  };

  IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
    var _loop = function _loop(i) {
      var codepoint = glyphs[i].codePoints[0];
      var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions$1[codepoint];

      if (d) {
        var decomposed = d.map(function (c) {
          var g = plan.font.glyphForCodePoint(c);
          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
        });
        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
      }
    };

    // Decompose split matras
    // TODO: do this in a more general unicode normalizer
    for (var i = glyphs.length - 1; i >= 0; i--) {
      _loop(i);
    }
  };

  return IndicShaper;
}(DefaultShaper);

IndicShaper.zeroMarkWidths = 'NONE';

function indicCategory(glyph) {
  return trie$1.get(glyph.codePoints[0]) >> 8;
}

function indicPosition(glyph) {
  return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);
}

var IndicInfo = function IndicInfo(category, position, syllableType, syllable) {
  this.category = category;
  this.position = position;
  this.syllableType = syllableType;
  this.syllable = syllable;
};

function setupSyllables$1(font, glyphs) {
  var syllable = 0;
  var last = 0;

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(stateMachine$1.match(glyphs.map(indicCategory))), _step; !(_step = _iterator()).done;) {
    var _step$value = _step.value,
        start = _step$value[0],
        end = _step$value[1],
        tags = _step$value[2];

    if (start > last) {
      ++syllable;

      for (var _i = last; _i < start; _i++) {
        glyphs[_i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
      }
    }

    ++syllable; // Create shaper info

    for (var _i2 = start; _i2 <= end; _i2++) {
      glyphs[_i2].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i2]), indicPosition(glyphs[_i2]), tags[0], syllable);
    }

    last = end + 1;
  }

  if (last < glyphs.length) {
    ++syllable;

    for (var i = last; i < glyphs.length; i++) {
      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
    }
  }
}

function isConsonant(glyph) {
  return glyph.shaperInfo.category & CONSONANT_FLAGS;
}

function isJoiner(glyph) {
  return glyph.shaperInfo.category & JOINER_FLAGS;
}

function isHalantOrCoeng(glyph) {
  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;
}

function wouldSubstitute(glyphs, feature) {
  for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphs), _step2; !(_step2 = _iterator2()).done;) {
    var _glyph$features;

    var glyph = _step2.value;
    glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);
  }

  var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
  GSUB.applyFeatures([feature], glyphs);
  return glyphs.length === 1;
}

function consonantPosition(font, consonant, virama) {
  var glyphs = [virama, consonant, virama];

  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {
    return POSITIONS.Below_C;
  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {
    return POSITIONS.Post_C;
  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {
    return POSITIONS.Post_C;
  }

  return POSITIONS.Base_C;
}

function initialReordering(font, glyphs, plan) {
  var indicConfig = plan.indicConfig;
  var features = font._layoutEngine.engine.GSUBProcessor.features;
  var dottedCircle = font.glyphForCodePoint(0x25cc).id;
  var virama = font.glyphForCodePoint(indicConfig.virama).id;

  if (virama) {
    var info = new GlyphInfo(font, virama, [indicConfig.virama]);

    for (var i = 0; i < glyphs.length; i++) {
      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {
        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);
      }
    }
  }

  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {
    var _glyphs$start$shaperI = glyphs[start].shaperInfo;
        _glyphs$start$shaperI.category;
        var syllableType = _glyphs$start$shaperI.syllableType;

    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {
      continue;
    }

    if (syllableType === 'broken_cluster' && dottedCircle) {
      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
      g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable); // Insert after possible Repha.

      var _i3 = start;

      while (_i3 < end && glyphs[_i3].shaperInfo.category === CATEGORIES.Repha) {
        _i3++;
      }

      glyphs.splice(_i3++, 0, g);
      end++;
    } // 1. Find base consonant:
    //
    // The shaping engine finds the base consonant of the syllable, using the
    // following algorithm: starting from the end of the syllable, move backwards
    // until a consonant is found that does not have a below-base or post-base
    // form (post-base forms have to follow below-base forms), or that is not a
    // pre-base reordering Ra, or arrive at the first consonant. The consonant
    // stopped at will be the base.


    var base = end;
    var limit = start;
    var hasReph = false; // If the syllable starts with Ra + Halant (in a script that has Reph)
    // and has more than one consonant, Ra is excluded from candidates for
    // base consonants.

    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
      // See if it matches the 'rphf' feature.
      var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];

      if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {
        limit += 2;

        while (limit < end && isJoiner(glyphs[limit])) {
          limit++;
        }

        base = start;
        hasReph = true;
      }
    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {
      limit++;

      while (limit < end && isJoiner(glyphs[limit])) {
        limit++;
      }

      base = start;
      hasReph = true;
    }

    switch (indicConfig.basePos) {
      case 'Last':
        {
          // starting from the end of the syllable, move backwards
          var _i4 = end;
          var seenBelow = false;

          do {
            var _info = glyphs[--_i4].shaperInfo; // until a consonant is found

            if (isConsonant(glyphs[_i4])) {
              // that does not have a below-base or post-base form
              // (post-base forms have to follow below-base forms),
              if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {
                base = _i4;
                break;
              } // or that is not a pre-base reordering Ra,
              //
              // IMPLEMENTATION NOTES:
              //
              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped
              // by the logic above already.
              //
              // or arrive at the first consonant. The consonant stopped at will
              // be the base.


              if (_info.position === POSITIONS.Below_C) {
                seenBelow = true;
              }

              base = _i4;
            } else if (start < _i4 && _info.category === CATEGORIES.ZWJ && glyphs[_i4 - 1].shaperInfo.category === CATEGORIES.H) {
              // A ZWJ after a Halant stops the base search, and requests an explicit
              // half form.
              // A ZWJ before a Halant, requests a subjoined form instead, and hence
              // search continues.  This is particularly important for Bengali
              // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.
              break;
            }
          } while (_i4 > limit);

          break;
        }

      case 'First':
        {
          // The first consonant is always the base.
          base = start; // Mark all subsequent consonants as below.

          for (var _i5 = base + 1; _i5 < end; _i5++) {
            if (isConsonant(glyphs[_i5])) {
              glyphs[_i5].shaperInfo.position = POSITIONS.Below_C;
            }
          }
        }
    } // If the syllable starts with Ra + Halant (in a script that has Reph)
    // and has more than one consonant, Ra is excluded from candidates for
    // base consonants.
    //
    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)


    if (hasReph && base === start && limit - base <= 2) {
      hasReph = false;
    } // 2. Decompose and reorder Matras:
    //
    // Each matra and any syllable modifier sign in the cluster are moved to the
    // appropriate position relative to the consonant(s) in the cluster. The
    // shaping engine decomposes two- or three-part matras into their constituent
    // parts before any repositioning. Matra characters are classified by which
    // consonant in a conjunct they have affinity for and are reordered to the
    // following positions:
    //
    //   o Before first half form in the syllable
    //   o After subjoined consonants
    //   o After post-form consonant
    //   o After main consonant (for above marks)
    //
    // IMPLEMENTATION NOTES:
    //
    // The normalize() routine has already decomposed matras for us, so we don't
    // need to worry about that.
    // 3.  Reorder marks to canonical order:
    //
    // Adjacent nukta and halant or nukta and vedic sign are always repositioned
    // if necessary, so that the nukta is first.
    //
    // IMPLEMENTATION NOTES:
    //
    // We don't need to do this: the normalize() routine already did this for us.
    // Reorder characters


    for (var _i6 = start; _i6 < base; _i6++) {
      var _info2 = glyphs[_i6].shaperInfo;
      _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);
    }

    if (base < end) {
      glyphs[base].shaperInfo.position = POSITIONS.Base_C;
    } // Mark final consonants.  A final consonant is one appearing after a matra,
    // like in Khmer.


    for (var _i7 = base + 1; _i7 < end; _i7++) {
      if (glyphs[_i7].shaperInfo.category === CATEGORIES.M) {
        for (var j = _i7 + 1; j < end; j++) {
          if (isConsonant(glyphs[j])) {
            glyphs[j].shaperInfo.position = POSITIONS.Final_C;
            break;
          }
        }

        break;
      }
    } // Handle beginning Ra


    if (hasReph) {
      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;
    } // For old-style Indic script tags, move the first post-base Halant after
    // last consonant.
    //
    // Reports suggest that in some scripts Uniscribe does this only if there
    // is *not* a Halant after last consonant already (eg. Kannada), while it
    // does it unconditionally in other scripts (eg. Malayalam).  We don't
    // currently know about other scripts, so we single out Malayalam for now.
    //
    // Kannada test case:
    // U+0C9A,U+0CCD,U+0C9A,U+0CCD
    // With some versions of Lohit Kannada.
    // https://bugs.freedesktop.org/show_bug.cgi?id=59118
    //
    // Malayalam test case:
    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D
    // With lohit-ttf-20121122/Lohit-Malayalam.ttf


    if (plan.isOldSpec) {
      var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';

      for (var _i8 = base + 1; _i8 < end; _i8++) {
        if (glyphs[_i8].shaperInfo.category === CATEGORIES.H) {
          var _j = void 0;

          for (_j = end - 1; _j > _i8; _j--) {
            if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {
              break;
            }
          }

          if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i8) {
            // Move Halant to after last consonant.
            var t = glyphs[_i8];
            glyphs.splice.apply(glyphs, [_i8, 0].concat(glyphs.splice(_i8 + 1, _j - _i8)));
            glyphs[_j] = t;
          }

          break;
        }
      }
    } // Attach misc marks to previous char to move with them.


    var lastPos = POSITIONS.Start;

    for (var _i9 = start; _i9 < end; _i9++) {
      var _info3 = glyphs[_i9].shaperInfo;

      if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {
        _info3.position = lastPos;

        if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {
          // Uniscribe doesn't move the Halant with Left Matra.
          // TEST: U+092B,U+093F,U+094DE
          // We follow.  This is important for the Sinhala
          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA
          // where U+0DD9 is a left matra and U+0DCA is the virama.
          // We don't want to move the virama with the left matra.
          // TEST: U+0D9A,U+0DDA
          for (var _j2 = _i9; _j2 > start; _j2--) {
            if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {
              _info3.position = glyphs[_j2 - 1].shaperInfo.position;
              break;
            }
          }
        }
      } else if (_info3.position !== POSITIONS.SMVD) {
        lastPos = _info3.position;
      }
    } // For post-base consonants let them own anything before them
    // since the last consonant or matra.


    var last = base;

    for (var _i10 = base + 1; _i10 < end; _i10++) {
      if (isConsonant(glyphs[_i10])) {
        for (var _j3 = last + 1; _j3 < _i10; _j3++) {
          if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {
            glyphs[_j3].shaperInfo.position = glyphs[_i10].shaperInfo.position;
          }
        }

        last = _i10;
      } else if (glyphs[_i10].shaperInfo.category === CATEGORIES.M) {
        last = _i10;
      }
    }

    var arr = glyphs.slice(start, end);
    arr.sort(function (a, b) {
      return a.shaperInfo.position - b.shaperInfo.position;
    });
    glyphs.splice.apply(glyphs, [start, arr.length].concat(arr)); // Find base again

    for (var _i11 = start; _i11 < end; _i11++) {
      if (glyphs[_i11].shaperInfo.position === POSITIONS.Base_C) {
        base = _i11;
        break;
      }
    } // Setup features now
    // Reph


    for (var _i12 = start; _i12 < end && glyphs[_i12].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i12++) {
      glyphs[_i12].features.rphf = true;
    } // Pre-base


    var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';

    for (var _i13 = start; _i13 < base; _i13++) {
      glyphs[_i13].features.half = true;

      if (blwf) {
        glyphs[_i13].features.blwf = true;
      }
    } // Post-base


    for (var _i14 = base + 1; _i14 < end; _i14++) {
      glyphs[_i14].features.abvf = true;
      glyphs[_i14].features.pstf = true;
      glyphs[_i14].features.blwf = true;
    }

    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {
      // Old-spec eye-lash Ra needs special handling.  From the
      // spec:
      //
      // "The feature 'below-base form' is applied to consonants
      // having below-base forms and following the base consonant.
      // The exception is vattu, which may appear below half forms
      // as well as below the base glyph. The feature 'below-base
      // form' will be applied to all such occurrences of Ra as well."
      //
      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915
      // with Sanskrit 2003 font.
      //
      // However, note that Ra,Halant,ZWJ is the correct way to
      // request eyelash form of Ra, so we wouldbn't inhibit it
      // in that sequence.
      //
      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915
      for (var _i15 = start; _i15 + 1 < base; _i15++) {
        if (glyphs[_i15].shaperInfo.category === CATEGORIES.Ra && glyphs[_i15 + 1].shaperInfo.category === CATEGORIES.H && (_i15 + 1 === base || glyphs[_i15 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
          glyphs[_i15].features.blwf = true;
          glyphs[_i15 + 1].features.blwf = true;
        }
      }
    }

    var prefLen = 2;

    if (features.pref && base + prefLen < end) {
      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.
      for (var _i16 = base + 1; _i16 + prefLen - 1 < end; _i16++) {
        var _g2 = [glyphs[_i16].copy(), glyphs[_i16 + 1].copy()];

        if (wouldSubstitute(_g2, 'pref')) {
          for (var _j4 = 0; _j4 < prefLen; _j4++) {
            glyphs[_i16++].features.pref = true;
          } // Mark the subsequent stuff with 'cfar'.  Used in Khmer.
          // Read the feature spec.
          // This allows distinguishing the following cases with MS Khmer fonts:
          // U+1784,U+17D2,U+179A,U+17D2,U+1782
          // U+1784,U+17D2,U+1782,U+17D2,U+179A


          if (features.cfar) {
            for (; _i16 < end; _i16++) {
              glyphs[_i16].features.cfar = true;
            }
          }

          break;
        }
      }
    } // Apply ZWJ/ZWNJ effects


    for (var _i17 = start + 1; _i17 < end; _i17++) {
      if (isJoiner(glyphs[_i17])) {
        var nonJoiner = glyphs[_i17].shaperInfo.category === CATEGORIES.ZWNJ;
        var _j5 = _i17;

        do {
          _j5--; // ZWJ/ZWNJ should disable CJCT.  They do that by simply
          // being there, since we don't skip them for the CJCT
          // feature (ie. F_MANUAL_ZWJ)
          // A ZWNJ disables HALF.

          if (nonJoiner) {
            delete glyphs[_j5].features.half;
          }
        } while (_j5 > start && !isConsonant(glyphs[_j5]));
      }
    }
  }
}

function finalReordering(font, glyphs, plan) {
  var indicConfig = plan.indicConfig;
  var features = font._layoutEngine.engine.GSUBProcessor.features;

  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {
    // 4. Final reordering:
    //
    // After the localized forms and basic shaping forms GSUB features have been
    // applied (see below), the shaping engine performs some final glyph
    // reordering before applying all the remaining font features to the entire
    // cluster.
    var tryPref = !!features.pref; // Find base again

    var base = start;

    for (; base < end; base++) {
      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {
        if (tryPref && base + 1 < end) {
          for (var i = base + 1; i < end; i++) {
            if (glyphs[i].features.pref) {
              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
                // Ok, this was a 'pref' candidate but didn't form any.
                // Base is around here...
                base = i;

                while (base < end && isHalantOrCoeng(glyphs[base])) {
                  base++;
                }

                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;
                tryPref = false;
              }

              break;
            }
          }
        } // For Malayalam, skip over unformed below- (but NOT post-) forms.


        if (plan.unicodeScript === 'Malayalam') {
          for (var _i18 = base + 1; _i18 < end; _i18++) {
            while (_i18 < end && isJoiner(glyphs[_i18])) {
              _i18++;
            }

            if (_i18 === end || !isHalantOrCoeng(glyphs[_i18])) {
              break;
            }

            _i18++; // Skip halant.

            while (_i18 < end && isJoiner(glyphs[_i18])) {
              _i18++;
            }

            if (_i18 < end && isConsonant(glyphs[_i18]) && glyphs[_i18].shaperInfo.position === POSITIONS.Below_C) {
              base = _i18;
              glyphs[base].shaperInfo.position = POSITIONS.Base_C;
            }
          }
        }

        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {
          base--;
        }

        break;
      }
    }

    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {
      base--;
    }

    if (base < end) {
      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {
        base--;
      }
    } // o Reorder matras:
    //
    // If a pre-base matra character had been reordered before applying basic
    // features, the glyph can be moved closer to the main consonant based on
    // whether half-forms had been formed. Actual position for the matra is
    // defined as “after last standalone halant glyph, after initial matra
    // position and before the main consonant”. If ZWJ or ZWNJ follow this
    // halant, position is moved after it.
    //


    if (start + 1 < end && start < base) {
      // Otherwise there can't be any pre-base matra characters.
      // If we lost track of base, alas, position before last thingy.
      var newPos = base === end ? base - 2 : base - 1; // Malayalam / Tamil do not have "half" forms or explicit virama forms.
      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
      // We want to position matra after them.

      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
          newPos--;
        } // If we found no Halant we are done.
        // Otherwise only proceed if the Halant does
        // not belong to the Matra itself!


        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
          // If ZWJ or ZWNJ follow this halant, position is moved after it.
          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {
            newPos++;
          }
        } else {
          newPos = start; // No move.
        }
      }

      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
        // Now go see if there's actually any matras...
        for (var _i19 = newPos; _i19 > start; _i19--) {
          if (glyphs[_i19 - 1].shaperInfo.position === POSITIONS.Pre_M) {
            var oldPos = _i19 - 1;

            if (oldPos < base && base <= newPos) {
              // Shouldn't actually happen.
              base--;
            }

            var tmp = glyphs[oldPos];
            glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));
            glyphs[newPos] = tmp;
            newPos--;
          }
        }
      }
    } // o Reorder reph:
    //
    // Reph’s original position is always at the beginning of the syllable,
    // (i.e. it is not reordered at the character reordering stage). However,
    // it will be reordered according to the basic-forms shaping results.
    // Possible positions for reph, depending on the script, are; after main,
    // before post-base consonant forms, and after post-base consonant forms.
    // Two cases:
    //
    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then
    //   we should only move it if the sequence ligated to the repha form.
    //
    // - If repha is encoded separately and in the logical position, we should only
    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying
    //   to make it work without the reordering.


    if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
      var newRephPos = void 0;
      var rephPos = indicConfig.rephPos;
      var found = false; // 1. If reph should be positioned after post-base consonant forms,
      //    proceed to step 5.

      if (rephPos !== POSITIONS.After_Post) {
        //  2. If the reph repositioning class is not after post-base: target
        //     position is after the first explicit halant glyph between the
        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ
        //     are following this halant, position is moved after it. If such
        //     position is found, this is the target position. Otherwise,
        //     proceed to the next step.
        //
        //     Note: in old-implementation fonts, where classifications were
        //     fixed in shaping engine, there was no case where reph position
        //     will be found on this step.
        newRephPos = start + 1;

        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
          newRephPos++;
        }

        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
            newRephPos++;
          }

          found = true;
        } // 3. If reph should be repositioned after the main consonant: find the
        //    first consonant not ligated with main, or find the first
        //    consonant that is not a potential pre-base reordering Ra.


        if (!found && rephPos === POSITIONS.After_Main) {
          newRephPos = base;

          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {
            newRephPos++;
          }

          found = newRephPos < end;
        } // 4. If reph should be positioned before post-base consonant, find
        //    first post-base classified consonant not ligated with main. If no
        //    consonant is found, the target position should be before the
        //    first matra, syllable modifier sign or vedic sign.
        //
        // This is our take on what step 4 is trying to say (and failing, BADLY).


        if (!found && rephPos === POSITIONS.After_Sub) {
          newRephPos = base;

          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {
            newRephPos++;
          }

          found = newRephPos < end;
        }
      } //  5. If no consonant is found in steps 3 or 4, move reph to a position
      //     immediately before the first post-base matra, syllable modifier
      //     sign or vedic sign that has a reordering class after the intended
      //     reph position. For example, if the reordering position for reph
      //     is post-main, it will skip above-base matras that also have a
      //     post-main position.


      if (!found) {
        // Copied from step 2.
        newRephPos = start + 1;

        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
          newRephPos++;
        }

        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
            newRephPos++;
          }

          found = true;
        }
      } // 6. Otherwise, reorder reph to the end of the syllable.


      if (!found) {
        newRephPos = end - 1;

        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {
          newRephPos--;
        } // If the Reph is to be ending up after a Matra,Halant sequence,
        // position it before that Halant so it can interact with the Matra.
        // However, if it's a plain Consonant,Halant we shouldn't do that.
        // Uniscribe doesn't do this.
        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D


        if (isHalantOrCoeng(glyphs[newRephPos])) {
          for (var _i20 = base + 1; _i20 < newRephPos; _i20++) {
            if (glyphs[_i20].shaperInfo.category === CATEGORIES.M) {
              newRephPos--;
            }
          }
        }
      }

      var reph = glyphs[start];
      glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));
      glyphs[newRephPos] = reph;

      if (start < base && base <= newRephPos) {
        base--;
      }
    } // o Reorder pre-base reordering consonants:
    //
    // If a pre-base reordering consonant is found, reorder it according to
    // the following rules:


    if (tryPref && base + 1 < end) {
      for (var _i21 = base + 1; _i21 < end; _i21++) {
        if (glyphs[_i21].features.pref) {
          // 1. Only reorder a glyph produced by substitution during application
          //    of the <pref> feature. (Note that a font may shape a Ra consonant with
          //    the feature generally but block it in certain contexts.)
          // Note: We just check that something got substituted.  We don't check that
          // the <pref> feature actually did it...
          //
          // Reorder pref only if it ligated.
          if (glyphs[_i21].isLigated && !glyphs[_i21].isMultiplied) {
            // 2. Try to find a target position the same way as for pre-base matra.
            //    If it is found, reorder pre-base consonant glyph.
            //
            // 3. If position is not found, reorder immediately before main
            //    consonant.
            var _newPos = base; // Malayalam / Tamil do not have "half" forms or explicit virama forms.
            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
            // We want to position matra after them.

            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
              while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
                _newPos--;
              } // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a
              // split matra, it should be reordered to *before* the left part of such matra.


              if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {
                var _oldPos2 = _i21;

                for (var j = base + 1; j < _oldPos2; j++) {
                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {
                    _newPos--;
                    break;
                  }
                }
              }
            }

            if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {
              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.
              if (_newPos < end && isJoiner(glyphs[_newPos])) {
                _newPos++;
              }
            }

            var _oldPos = _i21;
            var _tmp = glyphs[_oldPos];
            glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));
            glyphs[_newPos] = _tmp;

            if (_newPos <= base && base < _oldPos) {
              base++;
            }
          }

          break;
        }
      }
    } // Apply 'init' to the Left Matra if it's a word start.


    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(_react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].getCategory(glyphs[start - 1].codePoints[0])))) {
      glyphs[start].features.init = true;
    }
  }
}

function nextSyllable$1(glyphs, start) {
  if (start >= glyphs.length) return start;
  var syllable = glyphs[start].shaperInfo.syllable;

  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {
  }

  return start;
}

var type = "Buffer";
var data = [
	0,
	2,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	186,
	16,
	1,
	5,
	14,
	250,
	241,
	237,
	156,
	123,
	140,
	95,
	69,
	21,
	199,
	103,
	119,
	187,
	251,
	123,
	109,
	119,
	187,
	22,
	90,
	160,
	188,
	31,
	166,
	165,
	8,
	69,
	154,
	24,
	164,
	49,
	16,
	32,
	209,
	148,
	38,
	106,
	67,
	20,
	249,
	195,
	214,
	7,
	54,
	98,
	176,
	65,
	141,
	141,
	74,
	104,
	136,
	134,
	2,
	18,
	9,
	134,
	80,
	99,
	132,
	26,
	163,
	149,
	52,
	245,
	25,
	80,
	99,
	64,
	249,
	3,
	72,
	5,
	77,
	138,
	68,
	65,
	5,
	21,
	35,
	1,
	81,
	132,
	72,
	72,
	197,
	196,
	248,
	29,
	239,
	156,
	252,
	206,
	206,
	158,
	121,
	222,
	215,
	22,
	126,
	39,
	249,
	100,
	238,
	99,
	158,
	231,
	204,
	204,
	157,
	153,
	59,
	247,
	174,
	154,
	80,
	234,
	20,
	176,
	22,
	156,
	3,
	46,
	4,
	27,
	193,
	102,
	112,
	185,
	185,
	118,
	94,
	5,
	238,
	22,
	176,
	13,
	108,
	7,
	59,
	60,
	254,
	118,
	130,
	93,
	194,
	245,
	27,
	193,
	173,
	96,
	55,
	216,
	3,
	190,
	13,
	190,
	7,
	238,
	1,
	247,
	25,
	30,
	100,
	254,
	127,
	1,
	30,
	5,
	191,
	3,
	79,
	11,
	241,
	61,
	5,
	158,
	1,
	171,
	192,
	11,
	38,
	111,
	171,
	204,
	253,
	85,
	140,
	87,
	192,
	33,
	160,
	150,
	40,
	213,
	5,
	203,
	192,
	10,
	112,
	60,
	120,
	35,
	56,
	19,
	172,
	7,
	27,
	192,
	69,
	224,
	18,
	240,
	110,
	240,
	62,
	240,
	1,
	240,
	81,
	176,
	29,
	236,
	0,
	59,
	193,
	46,
	112,
	11,
	216,
	13,
	238,
	4,
	123,
	193,
	126,
	112,
	55,
	184,
	23,
	60,
	0,
	30,
	6,
	191,
	6,
	191,
	7,
	127,
	1,
	207,
	130,
	23,
	193,
	33,
	160,
	38,
	149,
	234,
	128,
	89,
	176,
	18,
	156,
	0,
	78,
	5,
	103,
	76,
	22,
	121,
	95,
	15,
	247,
	60,
	112,
	161,
	57,
	223,
	8,
	119,
	51,
	184,
	28,
	108,
	1,
	219,
	192,
	199,
	193,
	167,
	205,
	253,
	107,
	225,
	126,
	1,
	220,
	12,
	110,
	3,
	95,
	155,
	28,
	150,
	253,
	155,
	147,
	243,
	117,
	81,
	150,
	253,
	136,
	239,
	251,
	21,
	199,
	201,
	249,
	177,
	21,
	247,
	125,
	56,
	127,
	16,
	252,
	10,
	252,
	6,
	60,
	53,
	89,
	148,
	247,
	25,
	240,
	2,
	120,
	5,
	252,
	55,
	144,
	159,
	169,
	41,
	165,
	102,
	192,
	10,
	176,
	106,
	170,
	8,
	127,
	10,
	220,
	53,
	224,
	108,
	112,
	174,
	185,
	118,
	1,
	220,
	119,
	128,
	119,
	129,
	203,
	166,
	10,
	221,
	106,
	182,
	226,
	248,
	67,
	224,
	99,
	224,
	147,
	224,
	115,
	224,
	243,
	38,
	204,
	77,
	198,
	253,
	50,
	220,
	175,
	130,
	27,
	88,
	186,
	223,
	192,
	249,
	190,
	41,
	127,
	222,
	126,
	16,
	184,
	31,
	195,
	79,
	16,
	199,
	253,
	224,
	0,
	56,
	8,
	158,
	48,
	229,
	210,
	247,
	158,
	132,
	251,
	87,
	240,
	15,
	240,
	178,
	185,
	246,
	42,
	220,
	241,
	14,
	234,
	32,
	88,
	218,
	9,
	199,
	127,
	36,
	252,
	28,
	215,
	41,
	226,
	60,
	17,
	238,
	106,
	112,
	22,
	88,
	15,
	214,
	153,
	180,
	54,
	224,
	248,
	12,
	19,
	215,
	219,
	140,
	95,
	205,
	197,
	236,
	152,
	179,
	9,
	215,
	47,
	5,
	151,
	89,
	247,
	183,
	58,
	252,
	19,
	31,
	49,
	105,
	159,
	205,
	244,
	230,
	243,
	207,
	253,
	229,
	162,
	227,
	248,
	48,
	210,
	188,
	10,
	92,
	13,
	118,
	116,
	226,
	227,
	223,
	105,
	233,
	247,
	76,
	193,
	207,
	46,
	248,
	185,
	5,
	236,
	238,
	20,
	245,
	109,
	15,
	139,
	127,
	169,
	71,
	31,
	123,
	113,
	111,
	63,
	184,
	27,
	220,
	235,
	176,
	163,
	212,
	254,
	31,
	232,
	12,
	203,
	245,
	8,
	142,
	31,
	3,
	127,
	0,
	79,
	155,
	180,
	244,
	241,
	223,
	204,
	241,
	99,
	1,
	123,
	84,
	161,
	223,
	17,
	35,
	94,
	143,
	140,
	218,
	207,
	136,
	17,
	35,
	70,
	140,
	24,
	49,
	98,
	196,
	136,
	215,
	2,
	235,
	58,
	195,
	53,
	129,
	27,
	34,
	252,
	255,
	147,
	205,
	93,
	255,
	101,
	205,
	99,
	191,
	24,
	17,
	254,
	63,
	8,
	51,
	209,
	45,
	214,
	97,
	6,
	112,
	151,
	131,
	21,
	224,
	56,
	112,
	154,
	185,
	254,
	38,
	184,
	235,
	187,
	133,
	255,
	13,
	112,
	207,
	7,
	111,
	7,
	239,
	52,
	247,
	223,
	11,
	119,
	11,
	216,
	102,
	206,
	183,
	195,
	221,
	1,
	118,
	118,
	221,
	233,
	106,
	127,
	187,
	60,
	247,
	71,
	140,
	24,
	49,
	98,
	68,
	189,
	156,
	211,
	50,
	109,
	151,
	127,
	196,
	136,
	17,
	245,
	80,
	119,
	251,
	254,
	18,
	198,
	143,
	183,
	119,
	139,
	247,
	66,
	119,
	192,
	253,
	150,
	48,
	158,
	252,
	78,
	183,
	120,
	183,
	175,
	143,
	239,
	177,
	238,
	223,
	183,
	8,
	198,
	159,
	127,
	159,
	46,
	152,
	94,
	170,
	212,
	37,
	224,
	145,
	233,
	48,
	59,
	225,
	239,
	231,
	150,
	95,
	53,
	51,
	60,
	94,
	141,
	227,
	45,
	96,
	15,
	120,
	28,
	28,
	50,
	247,
	86,
	207,
	98,
	140,
	62,
	59,
	244,
	183,
	3,
	199,
	123,
	160,
	131,
	63,
	129,
	19,
	123,
	8,
	3,
	246,
	244,
	138,
	177,
	252,
	29,
	83,
	133,
	251,
	176,
	57,
	231,
	12,
	250,
	240,
	55,
	54,
	100,
	99,
	127,
	161,
	159,
	155,
	112,
	109,
	31,
	187,
	254,
	60,
	142,
	215,
	14,
	148,
	186,
	18,
	236,
	3,
	207,
	131,
	181,
	211,
	237,
	63,
	127,
	218,
	38,
	212,
	94,
	30,
	132,
	238,
	14,
	152,
	122,
	122,
	16,
	238,
	227,
	198,
	94,
	122,
	158,
	248,
	108,
	55,
	253,
	121,
	186,
	223,
	184,
	103,
	70,
	250,
	231,
	188,
	152,
	145,
	158,
	212,
	39,
	72,
	225,
	95,
	70,
	220,
	175,
	118,
	231,
	251,
	163,
	252,
	238,
	247,
	164,
	55,
	142,
	250,
	217,
	3,
	115,
	189,
	97,
	217,
	180,
	191,
	163,
	112,
	126,
	108,
	175,
	56,
	63,
	185,
	55,
	244,
	127,
	122,
	111,
	126,
	62,
	98,
	251,
	171,
	88,
	91,
	186,
	202,
	247,
	230,
	158,
	124,
	239,
	173,
	184,
	190,
	1,
	92,
	4,
	54,
	130,
	205,
	224,
	61,
	224,
	73,
	115,
	255,
	253,
	56,
	190,
	2,
	92,
	5,
	174,
	54,
	247,
	63,
	3,
	174,
	3,
	55,
	130,
	91,
	193,
	237,
	44,
	238,
	59,
	113,
	188,
	23,
	236,
	3,
	63,
	4,
	63,
	5,
	247,
	131,
	3,
	224,
	160,
	144,
	7,
	61,
	15,
	127,
	2,
	215,
	255,
	108,
	238,
	233,
	253,
	52,
	207,
	225,
	248,
	37,
	193,
	47,
	249,
	255,
	55,
	238,
	141,
	245,
	135,
	231,
	61,
	28,
	207,
	129,
	163,
	251,
	197,
	249,
	73,
	253,
	98,
	111,
	137,
	190,
	191,
	6,
	199,
	103,
	247,
	221,
	58,
	211,
	254,
	207,
	237,
	203,
	58,
	115,
	233,
	253,
	2,
	248,
	191,
	24,
	108,
	2,
	151,
	130,
	203,
	192,
	86,
	147,
	246,
	182,
	126,
	209,
	102,
	98,
	237,
	182,
	29,
	254,
	63,
	5,
	174,
	1,
	215,
	129,
	235,
	193,
	205,
	44,
	63,
	183,
	225,
	248,
	43,
	224,
	235,
	224,
	46,
	240,
	93,
	86,
	182,
	16,
	63,
	242,
	148,
	251,
	81,
	228,
	241,
	103,
	253,
	118,
	158,
	57,
	46,
	93,
	63,
	20,
	200,
	207,
	98,
	234,
	43,
	171,
	212,
	65,
	27,
	233,
	255,
	178,
	63,
	63,
	222,
	131,
	70,
	247,
	191,
	133,
	251,
	199,
	126,
	185,
	124,
	198,
	150,
	227,
	105,
	79,
	187,
	179,
	211,
	191,
	171,
	226,
	242,
	47,
	198,
	250,
	85,
	133,
	253,
	203,
	212,
	147,
	182,
	203,
	151,
	90,
	254,
	231,
	250,
	205,
	230,
	219,
	183,
	143,
	106,
	175,
	89,
	55,
	127,
	169,
	95,
	184,
	135,
	224,
	42,
	140,
	49,
	167,
	6,
	197,
	249,
	244,
	96,
	232,
	247,
	136,
	129,
	92,
	54,
	186,
	191,
	166,
	35,
	151,
	171,
	238,
	250,
	31,
	34,
	180,
	151,
	44,
	102,
	175,
	217,
	202,
	65,
	225,
	30,
	15,
	247,
	180,
	193,
	225,
	81,
	239,
	108,
	253,
	135,
	238,
	159,
	46,
	216,
	55,
	20,
	239,
	67,
	194,
	216,
	118,
	177,
	17,
	219,
	239,
	220,
	208,
	96,
	94,
	206,
	26,
	204,
	191,
	118,
	77,
	70,
	254,
	207,
	153,
	136,
	171,
	135,
	186,
	14,
	191,
	133,
	181,
	99,
	189,
	191,
	115,
	3,
	206,
	207,
	31,
	20,
	237,
	127,
	29,
	219,
	111,
	121,
	177,
	241,
	55,
	48,
	249,
	219,
	4,
	247,
	210,
	65,
	177,
	239,
	246,
	114,
	184,
	31,
	20,
	234,
	136,
	175,
	237,
	172,
	142,
	216,
	203,
	153,
	139,
	206,
	251,
	149,
	131,
	249,
	215,
	248,
	222,
	213,
	231,
	80,
	55,
	175,
	232,
	12,
	203,
	254,
	9,
	227,
	126,
	22,
	238,
	93,
	157,
	97,
	254,
	79,
	101,
	97,
	174,
	53,
	126,
	174,
	135,
	123,
	179,
	16,
	247,
	173,
	184,
	182,
	59,
	177,
	157,
	180,
	205,
	49,
	19,
	99,
	106,
	49,
	200,
	24,
	99,
	220,
	58,
	231,
	126,
	200,
	157,
	96,
	247,
	151,
	68,
	98,
	199,
	167,
	28,
	215,
	234,
	150,
	197,
	161,
	241,
	145,
	144,
	80,
	93,
	26,
	23,
	32,
	91,
	141,
	11,
	225,
	198,
	45,
	119,
	210,
	64,
	18,
	83,
	183,
	234,
	174,
	11,
	19,
	53,
	199,
	95,
	181,
	76,
	181,
	157,
	129,
	18,
	18,
	99,
	203,
	215,
	83,
	219,
	151,
	218,
	204,
	235,
	73,
	198,
	28,
	44,
	6,
	177,
	243,
	193,
	251,
	188,
	195,
	93,
	164,
	49,
	131,
	125,
	124,
	184,
	72,
	110,
	157,
	145,
	198,
	82,
	57,
	246,
	181,
	245,
	119,
	56,
	233,
	176,
	169,
	118,
	23,
	27,
	119,
	138,
	238,
	171,
	110,
	135,
	220,
	246,
	174,
	126,
	41,
	196,
	107,
	93,
	92,
	243,
	14,
	126,
	191,
	10,
	187,
	228,
	234,
	159,
	242,
	212,
	97,
	96,
	26,
	27,
	61,
	255,
	169,
	154,
	30,
	48,
	75,
	130,
	255,
	63,
	215,
	199,
	211,
	198,
	93,
	106,
	209,
	179,
	232,
	91,
	204,
	176,
	176,
	84,
	198,
	89,
	166,
	179,
	30,
	139,
	43,
	54,
	127,
	228,
	63,
	103,
	158,
	168,
	74,
	232,
	101,
	130,
	217,
	166,
	27,
	25,
	151,
	178,
	252,
	217,
	231,
	169,
	132,
	194,
	42,
	53,
	63,
	29,
	201,
	63,
	73,
	140,
	125,
	73,
	166,
	13,
	246,
	185,
	182,
	111,
	76,
	31,
	210,
	23,
	174,
	185,
	202,
	100,
	167,
	157,
	170,
	163,
	80,
	123,
	166,
	251,
	84,
	39,
	248,
	220,
	142,
	183,
	63,
	95,
	218,
	190,
	178,
	228,
	228,
	57,
	213,
	190,
	161,
	99,
	45,
	3,
	227,
	74,
	246,
	181,
	133,
	218,
	175,
	125,
	62,
	99,
	249,
	155,
	85,
	126,
	137,
	169,
	143,
	161,
	48,
	46,
	180,
	93,
	150,
	169,
	162,
	29,
	210,
	252,
	119,
	78,
	165,
	61,
	195,
	98,
	237,
	235,
	179,
	73,
	74,
	158,
	171,
	178,
	111,
	110,
	251,
	37,
	155,
	242,
	62,
	90,
	169,
	249,
	253,
	115,
	85,
	82,
	182,
	253,
	210,
	88,
	54,
	148,
	6,
	127,
	78,
	46,
	99,
	40,
	117,
	248,
	244,
	207,
	169,
	246,
	165,
	103,
	107,
	78,
	255,
	28,
	18,
	187,
	237,
	219,
	58,
	176,
	243,
	153,
	107,
	223,
	113,
	53,
	191,
	124,
	185,
	162,
	109,
	28,
	122,
	150,
	75,
	229,
	112,
	233,
	92,
	242,
	171,
	4,
	255,
	46,
	127,
	174,
	116,
	164,
	235,
	177,
	117,
	136,
	11,
	181,
	85,
	62,
	190,
	226,
	50,
	173,
	230,
	219,
	159,
	159,
	199,
	182,
	111,
	233,
	249,
	236,
	146,
	156,
	114,
	72,
	107,
	176,
	161,
	181,
	9,
	222,
	150,
	187,
	230,
	60,
	181,
	253,
	165,
	228,
	55,
	167,
	61,
	167,
	234,
	65,
	159,
	251,
	198,
	203,
	74,
	45,
	236,
	171,
	249,
	121,
	200,
	158,
	52,
	158,
	150,
	244,
	96,
	75,
	217,
	246,
	236,
	147,
	208,
	51,
	153,
	250,
	2,
	110,
	227,
	152,
	177,
	188,
	84,
	174,
	166,
	236,
	235,
	242,
	75,
	98,
	247,
	215,
	117,
	216,
	87,
	106,
	255,
	182,
	216,
	121,
	45,
	99,
	223,
	55,
	24,
	114,
	132,
	143,
	181,
	82,
	158,
	199,
	85,
	183,
	191,
	28,
	200,
	30,
	100,
	79,
	27,
	174,
	211,
	80,
	255,
	187,
	92,
	201,
	125,
	28,
	159,
	255,
	199,
	216,
	180,
	206,
	246,
	74,
	98,
	175,
	149,
	72,
	235,
	38,
	41,
	246,
	204,
	201,
	91,
	213,
	182,
	140,
	141,
	83,
	169,
	249,
	121,
	137,
	205,
	175,
	212,
	102,
	121,
	93,
	161,
	186,
	68,
	54,
	91,
	202,
	252,
	76,
	59,
	240,
	213,
	135,
	84,
	157,
	82,
	62,
	114,
	214,
	250,
	218,
	104,
	123,
	62,
	219,
	244,
	216,
	53,
	123,
	237,
	73,
	26,
	23,
	147,
	140,
	43,
	127,
	220,
	58,
	124,
	71,
	45,
	156,
	91,
	116,
	204,
	189,
	178,
	251,
	17,
	108,
	125,
	42,
	203,
	205,
	173,
	179,
	57,
	58,
	140,
	137,
	155,
	252,
	196,
	234,
	91,
	159,
	207,
	177,
	176,
	190,
	114,
	145,
	216,
	250,
	86,
	204,
	77,
	41,
	191,
	203,
	191,
	22,
	251,
	157,
	127,
	46,
	227,
	204,
	181,
	199,
	172,
	174,
	49,
	109,
	213,
	246,
	211,
	113,
	78,
	90,
	46,
	205,
	123,
	37,
	137,
	181,
	113,
	157,
	216,
	194,
	215,
	140,
	93,
	107,
	200,
	54,
	52,
	134,
	224,
	231,
	29,
	53,
	92,
	3,
	246,
	149,
	247,
	136,
	4,
	84,
	162,
	255,
	58,
	208,
	18,
	154,
	43,
	77,
	122,
	238,
	241,
	240,
	174,
	122,
	44,
	181,
	9,
	73,
	234,
	174,
	27,
	41,
	72,
	207,
	82,
	205,
	180,
	146,
	235,
	139,
	94,
	167,
	212,
	117,
	102,
	198,
	92,
	59,
	18,
	172,
	80,
	69,
	31,
	53,
	151,
	152,
	182,
	189,
	47,
	141,
	142,
	67,
	121,
	117,
	189,
	215,
	152,
	83,
	243,
	243,
	209,
	87,
	195,
	49,
	149,
	29,
	71,
	87,
	128,
	199,
	101,
	151,
	61,
	71,
	183,
	115,
	106,
	56,
	22,
	161,
	120,
	164,
	116,
	187,
	70,
	175,
	75,
	132,
	124,
	248,
	160,
	176,
	100,
	191,
	54,
	246,
	35,
	72,
	117,
	188,
	237,
	119,
	163,
	161,
	118,
	94,
	133,
	158,
	248,
	94,
	183,
	42,
	165,
	14,
	29,
	229,
	62,
	95,
	236,
	107,
	188,
	127,
	168,
	59,
	125,
	9,
	158,
	126,
	138,
	142,
	170,
	78,
	63,
	85,
	170,
	208,
	191,
	106,
	56,
	253,
	80,
	222,
	180,
	240,
	231,
	134,
	52,
	118,
	117,
	205,
	193,
	8,
	26,
	127,
	244,
	213,
	112,
	236,
	161,
	159,
	193,
	43,
	85,
	49,
	254,
	154,
	100,
	208,
	26,
	142,
	62,
	182,
	219,
	136,
	253,
	28,
	38,
	91,
	165,
	150,
	191,
	46,
	241,
	245,
	129,
	77,
	244,
	139,
	250,
	185,
	90,
	117,
	29,
	72,
	209,
	41,
	175,
	27,
	246,
	120,
	131,
	176,
	199,
	106,
	92,
	142,
	50,
	204,
	178,
	99,
	155,
	163,
	77,
	60,
	147,
	66,
	120,
	187,
	175,
	79,
	221,
	223,
	80,
	117,
	187,
	41,
	91,
	247,
	114,
	211,
	205,
	13,
	111,
	195,
	215,
	169,
	202,
	230,
	143,
	75,
	236,
	115,
	187,
	110,
	234,
	172,
	3,
	212,
	14,
	104,
	45,
	138,
	247,
	83,
	117,
	214,
	75,
	26,
	163,
	235,
	246,
	181,
	210,
	112,
	140,
	146,
	231,
	73,
	51,
	44,
	111,
	174,
	246,
	202,
	231,
	152,
	212,
	174,
	165,
	62,
	94,
	90,
	255,
	33,
	168,
	189,
	242,
	54,
	59,
	153,
	80,
	38,
	151,
	148,
	13,
	31,
	26,
	183,
	214,
	61,
	166,
	229,
	58,
	210,
	118,
	106,
	122,
	207,
	154,
	126,
	246,
	74,
	115,
	66,
	123,
	93,
	65,
	178,
	53,
	61,
	167,
	235,
	232,
	143,
	66,
	235,
	72,
	49,
	172,
	2,
	199,
	26,
	215,
	69,
	234,
	220,
	161,
	45,
	59,
	113,
	120,
	27,
	150,
	250,
	24,
	106,
	203,
	51,
	204,
	95,
	221,
	245,
	198,
	94,
	171,
	39,
	151,
	250,
	159,
	152,
	119,
	110,
	90,
	108,
	91,
	187,
	202,
	110,
	247,
	65,
	124,
	189,
	96,
	165,
	135,
	227,
	12,
	186,
	239,
	161,
	189,
	93,
	174,
	180,
	83,
	250,
	103,
	46,
	49,
	253,
	78,
	172,
	148,
	157,
	91,
	243,
	254,
	69,
	251,
	159,
	117,
	64,
	126,
	164,
	235,
	93,
	79,
	56,
	105,
	47,
	155,
	116,
	141,
	242,
	171,
	227,
	163,
	247,
	161,
	180,
	31,
	65,
	211,
	198,
	183,
	88,
	210,
	248,
	49,
	36,
	199,
	131,
	19,
	216,
	249,
	132,
	131,
	88,
	251,
	216,
	235,
	97,
	169,
	246,
	77,
	89,
	127,
	137,
	185,
	158,
	26,
	183,
	253,
	172,
	76,
	9,
	167,
	229,
	196,
	136,
	50,
	166,
	72,
	142,
	77,
	41,
	156,
	61,
	62,
	105,
	66,
	58,
	97,
	47,
	94,
	145,
	214,
	172,
	165,
	107,
	41,
	241,
	197,
	132,
	11,
	173,
	157,
	75,
	174,
	148,
	78,
	74,
	190,
	202,
	150,
	163,
	202,
	245,
	210,
	148,
	252,
	248,
	198,
	20,
	33,
	155,
	249,
	236,
	235,
	10,
	87,
	5,
	82,
	57,
	235,
	72,
	199,
	55,
	214,
	138,
	145,
	212,
	248,
	234,
	202,
	111,
	89,
	63,
	117,
	234,
	179,
	141,
	116,
	115,
	108,
	25,
	35,
	109,
	151,
	161,
	233,
	242,
	134,
	164,
	77,
	91,
	164,
	164,
	95,
	103,
	221,
	77,
	201,
	199,
	68,
	205,
	121,
	246,
	233,
	221,
	30,
	35,
	150,
	213,
	95,
	21,
	250,
	111,
	66,
	66,
	105,
	53,
	161,
	255,
	166,
	236,
	156,
	163,
	239,
	170,
	109,
	147,
	243,
	238,
	193,
	53,
	47,
	112,
	197,
	25,
	90,
	47,
	115,
	133,
	207,
	45,
	67,
	206,
	220,
	66,
	242,
	175,
	50,
	226,
	74,
	153,
	143,
	133,
	164,
	201,
	126,
	167,
	137,
	250,
	222,
	180,
	62,
	36,
	225,
	246,
	201,
	205,
	91,
	110,
	185,
	234,
	234,
	67,
	67,
	229,
	173,
	202,
	14,
	174,
	120,
	154,
	174,
	7,
	177,
	210,
	84,
	251,
	41,
	91,
	214,
	182,
	242,
	80,
	214,
	38,
	139,
	161,
	111,
	168,
	178,
	191,
	181,
	227,
	77,
	245,
	75,
	235,
	184,
	246,
	190,
	48,
	233,
	189,
	71,
	204,
	183,
	85,
	101,
	224,
	107,
	220,
	180,
	198,
	158,
	171,
	251,
	216,
	112,
	85,
	151,
	33,
	245,
	121,
	42,
	237,
	215,
	107,
	18,
	189,
	231,
	81,
	250,
	118,
	197,
	133,
	174,
	23,
	49,
	107,
	122,
	84,
	254,
	156,
	247,
	11,
	92,
	92,
	239,
	91,
	83,
	113,
	165,
	227,
	26,
	59,
	73,
	109,
	130,
	35,
	237,
	65,
	230,
	239,
	12,
	82,
	203,
	31,
	131,
	253,
	222,
	210,
	126,
	151,
	201,
	223,
	3,
	233,
	125,
	36,
	41,
	223,
	107,
	82,
	217,
	219,
	124,
	87,
	107,
	67,
	239,
	224,
	92,
	123,
	122,
	233,
	61,
	173,
	222,
	11,
	160,
	235,
	241,
	73,
	106,
	248,
	175,
	137,
	220,
	113,
	111,
	110,
	125,
	245,
	217,
	155,
	246,
	69,
	212,
	173,
	175,
	216,
	52,
	164,
	253,
	15,
	252,
	29,
	56,
	93,
	179,
	247,
	67,
	199,
	8,
	79,
	103,
	101,
	68,
	94,
	168,
	174,
	74,
	225,
	99,
	244,
	111,
	219,
	177,
	106,
	29,
	242,
	245,
	12,
	254,
	60,
	209,
	247,
	232,
	253,
	94,
	149,
	237,
	164,
	199,
	92,
	178,
	131,
	109,
	55,
	87,
	56,
	234,
	231,
	200,
	109,
	82,
	114,
	244,
	175,
	235,
	26,
	175,
	123,
	125,
	37,
	63,
	55,
	105,
	143,
	126,
	140,
	240,
	248,
	165,
	111,
	226,
	249,
	190,
	189,
	49,
	19,
	119,
	93,
	223,
	73,
	214,
	33,
	246,
	120,
	230,
	228,
	146,
	196,
	174,
	49,
	248,
	36,
	102,
	77,
	66,
	186,
	23,
	242,
	235,
	74,
	199,
	231,
	143,
	230,
	142,
	117,
	140,
	175,
	165,
	124,
	140,
	43,
	191,
	206,
	164,
	117,
	163,
	148,
	52,
	236,
	107,
	74,
	201,
	186,
	110,
	74,
	236,
	250,
	103,
	143,
	177,
	125,
	115,
	237,
	42,
	210,
	171,
	107,
	238,
	148,
	35,
	139,
	101,
	253,
	160,
	204,
	28,
	86,
	178,
	95,
	153,
	185,
	112,
	83,
	101,
	118,
	73,
	93,
	235,
	18,
	77,
	216,
	184,
	238,
	58,
	93,
	119,
	252,
	49,
	250,
	208,
	207,
	78,
	251,
	27,
	108,
	223,
	183,
	32,
	228,
	143,
	246,
	106,
	133,
	198,
	107,
	246,
	121,
	93,
	144,
	232,
	57,
	202,
	64,
	45,
	220,
	107,
	167,
	37,
	180,
	119,
	52,
	102,
	44,
	81,
	245,
	154,
	125,
	221,
	237,
	179,
	206,
	119,
	11,
	135,
	75,
	30,
	154,
	78,
	51,
	165,
	156,
	124,
	206,
	66,
	251,
	20,
	155,
	104,
	47,
	246,
	28,
	198,
	181,
	31,
	219,
	245,
	189,
	119,
	104,
	94,
	111,
	203,
	41,
	37,
	105,
	98,
	30,
	112,
	170,
	106,
	255,
	95,
	174,
	210,
	127,
	1,
	237,
	61,
	207,
	90,
	247,
	186,
	127,
	147,
	198,
	237,
	210,
	26,
	91,
	91,
	72,
	245,
	74,
	250,
	246,
	155,
	238,
	209,
	119,
	223,
	42,
	33,
	13,
	105,
	189,
	33,
	118,
	239,
	119,
	74,
	58,
	49,
	216,
	54,
	105,
	58,
	125,
	223,
	63,
	37,
	125,
	237,
	88,
	135,
	93,
	110,
	80,
	106,
	161,
	78,
	105,
	239,
	58,
	217,
	42,
	119,
	125,
	78,
	154,
	99,
	86,
	173,
	3,
	74,
	43,
	86,
	170,
	76,
	51,
	215,
	102,
	246,
	123,
	22,
	251,
	191,
	8,
	218,
	70,
	244,
	191,
	76,
	87,
	127,
	75,
	239,
	0,
	98,
	242,
	40,
	249,
	43,
	171,
	139,
	148,
	240,
	190,
	246,
	81,
	117,
	93,
	72,
	65,
	235,
	208,
	215,
	255,
	18,
	3,
	229,
	30,
	31,
	151,
	173,
	163,
	185,
	255,
	95,
	83,
	158,
	243,
	170,
	109,
	105,
	167,
	229,
	242,
	67,
	227,
	112,
	94,
	207,
	237,
	111,
	119,
	120,
	63,
	93,
	230,
	127,
	168,
	74,
	249,
	251,
	124,
	87,
	187,
	35,
	241,
	189,
	171,
	82,
	1,
	127,
	41,
	82,
	71,
	189,
	77,
	233,
	247,
	237,
	247,
	134,
	84,
	215,
	200,
	78,
	92,
	164,
	126,
	38,
	165,
	14,
	241,
	254,
	62,
	229,
	219,
	203,
	178,
	101,
	165,
	49,
	6,
	255,
	86,
	139,
	254,
	9,
	64,
	229,
	165,
	49,
	148,
	157,
	215,
	144,
	148,
	109,
	223,
	117,
	149,
	157,
	68,
	250,
	15,
	130,
	93,
	230,
	152,
	57,
	108,
	46,
	118,
	158,
	203,
	254,
	23,
	222,
	213,
	110,
	83,
	234,
	58,
	47,
	127,
	207,
	202,
	111,
	170,
	148,
	181,
	127,
	142,
	78,
	171,
	148,
	20,
	93,
	243,
	127,
	120,
	133,
	158,
	137,
	118,
	123,
	170,
	34,
	253,
	178,
	144,
	232,
	119,
	165,
	250,
	189,
	233,
	105,
	42,
	252,
	79,
	42,
	187,
	108,
	101,
	243,
	207,
	237,
	56,
	158,
	17,
	222,
	215,
	230,
	165,
	177,
	162,
	221,
	206,
	83,
	243,
	159,
	91,
	206,
	170,
	251,
	49,
	187,
	13,
	211,
	120,
	136,
	230,
	43,
	84,
	54,
	62,
	94,
	104,
	66,
	150,
	168,
	133,
	255,
	40,
	144,
	144,
	254,
	33,
	86,
	53,
	147,
	38,
	29,
	123,
	60,
	162,
	245,
	164,
	231,
	114,
	115,
	22,
	174,
	111,
	62,
	233,
	122,
	204,
	56,
	203,
	87,
	126,
	169,
	95,
	182,
	243,
	188,
	220,
	193,
	209,
	137,
	80,
	57,
	151,
	169,
	133,
	107,
	81,
	75,
	148,
	251,
	121,
	228,
	170,
	243,
	77,
	244,
	71,
	190,
	255,
	30,
	240,
	181,
	119,
	187,
	77,
	243,
	118,
	109,
	247,
	41,
	109,
	172,
	55,
	112,
	73,
	29,
	23,
	198,
	198,
	93,
	230,
	95,
	140,
	190,
	251,
	212,
	215,
	243,
	61,
	141,
	41,
	227,
	248,
	216,
	122,
	20,
	242,
	91,
	6,
	87,
	127,
	195,
	165,
	199,
	92,
	126,
	76,
	101,
	229,
	235,
	57,
	244,
	191,
	235,
	152,
	61,
	69,
	57,
	117,
	36,
	38,
	188,
	114,
	28,
	215,
	217,
	22,
	125,
	255,
	121,
	87,
	74,
	30,
	63,
	86,
	165,
	159,
	16,
	19,
	106,
	225,
	191,
	54,
	98,
	218,
	122,
	155,
	239,
	80,
	171,
	24,
	171,
	214,
	53,
	254,
	173,
	243,
	221,
	79,
	91,
	239,
	177,
	104,
	76,
	233,
	179,
	219,
	152,
	227,
	122,
	19,
	82,
	231,
	60,
	38,
	86,
	236,
	189,
	42,
	169,
	123,
	48,
	154,
	218,
	159,
	208,
	196,
	30,
	149,
	152,
	248,
	155,
	42,
	243,
	98,
	220,
	239,
	33,
	137,
	148,
	70,
	91,
	237,
	169,
	170,
	114,
	199,
	232,
	51,
	69,
	247,
	116,
	92,
	247,
	218,
	133,
	84,
	142,
	170,
	227,
	40,
	27,
	231,
	98,
	108,
	23,
	101,
	227,
	168,
	178,
	125,
	214,
	213,
	214,
	171,
	212,
	91,
	217,
	188,
	248,
	164,
	238,
	116,
	203,
	228,
	205,
	151,
	191,
	166,
	164,
	201,
	250,
	149,
	147,
	126,
	85,
	249,
	207,
	13,
	95,
	85,
	250,
	49,
	233,
	148,
	213,
	115,
	200,
	111,
	29,
	249,
	78,
	73,
	191,
	142,
	184,
	109,
	73,
	177,
	157,
	36,
	185,
	245,
	192,
	37,
	255,
	3
];
var trieData = {
	type: type,
	data: data
};

var categories = useData.categories,
    decompositions = useData.decompositions;
var trie = new (unicode_trie__WEBPACK_IMPORTED_MODULE_8___default())(new Uint8Array(trieData.data));
var stateMachine = new dfa(useData);
/**
 * This shaper is an implementation of the Universal Shaping Engine, which
 * uses Unicode data to shape a number of scripts without a dedicated shaping engine.
 * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.
 */

var UniversalShaper = /*#__PURE__*/function (_DefaultShaper) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(UniversalShaper, _DefaultShaper);

  function UniversalShaper() {
    return _DefaultShaper.apply(this, arguments) || this;
  }

  UniversalShaper.planFeatures = function planFeatures(plan) {
    plan.addStage(setupSyllables); // Default glyph pre-processing group

    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']); // Reordering group

    plan.addStage(clearSubstitutionFlags);
    plan.addStage(['rphf'], false);
    plan.addStage(recordRphf);
    plan.addStage(clearSubstitutionFlags);
    plan.addStage(['pref']);
    plan.addStage(recordPref); // Orthographic unit shaping group

    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);
    plan.addStage(reorder); // Topographical features
    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.
    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);
    // Standard topographic presentation and positional feature application

    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);
  };

  UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {
    var _loop = function _loop(i) {
      var codepoint = glyphs[i].codePoints[0];

      if (decompositions[codepoint]) {
        var decomposed = decompositions[codepoint].map(function (c) {
          var g = plan.font.glyphForCodePoint(c);
          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
        });
        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
      }
    };

    // Decompose split vowels
    // TODO: do this in a more general unicode normalizer
    for (var i = glyphs.length - 1; i >= 0; i--) {
      _loop(i);
    }
  };

  return UniversalShaper;
}(DefaultShaper);

UniversalShaper.zeroMarkWidths = 'BEFORE_GPOS';

function useCategory(glyph) {
  return trie.get(glyph.codePoints[0]);
}

var USEInfo = function USEInfo(category, syllableType, syllable) {
  this.category = category;
  this.syllableType = syllableType;
  this.syllable = syllable;
};

function setupSyllables(font, glyphs) {
  var syllable = 0;

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(stateMachine.match(glyphs.map(useCategory))), _step; !(_step = _iterator()).done;) {
    var _step$value = _step.value,
        start = _step$value[0],
        end = _step$value[1],
        tags = _step$value[2];
    ++syllable; // Create shaper info

    for (var i = start; i <= end; i++) {
      glyphs[i].shaperInfo = new USEInfo(categories[useCategory(glyphs[i])], tags[0], syllable);
    } // Assign rphf feature


    var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);

    for (var _i = start; _i < start + limit; _i++) {
      glyphs[_i].features.rphf = true;
    }
  }
}

function clearSubstitutionFlags(font, glyphs) {
  for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphs), _step2; !(_step2 = _iterator2()).done;) {
    var glyph = _step2.value;
    glyph.substituted = false;
  }
}

function recordRphf(font, glyphs) {
  for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphs), _step3; !(_step3 = _iterator3()).done;) {
    var glyph = _step3.value;

    if (glyph.substituted && glyph.features.rphf) {
      // Mark a substituted repha.
      glyph.shaperInfo.category = 'R';
    }
  }
}

function recordPref(font, glyphs) {
  for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyphs), _step4; !(_step4 = _iterator4()).done;) {
    var glyph = _step4.value;

    if (glyph.substituted) {
      // Mark a substituted pref as VPre, as they behave the same way.
      glyph.shaperInfo.category = 'VPre';
    }
  }
}

function reorder(font, glyphs) {
  var dottedCircle = font.glyphForCodePoint(0x25cc).id;

  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
    var i = void 0,
        j = void 0;
    var info = glyphs[start].shaperInfo;
    var type = info.syllableType; // Only a few syllable types need reordering.

    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {
      continue;
    } // Insert a dotted circle glyph in broken clusters.


    if (type === 'broken_cluster' && dottedCircle) {
      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
      g.shaperInfo = info; // Insert after possible Repha.

      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {
      }

      glyphs.splice(++i, 0, g);
      end++;
    } // Move things forward.


    if (info.category === 'R' && end - start > 1) {
      // Got a repha. Reorder it to after first base, before first halant.
      for (i = start + 1; i < end; i++) {
        info = glyphs[i].shaperInfo;

        if (isBase(info) || isHalant(glyphs[i])) {
          // If we hit a halant, move before it; otherwise it's a base: move to it's
          // place, and shift things in between backward.
          if (isHalant(glyphs[i])) {
            i--;
          }

          glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));
          break;
        }
      }
    } // Move things back.


    for (i = start, j = end; i < end; i++) {
      info = glyphs[i].shaperInfo;

      if (isBase(info) || isHalant(glyphs[i])) {
        // If we hit a halant, move after it; otherwise it's a base: move to it's
        // place, and shift things in between backward.
        j = isHalant(glyphs[i]) ? i + 1 : i;
      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {
        glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));
      }
    }
  }
}

function nextSyllable(glyphs, start) {
  if (start >= glyphs.length) return start;
  var syllable = glyphs[start].shaperInfo.syllable;

  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {
  }

  return start;
}

function isHalant(glyph) {
  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;
}

function isBase(info) {
  return info.category === 'B' || info.category === 'GB';
}

var SHAPERS = {
  arab: ArabicShaper,
  // Arabic
  mong: ArabicShaper,
  // Mongolian
  syrc: ArabicShaper,
  // Syriac
  'nko ': ArabicShaper,
  // N'Ko
  phag: ArabicShaper,
  // Phags Pa
  mand: ArabicShaper,
  // Mandaic
  mani: ArabicShaper,
  // Manichaean
  phlp: ArabicShaper,
  // Psalter Pahlavi
  hang: HangulShaper,
  // Hangul
  bng2: IndicShaper,
  // Bengali
  beng: IndicShaper,
  // Bengali
  dev2: IndicShaper,
  // Devanagari
  deva: IndicShaper,
  // Devanagari
  gjr2: IndicShaper,
  // Gujarati
  gujr: IndicShaper,
  // Gujarati
  guru: IndicShaper,
  // Gurmukhi
  gur2: IndicShaper,
  // Gurmukhi
  knda: IndicShaper,
  // Kannada
  knd2: IndicShaper,
  // Kannada
  mlm2: IndicShaper,
  // Malayalam
  mlym: IndicShaper,
  // Malayalam
  ory2: IndicShaper,
  // Oriya
  orya: IndicShaper,
  // Oriya
  taml: IndicShaper,
  // Tamil
  tml2: IndicShaper,
  // Tamil
  telu: IndicShaper,
  // Telugu
  tel2: IndicShaper,
  // Telugu
  khmr: IndicShaper,
  // Khmer
  bali: UniversalShaper,
  // Balinese
  batk: UniversalShaper,
  // Batak
  brah: UniversalShaper,
  // Brahmi
  bugi: UniversalShaper,
  // Buginese
  buhd: UniversalShaper,
  // Buhid
  cakm: UniversalShaper,
  // Chakma
  cham: UniversalShaper,
  // Cham
  dupl: UniversalShaper,
  // Duployan
  egyp: UniversalShaper,
  // Egyptian Hieroglyphs
  gran: UniversalShaper,
  // Grantha
  hano: UniversalShaper,
  // Hanunoo
  java: UniversalShaper,
  // Javanese
  kthi: UniversalShaper,
  // Kaithi
  kali: UniversalShaper,
  // Kayah Li
  khar: UniversalShaper,
  // Kharoshthi
  khoj: UniversalShaper,
  // Khojki
  sind: UniversalShaper,
  // Khudawadi
  lepc: UniversalShaper,
  // Lepcha
  limb: UniversalShaper,
  // Limbu
  mahj: UniversalShaper,
  // Mahajani
  // mand: UniversalShaper, // Mandaic
  // mani: UniversalShaper, // Manichaean
  mtei: UniversalShaper,
  // Meitei Mayek
  modi: UniversalShaper,
  // Modi
  // mong: UniversalShaper, // Mongolian
  // 'nko ': UniversalShaper, // N’Ko
  hmng: UniversalShaper,
  // Pahawh Hmong
  // phag: UniversalShaper, // Phags-pa
  // phlp: UniversalShaper, // Psalter Pahlavi
  rjng: UniversalShaper,
  // Rejang
  saur: UniversalShaper,
  // Saurashtra
  shrd: UniversalShaper,
  // Sharada
  sidd: UniversalShaper,
  // Siddham
  sinh: UniversalShaper,
  // Sinhala
  sund: UniversalShaper,
  // Sundanese
  sylo: UniversalShaper,
  // Syloti Nagri
  tglg: UniversalShaper,
  // Tagalog
  tagb: UniversalShaper,
  // Tagbanwa
  tale: UniversalShaper,
  // Tai Le
  lana: UniversalShaper,
  // Tai Tham
  tavt: UniversalShaper,
  // Tai Viet
  takr: UniversalShaper,
  // Takri
  tibt: UniversalShaper,
  // Tibetan
  tfng: UniversalShaper,
  // Tifinagh
  tirh: UniversalShaper,
  // Tirhuta
  latn: DefaultShaper,
  // Latin
  DFLT: DefaultShaper // Default

};
function choose(script) {
  if (!Array.isArray(script)) {
    script = [script];
  }

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(script), _step; !(_step = _iterator()).done;) {
    var s = _step.value;
    var shaper = SHAPERS[s];

    if (shaper) {
      return shaper;
    }
  }

  return DefaultShaper;
}

var GSUBProcessor = /*#__PURE__*/function (_OTProcessor) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(GSUBProcessor, _OTProcessor);

  function GSUBProcessor() {
    return _OTProcessor.apply(this, arguments) || this;
  }

  var _proto = GSUBProcessor.prototype;

  _proto.applyLookup = function applyLookup(lookupType, table) {
    var _this = this;

    switch (lookupType) {
      case 1:
        {
          // Single Substitution
          var index = this.coverageIndex(table.coverage);

          if (index === -1) {
            return false;
          }

          var glyph = this.glyphIterator.cur;

          switch (table.version) {
            case 1:
              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
              break;

            case 2:
              glyph.id = table.substitute.get(index);
              break;
          }

          return true;
        }

      case 2:
        {
          // Multiple Substitution
          var _index = this.coverageIndex(table.coverage);

          if (_index !== -1) {
            var _this$glyphs;

            var sequence = table.sequences.get(_index);

            if (sequence.length === 0) {
              // If the sequence length is zero, delete the glyph.
              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.
              this.glyphs.splice(this.glyphIterator.index, 1);
              return true;
            }

            this.glyphIterator.cur.id = sequence[0];
            this.glyphIterator.cur.ligatureComponent = 0;
            var features = this.glyphIterator.cur.features;
            var curGlyph = this.glyphIterator.cur;
            var replacement = sequence.slice(1).map(function (gid, i) {
              var glyph = new GlyphInfo(_this.font, gid, undefined, features);
              glyph.shaperInfo = curGlyph.shaperInfo;
              glyph.isLigated = curGlyph.isLigated;
              glyph.ligatureComponent = i + 1;
              glyph.substituted = true;
              glyph.isMultiplied = true;
              return glyph;
            });

            (_this$glyphs = this.glyphs).splice.apply(_this$glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));

            return true;
          }

          return false;
        }

      case 3:
        {
          // Alternate Substitution
          var _index2 = this.coverageIndex(table.coverage);

          if (_index2 !== -1) {
            var USER_INDEX = 0; // TODO

            this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];
            return true;
          }

          return false;
        }

      case 4:
        {
          // Ligature Substitution
          var _index3 = this.coverageIndex(table.coverage);

          if (_index3 === -1) {
            return false;
          }

          for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(table.ligatureSets.get(_index3)), _step; !(_step = _iterator()).done;) {
            var ligature = _step.value;
            var matched = this.sequenceMatchIndices(1, ligature.components);

            if (!matched) {
              continue;
            }

            var _curGlyph = this.glyphIterator.cur; // Concatenate all of the characters the new ligature will represent

            var characters = _curGlyph.codePoints.slice();

            for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(matched), _step2; !(_step2 = _iterator2()).done;) {
              var _index4 = _step2.value;
              characters.push.apply(characters, this.glyphs[_index4].codePoints);
            } // Create the replacement ligature glyph


            var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features);
            ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;
            ligatureGlyph.isLigated = true;
            ligatureGlyph.substituted = true; // From Harfbuzz:
            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave
            //   the ligature to keep its old ligature id.  This will allow it to attach to
            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,
            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a
            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature
            //   later, we don't want them to lose their ligature id/component, otherwise
            //   GPOS will fail to correctly position the mark ligature on top of the
            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343
            //
            // - If a ligature is formed of components that some of which are also ligatures
            //   themselves, and those ligature components had marks attached to *their*
            //   components, we have to attach the marks to the new ligature component
            //   positions!  Now *that*'s tricky!  And these marks may be following the
            //   last component of the whole sequence, so we should loop forward looking
            //   for them and update them.
            //
            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a
            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature
            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature
            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to
            //   the new ligature with a component value of 2.
            //
            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633

            var isMarkLigature = _curGlyph.isMark;

            for (var i = 0; i < matched.length && isMarkLigature; i++) {
              isMarkLigature = this.glyphs[matched[i]].isMark;
            }

            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
            var lastLigID = _curGlyph.ligatureID;
            var lastNumComps = _curGlyph.codePoints.length;
            var curComps = lastNumComps;
            var idx = this.glyphIterator.index + 1; // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.
            // This allows GPOS to attach marks to the correct ligature components.

            for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(matched), _step3; !(_step3 = _iterator3()).done;) {
              var matchIndex = _step3.value;

              // Don't assign new ligature components for mark ligatures (see above)
              if (isMarkLigature) {
                idx = matchIndex;
              } else {
                while (idx < matchIndex) {
                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                  this.glyphs[idx].ligatureComponent = ligatureComponent;
                  idx++;
                }
              }

              lastLigID = this.glyphs[idx].ligatureID;
              lastNumComps = this.glyphs[idx].codePoints.length;
              curComps += lastNumComps;
              idx++; // skip base glyph
            } // Adjust ligature components for any marks following


            if (lastLigID && !isMarkLigature) {
              for (var _i = idx; _i < this.glyphs.length; _i++) {
                if (this.glyphs[_i].ligatureID === lastLigID) {
                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i].ligatureComponent || 1, lastNumComps);
                  this.glyphs[_i].ligatureComponent = ligatureComponent;
                } else {
                  break;
                }
              }
            } // Delete the matched glyphs, and replace the current glyph with the ligature glyph


            for (var _i2 = matched.length - 1; _i2 >= 0; _i2--) {
              this.glyphs.splice(matched[_i2], 1);
            }

            this.glyphs[this.glyphIterator.index] = ligatureGlyph;
            return true;
          }

          return false;
        }

      case 5:
        // Contextual Substitution
        return this.applyContext(table);

      case 6:
        // Chaining Contextual Substitution
        return this.applyChainingContext(table);

      case 7:
        // Extension Substitution
        return this.applyLookup(table.lookupType, table.extension);

      default:
        throw new Error("GSUB lookupType " + lookupType + " is not supported");
    }
  };

  return GSUBProcessor;
}(OTProcessor);

var GPOSProcessor = /*#__PURE__*/function (_OTProcessor) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(GPOSProcessor, _OTProcessor);

  function GPOSProcessor() {
    return _OTProcessor.apply(this, arguments) || this;
  }

  var _proto = GPOSProcessor.prototype;

  _proto.applyPositionValue = function applyPositionValue(sequenceIndex, value) {
    var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];

    if (value.xAdvance != null) {
      position.xAdvance += value.xAdvance;
    }

    if (value.yAdvance != null) {
      position.yAdvance += value.yAdvance;
    }

    if (value.xPlacement != null) {
      position.xOffset += value.xPlacement;
    }

    if (value.yPlacement != null) {
      position.yOffset += value.yPlacement;
    } // Adjustments for font variations


    var variationProcessor = this.font._variationProcessor;
    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;

    if (variationProcessor && variationStore) {
      if (value.xPlaDevice) {
        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
      }

      if (value.yPlaDevice) {
        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
      }

      if (value.xAdvDevice) {
        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
      }

      if (value.yAdvDevice) {
        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
      }
    } // TODO: device tables

  };

  _proto.applyLookup = function applyLookup(lookupType, table) {
    switch (lookupType) {
      case 1:
        {
          // Single positioning value
          var index = this.coverageIndex(table.coverage);

          if (index === -1) {
            return false;
          }

          switch (table.version) {
            case 1:
              this.applyPositionValue(0, table.value);
              break;

            case 2:
              this.applyPositionValue(0, table.values.get(index));
              break;
          }

          return true;
        }

      case 2:
        {
          // Pair Adjustment Positioning
          var nextGlyph = this.glyphIterator.peek();

          if (!nextGlyph) {
            return false;
          }

          var _index = this.coverageIndex(table.coverage);

          if (_index === -1) {
            return false;
          }

          switch (table.version) {
            case 1:
              // Adjustments for glyph pairs
              var set = table.pairSets.get(_index);

              for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(set), _step; !(_step = _iterator()).done;) {
                var _pair = _step.value;

                if (_pair.secondGlyph === nextGlyph.id) {
                  this.applyPositionValue(0, _pair.value1);
                  this.applyPositionValue(1, _pair.value2);
                  return true;
                }
              }

              return false;

            case 2:
              // Class pair adjustment
              var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
              var class2 = this.getClassID(nextGlyph.id, table.classDef2);

              if (class1 === -1 || class2 === -1) {
                return false;
              }

              var pair = table.classRecords.get(class1).get(class2);
              this.applyPositionValue(0, pair.value1);
              this.applyPositionValue(1, pair.value2);
              return true;
          }
        }

      case 3:
        {
          // Cursive Attachment Positioning
          var nextIndex = this.glyphIterator.peekIndex();
          var _nextGlyph = this.glyphs[nextIndex];

          if (!_nextGlyph) {
            return false;
          }

          var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];

          if (!curRecord || !curRecord.exitAnchor) {
            return false;
          }

          var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];

          if (!nextRecord || !nextRecord.entryAnchor) {
            return false;
          }

          var entry = this.getAnchor(nextRecord.entryAnchor);
          var exit = this.getAnchor(curRecord.exitAnchor);
          var cur = this.positions[this.glyphIterator.index];
          var next = this.positions[nextIndex];

          switch (this.direction) {
            case 'ltr':
              cur.xAdvance = exit.x + cur.xOffset;
              var d = entry.x + next.xOffset;
              next.xAdvance -= d;
              next.xOffset -= d;
              break;

            case 'rtl':
              d = exit.x + cur.xOffset;
              cur.xAdvance -= d;
              cur.xOffset -= d;
              next.xAdvance = entry.x + next.xOffset;
              break;
          }

          if (this.glyphIterator.flags.rightToLeft) {
            this.glyphIterator.cur.cursiveAttachment = nextIndex;
            cur.yOffset = entry.y - exit.y;
          } else {
            _nextGlyph.cursiveAttachment = this.glyphIterator.index;
            cur.yOffset = exit.y - entry.y;
          }

          return true;
        }

      case 4:
        {
          // Mark to base positioning
          var markIndex = this.coverageIndex(table.markCoverage);

          if (markIndex === -1) {
            return false;
          } // search backward for a base glyph


          var baseGlyphIndex = this.glyphIterator.index;

          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {
          }

          if (baseGlyphIndex < 0) {
            return false;
          }

          var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);

          if (baseIndex === -1) {
            return false;
          }

          var markRecord = table.markArray[markIndex];
          var baseAnchor = table.baseArray[baseIndex][markRecord.class];
          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
          return true;
        }

      case 5:
        {
          // Mark to ligature positioning
          var _markIndex = this.coverageIndex(table.markCoverage);

          if (_markIndex === -1) {
            return false;
          } // search backward for a base glyph


          var _baseGlyphIndex = this.glyphIterator.index;

          while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {
          }

          if (_baseGlyphIndex < 0) {
            return false;
          }

          var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);

          if (ligIndex === -1) {
            return false;
          }

          var ligAttach = table.ligatureArray[ligIndex];
          var markGlyph = this.glyphIterator.cur;
          var ligGlyph = this.glyphs[_baseGlyphIndex];
          var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
          var _markRecord = table.markArray[_markIndex];
          var _baseAnchor = ligAttach[compIndex][_markRecord.class];
          this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);
          return true;
        }

      case 6:
        {
          // Mark to mark positioning
          var mark1Index = this.coverageIndex(table.mark1Coverage);

          if (mark1Index === -1) {
            return false;
          } // get the previous mark to attach to


          var prevIndex = this.glyphIterator.peekIndex(-1);
          var prev = this.glyphs[prevIndex];

          if (!prev || !prev.isMark) {
            return false;
          }

          var _cur = this.glyphIterator.cur; // The following logic was borrowed from Harfbuzz

          var good = false;

          if (_cur.ligatureID === prev.ligatureID) {
            if (!_cur.ligatureID) {
              // Marks belonging to the same base
              good = true;
            } else if (_cur.ligatureComponent === prev.ligatureComponent) {
              // Marks belonging to the same ligature component
              good = true;
            }
          } else {
            // If ligature ids don't match, it may be the case that one of the marks
            // itself is a ligature, in which case match.
            if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {
              good = true;
            }
          }

          if (!good) {
            return false;
          }

          var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);

          if (mark2Index === -1) {
            return false;
          }

          var _markRecord2 = table.mark1Array[mark1Index];
          var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];
          this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);
          return true;
        }

      case 7:
        // Contextual positioning
        return this.applyContext(table);

      case 8:
        // Chaining contextual positioning
        return this.applyChainingContext(table);

      case 9:
        // Extension positioning
        return this.applyLookup(table.lookupType, table.extension);

      default:
        throw new Error("Unsupported GPOS table: " + lookupType);
    }
  };

  _proto.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
    var baseCoords = this.getAnchor(baseAnchor);
    var markCoords = this.getAnchor(markRecord.markAnchor);
    this.positions[baseGlyphIndex];
    var markPos = this.positions[this.glyphIterator.index];
    markPos.xOffset = baseCoords.x - markCoords.x;
    markPos.yOffset = baseCoords.y - markCoords.y;
    this.glyphIterator.cur.markAttachment = baseGlyphIndex;
  };

  _proto.getAnchor = function getAnchor(anchor) {
    // TODO: contour point, device tables
    var x = anchor.xCoordinate;
    var y = anchor.yCoordinate; // Adjustments for font variations

    var variationProcessor = this.font._variationProcessor;
    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;

    if (variationProcessor && variationStore) {
      if (anchor.xDeviceTable) {
        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
      }

      if (anchor.yDeviceTable) {
        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
      }
    }

    return {
      x: x,
      y: y
    };
  };

  _proto.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
    _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);

    for (var i = 0; i < this.glyphs.length; i++) {
      this.fixCursiveAttachment(i);
    }

    this.fixMarkAttachment();
  };

  _proto.fixCursiveAttachment = function fixCursiveAttachment(i) {
    var glyph = this.glyphs[i];

    if (glyph.cursiveAttachment != null) {
      var j = glyph.cursiveAttachment;
      glyph.cursiveAttachment = null;
      this.fixCursiveAttachment(j);
      this.positions[i].yOffset += this.positions[j].yOffset;
    }
  };

  _proto.fixMarkAttachment = function fixMarkAttachment() {
    for (var i = 0; i < this.glyphs.length; i++) {
      var glyph = this.glyphs[i];

      if (glyph.markAttachment != null) {
        var j = glyph.markAttachment;
        this.positions[i].xOffset += this.positions[j].xOffset;
        this.positions[i].yOffset += this.positions[j].yOffset;

        if (this.direction === 'ltr') {
          for (var k = j; k < i; k++) {
            this.positions[i].xOffset -= this.positions[k].xAdvance;
            this.positions[i].yOffset -= this.positions[k].yAdvance;
          }
        } else {
          for (var _k = j + 1; _k < i + 1; _k++) {
            this.positions[i].xOffset += this.positions[_k].xAdvance;
            this.positions[i].yOffset += this.positions[_k].yAdvance;
          }
        }
      }
    }
  };

  return GPOSProcessor;
}(OTProcessor);

var OTLayoutEngine = /*#__PURE__*/function () {
  function OTLayoutEngine(font) {
    this.font = font;
    this.glyphInfos = null;
    this.plan = null;
    this.GSUBProcessor = null;
    this.GPOSProcessor = null;
    this.fallbackPosition = true;

    if (font.GSUB) {
      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);
    }

    if (font.GPOS) {
      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);
    }
  }

  var _proto = OTLayoutEngine.prototype;

  _proto.setup = function setup(glyphRun) {
    var _this = this;

    // Map glyphs to GlyphInfo objects so data can be passed between
    // GSUB and GPOS without mutating the real (shared) Glyph objects.
    this.glyphInfos = glyphRun.glyphs.map(function (glyph) {
      return new GlyphInfo(_this.font, glyph.id, [].concat(glyph.codePoints));
    }); // Select a script based on what is available in GSUB/GPOS.

    var script = null;

    if (this.GPOSProcessor) {
      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    }

    if (this.GSUBProcessor) {
      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
    } // Choose a shaper based on the script, and setup a shaping plan.
    // This determines which features to apply to which glyphs.


    this.shaper = choose(script);
    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);
    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features); // Assign chosen features to output glyph run

    for (var key in this.plan.allFeatures) {
      glyphRun.features[key] = true;
    }
  };

  _proto.substitute = function substitute(glyphRun) {
    var _this2 = this;

    if (this.GSUBProcessor) {
      this.plan.process(this.GSUBProcessor, this.glyphInfos); // Map glyph infos back to normal Glyph objects

      glyphRun.glyphs = this.glyphInfos.map(function (glyphInfo) {
        return _this2.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);
      });
    }
  };

  _proto.position = function position(glyphRun) {
    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {
      this.zeroMarkAdvances(glyphRun.positions);
    }

    if (this.GPOSProcessor) {
      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
    }

    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {
      this.zeroMarkAdvances(glyphRun.positions);
    } // Reverse the glyphs and positions if the script is right-to-left


    if (glyphRun.direction === 'rtl') {
      glyphRun.glyphs.reverse();
      glyphRun.positions.reverse();
    }

    return this.GPOSProcessor && this.GPOSProcessor.features;
  };

  _proto.zeroMarkAdvances = function zeroMarkAdvances(positions) {
    for (var i = 0; i < this.glyphInfos.length; i++) {
      if (this.glyphInfos[i].isMark) {
        positions[i].xAdvance = 0;
        positions[i].yAdvance = 0;
      }
    }
  };

  _proto.cleanup = function cleanup() {
    this.glyphInfos = null;
    this.plan = null;
    this.shaper = null;
  };

  _proto.getAvailableFeatures = function getAvailableFeatures(script, language) {
    var features = [];

    if (this.GSUBProcessor) {
      this.GSUBProcessor.selectScript(script, language);
      features.push.apply(features, Object.keys(this.GSUBProcessor.features));
    }

    if (this.GPOSProcessor) {
      this.GPOSProcessor.selectScript(script, language);
      features.push.apply(features, Object.keys(this.GPOSProcessor.features));
    }

    return features;
  };

  return OTLayoutEngine;
}();

var LayoutEngine = /*#__PURE__*/function () {
  function LayoutEngine(font) {
    this.font = font;
    this.unicodeLayoutEngine = null;
    this.kernProcessor = null; // Choose an advanced layout engine. We try the AAT morx table first since more
    // scripts are currently supported because the shaping logic is built into the font.

    if (this.font.morx) {
      this.engine = new AATLayoutEngine(this.font);
    } else if (this.font.GSUB || this.font.GPOS) {
      this.engine = new OTLayoutEngine(this.font);
    }
  }

  var _proto = LayoutEngine.prototype;

  _proto.layout = function layout(string, features, script, language, direction) {
    // Make the features parameter optional
    if (typeof features === 'string') {
      direction = language;
      language = script;
      script = features;
      features = [];
    } // Map string to glyphs if needed


    if (typeof string === 'string') {
      // Attempt to detect the script from the string if not provided.
      if (script == null) {
        script = forString(string);
      }

      var glyphs = this.font.glyphsForString(string);
    } else {
      // Attempt to detect the script from the glyph code points if not provided.
      if (script == null) {
        var codePoints = [];

        for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(string), _step; !(_step = _iterator()).done;) {
          var glyph = _step.value;
          codePoints.push.apply(codePoints, glyph.codePoints);
        }

        script = forCodePoints(codePoints);
      }

      var glyphs = string;
    }

    var glyphRun = new GlyphRun(glyphs, features, script, language, direction); // Return early if there are no glyphs

    if (glyphs.length === 0) {
      glyphRun.positions = [];
      return glyphRun;
    } // Setup the advanced layout engine


    if (this.engine && this.engine.setup) {
      this.engine.setup(glyphRun);
    } // Substitute and position the glyphs


    this.substitute(glyphRun);
    this.position(glyphRun);
    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions); // Let the layout engine clean up any state it might have

    if (this.engine && this.engine.cleanup) {
      this.engine.cleanup();
    }

    return glyphRun;
  };

  _proto.substitute = function substitute(glyphRun) {
    // Call the advanced layout engine to make substitutions
    if (this.engine && this.engine.substitute) {
      this.engine.substitute(glyphRun);
    }
  };

  _proto.position = function position(glyphRun) {
    // Get initial glyph positions
    glyphRun.positions = glyphRun.glyphs.map(function (glyph) {
      return new GlyphPosition(glyph.advanceWidth);
    });
    var positioned = null; // Call the advanced layout engine. Returns the features applied.

    if (this.engine && this.engine.position) {
      positioned = this.engine.position(glyphRun);
    } // if there is no GPOS table, use unicode properties to position marks.


    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
      if (!this.unicodeLayoutEngine) {
        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);
      }

      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
    } // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table


    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
      if (!this.kernProcessor) {
        this.kernProcessor = new KernProcessor(this.font);
      }

      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
      glyphRun.features.kern = true;
    }
  };

  _proto.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {
    var space = this.font.glyphForCodePoint(0x20);

    for (var i = 0; i < glyphs.length; i++) {
      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
        glyphs[i] = space;
        positions[i].xAdvance = 0;
        positions[i].yAdvance = 0;
      }
    }
  };

  _proto.isDefaultIgnorable = function isDefaultIgnorable(ch) {
    // From DerivedCoreProperties.txt in the Unicode database,
    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what
    // Harfbuzz and Uniscribe do.
    var plane = ch >> 16;

    if (plane === 0) {
      // BMP
      switch (ch >> 8) {
        case 0x00:
          return ch === 0x00AD;

        case 0x03:
          return ch === 0x034F;

        case 0x06:
          return ch === 0x061C;

        case 0x17:
          return 0x17B4 <= ch && ch <= 0x17B5;

        case 0x18:
          return 0x180B <= ch && ch <= 0x180E;

        case 0x20:
          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;

        case 0xFE:
          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;

        case 0xFF:
          return 0xFFF0 <= ch && ch <= 0xFFF8;

        default:
          return false;
      }
    } else {
      // Other planes
      switch (plane) {
        case 0x01:
          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;

        case 0x0E:
          return 0xE0000 <= ch && ch <= 0xE0FFF;

        default:
          return false;
      }
    }
  };

  _proto.getAvailableFeatures = function getAvailableFeatures(script, language) {
    var features = [];

    if (this.engine) {
      features.push.apply(features, this.engine.getAvailableFeatures(script, language));
    }

    if (this.font.kern && features.indexOf('kern') === -1) {
      features.push('kern');
    }

    return features;
  };

  _proto.stringsForGlyph = function stringsForGlyph(gid) {
    var result = new Set();

    var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);

    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(codePoints), _step2; !(_step2 = _iterator2()).done;) {
      var codePoint = _step2.value;
      result.add(String.fromCodePoint(codePoint));
    }

    if (this.engine && this.engine.stringsForGlyph) {
      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.engine.stringsForGlyph(gid)), _step3; !(_step3 = _iterator3()).done;) {
        var string = _step3.value;
        result.add(string);
      }
    }

    return Array.from(result);
  };

  return LayoutEngine;
}();

var SVG_COMMANDS = {
  moveTo: 'M',
  lineTo: 'L',
  quadraticCurveTo: 'Q',
  bezierCurveTo: 'C',
  closePath: 'Z'
};
/**
 * Path objects are returned by glyphs and represent the actual
 * vector outlines for each glyph in the font. Paths can be converted
 * to SVG path data strings, or to functions that can be applied to
 * render the path to a graphics context.
 */

var Path = /*#__PURE__*/function () {
  function Path() {
    this.commands = [];
    this._bbox = null;
    this._cbox = null;
  }
  /**
   * Compiles the path to a JavaScript function that can be applied with
   * a graphics context in order to render the path.
   * @return {string}
   */


  var _proto = Path.prototype;

  _proto.toFunction = function toFunction() {
    var _this = this;

    return function (ctx) {
      _this.commands.forEach(function (c) {
        return ctx[c.command].apply(ctx, c.args);
      });
    };
  }
  /**
   * Converts the path to an SVG path data string
   * @return {string}
   */
  ;

  _proto.toSVG = function toSVG() {
    var cmds = this.commands.map(function (c) {
      var args = c.args.map(function (arg) {
        return Math.round(arg * 100) / 100;
      });
      return "" + SVG_COMMANDS[c.command] + args.join(' ');
    });
    return cmds.join('');
  }
  /**
   * Gets the "control box" of a path.
   * This is like the bounding box, but it includes all points including
   * control points of bezier segments and is much faster to compute than
   * the real bounding box.
   * @type {BBox}
   */
  ;

  /**
   * Applies a mapping function to each point in the path.
   * @param {function} fn
   * @return {Path}
   */
  _proto.mapPoints = function mapPoints(fn) {
    var path = new Path();

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.commands), _step; !(_step = _iterator()).done;) {
      var c = _step.value;
      var args = [];

      for (var i = 0; i < c.args.length; i += 2) {
        var _fn = fn(c.args[i], c.args[i + 1]),
            x = _fn[0],
            y = _fn[1];

        args.push(x, y);
      }

      path[c.command].apply(path, args);
    }

    return path;
  }
  /**
   * Transforms the path by the given matrix.
   */
  ;

  _proto.transform = function transform(m0, m1, m2, m3, m4, m5) {
    return this.mapPoints(function (x, y) {
      x = m0 * x + m2 * y + m4;
      y = m1 * x + m3 * y + m5;
      return [x, y];
    });
  }
  /**
   * Translates the path by the given offset.
   */
  ;

  _proto.translate = function translate(x, y) {
    return this.transform(1, 0, 0, 1, x, y);
  }
  /**
   * Rotates the path by the given angle (in radians).
   */
  ;

  _proto.rotate = function rotate(angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    return this.transform(cos, sin, -sin, cos, 0, 0);
  }
  /**
   * Scales the path.
   */
  ;

  _proto.scale = function scale(scaleX, scaleY) {
    if (scaleY === void 0) {
      scaleY = scaleX;
    }

    return this.transform(scaleX, 0, 0, scaleY, 0, 0);
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Path, [{
    key: "cbox",
    get: function get() {
      if (!this._cbox) {
        var cbox = new BBox();

        for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.commands), _step2; !(_step2 = _iterator2()).done;) {
          var command = _step2.value;

          for (var i = 0; i < command.args.length; i += 2) {
            cbox.addPoint(command.args[i], command.args[i + 1]);
          }
        }

        this._cbox = Object.freeze(cbox);
      }

      return this._cbox;
    }
    /**
     * Gets the exact bounding box of the path by evaluating curve segments.
     * Slower to compute than the control box, but more accurate.
     * @type {BBox}
     */

  }, {
    key: "bbox",
    get: function get() {
      if (this._bbox) {
        return this._bbox;
      }

      var bbox = new BBox();
      var cx = 0,
          cy = 0;

      var f = function f(t) {
        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
      };

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.commands), _step3; !(_step3 = _iterator3()).done;) {
        var c = _step3.value;

        switch (c.command) {
          case 'moveTo':
          case 'lineTo':
            var _c$args = c.args,
                x = _c$args[0],
                y = _c$args[1];
            bbox.addPoint(x, y);
            cx = x;
            cy = y;
            break;

          case 'quadraticCurveTo':
          case 'bezierCurveTo':
            if (c.command === 'quadraticCurveTo') {
              // http://fontforge.org/bezier.html
              var _c$args2 = c.args,
                  qp1x = _c$args2[0],
                  qp1y = _c$args2[1],
                  p3x = _c$args2[2],
                  p3y = _c$args2[3];
              var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)

              var cp1y = cy + 2 / 3 * (qp1y - cy);
              var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)

              var cp2y = p3y + 2 / 3 * (qp1y - p3y);
            } else {
              var _c$args3 = c.args,
                  cp1x = _c$args3[0],
                  cp1y = _c$args3[1],
                  cp2x = _c$args3[2],
                  cp2y = _c$args3[3],
                  p3x = _c$args3[4],
                  p3y = _c$args3[5];
            } // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html


            bbox.addPoint(p3x, p3y);
            var p0 = [cx, cy];
            var p1 = [cp1x, cp1y];
            var p2 = [cp2x, cp2y];
            var p3 = [p3x, p3y];

            for (var i = 0; i <= 1; i++) {
              var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
              var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
              c = 3 * p1[i] - 3 * p0[i];

              if (a === 0) {
                if (b === 0) {
                  continue;
                }

                var t = -c / b;

                if (0 < t && t < 1) {
                  if (i === 0) {
                    bbox.addPoint(f(t), bbox.maxY);
                  } else if (i === 1) {
                    bbox.addPoint(bbox.maxX, f(t));
                  }
                }

                continue;
              }

              var b2ac = Math.pow(b, 2) - 4 * c * a;

              if (b2ac < 0) {
                continue;
              }

              var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);

              if (0 < t1 && t1 < 1) {
                if (i === 0) {
                  bbox.addPoint(f(t1), bbox.maxY);
                } else if (i === 1) {
                  bbox.addPoint(bbox.maxX, f(t1));
                }
              }

              var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);

              if (0 < t2 && t2 < 1) {
                if (i === 0) {
                  bbox.addPoint(f(t2), bbox.maxY);
                } else if (i === 1) {
                  bbox.addPoint(bbox.maxX, f(t2));
                }
              }
            }

            cx = p3x;
            cy = p3y;
            break;
        }
      }

      return this._bbox = Object.freeze(bbox);
    }
  }]);

  return Path;
}();

var _loop = function _loop() {
  var command = _arr[_i];

  Path.prototype[command] = function () {
    this._bbox = this._cbox = null;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.commands.push({
      command: command,
      args: args
    });
    return this;
  };
};

for (var _i = 0, _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']; _i < _arr.length; _i++) {
  _loop();
}

var StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

var _class$1;
/**
 * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and
 * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.
 *
 * You do not create glyph objects directly. They are created by various methods on the font object.
 * There are several subclasses of the base Glyph class internally that may be returned depending
 * on the font format, but they all inherit from this class.
 */

var Glyph = (_class$1 = /*#__PURE__*/function () {
  function Glyph(id, codePoints, font) {
    /**
     * The glyph id in the font
     * @type {number}
     */
    this.id = id;
    /**
     * An array of unicode code points that are represented by this glyph.
     * There can be multiple code points in the case of ligatures and other glyphs
     * that represent multiple visual characters.
     * @type {number[]}
     */

    this.codePoints = codePoints;
    this._font = font; // TODO: get this info from GDEF if available

    this.isMark = this.codePoints.length > 0 && this.codePoints.every(_react_pdf_unicode_properties__WEBPACK_IMPORTED_MODULE_7__["default"].isMark);
    this.isLigature = this.codePoints.length > 1;
  }

  var _proto = Glyph.prototype;

  _proto._getPath = function _getPath() {
    return new Path();
  };

  _proto._getCBox = function _getCBox() {
    return this.path.cbox;
  };

  _proto._getBBox = function _getBBox() {
    return this.path.bbox;
  };

  _proto._getTableMetrics = function _getTableMetrics(table) {
    if (this.id < table.metrics.length) {
      return table.metrics.get(this.id);
    }

    var metric = table.metrics.get(table.metrics.length - 1);
    var res = {
      advance: metric ? metric.advance : 0,
      bearing: table.bearings.get(this.id - table.metrics.length) || 0
    };
    return res;
  };

  _proto._getMetrics = function _getMetrics(cbox) {
    if (this._metrics) {
      return this._metrics;
    }

    var _this$_getTableMetric = this._getTableMetrics(this._font.hmtx),
        advanceWidth = _this$_getTableMetric.advance,
        leftBearing = _this$_getTableMetric.bearing; // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea


    if (this._font.vmtx) {
      var _this$_getTableMetric2 = this._getTableMetrics(this._font.vmtx),
          advanceHeight = _this$_getTableMetric2.advance,
          topBearing = _this$_getTableMetric2.bearing;
    } else {
      var os2;

      if (typeof cbox === 'undefined' || cbox === null) {
        cbox = this.cbox;
      }

      if ((os2 = this._font['OS/2']) && os2.version > 0) {
        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
        var topBearing = os2.typoAscender - cbox.maxY;
      } else {
        var hhea = this._font.hhea;
        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
        var topBearing = hhea.ascent - cbox.maxY;
      }
    }

    if (this._font._variationProcessor && this._font.HVAR) {
      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
    }

    return this._metrics = {
      advanceWidth: advanceWidth,
      advanceHeight: advanceHeight,
      leftBearing: leftBearing,
      topBearing: topBearing
    };
  }
  /**
   * The glyph’s control box.
   * This is often the same as the bounding box, but is faster to compute.
   * Because of the way bezier curves are defined, some of the control points
   * can be outside of the bounding box. Where `bbox` takes this into account,
   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
   * for a more detailed description.
   *
   * @type {BBox}
   */
  ;

  /**
   * Returns a path scaled to the given font size.
   * @param {number} size
   * @return {Path}
   */
  _proto.getScaledPath = function getScaledPath(size) {
    var scale = 1 / this._font.unitsPerEm * size;
    return this.path.scale(scale);
  }
  /**
   * The glyph's advance width.
   * @type {number}
   */
  ;

  _proto._getName = function _getName() {
    var post = this._font.post;

    if (!post) {
      return null;
    }

    switch (post.version) {
      case 1:
        return StandardNames[this.id];

      case 2:
        var id = post.glyphNameIndex[this.id];

        if (id < StandardNames.length) {
          return StandardNames[id];
        }

        return post.names[id - StandardNames.length];

      case 2.5:
        return StandardNames[this.id + post.offsets[this.id]];

      case 4:
        return String.fromCharCode(post.map[this.id]);
    }
  }
  /**
   * The glyph's name
   * @type {string}
   */
  ;

  /**
   * Renders the glyph to the given graphics context, at the specified font size.
   * @param {CanvasRenderingContext2d} ctx
   * @param {number} size
   */
  _proto.render = function render(ctx, size) {
    ctx.save();
    var scale = 1 / this._font.head.unitsPerEm * size;
    ctx.scale(scale, scale);
    var fn = this.path.toFunction();
    fn(ctx);
    ctx.fill();
    ctx.restore();
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Glyph, [{
    key: "cbox",
    get: function get() {
      return this._getCBox();
    }
    /**
     * The glyph’s bounding box, i.e. the rectangle that encloses the
     * glyph outline as tightly as possible.
     * @type {BBox}
     */

  }, {
    key: "bbox",
    get: function get() {
      return this._getBBox();
    }
    /**
     * A vector Path object representing the glyph outline.
     * @type {Path}
     */

  }, {
    key: "path",
    get: function get() {
      // Cache the path so we only decode it once
      // Decoding is actually performed by subclasses
      return this._getPath();
    }
  }, {
    key: "advanceWidth",
    get: function get() {
      return this._getMetrics().advanceWidth;
    }
    /**
     * The glyph's advance height.
     * @type {number}
     */

  }, {
    key: "advanceHeight",
    get: function get() {
      return this._getMetrics().advanceHeight;
    }
  }, {
    key: "ligatureCaretPositions",
    get: function get() {}
  }, {
    key: "name",
    get: function get() {
      return this._getName();
    }
  }]);

  return Glyph;
}(), ((0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "cbox", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "cbox"), _class$1.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "bbox", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "bbox"), _class$1.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "path", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "path"), _class$1.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "advanceWidth", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "advanceWidth"), _class$1.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "advanceHeight", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "advanceHeight"), _class$1.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class$1.prototype, "name", [cache], Object.getOwnPropertyDescriptor(_class$1.prototype, "name"), _class$1.prototype)), _class$1);

var GlyfHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  numberOfContours: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // if negative, this is a composite glyph
  xMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  xMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16)
}); // Flags for simple glyphs

var ON_CURVE$1 = 1 << 0;
var X_SHORT_VECTOR$1 = 1 << 1;
var Y_SHORT_VECTOR$1 = 1 << 2;
var REPEAT$1 = 1 << 3;
var SAME_X$1 = 1 << 4;
var SAME_Y$1 = 1 << 5; // Flags for composite glyphs

var ARG_1_AND_2_ARE_WORDS = 1 << 0;
var WE_HAVE_A_SCALE = 1 << 3;
var MORE_COMPONENTS = 1 << 5;
var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
var WE_HAVE_INSTRUCTIONS = 1 << 8;

var Point$1 = /*#__PURE__*/function () {
  function Point(onCurve, endContour, x, y) {
    if (x === void 0) {
      x = 0;
    }

    if (y === void 0) {
      y = 0;
    }

    this.onCurve = onCurve;
    this.endContour = endContour;
    this.x = x;
    this.y = y;
  }

  var _proto = Point.prototype;

  _proto.copy = function copy() {
    return new Point(this.onCurve, this.endContour, this.x, this.y);
  };

  return Point;
}(); // Represents a component in a composite glyph

var Component = function Component(glyphID, dx, dy) {
  this.glyphID = glyphID;
  this.dx = dx;
  this.dy = dy;
  this.pos = 0;
  this.scaleX = this.scaleY = 1;
  this.scale01 = this.scale10 = 0;
};
/**
 * Represents a TrueType glyph.
 */


var TTFGlyph = /*#__PURE__*/function (_Glyph) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(TTFGlyph, _Glyph);

  function TTFGlyph() {
    return _Glyph.apply(this, arguments) || this;
  }

  var _proto2 = TTFGlyph.prototype;

  // Parses just the glyph header and returns the bounding box
  _proto2._getCBox = function _getCBox(internal) {
    // We need to decode the glyph if variation processing is requested,
    // so it's easier just to recompute the path's cbox after decoding.
    if (this._font._variationProcessor && !internal) {
      return this.path.cbox;
    }

    var stream = this._font._getTableStream('glyf');

    stream.pos += this._font.loca.offsets[this.id];
    var glyph = GlyfHeader.decode(stream);
    var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
    return Object.freeze(cbox);
  } // Parses a single glyph coordinate
  ;

  _proto2._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {
    if (short) {
      var val = stream.readUInt8();

      if (!same) {
        val = -val;
      }

      val += prev;
    } else {
      if (same) {
        var val = prev;
      } else {
        var val = prev + stream.readInt16BE();
      }
    }

    return val;
  } // Decodes the glyph data into points for simple glyphs,
  // or components for composite glyphs
  ;

  _proto2._decode = function _decode() {
    var glyfPos = this._font.loca.offsets[this.id];
    var nextPos = this._font.loca.offsets[this.id + 1]; // Nothing to do if there is no data for this glyph

    if (glyfPos === nextPos) {
      return null;
    }

    var stream = this._font._getTableStream('glyf');

    stream.pos += glyfPos;
    var startPos = stream.pos;
    var glyph = GlyfHeader.decode(stream);

    if (glyph.numberOfContours > 0) {
      this._decodeSimple(glyph, stream);
    } else if (glyph.numberOfContours < 0) {
      this._decodeComposite(glyph, stream, startPos);
    }

    return glyph;
  };

  _proto2._decodeSimple = function _decodeSimple(glyph, stream) {
    // this is a simple glyph
    glyph.points = [];
    var endPtsOfContours = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), glyph.numberOfContours).decode(stream);
    glyph.instructions = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)).decode(stream);
    var flags = [];
    var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;

    while (flags.length < numCoords) {
      var flag = stream.readUInt8();
      flags.push(flag); // check for repeat flag

      if (flag & REPEAT$1) {
        var count = stream.readUInt8();

        for (var j = 0; j < count; j++) {
          flags.push(flag);
        }
      }
    }

    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      var point = new Point$1(!!(flag & ON_CURVE$1), endPtsOfContours.indexOf(i) >= 0, 0, 0);
      glyph.points.push(point);
    }

    var px = 0;

    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR$1, flag & SAME_X$1);
    }

    var py = 0;

    for (var i = 0; i < flags.length; i++) {
      var flag = flags[i];
      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR$1, flag & SAME_Y$1);
    }

    if (this._font._variationProcessor) {
      var points = glyph.points.slice();
      points.push.apply(points, this._getPhantomPoints(glyph));

      this._font._variationProcessor.transformPoints(this.id, points);

      glyph.phantomPoints = points.slice(-4);
    }

    return;
  };

  _proto2._decodeComposite = function _decodeComposite(glyph, stream, offset) {
    if (offset === void 0) {
      offset = 0;
    }

    // this is a composite glyph
    glyph.components = [];
    var haveInstructions = false;
    var flags = MORE_COMPONENTS;

    while (flags & MORE_COMPONENTS) {
      flags = stream.readUInt16BE();
      var gPos = stream.pos - offset;
      var glyphID = stream.readUInt16BE();

      if (!haveInstructions) {
        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;
      }

      if (flags & ARG_1_AND_2_ARE_WORDS) {
        var dx = stream.readInt16BE();
        var dy = stream.readInt16BE();
      } else {
        var dx = stream.readInt8();
        var dy = stream.readInt8();
      }

      var component = new Component(glyphID, dx, dy);
      component.pos = gPos;

      if (flags & WE_HAVE_A_SCALE) {
        // fixed number with 14 bits of fraction
        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
      }

      glyph.components.push(component);
    }

    if (this._font._variationProcessor) {
      var points = [];

      for (var j = 0; j < glyph.components.length; j++) {
        var component = glyph.components[j];
        points.push(new Point$1(true, true, component.dx, component.dy));
      }

      points.push.apply(points, this._getPhantomPoints(glyph));

      this._font._variationProcessor.transformPoints(this.id, points);

      glyph.phantomPoints = points.splice(-4, 4);

      for (var i = 0; i < points.length; i++) {
        var point = points[i];
        glyph.components[i].dx = point.x;
        glyph.components[i].dy = point.y;
      }
    }

    return haveInstructions;
  };

  _proto2._getPhantomPoints = function _getPhantomPoints(glyph) {
    var cbox = this._getCBox(true);

    if (this._metrics == null) {
      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);
    }

    var _this$_metrics = this._metrics,
        advanceWidth = _this$_metrics.advanceWidth,
        advanceHeight = _this$_metrics.advanceHeight,
        leftBearing = _this$_metrics.leftBearing,
        topBearing = _this$_metrics.topBearing;
    return [new Point$1(false, true, glyph.xMin - leftBearing, 0), new Point$1(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point$1(false, true, 0, glyph.yMax + topBearing), new Point$1(false, true, 0, glyph.yMax + topBearing + advanceHeight)];
  } // Decodes font data, resolves composite glyphs, and returns an array of contours
  ;

  _proto2._getContours = function _getContours() {
    var glyph = this._decode();

    if (!glyph) {
      return [];
    }

    var points = [];

    if (glyph.numberOfContours < 0) {
      // resolve composite glyphs
      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyph.components), _step; !(_step = _iterator()).done;) {
        var component = _step.value;

        var _contours = this._font.getGlyph(component.glyphID)._getContours();

        for (var i = 0; i < _contours.length; i++) {
          var contour = _contours[i];

          for (var j = 0; j < contour.length; j++) {
            var _point = contour[j];
            var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;
            var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;
            points.push(new Point$1(_point.onCurve, _point.endContour, x, y));
          }
        }
      }
    } else {
      points = glyph.points || [];
    } // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table


    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
    }

    var contours = [];
    var cur = [];

    for (var k = 0; k < points.length; k++) {
      var point = points[k];
      cur.push(point);

      if (point.endContour) {
        contours.push(cur);
        cur = [];
      }
    }

    return contours;
  };

  _proto2._getMetrics = function _getMetrics() {
    if (this._metrics) {
      return this._metrics;
    }

    var cbox = this._getCBox(true);

    _Glyph.prototype._getMetrics.call(this, cbox);

    if (this._font._variationProcessor && !this._font.HVAR) {
      // No HVAR table, decode the glyph. This triggers recomputation of metrics.
      this.path;
    }

    return this._metrics;
  } // Converts contours to a Path object that can be rendered
  ;

  _proto2._getPath = function _getPath() {
    var contours = this._getContours();

    var path = new Path();

    for (var i = 0; i < contours.length; i++) {
      var contour = contours[i];
      var firstPt = contour[0];
      var lastPt = contour[contour.length - 1];
      var start = 0;

      if (firstPt.onCurve) {
        // The first point will be consumed by the moveTo command, so skip in the loop
        var curvePt = null;
        start = 1;
      } else {
        if (lastPt.onCurve) {
          // Start at the last point if the first point is off curve and the last point is on curve
          firstPt = lastPt;
        } else {
          // Start at the middle if both the first and last points are off curve
          firstPt = new Point$1(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
        }

        var curvePt = firstPt;
      }

      path.moveTo(firstPt.x, firstPt.y);

      for (var j = start; j < contour.length; j++) {
        var pt = contour[j];
        var prevPt = j === 0 ? firstPt : contour[j - 1];

        if (prevPt.onCurve && pt.onCurve) {
          path.lineTo(pt.x, pt.y);
        } else if (prevPt.onCurve && !pt.onCurve) {
          var curvePt = pt;
        } else if (!prevPt.onCurve && !pt.onCurve) {
          var midX = (prevPt.x + pt.x) / 2;
          var midY = (prevPt.y + pt.y) / 2;
          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
          var curvePt = pt;
        } else if (!prevPt.onCurve && pt.onCurve) {
          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
          var curvePt = null;
        } else {
          throw new Error("Unknown TTF path state");
        }
      } // Connect the first and last points


      if (curvePt) {
        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
      }

      path.closePath();
    }

    return path;
  };

  return TTFGlyph;
}(Glyph);

/**
 * Represents an OpenType PostScript glyph, in the Compact Font Format.
 */

var CFFGlyph = /*#__PURE__*/function (_Glyph) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(CFFGlyph, _Glyph);

  function CFFGlyph() {
    return _Glyph.apply(this, arguments) || this;
  }

  var _proto = CFFGlyph.prototype;

  _proto._getName = function _getName() {
    if (this._font.CFF2) {
      return _Glyph.prototype._getName.call(this);
    }

    return this._font['CFF '].getGlyphName(this.id);
  };

  _proto.bias = function bias(s) {
    if (s.length < 1240) {
      return 107;
    } else if (s.length < 33900) {
      return 1131;
    } else {
      return 32768;
    }
  };

  _proto._getPath = function _getPath() {
    var cff = this._font.CFF2 || this._font['CFF '];
    var stream = cff.stream;
    var str = cff.topDict.CharStrings[this.id];
    var end = str.offset + str.length;
    stream.pos = str.offset;
    var path = new Path();
    var stack = [];
    var trans = [];
    var width = null;
    var nStems = 0;
    var x = 0,
        y = 0;
    var usedGsubrs;
    var usedSubrs;
    var open = false;
    this._usedGsubrs = usedGsubrs = {};
    this._usedSubrs = usedSubrs = {};
    var gsubrs = cff.globalSubrIndex || [];
    var gsubrsBias = this.bias(gsubrs);
    var privateDict = cff.privateDictForGlyph(this.id) || {};
    var subrs = privateDict.Subrs || [];
    var subrsBias = this.bias(subrs);
    var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
    var vsindex = privateDict.vsindex;
    var variationProcessor = this._font._variationProcessor;

    function checkWidth() {
      if (width == null) {
        width = stack.shift() + privateDict.nominalWidthX;
      }
    }

    function parseStems() {
      if (stack.length % 2 !== 0) {
        checkWidth();
      }

      nStems += stack.length >> 1;
      return stack.length = 0;
    }

    function moveTo(x, y) {
      if (open) {
        path.closePath();
      }

      path.moveTo(x, y);
      open = true;
    }

    var parse = function parse() {
      while (stream.pos < end) {
        var op = stream.readUInt8();

        if (op < 32) {
          switch (op) {
            case 1: // hstem

            case 3: // vstem

            case 18: // hstemhm

            case 23:
              // vstemhm
              parseStems();
              break;

            case 4:
              // vmoveto
              if (stack.length > 1) {
                checkWidth();
              }

              y += stack.shift();
              moveTo(x, y);
              break;

            case 5:
              // rlineto
              while (stack.length >= 2) {
                x += stack.shift();
                y += stack.shift();
                path.lineTo(x, y);
              }

              break;

            case 6: // hlineto

            case 7:
              // vlineto
              var phase = op === 6;

              while (stack.length >= 1) {
                if (phase) {
                  x += stack.shift();
                } else {
                  y += stack.shift();
                }

                path.lineTo(x, y);
                phase = !phase;
              }

              break;

            case 8:
              // rrcurveto
              while (stack.length > 0) {
                var c1x = x + stack.shift();
                var c1y = y + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x = c2x + stack.shift();
                y = c2y + stack.shift();
                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              }

              break;

            case 10:
              // callsubr
              var index = stack.pop() + subrsBias;
              var subr = subrs[index];

              if (subr) {
                usedSubrs[index] = true;
                var p = stream.pos;
                var e = end;
                stream.pos = subr.offset;
                end = subr.offset + subr.length;
                parse();
                stream.pos = p;
                end = e;
              }

              break;

            case 11:
              // return
              if (cff.version >= 2) {
                break;
              }

              return;

            case 14:
              // endchar
              if (cff.version >= 2) {
                break;
              }

              if (stack.length > 0) {
                checkWidth();
              }

              if (open) {
                path.closePath();
                open = false;
              }

              break;

            case 15:
              {
                // vsindex
                if (cff.version < 2) {
                  throw new Error('vsindex operator not supported in CFF v1');
                }

                vsindex = stack.pop();
                break;
              }

            case 16:
              {
                // blend
                if (cff.version < 2) {
                  throw new Error('blend operator not supported in CFF v1');
                }

                if (!variationProcessor) {
                  throw new Error('blend operator in non-variation font');
                }

                var blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                var numBlends = stack.pop();
                var numOperands = numBlends * blendVector.length;
                var delta = stack.length - numOperands;
                var base = delta - numBlends;

                for (var i = 0; i < numBlends; i++) {
                  var sum = stack[base + i];

                  for (var j = 0; j < blendVector.length; j++) {
                    sum += blendVector[j] * stack[delta++];
                  }

                  stack[base + i] = sum;
                }

                while (numOperands--) {
                  stack.pop();
                }

                break;
              }

            case 19: // hintmask

            case 20:
              // cntrmask
              parseStems();
              stream.pos += nStems + 7 >> 3;
              break;

            case 21:
              // rmoveto
              if (stack.length > 2) {
                checkWidth();
              }

              x += stack.shift();
              y += stack.shift();
              moveTo(x, y);
              break;

            case 22:
              // hmoveto
              if (stack.length > 1) {
                checkWidth();
              }

              x += stack.shift();
              moveTo(x, y);
              break;

            case 24:
              // rcurveline
              while (stack.length >= 8) {
                var c1x = x + stack.shift();
                var c1y = y + stack.shift();
                var c2x = c1x + stack.shift();
                var c2y = c1y + stack.shift();
                x = c2x + stack.shift();
                y = c2y + stack.shift();
                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              }

              x += stack.shift();
              y += stack.shift();
              path.lineTo(x, y);
              break;

            case 25:
              // rlinecurve
              while (stack.length >= 8) {
                x += stack.shift();
                y += stack.shift();
                path.lineTo(x, y);
              }

              var c1x = x + stack.shift();
              var c1y = y + stack.shift();
              var c2x = c1x + stack.shift();
              var c2y = c1y + stack.shift();
              x = c2x + stack.shift();
              y = c2y + stack.shift();
              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              break;

            case 26:
              // vvcurveto
              if (stack.length % 2) {
                x += stack.shift();
              }

              while (stack.length >= 4) {
                c1x = x;
                c1y = y + stack.shift();
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x = c2x;
                y = c2y + stack.shift();
                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              }

              break;

            case 27:
              // hhcurveto
              if (stack.length % 2) {
                y += stack.shift();
              }

              while (stack.length >= 4) {
                c1x = x + stack.shift();
                c1y = y;
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x = c2x + stack.shift();
                y = c2y;
                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
              }

              break;

            case 28:
              // shortint
              stack.push(stream.readInt16BE());
              break;

            case 29:
              // callgsubr
              index = stack.pop() + gsubrsBias;
              subr = gsubrs[index];

              if (subr) {
                usedGsubrs[index] = true;
                var p = stream.pos;
                var e = end;
                stream.pos = subr.offset;
                end = subr.offset + subr.length;
                parse();
                stream.pos = p;
                end = e;
              }

              break;

            case 30: // vhcurveto

            case 31:
              {
                // hvcurveto
                var _phase = op === 31;

                while (stack.length >= 4) {
                  if (_phase) {
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    y = c2y + stack.shift();
                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                  } else {
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                  }

                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                  _phase = !_phase;
                }

                break;
              }

            case 12:
              op = stream.readUInt8();

              switch (op) {
                case 3:
                  // and
                  var a = stack.pop();
                  var b = stack.pop();
                  stack.push(a && b ? 1 : 0);
                  break;

                case 4:
                  // or
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a || b ? 1 : 0);
                  break;

                case 5:
                  // not
                  a = stack.pop();
                  stack.push(a ? 0 : 1);
                  break;

                case 9:
                  // abs
                  a = stack.pop();
                  stack.push(Math.abs(a));
                  break;

                case 10:
                  // add
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a + b);
                  break;

                case 11:
                  // sub
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a - b);
                  break;

                case 12:
                  // div
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a / b);
                  break;

                case 14:
                  // neg
                  a = stack.pop();
                  stack.push(-a);
                  break;

                case 15:
                  // eq
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a === b ? 1 : 0);
                  break;

                case 18:
                  // drop
                  stack.pop();
                  break;

                case 20:
                  // put
                  var val = stack.pop();
                  var idx = stack.pop();
                  trans[idx] = val;
                  break;

                case 21:
                  // get
                  idx = stack.pop();
                  stack.push(trans[idx] || 0);
                  break;

                case 22:
                  // ifelse
                  var s1 = stack.pop();
                  var s2 = stack.pop();
                  var v1 = stack.pop();
                  var v2 = stack.pop();
                  stack.push(v1 <= v2 ? s1 : s2);
                  break;

                case 23:
                  // random
                  stack.push(Math.random());
                  break;

                case 24:
                  // mul
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(a * b);
                  break;

                case 26:
                  // sqrt
                  a = stack.pop();
                  stack.push(Math.sqrt(a));
                  break;

                case 27:
                  // dup
                  a = stack.pop();
                  stack.push(a, a);
                  break;

                case 28:
                  // exch
                  a = stack.pop();
                  b = stack.pop();
                  stack.push(b, a);
                  break;

                case 29:
                  // index
                  idx = stack.pop();

                  if (idx < 0) {
                    idx = 0;
                  } else if (idx > stack.length - 1) {
                    idx = stack.length - 1;
                  }

                  stack.push(stack[idx]);
                  break;

                case 30:
                  // roll
                  var n = stack.pop();

                  var _j = stack.pop();

                  if (_j >= 0) {
                    while (_j > 0) {
                      var t = stack[n - 1];

                      for (var _i = n - 2; _i >= 0; _i--) {
                        stack[_i + 1] = stack[_i];
                      }

                      stack[0] = t;
                      _j--;
                    }
                  } else {
                    while (_j < 0) {
                      var t = stack[0];

                      for (var _i2 = 0; _i2 <= n; _i2++) {
                        stack[_i2] = stack[_i2 + 1];
                      }

                      stack[n - 1] = t;
                      _j++;
                    }
                  }

                  break;

                case 34:
                  // hflex
                  c1x = x + stack.shift();
                  c1y = y;
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  var c3x = c2x + stack.shift();
                  var c3y = c2y;
                  var c4x = c3x + stack.shift();
                  var c4y = c3y;
                  var c5x = c4x + stack.shift();
                  var c5y = c4y;
                  var c6x = c5x + stack.shift();
                  var c6y = c5y;
                  x = c6x;
                  y = c6y;
                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;

                case 35:
                  // flex
                  var pts = [];

                  for (var _i3 = 0; _i3 <= 5; _i3++) {
                    x += stack.shift();
                    y += stack.shift();
                    pts.push(x, y);
                  }

                  path.bezierCurveTo.apply(path, pts.slice(0, 6));
                  path.bezierCurveTo.apply(path, pts.slice(6));
                  stack.shift(); // fd

                  break;

                case 36:
                  // hflex1
                  c1x = x + stack.shift();
                  c1y = y + stack.shift();
                  c2x = c1x + stack.shift();
                  c2y = c1y + stack.shift();
                  c3x = c2x + stack.shift();
                  c3y = c2y;
                  c4x = c3x + stack.shift();
                  c4y = c3y;
                  c5x = c4x + stack.shift();
                  c5y = c4y + stack.shift();
                  c6x = c5x + stack.shift();
                  c6y = c5y;
                  x = c6x;
                  y = c6y;
                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                  break;

                case 37:
                  // flex1
                  var startx = x;
                  var starty = y;
                  pts = [];

                  for (var _i4 = 0; _i4 <= 4; _i4++) {
                    x += stack.shift();
                    y += stack.shift();
                    pts.push(x, y);
                  }

                  if (Math.abs(x - startx) > Math.abs(y - starty)) {
                    // horizontal
                    x += stack.shift();
                    y = starty;
                  } else {
                    x = startx;
                    y += stack.shift();
                  }

                  pts.push(x, y);
                  path.bezierCurveTo.apply(path, pts.slice(0, 6));
                  path.bezierCurveTo.apply(path, pts.slice(6));
                  break;

                default:
                  throw new Error("Unknown op: 12 " + op);
              }

              break;

            default:
              throw new Error("Unknown op: " + op);
          }
        } else if (op < 247) {
          stack.push(op - 139);
        } else if (op < 251) {
          var b1 = stream.readUInt8();
          stack.push((op - 247) * 256 + b1 + 108);
        } else if (op < 255) {
          var b1 = stream.readUInt8();
          stack.push(-(op - 251) * 256 - b1 - 108);
        } else {
          stack.push(stream.readInt32BE() / 65536);
        }
      }
    };

    parse();

    if (open) {
      path.closePath();
    }

    return path;
  };

  return CFFGlyph;
}(Glyph);

var SBIXImage = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  originX: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  originY: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  type: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  data: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)(function (t) {
    return t.parent.buflen - t._currentOffset;
  })
});
/**
 * Represents a color (e.g. emoji) glyph in Apple's SBIX format.
 */

var SBIXGlyph = /*#__PURE__*/function (_TTFGlyph) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(SBIXGlyph, _TTFGlyph);

  function SBIXGlyph() {
    return _TTFGlyph.apply(this, arguments) || this;
  }

  var _proto = SBIXGlyph.prototype;

  /**
   * Returns an object representing a glyph image at the given point size.
   * The object has a data property with a Buffer containing the actual image data,
   * along with the image type, and origin.
   *
   * @param {number} size
   * @return {object}
   */
  _proto.getImageForSize = function getImageForSize(size) {
    for (var i = 0; i < this._font.sbix.imageTables.length; i++) {
      var table = this._font.sbix.imageTables[i];

      if (table.ppem >= size) {
        break;
      }
    }

    var offsets = table.imageOffsets;
    var start = offsets[this.id];
    var end = offsets[this.id + 1];

    if (start === end) {
      return null;
    }

    this._font.stream.pos = start;
    return SBIXImage.decode(this._font.stream, {
      buflen: end - start
    });
  };

  _proto.render = function render(ctx, size) {
    var img = this.getImageForSize(size);

    if (img != null) {
      var scale = size / this._font.unitsPerEm;
      ctx.image(img.data, {
        height: size,
        x: img.originX,
        y: (this.bbox.minY - img.originY) * scale
      });
    }

    if (this._font.sbix.flags.renderOutlines) {
      _TTFGlyph.prototype.render.call(this, ctx, size);
    }
  };

  return SBIXGlyph;
}(TTFGlyph);

var COLRLayer = function COLRLayer(glyph, color) {
  this.glyph = glyph;
  this.color = color;
};
/**
 * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.
 * Each glyph in this format contain a list of colored layers, each
 * of which  is another vector glyph.
 */


var COLRGlyph = /*#__PURE__*/function (_Glyph) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(COLRGlyph, _Glyph);

  function COLRGlyph() {
    return _Glyph.apply(this, arguments) || this;
  }

  var _proto = COLRGlyph.prototype;

  _proto._getBBox = function _getBBox() {
    var bbox = new BBox();

    for (var i = 0; i < this.layers.length; i++) {
      var layer = this.layers[i];
      var b = layer.glyph.bbox;
      bbox.addPoint(b.minX, b.minY);
      bbox.addPoint(b.maxX, b.maxY);
    }

    return bbox;
  }
  /**
   * Returns an array of objects containing the glyph and color for
   * each layer in the composite color glyph.
   * @type {object[]}
   */
  ;

  _proto.render = function render(ctx, size) {
    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.layers), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          glyph = _step$value.glyph,
          color = _step$value.color;
      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
      glyph.render(ctx, size);
    }

    return;
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(COLRGlyph, [{
    key: "layers",
    get: function get() {
      var cpal = this._font.CPAL;
      var colr = this._font.COLR;
      var low = 0;
      var high = colr.baseGlyphRecord.length - 1;

      while (low <= high) {
        var mid = low + high >> 1;
        var rec = colr.baseGlyphRecord[mid];

        if (this.id < rec.gid) {
          high = mid - 1;
        } else if (this.id > rec.gid) {
          low = mid + 1;
        } else {
          var baseLayer = rec;
          break;
        }
      } // if base glyph not found in COLR table,
      // default to normal glyph from glyf or CFF


      if (baseLayer == null) {
        var g = this._font._getBaseGlyph(this.id);

        var color = {
          red: 0,
          green: 0,
          blue: 0,
          alpha: 255
        };
        return [new COLRLayer(g, color)];
      } // otherwise, return an array of all the layers


      var layers = [];

      for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {
        var rec = colr.layerRecords[i];
        var color = cpal.colorRecords[rec.paletteIndex];

        var g = this._font._getBaseGlyph(rec.gid);

        layers.push(new COLRLayer(g, color));
      }

      return layers;
    }
  }]);

  return COLRGlyph;
}(Glyph);

var TUPLES_SHARE_POINT_NUMBERS = 0x8000;
var TUPLE_COUNT_MASK = 0x0fff;
var EMBEDDED_TUPLE_COORD = 0x8000;
var INTERMEDIATE_TUPLE = 0x4000;
var PRIVATE_POINT_NUMBERS = 0x2000;
var TUPLE_INDEX_MASK = 0x0fff;
var POINTS_ARE_WORDS = 0x80;
var POINT_RUN_COUNT_MASK = 0x7f;
var DELTAS_ARE_ZERO = 0x80;
var DELTAS_ARE_WORDS = 0x40;
var DELTA_RUN_COUNT_MASK = 0x3f;
/**
 * This class is transforms TrueType glyphs according to the data from
 * the Apple Advanced Typography variation tables (fvar, gvar, and avar).
 * These tables allow infinite adjustments to glyph weight, width, slant,
 * and optical size without the designer needing to specify every exact style.
 *
 * Apple's documentation for these tables is not great, so thanks to the
 * Freetype project for figuring much of this out.
 *
 * @private
 */

var GlyphVariationProcessor = /*#__PURE__*/function () {
  function GlyphVariationProcessor(font, coords) {
    this.font = font;
    this.normalizedCoords = this.normalizeCoords(coords);
    this.blendVectors = new Map();
  }

  var _proto = GlyphVariationProcessor.prototype;

  _proto.normalizeCoords = function normalizeCoords(coords) {
    // the default mapping is linear along each axis, in two segments:
    // from the minValue to defaultValue, and from defaultValue to maxValue.
    var normalized = [];

    for (var i = 0; i < this.font.fvar.axis.length; i++) {
      var axis = this.font.fvar.axis[i];

      if (coords[i] < axis.defaultValue) {
        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
      } else {
        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
      }
    } // if there is an avar table, the normalized value is calculated
    // by interpolating between the two nearest mapped values.


    if (this.font.avar) {
      for (var i = 0; i < this.font.avar.segment.length; i++) {
        var segment = this.font.avar.segment[i];

        for (var j = 0; j < segment.correspondence.length; j++) {
          var pair = segment.correspondence[j];

          if (j >= 1 && normalized[i] < pair.fromCoord) {
            var prev = segment.correspondence[j - 1];
            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
            break;
          }
        }
      }
    }

    return normalized;
  };

  _proto.transformPoints = function transformPoints(gid, glyphPoints) {
    if (!this.font.fvar || !this.font.gvar) {
      return;
    }

    var gvar = this.font.gvar;

    if (gid >= gvar.glyphCount) {
      return;
    }

    var offset = gvar.offsets[gid];

    if (offset === gvar.offsets[gid + 1]) {
      return;
    } // Read the gvar data for this glyph


    var stream = this.font.stream;
    stream.pos = offset;

    if (stream.pos >= stream.length) {
      return;
    }

    var tupleCount = stream.readUInt16BE();
    var offsetToData = offset + stream.readUInt16BE();

    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {
      var here = stream.pos;
      stream.pos = offsetToData;
      var sharedPoints = this.decodePoints();
      offsetToData = stream.pos;
      stream.pos = here;
    }

    var origPoints = glyphPoints.map(function (pt) {
      return pt.copy();
    });
    tupleCount &= TUPLE_COUNT_MASK;

    for (var i = 0; i < tupleCount; i++) {
      var tupleDataSize = stream.readUInt16BE();
      var tupleIndex = stream.readUInt16BE();

      if (tupleIndex & EMBEDDED_TUPLE_COORD) {
        var tupleCoords = [];

        for (var a = 0; a < gvar.axisCount; a++) {
          tupleCoords.push(stream.readInt16BE() / 16384);
        }
      } else {
        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {
          throw new Error('Invalid gvar table');
        }

        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];
      }

      if (tupleIndex & INTERMEDIATE_TUPLE) {
        var startCoords = [];

        for (var _a = 0; _a < gvar.axisCount; _a++) {
          startCoords.push(stream.readInt16BE() / 16384);
        }

        var endCoords = [];

        for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {
          endCoords.push(stream.readInt16BE() / 16384);
        }
      } // Get the factor at which to apply this tuple


      var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);

      if (factor === 0) {
        offsetToData += tupleDataSize;
        continue;
      }

      var here = stream.pos;
      stream.pos = offsetToData;

      if (tupleIndex & PRIVATE_POINT_NUMBERS) {
        var points = this.decodePoints();
      } else {
        var points = sharedPoints;
      } // points.length = 0 means there are deltas for all points


      var nPoints = points.length === 0 ? glyphPoints.length : points.length;
      var xDeltas = this.decodeDeltas(nPoints);
      var yDeltas = this.decodeDeltas(nPoints);

      if (points.length === 0) {
        // all points
        for (var _i = 0; _i < glyphPoints.length; _i++) {
          var point = glyphPoints[_i];
          point.x += Math.round(xDeltas[_i] * factor);
          point.y += Math.round(yDeltas[_i] * factor);
        }
      } else {
        var outPoints = origPoints.map(function (pt) {
          return pt.copy();
        });
        var hasDelta = glyphPoints.map(function () {
          return false;
        });

        for (var _i2 = 0; _i2 < points.length; _i2++) {
          var idx = points[_i2];

          if (idx < glyphPoints.length) {
            var _point = outPoints[idx];
            hasDelta[idx] = true;
            _point.x += Math.round(xDeltas[_i2] * factor);
            _point.y += Math.round(yDeltas[_i2] * factor);
          }
        }

        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);

        for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {
          var deltaX = outPoints[_i3].x - origPoints[_i3].x;
          var deltaY = outPoints[_i3].y - origPoints[_i3].y;
          glyphPoints[_i3].x += deltaX;
          glyphPoints[_i3].y += deltaY;
        }
      }

      offsetToData += tupleDataSize;
      stream.pos = here;
    }
  };

  _proto.decodePoints = function decodePoints() {
    var stream = this.font.stream;
    var count = stream.readUInt8();

    if (count & POINTS_ARE_WORDS) {
      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
    }

    var points = new Uint16Array(count);
    var i = 0;
    var point = 0;

    while (i < count) {
      var run = stream.readUInt8();
      var runCount = (run & POINT_RUN_COUNT_MASK) + 1;
      var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;

      for (var j = 0; j < runCount && i < count; j++) {
        point += fn.call(stream);
        points[i++] = point;
      }
    }

    return points;
  };

  _proto.decodeDeltas = function decodeDeltas(count) {
    var stream = this.font.stream;
    var i = 0;
    var deltas = new Int16Array(count);

    while (i < count) {
      var run = stream.readUInt8();
      var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;

      if (run & DELTAS_ARE_ZERO) {
        i += runCount;
      } else {
        var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;

        for (var j = 0; j < runCount && i < count; j++) {
          deltas[i++] = fn.call(stream);
        }
      }
    }

    return deltas;
  };

  _proto.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
    var normalized = this.normalizedCoords;
    var gvar = this.font.gvar;
    var factor = 1;

    for (var i = 0; i < gvar.axisCount; i++) {
      if (tupleCoords[i] === 0) {
        continue;
      }

      if (normalized[i] === 0) {
        return 0;
      }

      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {
        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {
          return 0;
        }

        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);
      } else {
        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {
          return 0;
        } else if (normalized[i] < tupleCoords[i]) {
          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);
        } else {
          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);
        }
      }
    }

    return factor;
  } // Interpolates points without delta values.
  // Needed for the Ø and Q glyphs in Skia.
  // Algorithm from Freetype.
  ;

  _proto.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {
    if (points.length === 0) {
      return;
    }

    var point = 0;

    while (point < points.length) {
      var firstPoint = point; // find the end point of the contour

      var endPoint = point;
      var pt = points[endPoint];

      while (!pt.endContour) {
        pt = points[++endPoint];
      } // find the first point that has a delta


      while (point <= endPoint && !hasDelta[point]) {
        point++;
      }

      if (point > endPoint) {
        continue;
      }

      var firstDelta = point;
      var curDelta = point;
      point++;

      while (point <= endPoint) {
        // find the next point with a delta, and interpolate intermediate points
        if (hasDelta[point]) {
          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
          curDelta = point;
        }

        point++;
      } // shift contour if we only have a single delta


      if (curDelta === firstDelta) {
        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
      } else {
        // otherwise, handle the remaining points at the end and beginning of the contour
        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);

        if (firstDelta > 0) {
          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
        }
      }

      point = endPoint + 1;
    }
  };

  _proto.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
    if (p1 > p2) {
      return;
    }

    var iterable = ['x', 'y'];

    for (var i = 0; i < iterable.length; i++) {
      var k = iterable[i];

      if (inPoints[ref1][k] > inPoints[ref2][k]) {
        var p = ref1;
        ref1 = ref2;
        ref2 = p;
      }

      var in1 = inPoints[ref1][k];
      var in2 = inPoints[ref2][k];
      var out1 = outPoints[ref1][k];
      var out2 = outPoints[ref2][k]; // If the reference points have the same coordinate but different
      // delta, inferred delta is zero.  Otherwise interpolate.

      if (in1 !== in2 || out1 === out2) {
        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);

        for (var _p = p1; _p <= p2; _p++) {
          var out = inPoints[_p][k];

          if (out <= in1) {
            out += out1 - in1;
          } else if (out >= in2) {
            out += out2 - in2;
          } else {
            out = out1 + (out - in1) * scale;
          }

          outPoints[_p][k] = out;
        }
      }
    }
  };

  _proto.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {
    var deltaX = outPoints[ref].x - inPoints[ref].x;
    var deltaY = outPoints[ref].y - inPoints[ref].y;

    if (deltaX === 0 && deltaY === 0) {
      return;
    }

    for (var p = p1; p <= p2; p++) {
      if (p !== ref) {
        outPoints[p].x += deltaX;
        outPoints[p].y += deltaY;
      }
    }
  };

  _proto.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {
    var outerIndex, innerIndex;

    if (table.advanceWidthMapping) {
      var idx = gid;

      if (idx >= table.advanceWidthMapping.mapCount) {
        idx = table.advanceWidthMapping.mapCount - 1;
      }

      table.advanceWidthMapping.entryFormat;
      var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];
      outerIndex = _table$advanceWidthMa.outerIndex;
      innerIndex = _table$advanceWidthMa.innerIndex;
    } else {
      outerIndex = 0;
      innerIndex = gid;
    }

    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
  } // See pseudo code from `Font Variations Overview'
  // in the OpenType specification.
  ;

  _proto.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {
    if (outerIndex >= itemStore.itemVariationData.length) {
      return 0;
    }

    var varData = itemStore.itemVariationData[outerIndex];

    if (innerIndex >= varData.deltaSets.length) {
      return 0;
    }

    var deltaSet = varData.deltaSets[innerIndex];
    var blendVector = this.getBlendVector(itemStore, outerIndex);
    var netAdjustment = 0;

    for (var master = 0; master < varData.regionIndexCount; master++) {
      netAdjustment += deltaSet.deltas[master] * blendVector[master];
    }

    return netAdjustment;
  };

  _proto.getBlendVector = function getBlendVector(itemStore, outerIndex) {
    var varData = itemStore.itemVariationData[outerIndex];

    if (this.blendVectors.has(varData)) {
      return this.blendVectors.get(varData);
    }

    var normalizedCoords = this.normalizedCoords;
    var blendVector = []; // outer loop steps through master designs to be blended

    for (var master = 0; master < varData.regionIndexCount; master++) {
      var scalar = 1;
      var regionIndex = varData.regionIndexes[master];
      var axes = itemStore.variationRegionList.variationRegions[regionIndex]; // inner loop steps through axes in this region

      for (var j = 0; j < axes.length; j++) {
        var axis = axes[j];
        var axisScalar = void 0; // compute the scalar contribution of this axis
        // ignore invalid ranges

        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {
          axisScalar = 1;
        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {
          axisScalar = 1; // peak of 0 means ignore this axis
        } else if (axis.peakCoord === 0) {
          axisScalar = 1; // ignore this region if coords are out of range
        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {
          axisScalar = 0; // calculate a proportional factor
        } else {
          if (normalizedCoords[j] === axis.peakCoord) {
            axisScalar = 1;
          } else if (normalizedCoords[j] < axis.peakCoord) {
            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
          } else {
            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
          }
        } // take product of all the axis scalars


        scalar *= axisScalar;
      }

      blendVector[master] = scalar;
    }

    this.blendVectors.set(varData, blendVector);
    return blendVector;
  };

  return GlyphVariationProcessor;
}();

var resolved = Promise.resolve();

var Subset = /*#__PURE__*/function () {
  function Subset(font) {
    this.font = font;
    this.glyphs = [];
    this.mapping = {}; // always include the missing glyph

    this.includeGlyph(0);
  }

  var _proto = Subset.prototype;

  _proto.includeGlyph = function includeGlyph(glyph) {
    if (typeof glyph === 'object') {
      glyph = glyph.id;
    }

    if (this.mapping[glyph] == null) {
      this.glyphs.push(glyph);
      this.mapping[glyph] = this.glyphs.length - 1;
    }

    return this.mapping[glyph];
  };

  _proto.encodeStream = function encodeStream() {
    var _this = this;

    var s = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().EncodeStream)();
    resolved.then(function () {
      _this.encode(s);

      return s.end();
    });
    return s;
  };

  return Subset;
}();

var ON_CURVE = 1 << 0;
var X_SHORT_VECTOR = 1 << 1;
var Y_SHORT_VECTOR = 1 << 2;
var REPEAT = 1 << 3;
var SAME_X = 1 << 4;
var SAME_Y = 1 << 5;

var Point = /*#__PURE__*/function () {
  function Point() {}

  Point.size = function size(val) {
    return val >= 0 && val <= 255 ? 1 : 2;
  };

  Point.encode = function encode(stream, value) {
    if (value >= 0 && value <= 255) {
      stream.writeUInt8(value);
    } else {
      stream.writeInt16BE(value);
    }
  };

  return Point;
}();

var Glyf = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  numberOfContours: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  // if negative, this is a composite glyph
  xMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yMin: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  xMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  yMax: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  endPtsOfContours: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'numberOfContours'),
  instructions: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  flags: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 0),
  xPoints: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Point, 0),
  yPoints: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Point, 0)
});
/**
 * Encodes TrueType glyph outlines
 */

var TTFGlyphEncoder = /*#__PURE__*/function () {
  function TTFGlyphEncoder() {}

  var _proto = TTFGlyphEncoder.prototype;

  _proto.encodeSimple = function encodeSimple(path, instructions) {
    if (instructions === void 0) {
      instructions = [];
    }

    var endPtsOfContours = [];
    var xPoints = [];
    var yPoints = [];
    var flags = [];
    var same = 0;
    var lastX = 0,
        lastY = 0,
        lastFlag = 0;
    var pointCount = 0;

    for (var i = 0; i < path.commands.length; i++) {
      var c = path.commands[i];

      for (var j = 0; j < c.args.length; j += 2) {
        var x = c.args[j];
        var y = c.args[j + 1];
        var flag = 0; // If the ending point of a quadratic curve is the midpoint
        // between the control point and the control point of the next
        // quadratic curve, we can omit the ending point.

        if (c.command === 'quadraticCurveTo' && j === 2) {
          var next = path.commands[i + 1];

          if (next && next.command === 'quadraticCurveTo') {
            var midX = (lastX + next.args[0]) / 2;
            var midY = (lastY + next.args[1]) / 2;

            if (x === midX && y === midY) {
              continue;
            }
          }
        } // All points except control points are on curve.


        if (!(c.command === 'quadraticCurveTo' && j === 0)) {
          flag |= ON_CURVE;
        }

        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR, SAME_X);
        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR, SAME_Y);

        if (flag === lastFlag && same < 255) {
          flags[flags.length - 1] |= REPEAT;
          same++;
        } else {
          if (same > 0) {
            flags.push(same);
            same = 0;
          }

          flags.push(flag);
          lastFlag = flag;
        }

        lastX = x;
        lastY = y;
        pointCount++;
      }

      if (c.command === 'closePath') {
        endPtsOfContours.push(pointCount - 1);
      }
    } // Close the path if the last command didn't already


    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {
      endPtsOfContours.push(pointCount - 1);
    }

    var bbox = path.bbox;
    var glyf = {
      numberOfContours: endPtsOfContours.length,
      xMin: bbox.minX,
      yMin: bbox.minY,
      xMax: bbox.maxX,
      yMax: bbox.maxY,
      endPtsOfContours: endPtsOfContours,
      instructions: instructions,
      flags: flags,
      xPoints: xPoints,
      yPoints: yPoints
    };
    var size = Glyf.size(glyf);
    var tail = 4 - size % 4;
    var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().EncodeStream)(size + tail);
    Glyf.encode(stream, glyf); // Align to 4-byte length

    if (tail !== 0) {
      stream.fill(0, tail);
    }

    return stream.buffer;
  };

  _proto._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
    var diff = value - last;

    if (value === last) {
      flag |= sameFlag;
    } else {
      if (-255 <= diff && diff <= 255) {
        flag |= shortFlag;

        if (diff < 0) {
          diff = -diff;
        } else {
          flag |= sameFlag;
        }
      }

      points.push(diff);
    }

    return flag;
  };

  return TTFGlyphEncoder;
}();

var TTFSubset = /*#__PURE__*/function (_Subset) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(TTFSubset, _Subset);

  function TTFSubset(font) {
    var _this;

    _this = _Subset.call(this, font) || this;
    _this.glyphEncoder = new TTFGlyphEncoder();
    return _this;
  }

  var _proto = TTFSubset.prototype;

  _proto._addGlyph = function _addGlyph(gid) {
    var glyph = this.font.getGlyph(gid);

    var glyf = glyph._decode(); // get the offset to the glyph from the loca table


    var curOffset = this.font.loca.offsets[gid];
    var nextOffset = this.font.loca.offsets[gid + 1];

    var stream = this.font._getTableStream('glyf');

    stream.pos += curOffset;
    var buffer = stream.readBuffer(nextOffset - curOffset); // if it is a compound glyph, include its components

    if (glyf && glyf.numberOfContours < 0) {
      buffer = Buffer.from(buffer);

      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(glyf.components), _step; !(_step = _iterator()).done;) {
        var component = _step.value;
        gid = this.includeGlyph(component.glyphID);
        buffer.writeUInt16BE(gid, component.pos);
      }
    } else if (glyf && this.font._variationProcessor) {
      // If this is a TrueType variation glyph, re-encode the path
      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
    }

    this.glyf.push(buffer);
    this.loca.offsets.push(this.offset);
    this.hmtx.metrics.push({
      advance: glyph.advanceWidth,
      bearing: glyph._getMetrics().leftBearing
    });
    this.offset += buffer.length;
    return this.glyf.length - 1;
  };

  _proto.encode = function encode(stream) {
    // tables required by PDF spec:
    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm
    //
    // additional tables required for standalone fonts:
    //   name, cmap, OS/2, post
    this.glyf = [];
    this.offset = 0;
    this.loca = {
      offsets: [],
      version: this.font.loca.version
    };
    this.hmtx = {
      metrics: [],
      bearings: []
    }; // include all the glyphs
    // not using a for loop because we need to support adding more
    // glyphs to the array as we go, and CoffeeScript caches the length.

    var i = 0;

    while (i < this.glyphs.length) {
      this._addGlyph(this.glyphs[i++]);
    }

    var maxp = clone__WEBPACK_IMPORTED_MODULE_10___default()(this.font.maxp);
    maxp.numGlyphs = this.glyf.length;
    this.loca.offsets.push(this.offset);
    var head = clone__WEBPACK_IMPORTED_MODULE_10___default()(this.font.head);
    head.indexToLocFormat = this.loca.version;
    var hhea = clone__WEBPACK_IMPORTED_MODULE_10___default()(this.font.hhea);
    hhea.numberOfMetrics = this.hmtx.metrics.length; // map = []
    // for index in [0...256]
    //     if index < @numGlyphs
    //         map[index] = index
    //     else
    //         map[index] = 0
    //
    // cmapTable =
    //     version: 0
    //     length: 262
    //     language: 0
    //     codeMap: map
    //
    // cmap =
    //     version: 0
    //     numSubtables: 1
    //     tables: [
    //         platformID: 1
    //         encodingID: 0
    //         table: cmapTable
    //     ]
    // TODO: subset prep, cvt, fpgm?

    Directory.encode(stream, {
      tables: {
        head: head,
        hhea: hhea,
        loca: this.loca,
        maxp: maxp,
        'cvt ': this.font['cvt '],
        prep: this.font.prep,
        glyf: this.glyf,
        hmtx: this.hmtx,
        fpgm: this.font.fpgm // name: clone @font.name
        // 'OS/2': clone @font['OS/2']
        // post: clone @font.post
        // cmap: cmap

      }
    });
  };

  return TTFSubset;
}(Subset);

var CFFSubset = /*#__PURE__*/function (_Subset) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(CFFSubset, _Subset);

  function CFFSubset(font) {
    var _this;

    _this = _Subset.call(this, font) || this;
    _this.cff = _this.font['CFF '];

    if (!_this.cff) {
      throw new Error('Not a CFF Font');
    }

    return _this;
  }

  var _proto = CFFSubset.prototype;

  _proto.subsetCharstrings = function subsetCharstrings() {
    this.charstrings = [];
    var gsubrs = {};

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.glyphs), _step; !(_step = _iterator()).done;) {
      var gid = _step.value;
      this.charstrings.push(this.cff.getCharString(gid));
      var glyph = this.font.getGlyph(gid);
      glyph.path; // this causes the glyph to be parsed

      for (var subr in glyph._usedGsubrs) {
        gsubrs[subr] = true;
      }
    }

    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
  };

  _proto.subsetSubrs = function subsetSubrs(subrs, used) {
    var res = [];

    for (var i = 0; i < subrs.length; i++) {
      var subr = subrs[i];

      if (used[i]) {
        this.cff.stream.pos = subr.offset;
        res.push(this.cff.stream.readBuffer(subr.length));
      } else {
        res.push(Buffer.from([11])); // return
      }
    }

    return res;
  };

  _proto.subsetFontdict = function subsetFontdict(topDict) {
    topDict.FDArray = [];
    topDict.FDSelect = {
      version: 0,
      fds: []
    };
    var used_fds = {};
    var used_subrs = [];

    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.glyphs), _step2; !(_step2 = _iterator2()).done;) {
      var gid = _step2.value;
      var fd = this.cff.fdForGlyph(gid);

      if (fd == null) {
        continue;
      }

      if (!used_fds[fd]) {
        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
        used_subrs.push({});
      }

      used_fds[fd] = true;
      topDict.FDSelect.fds.push(topDict.FDArray.length - 1);
      var glyph = this.font.getGlyph(gid);
      glyph.path; // this causes the glyph to be parsed

      for (var subr in glyph._usedSubrs) {
        used_subrs[used_subrs.length - 1][subr] = true;
      }
    }

    for (var i = 0; i < topDict.FDArray.length; i++) {
      var dict = topDict.FDArray[i];
      delete dict.FontName;

      if (dict.Private && dict.Private.Subrs) {
        dict.Private = Object.assign({}, dict.Private);
        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
      }
    }

    return;
  };

  _proto.createCIDFontdict = function createCIDFontdict(topDict) {
    var used_subrs = {};

    for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.glyphs), _step3; !(_step3 = _iterator3()).done;) {
      var gid = _step3.value;
      var glyph = this.font.getGlyph(gid);
      glyph.path; // this causes the glyph to be parsed

      for (var subr in glyph._usedSubrs) {
        used_subrs[subr] = true;
      }
    }

    var privateDict = Object.assign({}, this.cff.topDict.Private);

    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {
      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
    }

    topDict.FDArray = [{
      Private: privateDict
    }];
    return topDict.FDSelect = {
      version: 3,
      nRanges: 1,
      ranges: [{
        first: 0,
        fd: 0
      }],
      sentinel: this.charstrings.length
    };
  };

  _proto.addString = function addString(string) {
    if (!string) {
      return null;
    }

    if (!this.strings) {
      this.strings = [];
    }

    this.strings.push(string);
    return standardStrings.length + this.strings.length - 1;
  };

  _proto.encode = function encode(stream) {
    this.subsetCharstrings();
    var charset = {
      version: this.charstrings.length > 255 ? 2 : 1,
      ranges: [{
        first: 1,
        nLeft: this.charstrings.length - 2
      }]
    };
    var topDict = Object.assign({}, this.cff.topDict);
    topDict.Private = null;
    topDict.charset = charset;
    topDict.Encoding = null;
    topDict.CharStrings = this.charstrings;

    for (var _i = 0, _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']; _i < _arr.length; _i++) {
      var key = _arr[_i];
      topDict[key] = this.addString(this.cff.string(topDict[key]));
    }

    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];
    topDict.CIDCount = this.charstrings.length;

    if (this.cff.isCIDFont) {
      this.subsetFontdict(topDict);
    } else {
      this.createCIDFontdict(topDict);
    }

    var top = {
      version: 1,
      hdrSize: this.cff.hdrSize,
      offSize: 4,
      header: this.cff.header,
      nameIndex: [this.cff.postscriptName],
      topDictIndex: [topDict],
      stringIndex: this.strings,
      globalSubrIndex: this.gsubrs
    };
    CFFTop.encode(stream, top);
  };

  return CFFSubset;
}(Subset);

var _class;
/**
 * This is the base class for all SFNT-based font formats in fontkit.
 * It supports TrueType, and PostScript glyphs, and several color glyph formats.
 */

var TTFFont = (_class = /*#__PURE__*/function () {
  TTFFont.probe = function probe(buffer) {
    var format = buffer.toString('ascii', 0, 4);
    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);
  };

  function TTFFont(stream, variationCoords) {
    if (variationCoords === void 0) {
      variationCoords = null;
    }

    this.defaultLanguage = null;
    this.stream = stream;
    this.variationCoords = variationCoords;
    this._directoryPos = this.stream.pos;
    this._tables = {};
    this._glyphs = {};

    this._decodeDirectory(); // define properties for each table to lazily parse


    for (var tag in this.directory.tables) {
      var table = this.directory.tables[tag];

      if (tables[tag] && table.length > 0) {
        Object.defineProperty(this, tag, {
          get: this._getTable.bind(this, table)
        });
      }
    }
  }

  var _proto = TTFFont.prototype;

  _proto.setDefaultLanguage = function setDefaultLanguage(lang) {
    if (lang === void 0) {
      lang = null;
    }

    this.defaultLanguage = lang;
  };

  _proto._getTable = function _getTable(table) {
    if (!(table.tag in this._tables)) {
      try {
        this._tables[table.tag] = this._decodeTable(table);
      } catch (e) {
        if (fontkit.logErrors) {
          console.error("Error decoding table " + table.tag);
          console.error(e.stack);
        }
      }
    }

    return this._tables[table.tag];
  };

  _proto._getTableStream = function _getTableStream(tag) {
    var table = this.directory.tables[tag];

    if (table) {
      this.stream.pos = table.offset;
      return this.stream;
    }

    return null;
  };

  _proto._decodeDirectory = function _decodeDirectory() {
    return this.directory = Directory.decode(this.stream, {
      _startOffset: 0
    });
  };

  _proto._decodeTable = function _decodeTable(table) {
    var pos = this.stream.pos;

    var stream = this._getTableStream(table.tag);

    var result = tables[table.tag].decode(stream, this, table.length);
    this.stream.pos = pos;
    return result;
  }
  /**
   * Gets a string from the font's `name` table
   * `lang` is a BCP-47 language code.
   * @return {string}
   */
  ;

  _proto.getName = function getName(key, lang) {
    if (lang === void 0) {
      lang = this.defaultLanguage || fontkit.defaultLanguage;
    }

    var record = this.name && this.name.records[key];

    if (record) {
      // Attempt to retrieve the entry, depending on which translation is available:
      return record[lang] || record[this.defaultLanguage] || record[fontkit.defaultLanguage] || record['en'] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine
      || null;
    }

    return null;
  }
  /**
   * The unique PostScript name for this font, e.g. "Helvetica-Bold"
   * @type {string}
   */
  ;

  /**
   * Returns whether there is glyph in the font for the given unicode code point.
   *
   * @param {number} codePoint
   * @return {boolean}
   */
  _proto.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {
    return !!this._cmapProcessor.lookup(codePoint);
  }
  /**
   * Maps a single unicode code point to a Glyph object.
   * Does not perform any advanced substitutions (there is no context to do so).
   *
   * @param {number} codePoint
   * @return {Glyph}
   */
  ;

  _proto.glyphForCodePoint = function glyphForCodePoint(codePoint) {
    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);
  }
  /**
   * Returns an array of Glyph objects for the given string.
   * This is only a one-to-one mapping from characters to glyphs.
   * For most uses, you should use font.layout (described below), which
   * provides a much more advanced mapping supporting AAT and OpenType shaping.
   *
   * @param {string} string
   * @return {Glyph[]}
   */
  ;

  _proto.glyphsForString = function glyphsForString(string) {
    var glyphs = [];
    var len = string.length;
    var idx = 0;
    var last = -1;
    var state = -1;

    while (idx <= len) {
      var code = 0;
      var nextState = 0;

      if (idx < len) {
        // Decode the next codepoint from UTF 16
        code = string.charCodeAt(idx++);

        if (0xd800 <= code && code <= 0xdbff && idx < len) {
          var next = string.charCodeAt(idx);

          if (0xdc00 <= next && next <= 0xdfff) {
            idx++;
            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
          }
        } // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.


        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
      } else {
        idx++;
      }

      if (state === 0 && nextState === 1) {
        // Variation selector following normal codepoint.
        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));
      } else if (state === 0 && nextState === 0) {
        // Normal codepoint following normal codepoint.
        glyphs.push(this.glyphForCodePoint(last));
      }

      last = code;
      state = nextState;
    }

    return glyphs;
  };

  /**
   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
   *
   * @param {string} string
   * @param {string[]} [userFeatures]
   * @param {string} [script]
   * @param {string} [language]
   * @param {string} [direction]
   * @return {GlyphRun}
   */
  _proto.layout = function layout(string, userFeatures, script, language, direction) {
    return this._layoutEngine.layout(string, userFeatures, script, language, direction);
  }
  /**
   * Returns an array of strings that map to the given glyph id.
   * @param {number} gid - glyph id
   */
  ;

  _proto.stringsForGlyph = function stringsForGlyph(gid) {
    return this._layoutEngine.stringsForGlyph(gid);
  }
  /**
   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
   * (or mapped AAT tags) supported by the font.
   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
   *
   * @type {string[]}
   */
  ;

  _proto.getAvailableFeatures = function getAvailableFeatures(script, language) {
    return this._layoutEngine.getAvailableFeatures(script, language);
  };

  _proto._getBaseGlyph = function _getBaseGlyph(glyph, characters) {
    if (characters === void 0) {
      characters = [];
    }

    if (!this._glyphs[glyph]) {
      if (this.directory.tables.glyf) {
        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);
      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {
        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);
      }
    }

    return this._glyphs[glyph] || null;
  }
  /**
   * Returns a glyph object for the given glyph id.
   * You can pass the array of code points this glyph represents for
   * your use later, and it will be stored in the glyph object.
   *
   * @param {number} glyph
   * @param {number[]} characters
   * @return {Glyph}
   */
  ;

  _proto.getGlyph = function getGlyph(glyph, characters) {
    if (characters === void 0) {
      characters = [];
    }

    if (!this._glyphs[glyph]) {
      if (this.directory.tables.sbix) {
        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);
      } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {
        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);
      } else {
        this._getBaseGlyph(glyph, characters);
      }
    }

    return this._glyphs[glyph] || null;
  }
  /**
   * Returns a Subset for this font.
   * @return {Subset}
   */
  ;

  _proto.createSubset = function createSubset() {
    if (this.directory.tables['CFF ']) {
      return new CFFSubset(this);
    }

    return new TTFSubset(this);
  }
  /**
   * Returns an object describing the available variation axes
   * that this font supports. Keys are setting tags, and values
   * contain the axis name, range, and default value.
   *
   * @type {object}
   */
  ;

  /**
   * Returns a new font with the given variation settings applied.
   * Settings can either be an instance name, or an object containing
   * variation tags as specified by the `variationAxes` property.
   *
   * @param {object} settings
   * @return {TTFFont}
   */
  _proto.getVariation = function getVariation(settings) {
    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {
      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');
    }

    if (typeof settings === 'string') {
      settings = this.namedVariations[settings];
    }

    if (typeof settings !== 'object') {
      throw new Error('Variation settings must be either a variation name or settings object.');
    } // normalize the coordinates


    var coords = this.fvar.axis.map(function (axis, i) {
      var axisTag = axis.axisTag.trim();

      if (axisTag in settings) {
        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
      } else {
        return axis.defaultValue;
      }
    });
    var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(this.stream.buffer);
    stream.pos = this._directoryPos;
    var font = new TTFFont(stream, coords);
    font._tables = this._tables;
    return font;
  };

  // Standardized format plugin API
  _proto.getFont = function getFont(name) {
    return this.getVariation(name);
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(TTFFont, [{
    key: "postscriptName",
    get: function get() {
      return this.getName('postscriptName');
    }
    /**
     * The font's full name, e.g. "Helvetica Bold"
     * @type {string}
     */

  }, {
    key: "fullName",
    get: function get() {
      return this.getName('fullName');
    }
    /**
     * The font's family name, e.g. "Helvetica"
     * @type {string}
     */

  }, {
    key: "familyName",
    get: function get() {
      return this.getName('fontFamily');
    }
    /**
     * The font's sub-family, e.g. "Bold".
     * @type {string}
     */

  }, {
    key: "subfamilyName",
    get: function get() {
      return this.getName('fontSubfamily');
    }
    /**
     * The font's copyright information
     * @type {string}
     */

  }, {
    key: "copyright",
    get: function get() {
      return this.getName('copyright');
    }
    /**
     * The font's version number
     * @type {string}
     */

  }, {
    key: "version",
    get: function get() {
      return this.getName('version');
    }
    /**
     * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
     * @type {number}
     */

  }, {
    key: "ascent",
    get: function get() {
      return this.hhea.ascent;
    }
    /**
     * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
     * @type {number}
     */

  }, {
    key: "descent",
    get: function get() {
      return this.hhea.descent;
    }
    /**
     * The amount of space that should be included between lines
     * @type {number}
     */

  }, {
    key: "lineGap",
    get: function get() {
      return this.hhea.lineGap;
    }
    /**
     * The offset from the normal underline position that should be used
     * @type {number}
     */

  }, {
    key: "underlinePosition",
    get: function get() {
      return this.post.underlinePosition;
    }
    /**
     * The weight of the underline that should be used
     * @type {number}
     */

  }, {
    key: "underlineThickness",
    get: function get() {
      return this.post.underlineThickness;
    }
    /**
     * If this is an italic font, the angle the cursor should be drawn at to match the font design
     * @type {number}
     */

  }, {
    key: "italicAngle",
    get: function get() {
      return this.post.italicAngle;
    }
    /**
     * The height of capital letters above the baseline.
     * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
     * @type {number}
     */

  }, {
    key: "capHeight",
    get: function get() {
      var os2 = this['OS/2'];
      return os2 ? os2.capHeight : this.ascent;
    }
    /**
     * The height of lower case letters in the font.
     * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
     * @type {number}
     */

  }, {
    key: "xHeight",
    get: function get() {
      var os2 = this['OS/2'];
      return os2 ? os2.xHeight : 0;
    }
    /**
     * The number of glyphs in the font.
     * @type {number}
     */

  }, {
    key: "numGlyphs",
    get: function get() {
      return this.maxp.numGlyphs;
    }
    /**
     * The size of the font’s internal coordinate grid
     * @type {number}
     */

  }, {
    key: "unitsPerEm",
    get: function get() {
      return this.head.unitsPerEm;
    }
    /**
     * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
     * @type {BBox}
     */

  }, {
    key: "bbox",
    get: function get() {
      return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
    }
  }, {
    key: "_cmapProcessor",
    get: function get() {
      return new CmapProcessor(this.cmap);
    }
    /**
     * An array of all of the unicode code points supported by the font.
     * @type {number[]}
     */

  }, {
    key: "characterSet",
    get: function get() {
      return this._cmapProcessor.getCharacterSet();
    }
  }, {
    key: "_layoutEngine",
    get: function get() {
      return new LayoutEngine(this);
    }
  }, {
    key: "availableFeatures",
    get: function get() {
      return this._layoutEngine.getAvailableFeatures();
    }
  }, {
    key: "variationAxes",
    get: function get() {
      var res = {};

      if (!this.fvar) {
        return res;
      }

      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.fvar.axis), _step; !(_step = _iterator()).done;) {
        var axis = _step.value;
        res[axis.axisTag.trim()] = {
          name: axis.name.en,
          min: axis.minValue,
          default: axis.defaultValue,
          max: axis.maxValue
        };
      }

      return res;
    }
    /**
     * Returns an object describing the named variation instances
     * that the font designer has specified. Keys are variation names
     * and values are the variation settings for this instance.
     *
     * @type {object}
     */

  }, {
    key: "namedVariations",
    get: function get() {
      var res = {};

      if (!this.fvar) {
        return res;
      }

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.fvar.instance), _step2; !(_step2 = _iterator2()).done;) {
        var instance = _step2.value;
        var settings = {};

        for (var i = 0; i < this.fvar.axis.length; i++) {
          var axis = this.fvar.axis[i];
          settings[axis.axisTag.trim()] = instance.coord[i];
        }

        res[instance.name.en] = settings;
      }

      return res;
    }
  }, {
    key: "_variationProcessor",
    get: function get() {
      if (!this.fvar) {
        return null;
      }

      var variationCoords = this.variationCoords; // Ignore if no variation coords and not CFF2

      if (!variationCoords && !this.CFF2) {
        return null;
      }

      if (!variationCoords) {
        variationCoords = this.fvar.axis.map(function (axis) {
          return axis.defaultValue;
        });
      }

      return new GlyphVariationProcessor(this, variationCoords);
    }
  }]);

  return TTFFont;
}(), ((0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "bbox", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "_cmapProcessor", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "_cmapProcessor"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "characterSet", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "characterSet"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "_layoutEngine", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "_layoutEngine"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "variationAxes", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "variationAxes"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "namedVariations", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "namedVariations"), _class.prototype), (0,_babel_runtime_helpers_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__["default"])(_class.prototype, "_variationProcessor", [cache], Object.getOwnPropertyDescriptor(_class.prototype, "_variationProcessor"), _class.prototype)), _class);

var WOFFDirectoryEntry = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  offset: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'void', {
    type: 'global'
  }),
  compLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  origChecksum: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var WOFFDirectory = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  tag: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  // should be 'wOFF'
  flavor: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  numTables: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16)),
  totalSfntSize: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  majorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  minorVersion: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  metaOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  metaLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  metaOrigLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  privOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  privLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  tables: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(WOFFDirectoryEntry, 'numTables')
});

WOFFDirectory.process = function () {
  var tables = {};

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tables), _step; !(_step = _iterator()).done;) {
    var table = _step.value;
    tables[table.tag] = table;
  }

  this.tables = tables;
};

var WOFFFont = /*#__PURE__*/function (_TTFFont) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(WOFFFont, _TTFFont);

  function WOFFFont() {
    return _TTFFont.apply(this, arguments) || this;
  }

  WOFFFont.probe = function probe(buffer) {
    return buffer.toString('ascii', 0, 4) === 'wOFF';
  };

  var _proto = WOFFFont.prototype;

  _proto._decodeDirectory = function _decodeDirectory() {
    this.directory = WOFFDirectory.decode(this.stream, {
      _startOffset: 0
    });
  };

  _proto._getTableStream = function _getTableStream(tag) {
    var table = this.directory.tables[tag];

    if (table) {
      this.stream.pos = table.offset;

      if (table.compLength < table.length) {
        this.stream.pos += 2; // skip deflate header

        var outBuffer = Buffer.alloc(table.length);
        var buf = tiny_inflate__WEBPACK_IMPORTED_MODULE_11___default()(this.stream.readBuffer(table.compLength - 2), outBuffer);
        return new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(buf);
      } else {
        return this.stream;
      }
    }

    return null;
  };

  return WOFFFont;
}(TTFFont);

var TTCHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().VersionedStruct)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), {
  0x00010000: {
    numFonts: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'numFonts')
  },
  0x00020000: {
    numFonts: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    offsets: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), 'numFonts'),
    dsigTag: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    dsigLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
    dsigOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
  }
});

var TrueTypeCollection = /*#__PURE__*/function () {
  TrueTypeCollection.probe = function probe(buffer) {
    return buffer.toString('ascii', 0, 4) === 'ttcf';
  };

  function TrueTypeCollection(stream) {
    this.stream = stream;

    if (stream.readString(4) !== 'ttcf') {
      throw new Error('Not a TrueType collection');
    }

    this.header = TTCHeader.decode(stream);
  }

  var _proto = TrueTypeCollection.prototype;

  _proto.getFont = function getFont(name) {
    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.header.offsets), _step; !(_step = _iterator()).done;) {
      var offset = _step.value;
      var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(this.stream.buffer);
      stream.pos = offset;
      var font = new TTFFont(stream);

      if (font.postscriptName === name) {
        return font;
      }
    }

    return null;
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(TrueTypeCollection, [{
    key: "fonts",
    get: function get() {
      var fonts = [];

      for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.header.offsets), _step2; !(_step2 = _iterator2()).done;) {
        var offset = _step2.value;
        var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(this.stream.buffer);
        stream.pos = offset;
        fonts.push(new TTFFont(stream));
      }

      return fonts;
    }
  }]);

  return TrueTypeCollection;
}();

var DFontName = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8));
new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  len: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  buf: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Buffer)('len')
});
var Ref = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  id: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  nameOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().int16),
  attr: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8),
  dataOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint24),
  handle: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});
var Type = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  name: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().String)(4),
  maxTypeIndex: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  refList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Ref, function (t) {
    return t.maxTypeIndex + 1;
  }), {
    type: 'parent'
  })
});
var TypeList = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  length: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16),
  types: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Array)(Type, function (t) {
    return t.length + 1;
  })
});
var DFontMap = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  reserved: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Reserved)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint8), 24),
  typeList: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), TypeList),
  nameListOffset: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint16), 'void')
});
var DFontHeader = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Struct)({
  dataOffset: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  map: new (restructure__WEBPACK_IMPORTED_MODULE_0___default().Pointer)((restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32), DFontMap),
  dataLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32),
  mapLength: (restructure__WEBPACK_IMPORTED_MODULE_0___default().uint32)
});

var DFont = /*#__PURE__*/function () {
  DFont.probe = function probe(buffer) {
    var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(buffer);

    try {
      var header = DFontHeader.decode(stream);
    } catch (e) {
      return false;
    }

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(header.map.typeList.types), _step; !(_step = _iterator()).done;) {
      var type = _step.value;

      if (type.name === 'sfnt') {
        return true;
      }
    }

    return false;
  };

  function DFont(stream) {
    this.stream = stream;
    this.header = DFontHeader.decode(this.stream);

    for (var _iterator2 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.header.map.typeList.types), _step2; !(_step2 = _iterator2()).done;) {
      var type = _step2.value;

      for (var _iterator3 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(type.refList), _step3; !(_step3 = _iterator3()).done;) {
        var ref = _step3.value;

        if (ref.nameOffset >= 0) {
          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
          ref.name = DFontName.decode(this.stream);
        } else {
          ref.name = null;
        }
      }

      if (type.name === 'sfnt') {
        this.sfnt = type;
      }
    }
  }

  var _proto = DFont.prototype;

  _proto.getFont = function getFont(name) {
    if (!this.sfnt) {
      return null;
    }

    for (var _iterator4 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.sfnt.refList), _step4; !(_step4 = _iterator4()).done;) {
      var ref = _step4.value;
      var pos = this.header.dataOffset + ref.dataOffset + 4;
      var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(this.stream.buffer.slice(pos));
      var font = new TTFFont(stream);

      if (font.postscriptName === name) {
        return font;
      }
    }

    return null;
  };

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(DFont, [{
    key: "fonts",
    get: function get() {
      var fonts = [];

      for (var _iterator5 = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(this.sfnt.refList), _step5; !(_step5 = _iterator5()).done;) {
        var ref = _step5.value;
        var pos = this.header.dataOffset + ref.dataOffset + 4;
        var stream = new (restructure__WEBPACK_IMPORTED_MODULE_0___default().DecodeStream)(this.stream.buffer.slice(pos));
        fonts.push(new TTFFont(stream));
      }

      return fonts;
    }
  }]);

  return DFont;
}();

fontkit.registerFormat(TTFFont);
fontkit.registerFormat(WOFFFont);
fontkit.registerFormat(TrueTypeCollection);
fontkit.registerFormat(DFont);




/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/typeof.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/typeof.js ***!
  \***************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/regenerator/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/regenerator/index.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@react-pdf/image/lib/index.browser.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/image/lib/index.browser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];


Object.defineProperty(exports, "__esModule", ({ value: true }));

var _asyncToGenerator = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/asyncToGenerator.js");
var _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/regenerator/index.js");
var fetch = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
var PNG = __webpack_require__(/*! @react-pdf/png-js */ "./node_modules/@react-pdf/png-js/lib/png-js.browser.es.js");

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);
var PNG__default = /*#__PURE__*/_interopDefaultLegacy(PNG);

PNG__default["default"].isValid = function (data) {
  try {
    return !!new PNG__default["default"](data);
  } catch (e) {
    return false;
  }
};

// Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee
var MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];

var JPEG = function JPEG(data) {
  this.data = null;
  this.width = null;
  this.height = null;
  this.data = data;

  if (data.readUInt16BE(0) !== 0xffd8) {
    throw new Error('SOI not found in JPEG');
  }

  var marker;
  var pos = 2;

  while (pos < data.length) {
    marker = data.readUInt16BE(pos);
    pos += 2;

    if (MARKERS.includes(marker)) {
      break;
    }

    pos += data.readUInt16BE(pos);
  }

  if (!MARKERS.includes(marker)) {
    throw new Error('Invalid JPEG.');
  }

  pos += 3;
  this.height = data.readUInt16BE(pos);
  pos += 2;
  this.width = data.readUInt16BE(pos);
};

JPEG.isValid = function (data) {
  if (!data || !Buffer.isBuffer(data) || data.readUInt16BE(0) !== 0xffd8) {
    return false;
  }

  var marker;
  var pos = 2;

  while (pos < data.length) {
    marker = data.readUInt16BE(pos);
    pos += 2;

    if (MARKERS.includes(marker)) {
      break;
    }

    pos += data.readUInt16BE(pos);
  }

  if (!MARKERS.includes(marker)) {
    return false;
  }

  return true;
};

var createCache = function createCache(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$limit = _ref.limit,
      limit = _ref$limit === void 0 ? 100 : _ref$limit;

  var cache = {};
  var keys = [];
  return {
    get: function get(key) {
      return cache[key];
    },
    set: function set(key, value) {
      keys.push(key);

      if (keys.length > limit) {
        delete cache[keys.shift()];
      }

      cache[key] = value;
    },
    reset: function reset() {
      cache = {};
      keys = [];
    },
    length: function length() {
      return keys.length;
    }
  };
};

var IMAGE_CACHE = createCache({
  limit: 30
});

var fetchRemoteFile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(uri, options) {
    var response, buffer;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch__default["default"](uri, options);

          case 2:
            response = _context.sent;
            _context.next = 5;
            return response.buffer ? response.buffer() : response.arrayBuffer();

          case 5:
            buffer = _context.sent;
            return _context.abrupt("return", buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchRemoteFile(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var isValidFormat = function isValidFormat(format) {
  var lower = format.toLowerCase();
  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';
};

var guessFormat = function guessFormat(buffer) {
  var format;

  if (JPEG.isValid(buffer)) {
    format = 'jpg';
  } else if (PNG__default["default"].isValid(buffer)) {
    format = 'png';
  }

  return format;
};

var isCompatibleBase64 = function isCompatibleBase64(_ref2) {
  var uri = _ref2.uri;
  return /^data:image\/[a-zA-Z]*;base64,[^"]*/g.test(uri);
};

function getImage(body, extension) {
  switch (extension.toLowerCase()) {
    case 'jpg':
    case 'jpeg':
      return new JPEG(body);

    case 'png':
      return new PNG__default["default"](body);

    default:
      return null;
  }
}

var resolveBase64Image = function resolveBase64Image(_ref3) {
  var uri = _ref3.uri;
  var match = /^data:image\/([a-zA-Z]*);base64,([^"]*)/g.exec(uri);
  var format = match[1];
  var data = match[2];

  if (!isValidFormat(format)) {
    throw new Error("Base64 image invalid format: " + format);
  }

  return new Promise(function (resolve) {
    return resolve(getImage(Buffer.from(data, 'base64'), format));
  });
};

var resolveImageFromData = function resolveImageFromData(src) {
  if (src.data && src.format) {
    return new Promise(function (resolve) {
      return resolve(getImage(src.data, src.format));
    });
  }

  throw new Error("Invalid data given for local file: " + JSON.stringify(src));
};

var resolveBufferImage = function resolveBufferImage(buffer) {
  var format = guessFormat(buffer);

  if (format) {
    return new Promise(function (resolve) {
      return resolve(getImage(buffer, format));
    });
  }

  return Promise.resolve();
};

var getImageFormat = function getImageFormat(body) {
  var isPng = body[0] === 137 && body[1] === 80 && body[2] === 78 && body[3] === 71 && body[4] === 13 && body[5] === 10 && body[6] === 26 && body[7] === 10;
  var isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;
  var extension = '';

  if (isPng) {
    extension = 'png';
  } else if (isJpg) {
    extension = 'jpg';
  } else {
    throw new Error('Not valid image extension');
  }

  return extension;
};

var resolveImageFromUrl = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(src) {
    var uri, body, headers, _src$method, method, data, extension;

    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            uri = src.uri, body = src.body, headers = src.headers, _src$method = src.method, method = _src$method === void 0 ? 'GET' : _src$method;

            {
              _context2.next = 7;
              break;
            }

          case 4:
            _context2.t0 = _context2.sent;
            _context2.next = 10;
            break;

          case 7:
            _context2.next = 9;
            return fetchRemoteFile(uri, {
              body: body,
              headers: headers,
              method: method
            });

          case 9:
            _context2.t0 = _context2.sent;

          case 10:
            data = _context2.t0;
            extension = getImageFormat(data);
            return _context2.abrupt("return", getImage(data, extension));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function resolveImageFromUrl(_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var resolveImage = function resolveImage(src, _temp) {
  var _ref5 = _temp === void 0 ? {} : _temp,
      _ref5$cache = _ref5.cache,
      cache = _ref5$cache === void 0 ? true : _ref5$cache;

  var cacheKey = src.data ? src.data.toString() : src.uri;

  if (cache && IMAGE_CACHE.get(cacheKey)) {
    return IMAGE_CACHE.get(cacheKey);
  }

  var image;

  if (isCompatibleBase64(src)) {
    image = resolveBase64Image(src);
  } else if (Buffer.isBuffer(src)) {
    image = resolveBufferImage(src);
  } else if (typeof src === 'object' && src.data) {
    image = resolveImageFromData(src);
  } else {
    image = resolveImageFromUrl(src);
  }

  if (!image) {
    throw new Error('Cannot resolve image');
  }

  if (cache) {
    IMAGE_CACHE.set(cacheKey, image);
  }

  return image;
};

exports["default"] = resolveImage;
//# sourceMappingURL=index.browser.js.map


/***/ }),

/***/ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/typeof.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/typeof.js ***!
  \*************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/regenerator/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@react-pdf/image/node_modules/@babel/runtime/regenerator/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@react-pdf/image/node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/canvas/measureCanvas.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/canvas/measureCanvas.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _getMargin = _interopRequireDefault(__webpack_require__(/*! ../node/getMargin */ "./node_modules/@react-pdf/layout/lib/node/getMargin.js"));

var _getPadding = _interopRequireDefault(__webpack_require__(/*! ../node/getPadding */ "./node_modules/@react-pdf/layout/lib/node/getPadding.js"));

var _isHeightAuto = _interopRequireDefault(__webpack_require__(/*! ../page/isHeightAuto */ "./node_modules/@react-pdf/layout/lib/page/isHeightAuto.js"));

/* eslint-disable no-param-reassign */
var SAFETY_HEIGHT = 10;
var getMax = R.reduce(R.max, -Infinity);
/**
 * Helper object to predict canvas size
 * TODO: Implement remaining functions (as close as possible);
 */

var measureCtx = function measureCtx() {
  var ctx = {};
  var points = [];

  var nil = function nil() {
    return ctx;
  };

  var addPoint = function addPoint(x, y) {
    return points.push([x, y]);
  };

  var moveTo = R.compose(nil, addPoint);

  var rect = function rect(x, y, w, h) {
    addPoint(x, y);
    addPoint(x + w, y);
    addPoint(x, y + h);
    addPoint(x + w, y + h);
    return ctx;
  };

  var ellipse = function ellipse(x, y, rx, ry) {
    ry = ry || rx;
    addPoint(x - rx, y - ry);
    addPoint(x + rx, y - ry);
    addPoint(x + rx, y + ry);
    addPoint(x - rx, y + ry);
    return ctx;
  };

  var polygon = function polygon() {
    points.push.apply(points, arguments);
    return nil();
  }; // Change dimensions


  ctx.rect = rect;
  ctx.moveTo = moveTo;
  ctx.lineTo = moveTo;
  ctx.circle = ellipse;
  ctx.polygon = polygon;
  ctx.ellipse = ellipse;
  ctx.roundedRect = rect; // To be implemented

  ctx.text = nil;
  ctx.path = nil;
  ctx.lineWidth = nil;
  ctx.bezierCurveTo = nil;
  ctx.quadraticCurveTo = nil;
  ctx.scale = nil;
  ctx.rotate = nil;
  ctx.translate = nil; // These don't change dimensions

  ctx.dash = nil;
  ctx.clip = nil;
  ctx.save = nil;
  ctx.fill = nil;
  ctx.font = nil;
  ctx.stroke = nil;
  ctx.lineCap = nil;
  ctx.opacity = nil;
  ctx.restore = nil;
  ctx.lineJoin = nil;
  ctx.fontSize = nil;
  ctx.fillColor = nil;
  ctx.miterLimit = nil;
  ctx.strokeColor = nil;
  ctx.fillOpacity = nil;
  ctx.strokeOpacity = nil;
  ctx.linearGradient = nil;
  ctx.radialGradient = nil;

  ctx.getWidth = function () {
    return R.compose(getMax, R.pluck(0))(points);
  };

  ctx.getHeight = function () {
    return R.compose(getMax, R.pluck(1))(points);
  };

  return ctx;
};
/**
 * Yoga canvas measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @param {Number} width
 * @param {Number} widthMode
 * @param {Number} height
 * @param {Number} heightMode
 * @returns {Object} canvas width and height
 */


var measureCanvas = function measureCanvas(page, node) {
  var imageMargin = (0, _getMargin.default)(node);
  var pagePadding = (0, _getPadding.default)(page);
  var pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;
  var ctx = measureCtx();
  node.props.paint(ctx);
  var width = ctx.getWidth();
  var height = Math.min(pageArea, ctx.getHeight());
  return {
    height: height,
    width: width
  };
};

var _default = R.curryN(6, measureCanvas);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/image/fetchImage.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/image/fetchImage.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _image = _interopRequireDefault(__webpack_require__(/*! @react-pdf/image */ "./node_modules/@react-pdf/image/lib/index.browser.js"));

var _getSource = _interopRequireDefault(__webpack_require__(/*! ./getSource */ "./node_modules/@react-pdf/layout/lib/image/getSource.js"));

var _resolveSource = _interopRequireDefault(__webpack_require__(/*! ./resolveSource */ "./node_modules/@react-pdf/layout/lib/image/resolveSource.js"));

/* eslint-disable no-param-reassign */

/**
 * Fetches image and append data to node
 * Ideally this fn should be immutable.
 *
 * @param {Object} node
 */
var fetchImage = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(node) {
    var src, cache, source;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            src = (0, _getSource.default)(node);
            cache = node.props.cache;

            if (src) {
              _context.next = 5;
              break;
            }

            console.warn(false, 'Image should receive either a "src" or "source" prop');
            return _context.abrupt("return");

          case 5:
            _context.prev = 5;
            _context.next = 8;
            return (0, _resolveSource.default)(src);

          case 8:
            source = _context.sent;

            if (source) {
              _context.next = 11;
              break;
            }

            throw new Error("Image's \"src\" or \"source\" prop returned " + source);

          case 11:
            _context.next = 13;
            return (0, _image.default)(source, {
              cache: cache
            });

          case 13:
            node.image = _context.sent;
            _context.next = 20;
            break;

          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](5);
            node.image = {
              width: 0,
              height: 0
            };
            console.warn(_context.t0.message);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 16]]);
  }));

  return function fetchImage(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = fetchImage;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/image/getRatio.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/image/getRatio.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get image ratio
 *
 * @param {Object} image node
 * @returns {Number} image ratio
 */
var getRatio = function getRatio(node) {
  var _node$image;

  return (_node$image = node.image) !== null && _node$image !== void 0 && _node$image.data ? node.image.width / node.image.height : 1;
};

var _default = getRatio;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/image/getSource.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/image/getSource.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get image source
 *
 * @param {Object} image node
 * @returns {String | Object} image src
 */
var getSource = function getSource(node) {
  var _node$props, _node$props2, _node$props3;

  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.src) || ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.source) || ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.href);
};

var _default = getSource;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/image/measureImage.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/image/measureImage.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _getRatio = _interopRequireDefault(__webpack_require__(/*! ./getRatio */ "./node_modules/@react-pdf/layout/lib/image/getRatio.js"));

var _getMargin = _interopRequireDefault(__webpack_require__(/*! ../node/getMargin */ "./node_modules/@react-pdf/layout/lib/node/getMargin.js"));

var _getPadding = _interopRequireDefault(__webpack_require__(/*! ../node/getPadding */ "./node_modules/@react-pdf/layout/lib/node/getPadding.js"));

var _isHeightAuto = _interopRequireDefault(__webpack_require__(/*! ../page/isHeightAuto */ "./node_modules/@react-pdf/layout/lib/page/isHeightAuto.js"));

var SAFETY_HEIGHT = 10;
/**
 * Yoga image measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @param {Number} width
 * @param {Number} widthMode
 * @param {Number} height
 * @param {Number} heightMode
 * @returns {Object} image width and height
 */

var measureImage = function measureImage(page, node, width, widthMode, height, heightMode) {
  var imageRatio = (0, _getRatio.default)(node);
  var imageMargin = (0, _getMargin.default)(node);
  var pagePadding = (0, _getPadding.default)(page);
  var pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT; // Skip measure if image data not present yet

  if (!node.image) return {
    width: 0,
    height: 0
  };

  if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY && heightMode === _yoga.default.MEASURE_MODE_UNDEFINED) {
    var scaledHeight = width / imageRatio;
    return {
      height: Math.min(pageArea, scaledHeight)
    };
  }

  if (heightMode === _yoga.default.MEASURE_MODE_EXACTLY && (widthMode === _yoga.default.MEASURE_MODE_AT_MOST || widthMode === _yoga.default.MEASURE_MODE_UNDEFINED)) {
    return {
      width: Math.min(height * imageRatio, width)
    };
  }

  if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY && heightMode === _yoga.default.MEASURE_MODE_AT_MOST) {
    var _scaledHeight = width / imageRatio;

    return {
      height: Math.min(height, pageArea, _scaledHeight)
    };
  }

  if (widthMode === _yoga.default.MEASURE_MODE_AT_MOST && heightMode === _yoga.default.MEASURE_MODE_AT_MOST) {
    if (imageRatio > 1) {
      return {
        width: width,
        height: Math.min(width / imageRatio, height)
      };
    }

    return {
      height: height,
      width: Math.min(height * imageRatio, width)
    };
  }

  return {
    height: height,
    width: width
  };
};

var _default = R.curryN(6, measureImage);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/image/resolveSource.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/image/resolveSource.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

/**
 * Resolves `src` to `@react-pdf/image` interface.
 *
 * Also it handles factories and async sources.
 *
 * @param {string | Object | Function} src
 * @returns {object} resolved src
 */
var resolveSource = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(src) {
    var source;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof src === 'function')) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return src();

          case 3:
            _context.t0 = _context.sent;
            _context.next = 9;
            break;

          case 6:
            _context.next = 8;
            return src;

          case 8:
            _context.t0 = _context.sent;

          case 9:
            source = _context.t0;
            return _context.abrupt("return", typeof source === 'string' ? {
              uri: source
            } : source);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function resolveSource(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = resolveSource;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _asyncCompose = _interopRequireDefault(__webpack_require__(/*! ./utils/asyncCompose */ "./node_modules/@react-pdf/layout/lib/utils/asyncCompose.js"));

var _resolveSvg = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveSvg */ "./node_modules/@react-pdf/layout/lib/steps/resolveSvg.js"));

var _resolveZIndex = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveZIndex */ "./node_modules/@react-pdf/layout/lib/steps/resolveZIndex.js"));

var _resolveAssets = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveAssets */ "./node_modules/@react-pdf/layout/lib/steps/resolveAssets.js"));

var _resolveStyles = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveStyles */ "./node_modules/@react-pdf/layout/lib/steps/resolveStyles.js"));

var _resolveOrigins = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveOrigins */ "./node_modules/@react-pdf/layout/lib/steps/resolveOrigins.js"));

var _resolvePageSizes = _interopRequireDefault(__webpack_require__(/*! ./steps/resolvePageSizes */ "./node_modules/@react-pdf/layout/lib/steps/resolvePageSizes.js"));

var _resolvePagination = _interopRequireDefault(__webpack_require__(/*! ./steps/resolvePagination */ "./node_modules/@react-pdf/layout/lib/steps/resolvePagination.js"));

var _resolveDimensions = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveDimensions */ "./node_modules/@react-pdf/layout/lib/steps/resolveDimensions.js"));

var _resolveTextLayout = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveTextLayout */ "./node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"));

var _resolveInheritance = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveInheritance */ "./node_modules/@react-pdf/layout/lib/steps/resolveInheritance.js"));

var _resolvePagePaddings = _interopRequireDefault(__webpack_require__(/*! ./steps/resolvePagePaddings */ "./node_modules/@react-pdf/layout/lib/steps/resolvePagePaddings.js"));

var _resolvePercentRadius = _interopRequireDefault(__webpack_require__(/*! ./steps/resolvePercentRadius */ "./node_modules/@react-pdf/layout/lib/steps/resolvePercentRadius.js"));

var _resolvePercentHeight = _interopRequireDefault(__webpack_require__(/*! ./steps/resolvePercentHeight */ "./node_modules/@react-pdf/layout/lib/steps/resolvePercentHeight.js"));

var _resolveLinkSubstitution = _interopRequireDefault(__webpack_require__(/*! ./steps/resolveLinkSubstitution */ "./node_modules/@react-pdf/layout/lib/steps/resolveLinkSubstitution.js"));

// import * as R from 'ramda';
// const startTimer = name => R.tap(() => console.time(name));
// const endTimer = name => R.tap(() => console.timeEnd(name));
var layout = (0, _asyncCompose.default)(_resolveZIndex.default, _resolveOrigins.default, _resolvePagination.default, _resolveTextLayout.default, _resolvePercentRadius.default, _resolveDimensions.default, _resolveSvg.default, _resolveAssets.default, _resolveInheritance.default, _resolvePercentHeight.default, _resolvePagePaddings.default, _resolveStyles.default, _resolveLinkSubstitution.default, _resolvePageSizes.default);
var _default = layout;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/createInstance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/createInstance.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _primitives = __webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js");

var _castArray = _interopRequireDefault(__webpack_require__(/*! ../utils/castArray */ "./node_modules/@react-pdf/layout/lib/utils/castArray.js"));

var _excluded = ["style", "children"];
var isString = R.is(String);
var isNumber = R.is(Number);
var isNotString = R.complement(isString);
/**
 * Transforms a react element instance to internal element format
 *
 * @param {Object} React element
 * @returns {Object} parsed react element
 */

var createInstance = function createInstance(element) {
  if (!element) return null;
  if (isString(element) || isNumber(element)) return {
    type: _primitives.TextInstance,
    value: "" + element
  };
  if (isNotString(element.type)) return createInstance(element.type(element.props));
  var type = element.type,
      _element$props = element.props,
      _element$props$style = _element$props.style,
      style = _element$props$style === void 0 ? {} : _element$props$style,
      _element$props$childr = _element$props.children,
      children = _element$props$childr === void 0 ? [] : _element$props$childr,
      props = (0, _objectWithoutPropertiesLoose2.default)(_element$props, _excluded);
  var nextChildren = R.compose(R.map(createInstance), _castArray.default)(children);
  return {
    type: type,
    style: style,
    props: props,
    box: {},
    children: nextChildren
  };
};

var _default = createInstance;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getBorderWidth.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getBorderWidth.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var getComputedBorder = function getComputedBorder(yogaNode, edge) {
  return yogaNode ? yogaNode.getComputedBorder(edge) : 0;
};
/**
 * Get Yoga computed border width. Zero otherwise
 *
 * @param {Object} node
 * @return {Object} border widths
 */


var getBorderWidth = function getBorderWidth(node) {
  var yogaNode = node._yogaNode;
  return {
    borderTopWidth: getComputedBorder(yogaNode, _yoga.default.EDGE_TOP),
    borderRightWidth: getComputedBorder(yogaNode, _yoga.default.EDGE_RIGHT),
    borderBottomWidth: getComputedBorder(yogaNode, _yoga.default.EDGE_BOTTOM),
    borderLeftWidth: getComputedBorder(yogaNode, _yoga.default.EDGE_LEFT)
  };
};

var _default = getBorderWidth;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getDimension.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getDimension.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var DEFAULT_DIMENSION = {
  width: 0,
  height: 0
};
/**
 * Get Yoga computed dimensions. Zero otherwise
 *
 * @param {Object} node
 * @return {Object} dimensions
 */

var getDimension = function getDimension(node) {
  var yogaNode = node._yogaNode;
  if (!yogaNode) return DEFAULT_DIMENSION;
  return {
    width: yogaNode.getComputedWidth(),
    height: yogaNode.getComputedHeight()
  };
};

var _default = getDimension;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getMargin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getMargin.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var getComputedMargin = function getComputedMargin(node, edge) {
  var yogaNode = node._yogaNode;
  return yogaNode ? yogaNode.getComputedMargin(edge) : null;
};
/**
 * Get Yoga computed magins. Zero otherwise
 *
 * @param {Object} node
 * @return {Object} margins
 */


var getMargin = function getMargin(node) {
  var style = node.style,
      box = node.box;
  var marginTop = getComputedMargin(node, _yoga.default.EDGE_TOP) || (box === null || box === void 0 ? void 0 : box.marginTop) || (style === null || style === void 0 ? void 0 : style.marginTop) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  var marginRight = getComputedMargin(node, _yoga.default.EDGE_RIGHT) || (box === null || box === void 0 ? void 0 : box.marginRight) || (style === null || style === void 0 ? void 0 : style.marginRight) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  var marginBottom = getComputedMargin(node, _yoga.default.EDGE_BOTTOM) || (box === null || box === void 0 ? void 0 : box.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  var marginLeft = getComputedMargin(node, _yoga.default.EDGE_LEFT) || (box === null || box === void 0 ? void 0 : box.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;
  return {
    marginTop: marginTop,
    marginRight: marginRight,
    marginBottom: marginBottom,
    marginLeft: marginLeft
  };
};

var _default = getMargin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getNodesHeight.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getNodesHeight.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get many nodes height
 *
 * @param {Array} nodes
 * @return {number} nodes height
 */
var getNodesHeight = function getNodesHeight(nodes) {
  var max = 0;
  var min = Infinity;
  if (R.isEmpty(nodes)) return 0;

  for (var i = 0; i < nodes.length; i += 1) {
    var node = nodes[i];
    min = Math.min(min, node.box.top);
    max = Math.max(max, node.box.top + node.box.height);
  }

  return max - min;
};

var _default = getNodesHeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getOrigin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getOrigin.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

var getTransformStyle = function getTransformStyle(s) {
  return R.pathOr('50%', ['style', s]);
};
/**
 * Get node origin
 *
 * @param {Object} node
 * @returns {Object} node origin
 */


var getOrigin = function getOrigin(node) {
  if (!node.box) return {};
  var _node$box = node.box,
      left = _node$box.left,
      top = _node$box.top,
      width = _node$box.width,
      height = _node$box.height;
  var transformOriginX = getTransformStyle('transformOriginX')(node);
  var transformOriginY = getTransformStyle('transformOriginY')(node);
  var percentX = (0, _matchPercent.default)(transformOriginX);
  var percentY = (0, _matchPercent.default)(transformOriginY);
  var offsetX = percentX ? width * percentX.percent : transformOriginX;
  var offsetY = percentY ? height * percentY.percent : transformOriginY;
  return {
    left: left + offsetX,
    top: top + offsetY
  };
};

var _default = getOrigin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getPadding.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getPadding.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var getComputedPadding = function getComputedPadding(node, edge) {
  var yogaNode = node._yogaNode;
  return yogaNode ? yogaNode.getComputedPadding(edge) : null;
};
/**
 * Get Yoga computed paddings. Zero otherwise
 *
 * @param {Object} node
 * @return {Object} paddings
 */


var getPadding = function getPadding(node) {
  var style = node.style,
      box = node.box;
  var paddingTop = getComputedPadding(node, _yoga.default.EDGE_TOP) || (box === null || box === void 0 ? void 0 : box.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  var paddingRight = getComputedPadding(node, _yoga.default.EDGE_RIGHT) || (box === null || box === void 0 ? void 0 : box.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  var paddingBottom = getComputedPadding(node, _yoga.default.EDGE_BOTTOM) || (box === null || box === void 0 ? void 0 : box.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  var paddingLeft = getComputedPadding(node, _yoga.default.EDGE_LEFT) || (box === null || box === void 0 ? void 0 : box.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;
  return {
    paddingTop: paddingTop,
    paddingRight: paddingRight,
    paddingBottom: paddingBottom,
    paddingLeft: paddingLeft
  };
};

var _default = getPadding;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getPosition.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getPosition.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get Yoga computed position. Zero otherwise
 *
 * @param {Object} node
 * @return {Object} position
 */
var getPosition = function getPosition(node) {
  var yogaNode = node._yogaNode;
  return {
    top: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedTop()) || 0,
    right: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedRight()) || 0,
    bottom: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedBottom()) || 0,
    left: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedLeft()) || 0
  };
};

var _default = getPosition;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/getWrap.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/getWrap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isType = R.propEq('type');
var isSvg = isType(P.Svg);
var isNote = isType(P.Note);
var isImage = isType(P.Image);
var isCanvas = isType(P.Canvas);
var getWrap = R.ifElse(R.anyPass([isSvg, isNote, isImage, isCanvas]), R.always(false), R.pathOr(true, ['props', 'wrap']));
var _default = getWrap;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/isFixed.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/isFixed.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var isFixed = R.pathEq(['props', 'fixed'], true);
var _default = isFixed;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setAlign.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setAlign.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _upperFirst = _interopRequireDefault(__webpack_require__(/*! ../utils/upperFirst */ "./node_modules/@react-pdf/layout/lib/utils/upperFirst.js"));

/**
 * Set generic align attribute to node's Yoga instance
 *
 * @param {String} specific align property
 * @param {String} align value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setAlign = function setAlign(attr) {
  return function (value) {
    return R.tap(function (node) {
      var yogaNode = node._yogaNode;

      if (yogaNode) {
        var yogaValue = R.cond([[R.equals('flex-start'), R.always(_yoga.default.ALIGN_FLEX_START)], [R.equals('center'), R.always(_yoga.default.ALIGN_CENTER)], [R.equals('flex-end'), R.always(_yoga.default.ALIGN_FLEX_END)], [R.equals('stretch'), R.always(_yoga.default.ALIGN_STRETCH)], [R.equals('baseline'), R.always(_yoga.default.ALIGN_BASELINE)], [R.equals('space-between'), R.always(_yoga.default.ALIGN_SPACE_BETWEEN)], [R.equals('space-around'), R.always(_yoga.default.ALIGN_SPACE_AROUND)], [R.T, R.always(attr === 'items' ? _yoga.default.ALIGN_STRETCH : _yoga.default.ALIGN_AUTO)]])(value);
        yogaNode["setAlign" + (0, _upperFirst.default)(attr)](yogaValue);
      }
    });
  };
};

var _default = setAlign;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setAlignContent.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setAlignContent.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _setAlign = _interopRequireDefault(__webpack_require__(/*! ./setAlign */ "./node_modules/@react-pdf/layout/lib/node/setAlign.js"));

/**
 * Set align content attribute to node's Yoga instance
 *
 * @param {String} align value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setAlignContent = (0, _setAlign.default)('content');
var _default = setAlignContent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setAlignItems.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setAlignItems.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _setAlign = _interopRequireDefault(__webpack_require__(/*! ./setAlign */ "./node_modules/@react-pdf/layout/lib/node/setAlign.js"));

/**
 * Set align items attribute to node's Yoga instance
 *
 * @param {String} align value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setAlignItems = (0, _setAlign.default)('items');
var _default = setAlignItems;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setAlignSelf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setAlignSelf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _setAlign = _interopRequireDefault(__webpack_require__(/*! ./setAlign */ "./node_modules/@react-pdf/layout/lib/node/setAlign.js"));

/**
 * Set align self attribute to node's Yoga instance
 *
 * @param {String} align value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setAlignSelf = (0, _setAlign.default)('self');
var _default = setAlignSelf;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setAspectRatio.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setAspectRatio.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Set aspect ratio attribute to node's Yoga instance
 *
 * @param {Number} ratio
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setAspectRatio = function setAspectRatio(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (!R.isNil(value) && yogaNode) {
      yogaNode.setAspectRatio(value);
    }

    return node;
  };
};

var _default = setAspectRatio;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setBorderWidth.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setBorderWidth.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.setBorderTop = exports.setBorderRight = exports.setBorderLeft = exports.setBorderBottom = exports.setBorder = exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set border top attribute to node's Yoga instance
 *
 * @param {Number} border top width
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setBorderTop = (0, _setYogaValue.default)('border', _yoga.default.EDGE_TOP);
/**
 * Set border right attribute to node's Yoga instance
 *
 * @param {Number} border right width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setBorderTop = setBorderTop;
var setBorderRight = (0, _setYogaValue.default)('border', _yoga.default.EDGE_RIGHT);
/**
 * Set border bottom attribute to node's Yoga instance
 *
 * @param {Number} border bottom width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setBorderRight = setBorderRight;
var setBorderBottom = (0, _setYogaValue.default)('border', _yoga.default.EDGE_BOTTOM);
/**
 * Set border left attribute to node's Yoga instance
 *
 * @param {Number} border left width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setBorderBottom = setBorderBottom;
var setBorderLeft = (0, _setYogaValue.default)('border', _yoga.default.EDGE_LEFT);
/**
 * Set all border widths at once
 *
 * @param {Number} border width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setBorderLeft = setBorderLeft;

var setBorder = function setBorder(width) {
  return function (node) {
    setBorderTop(width)(node);
    setBorderRight(width)(node);
    setBorderBottom(width)(node);
    setBorderLeft(width)(node);
    return node;
  };
};

exports.setBorder = setBorder;
var _default = setBorder;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setDimension.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setDimension.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.setWidth = exports.setMinWidth = exports.setMinHeight = exports.setMaxWidth = exports.setMaxHeight = exports.setHeight = void 0;

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set width to node's Yoga instance
 *
 * @param {Number} width
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setWidth = (0, _setYogaValue.default)('width');
/**
 * Set min width to node's Yoga instance
 *
 * @param {Number} min width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setWidth = setWidth;
var setMinWidth = (0, _setYogaValue.default)('minWidth');
/**
 * Set max width to node's Yoga instance
 *
 * @param {Number} max width
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMinWidth = setMinWidth;
var setMaxWidth = (0, _setYogaValue.default)('maxWidth');
/**
 * Set height to node's Yoga instance
 *
 * @param {Number} height
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMaxWidth = setMaxWidth;
var setHeight = (0, _setYogaValue.default)('height');
/**
 * Set min height to node's Yoga instance
 *
 * @param {Number} min height
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setHeight = setHeight;
var setMinHeight = (0, _setYogaValue.default)('minHeight');
/**
 * Set max height to node's Yoga instance
 *
 * @param {Number} max height
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMinHeight = setMinHeight;
var setMaxHeight = (0, _setYogaValue.default)('maxHeight');
exports.setMaxHeight = setMaxHeight;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setDisplay.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setDisplay.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

/**
 * Set display attribute to node's Yoga instance
 *
 * @param {String} display
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setDisplay = function setDisplay(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (yogaNode) {
      yogaNode.setDisplay(value === 'none' ? _yoga.default.DISPLAY_NONE : _yoga.default.DISPLAY_FLEX);
    }

    return node;
  };
};

var _default = setDisplay;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setFlexBasis.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setFlexBasis.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set flex basis attribute to node's Yoga instance
 *
 * @param {Number} flex basis value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setFlexBasis = (0, _setYogaValue.default)('flexBasis');
var _default = setFlexBasis;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setFlexDirection.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setFlexDirection.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var isRow = R.equals('row');
var isRowReverse = R.equals('row-reverse');
var isColumnReverse = R.equals('column-reverse');
/**
 * Set flex direction attribute to node's Yoga instance
 *
 * @param {String} flex direction value
 * @param {Object} node instance
 * @return {Object} node instance
 */

var setFlexDirection = function setFlexDirection(value) {
  return R.tap(function (node) {
    var yogaNode = node._yogaNode;

    if (yogaNode) {
      var yogaValue = R.cond([[isRow, R.always(_yoga.default.FLEX_DIRECTION_ROW)], [isRowReverse, R.always(_yoga.default.FLEX_DIRECTION_ROW_REVERSE)], [isColumnReverse, R.always(_yoga.default.FLEX_DIRECTION_COLUMN_REVERSE)], [R.T, R.always(_yoga.default.FLEX_DIRECTION_COLUMN)]])(value);
      yogaNode.setFlexDirection(yogaValue);
    }
  });
};

var _default = setFlexDirection;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setFlexGrow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setFlexGrow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set flex grow attribute to node's Yoga instance
 *
 * @param {Number} flex grow value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setFlexGrow = R.compose((0, _setYogaValue.default)('flexGrow'), R.defaultTo(0));
var _default = setFlexGrow;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setFlexShrink.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setFlexShrink.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set flex shrink attribute to node's Yoga instance
 *
 * @param {Number} flex shrink value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setFlexShrink = R.compose((0, _setYogaValue.default)('flexShrink'), R.defaultTo(1));
var _default = setFlexShrink;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setFlexWrap.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setFlexWrap.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

/**
 * Set flex wrap attribute to node's Yoga instance
 *
 * @param {String} flex wrap value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setFlexWrap = function setFlexWrap(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (yogaNode) {
      var yogaValue = R.cond([[R.equals('wrap'), R.always(_yoga.default.WRAP_WRAP)], [R.equals('wrap-reverse'), R.always(_yoga.default.WRAP_WRAP_REVERSE)], [R.T, R.always(_yoga.default.WRAP_NO_WRAP)]])(value);
      yogaNode.setFlexWrap(yogaValue);
    }

    return node;
  };
};

var _default = setFlexWrap;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setJustifyContent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setJustifyContent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

/**
 * Set justify content attribute to node's Yoga instance
 *
 * @param {String} justify content value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setJustifyContent = function setJustifyContent(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (!R.isNil(value) && yogaNode) {
      var yogaValue = R.cond([[R.equals('center'), R.always(_yoga.default.JUSTIFY_CENTER)], [R.equals('flex-end'), R.always(_yoga.default.JUSTIFY_FLEX_END)], [R.equals('space-between'), R.always(_yoga.default.JUSTIFY_SPACE_BETWEEN)], [R.equals('space-around'), R.always(_yoga.default.JUSTIFY_SPACE_AROUND)], [R.equals('space-evenly'), R.always(_yoga.default.JUSTIFY_SPACE_EVENLY)], [R.T, R.always(_yoga.default.JUSTIFY_FLEX_START)]])(value);
      yogaNode.setJustifyContent(yogaValue);
    }

    return node;
  };
};

var _default = setJustifyContent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setMargin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setMargin.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.setMarginTop = exports.setMarginRight = exports.setMarginLeft = exports.setMarginBottom = exports.setMargin = exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set margin top attribute to node's Yoga instance
 *
 * @param {Number} margin top
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setMarginTop = (0, _setYogaValue.default)('margin', _yoga.default.EDGE_TOP);
/**
 * Set margin right attribute to node's Yoga instance
 *
 * @param {Number} margin right
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMarginTop = setMarginTop;
var setMarginRight = (0, _setYogaValue.default)('margin', _yoga.default.EDGE_RIGHT);
/**
 * Set margin bottom attribute to node's Yoga instance
 *
 * @param {Number} margin bottom
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMarginRight = setMarginRight;
var setMarginBottom = (0, _setYogaValue.default)('margin', _yoga.default.EDGE_BOTTOM);
/**
 * Set margin left attribute to node's Yoga instance
 *
 * @param {Number} margin left
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMarginBottom = setMarginBottom;
var setMarginLeft = (0, _setYogaValue.default)('margin', _yoga.default.EDGE_LEFT);
/**
 * Set all margins at once
 *
 * @param {Number} margin
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setMarginLeft = setMarginLeft;

var setMargin = function setMargin(margin) {
  return function (node) {
    setMarginTop(margin)(node);
    setMarginRight(margin)(node);
    setMarginBottom(margin)(node);
    setMarginLeft(margin)(node);
    return node;
  };
};

exports.setMargin = setMargin;
var _default = setMargin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setOverflow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setOverflow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

/**
 * Set overflow attribute to node's Yoga instance
 *
 * @param {String} overflow value
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setOverflow = function setOverflow(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (!R.isNil(value) && yogaNode) {
      var yogaValue = R.cond([[R.equals('hidden'), R.always(_yoga.default.OVERFLOW_HIDDEN)], [R.equals('scroll'), R.always(_yoga.default.OVERFLOW_SCROLL)], [R.T, R.always(_yoga.default.OVERFLOW_VISIBLE)]])(value);
      yogaNode.setOverflow(yogaValue);
    }

    return node;
  };
};

var _default = setOverflow;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setPadding.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setPadding.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.setPaddingTop = exports.setPaddingRight = exports.setPaddingLeft = exports.setPaddingBottom = exports.setPadding = exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set padding top attribute to node's Yoga instance
 *
 * @param {Number} padding top
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setPaddingTop = (0, _setYogaValue.default)('padding', _yoga.default.EDGE_TOP);
/**
 * Set padding right attribute to node's Yoga instance
 *
 * @param {Number} padding right
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPaddingTop = setPaddingTop;
var setPaddingRight = (0, _setYogaValue.default)('padding', _yoga.default.EDGE_RIGHT);
/**
 * Set padding bottom attribute to node's Yoga instance
 *
 * @param {Number} padding bottom
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPaddingRight = setPaddingRight;
var setPaddingBottom = (0, _setYogaValue.default)('padding', _yoga.default.EDGE_BOTTOM);
/**
 * Set padding left attribute to node's Yoga instance
 *
 * @param {Number} padding left
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPaddingBottom = setPaddingBottom;
var setPaddingLeft = (0, _setYogaValue.default)('padding', _yoga.default.EDGE_LEFT);
/**
 * Set all paddings at once
 *
 * @param {Number} margin
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPaddingLeft = setPaddingLeft;

var setPadding = function setPadding(padding) {
  return function (node) {
    setPaddingTop(padding)(node);
    setPaddingRight(padding)(node);
    setPaddingBottom(padding)(node);
    setPaddingLeft(padding)(node);
    return node;
  };
};

exports.setPadding = setPadding;
var _default = setPadding;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setPosition.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setPosition.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.setPositionTop = exports.setPositionRight = exports.setPositionLeft = exports.setPositionBottom = exports.setPosition = exports["default"] = void 0;

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _setYogaValue = _interopRequireDefault(__webpack_require__(/*! ./setYogaValue */ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js"));

/**
 * Set position top attribute to node's Yoga instance
 *
 * @param {Number} position top
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setPositionTop = (0, _setYogaValue.default)('position', _yoga.default.EDGE_TOP);
/**
 * Set position right attribute to node's Yoga instance
 *
 * @param {Number} position right
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPositionTop = setPositionTop;
var setPositionRight = (0, _setYogaValue.default)('position', _yoga.default.EDGE_RIGHT);
/**
 * Set position bottom attribute to node's Yoga instance
 *
 * @param {Number} position bottom
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPositionRight = setPositionRight;
var setPositionBottom = (0, _setYogaValue.default)('position', _yoga.default.EDGE_BOTTOM);
/**
 * Set position left attribute to node's Yoga instance
 *
 * @param {Number} position left
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPositionBottom = setPositionBottom;
var setPositionLeft = (0, _setYogaValue.default)('position', _yoga.default.EDGE_LEFT);
/**
 * Set all positions at once
 *
 * @param {Number} position
 * @param {Object} node instance
 * @return {Object} node instance
 */

exports.setPositionLeft = setPositionLeft;

var setPosition = function setPosition(position) {
  return function (node) {
    setPositionTop(position)(node);
    setPositionRight(position)(node);
    setPositionBottom(position)(node);
    setPositionLeft(position)(node);
    return node;
  };
};

exports.setPosition = setPosition;
var _default = setPosition;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setPositionType.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setPositionType.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

/**
 * Set position type attribute to node's Yoga instance
 *
 * @param {String} position type
 * @param {Object} node instance
 * @return {Object} node instance
 */
var setPositionType = function setPositionType(value) {
  return function (node) {
    var yogaNode = node._yogaNode;

    if (!R.isNil(value) && yogaNode) {
      yogaNode.setPositionType(value === 'absolute' ? _yoga.default.POSITION_TYPE_ABSOLUTE : _yoga.default.POSITION_TYPE_RELATIVE);
    }

    return node;
  };
};

var _default = setPositionType;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/setYogaValue.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/setYogaValue.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _upperFirst = _interopRequireDefault(__webpack_require__(/*! ../utils/upperFirst */ "./node_modules/@react-pdf/layout/lib/utils/upperFirst.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

/* eslint-disable no-unused-expressions */
var isNotNil = R.complement(R.isNil);
/**
 * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases
 *
 * @param {String} property
 * @param {Number} edge
 * @param {any} value
 * @param {Object} node instance
 * @return {Object} node instance
 */

var setYogaValue = function setYogaValue(attr, edge) {
  return function (value) {
    return function (node) {
      var yogaNode = node._yogaNode;

      if (!R.isNil(value) && yogaNode) {
        var hasEdge = isNotNil(edge);
        var fixedMethod = "set" + (0, _upperFirst.default)(attr);
        var autoMethod = fixedMethod + "Auto";
        var percentMethod = fixedMethod + "Percent";
        var percent = (0, _matchPercent.default)(value);

        if (percent && !yogaNode[percentMethod]) {
          throw new Error("You can't pass percentage values to " + attr + " property");
        }

        if (percent) {
          if (hasEdge) {
            var _yogaNode$percentMeth;

            (_yogaNode$percentMeth = yogaNode[percentMethod]) === null || _yogaNode$percentMeth === void 0 ? void 0 : _yogaNode$percentMeth.call(yogaNode, edge, percent.value);
          } else {
            var _yogaNode$percentMeth2;

            (_yogaNode$percentMeth2 = yogaNode[percentMethod]) === null || _yogaNode$percentMeth2 === void 0 ? void 0 : _yogaNode$percentMeth2.call(yogaNode, percent.value);
          }
        } else if (value === 'auto') {
          if (hasEdge) {
            var _yogaNode$autoMethod;

            (_yogaNode$autoMethod = yogaNode[autoMethod]) === null || _yogaNode$autoMethod === void 0 ? void 0 : _yogaNode$autoMethod.call(yogaNode, edge);
          } else if (attr === 'flexBasis') {
            // YogaNode.setFlexBasisAuto is missing (#766)
            yogaNode.setFlexBasis(_yoga.default.UNIT_AUTO);
          } else {
            var _yogaNode$autoMethod2;

            (_yogaNode$autoMethod2 = yogaNode[autoMethod]) === null || _yogaNode$autoMethod2 === void 0 ? void 0 : _yogaNode$autoMethod2.call(yogaNode);
          }
        } else if (hasEdge) {
          var _yogaNode$fixedMethod;

          (_yogaNode$fixedMethod = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod === void 0 ? void 0 : _yogaNode$fixedMethod.call(yogaNode, edge, value);
        } else {
          var _yogaNode$fixedMethod2;

          (_yogaNode$fixedMethod2 = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod2 === void 0 ? void 0 : _yogaNode$fixedMethod2.call(yogaNode, value);
        }
      }

      return node;
    };
  };
};

var _default = setYogaValue;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/shouldBreak.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/shouldBreak.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _getWrap = _interopRequireDefault(__webpack_require__(/*! ./getWrap */ "./node_modules/@react-pdf/layout/lib/node/getWrap.js"));

var _getNodesHeight = _interopRequireDefault(__webpack_require__(/*! ./getNodesHeight */ "./node_modules/@react-pdf/layout/lib/node/getNodesHeight.js"));

/* eslint-disable no-continue */
var getBreak = R.pathOr(false, ['props', 'break']);
var getMinPresenceAhead = R.path(['props', 'minPresenceAhead']);

var defaultPresenceAhead = function defaultPresenceAhead(element) {
  return function (height) {
    return Math.min(element.box.height, height);
  };
};

var getPresenceAhead = function getPresenceAhead(elements, height) {
  var result = 0;

  for (var i = 0; i < elements.length; i += 1) {
    var element = elements[i];
    if (!element.box) continue;
    var isElementInside = height > element.box.top;
    var presenceAhead = element.props.presenceAhead || defaultPresenceAhead(element);

    if (element && isElementInside) {
      result += presenceAhead(height - element.box.top);
    }
  }

  return result;
};

var shouldBreak = function shouldBreak(child, futureElements, height) {
  var minPresenceAhead = getMinPresenceAhead(child);
  var presenceAhead = getPresenceAhead(futureElements, height);
  var futureHeight = (0, _getNodesHeight.default)(futureElements);
  var shouldSplit = height < child.box.top + child.box.height;
  var shouldWrap = (0, _getWrap.default)(child);
  return getBreak(child) || !shouldWrap && shouldSplit || minPresenceAhead < futureHeight && presenceAhead < minPresenceAhead;
};

var _default = shouldBreak;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/node/splitNode.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/node/splitNode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var zero = R.always(0);
var getTop = R.pathOr(0, ['box', 'top']);
var hasFixedHeight = R.hasPath(['style', 'height']);

var subtractHeight = function subtractHeight(value) {
  return R.o(R.subtract(R.__, value), R.path(['box', 'height']));
};

var splitNode = function splitNode(node, height) {
  if (!node) return [null, null];
  var nodeTop = getTop(node); // TODO: We should keep style untouched

  var current = R.evolve({
    style: R.evolve({
      marginBottom: zero,
      paddingBottom: zero,
      borderBottomWidth: zero,
      borderBottomLeftRadius: zero,
      borderBottomRightRadius: zero
    }),
    box: {
      borderBottomWidth: zero
    }
  })(node); // TODO: force height without style mutation

  current.style.height = height - nodeTop;
  var nextHeight = R.ifElse(hasFixedHeight, subtractHeight(height - nodeTop), R.always(null))(node); // TODO: We should keep style untouched

  var next = R.evolve({
    style: R.evolve({
      marginTop: zero,
      paddingTop: zero,
      borderTopWidth: zero,
      borderTopLeftRadius: zero,
      borderTopRightRadius: zero
    }),
    box: {
      top: zero,
      borderTopWidth: zero
    }
  })(node); // TODO: force height without style mutation

  if (nextHeight) {
    next.style.height = nextHeight;
  }

  return [current, next];
};

var _default = splitNode;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/getContentArea.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/getContentArea.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _getPadding2 = _interopRequireDefault(__webpack_require__(/*! ../node/getPadding */ "./node_modules/@react-pdf/layout/lib/node/getPadding.js"));

var getContentArea = function getContentArea(page) {
  var _page$style;

  var height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;

  var _getPadding = (0, _getPadding2.default)(page),
      paddingTop = _getPadding.paddingTop,
      paddingBottom = _getPadding.paddingBottom;

  return height - paddingBottom - paddingTop;
};

var _default = getContentArea;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/getOrientation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/getOrientation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var VALID_ORIENTATIONS = ['portrait', 'landscape'];
/**
 * Get page orientation. Defaults to portrait
 *
 * @param { Object } page object
 * @returns { String } page orientation
 */

var getOrientation = function getOrientation(page) {
  var _page$props;

  var value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';
  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';
};

var _default = getOrientation;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/getSize.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/getSize.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _isLandscape = _interopRequireDefault(__webpack_require__(/*! ./isLandscape */ "./node_modules/@react-pdf/layout/lib/page/isLandscape.js"));

var PAGE_SIZES = {
  '4A0': [4767.87, 6740.79],
  '2A0': [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756.0],
  FOLIO: [612.0, 936.0],
  LEGAL: [612.0, 1008.0],
  LETTER: [612.0, 792.0],
  TABLOID: [792.0, 1224.0],
  ID1: [153, 243]
};
/**
 * Transforms array into size object
 *
 * @param {Array} array
 * @returns {Object} size object with width and height
 */

var toSizeObject = function toSizeObject(v) {
  return {
    width: v[0],
    height: v[1]
  };
};
/**
 * Flip size object
 *
 * @param {Object} size object
 * @returns {Object} flipped size object
 */


var flipSizeObject = function flipSizeObject(v) {
  return {
    width: v.height,
    height: v.width
  };
};
/**
 * Returns size object from a given string
 *
 * @param {String} page size string
 * @returns {Object} size object with width and height
 */


var getStringSize = function getStringSize(v) {
  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);
};
/**
 * Returns size object from a single number
 *
 * @param {Number} page size number
 * @returns {Object} size object with width and height
 */


var getNumberSize = function getNumberSize(n) {
  return toSizeObject([n]);
};
/**
 * Throws invalid size error
 *
 * @param {String} invalid page size input
 */


var throwInvalidError = function throwInvalidError(size) {
  throw new Error("Invalid Page size: " + JSON.stringify(size));
};
/**
 * Return page size in an object { width, height }
 *
 * @param {Object} page instance
 * @returns {Object} size object with width and height
 */


var getSize = function getSize(page) {
  var _page$props;

  var value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.size) || 'A4';
  var size = R.cond([[R.is(String), getStringSize], [R.is(Array), toSizeObject], [R.is(Number), getNumberSize], [R.is(Object), R.identity], [R.T, throwInvalidError]])(value);
  return (0, _isLandscape.default)(page) ? flipSizeObject(size) : size;
};

var _default = getSize;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/getWrapArea.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/getWrapArea.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _getPadding2 = _interopRequireDefault(__webpack_require__(/*! ../node/getPadding */ "./node_modules/@react-pdf/layout/lib/node/getPadding.js"));

var getWrapArea = function getWrapArea(page) {
  var _page$style;

  var _getPadding = (0, _getPadding2.default)(page),
      paddingBottom = _getPadding.paddingBottom;

  var height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;
  return height - paddingBottom;
};

var _default = getWrapArea;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/isHeightAuto.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/isHeightAuto.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Checks if page has auto height
 *
 * @param {Object} page
 * @returns {Boolean} is page height auto
 */
var isHeightAuto = R.pathSatisfies(R.isNil, ['box', 'height']);
var _default = isHeightAuto;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/page/isLandscape.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/page/isLandscape.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _getOrientation = _interopRequireDefault(__webpack_require__(/*! ./getOrientation */ "./node_modules/@react-pdf/layout/lib/page/getOrientation.js"));

/**
 * Return true if page is landscape
 *
 * @param {Object} page instance
 * @returns {Boolean} is page landscape
 */
var isLandscape = function isLandscape(page) {
  return (0, _getOrientation.default)(page) === 'landscape';
};

var _default = isLandscape;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveAssets.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveAssets.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _emoji = _interopRequireDefault(__webpack_require__(/*! ../text/emoji */ "./node_modules/@react-pdf/layout/lib/text/emoji.js"));

var _fetchImage = _interopRequireDefault(__webpack_require__(/*! ../image/fetchImage */ "./node_modules/@react-pdf/layout/lib/image/fetchImage.js"));

var isImage = R.propEq('type', P.Image);
/**
 * Get all asset promises that need to be resolved
 *
 * @param {Object} root node
 * @returns {Array} asset promises
 */

var fetchAssets = function fetchAssets(fontStore, node) {
  var _node$children;

  var promises = [];
  var listToExplore = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.slice(0)) || [];
  var emojiSource = fontStore ? fontStore.getEmojiSource() : null;

  while (listToExplore.length > 0) {
    var _n$style;

    var n = listToExplore.shift();

    if (isImage(n)) {
      promises.push((0, _fetchImage.default)(n));
    }

    if (fontStore && (_n$style = n.style) !== null && _n$style !== void 0 && _n$style.fontFamily) {
      promises.push(fontStore.load(n.style));
    }

    if (typeof n === 'string') {
      promises.push.apply(promises, (0, _emoji.default)(n, emojiSource));
    }

    if (typeof n.value === 'string') {
      promises.push.apply(promises, (0, _emoji.default)(n.value, emojiSource));
    }

    if (n.children) {
      n.children.forEach(function (childNode) {
        listToExplore.push(childNode);
      });
    }
  }

  return promises;
};
/**
 * Fetch image, font and emoji assets in parallel.
 * Layout process will not be resumed until promise resolves.
 *
 * @param {Object} root node
 * @param {Object} fontStore font store
 * @returns {Object} root node
 */


var resolveAssets = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(node, fontStore) {
    var promises;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            promises = fetchAssets(fontStore, node);
            _context.next = 3;
            return Promise.all(promises);

          case 3:
            return _context.abrupt("return", node);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function resolveAssets(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _default = resolveAssets;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveDimensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveDimensions.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports.resolvePageDimensions = exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _getMargin = _interopRequireDefault(__webpack_require__(/*! ../node/getMargin */ "./node_modules/@react-pdf/layout/lib/node/getMargin.js"));

var _getPadding = _interopRequireDefault(__webpack_require__(/*! ../node/getPadding */ "./node_modules/@react-pdf/layout/lib/node/getPadding.js"));

var _getPosition = _interopRequireDefault(__webpack_require__(/*! ../node/getPosition */ "./node_modules/@react-pdf/layout/lib/node/getPosition.js"));

var _getDimension = _interopRequireDefault(__webpack_require__(/*! ../node/getDimension */ "./node_modules/@react-pdf/layout/lib/node/getDimension.js"));

var _getBorderWidth = _interopRequireDefault(__webpack_require__(/*! ../node/getBorderWidth */ "./node_modules/@react-pdf/layout/lib/node/getBorderWidth.js"));

var _setDisplay = _interopRequireDefault(__webpack_require__(/*! ../node/setDisplay */ "./node_modules/@react-pdf/layout/lib/node/setDisplay.js"));

var _setOverflow = _interopRequireDefault(__webpack_require__(/*! ../node/setOverflow */ "./node_modules/@react-pdf/layout/lib/node/setOverflow.js"));

var _setFlexWrap = _interopRequireDefault(__webpack_require__(/*! ../node/setFlexWrap */ "./node_modules/@react-pdf/layout/lib/node/setFlexWrap.js"));

var _setFlexGrow = _interopRequireDefault(__webpack_require__(/*! ../node/setFlexGrow */ "./node_modules/@react-pdf/layout/lib/node/setFlexGrow.js"));

var _setFlexBasis = _interopRequireDefault(__webpack_require__(/*! ../node/setFlexBasis */ "./node_modules/@react-pdf/layout/lib/node/setFlexBasis.js"));

var _setAlignSelf = _interopRequireDefault(__webpack_require__(/*! ../node/setAlignSelf */ "./node_modules/@react-pdf/layout/lib/node/setAlignSelf.js"));

var _setAlignItems = _interopRequireDefault(__webpack_require__(/*! ../node/setAlignItems */ "./node_modules/@react-pdf/layout/lib/node/setAlignItems.js"));

var _setFlexShrink = _interopRequireDefault(__webpack_require__(/*! ../node/setFlexShrink */ "./node_modules/@react-pdf/layout/lib/node/setFlexShrink.js"));

var _setAspectRatio = _interopRequireDefault(__webpack_require__(/*! ../node/setAspectRatio */ "./node_modules/@react-pdf/layout/lib/node/setAspectRatio.js"));

var _setAlignContent = _interopRequireDefault(__webpack_require__(/*! ../node/setAlignContent */ "./node_modules/@react-pdf/layout/lib/node/setAlignContent.js"));

var _setPositionType = _interopRequireDefault(__webpack_require__(/*! ../node/setPositionType */ "./node_modules/@react-pdf/layout/lib/node/setPositionType.js"));

var _setFlexDirection = _interopRequireDefault(__webpack_require__(/*! ../node/setFlexDirection */ "./node_modules/@react-pdf/layout/lib/node/setFlexDirection.js"));

var _setJustifyContent = _interopRequireDefault(__webpack_require__(/*! ../node/setJustifyContent */ "./node_modules/@react-pdf/layout/lib/node/setJustifyContent.js"));

var _setMargin = __webpack_require__(/*! ../node/setMargin */ "./node_modules/@react-pdf/layout/lib/node/setMargin.js");

var _setPadding = __webpack_require__(/*! ../node/setPadding */ "./node_modules/@react-pdf/layout/lib/node/setPadding.js");

var _setBorderWidth = __webpack_require__(/*! ../node/setBorderWidth */ "./node_modules/@react-pdf/layout/lib/node/setBorderWidth.js");

var _setPosition = __webpack_require__(/*! ../node/setPosition */ "./node_modules/@react-pdf/layout/lib/node/setPosition.js");

var _setDimension = __webpack_require__(/*! ../node/setDimension */ "./node_modules/@react-pdf/layout/lib/node/setDimension.js");

var _measureSvg = _interopRequireDefault(__webpack_require__(/*! ../svg/measureSvg */ "./node_modules/@react-pdf/layout/lib/svg/measureSvg.js"));

var _measureText = _interopRequireDefault(__webpack_require__(/*! ../text/measureText */ "./node_modules/@react-pdf/layout/lib/text/measureText.js"));

var _measureImage = _interopRequireDefault(__webpack_require__(/*! ../image/measureImage */ "./node_modules/@react-pdf/layout/lib/image/measureImage.js"));

var _measureCanvas = _interopRequireDefault(__webpack_require__(/*! ../canvas/measureCanvas */ "./node_modules/@react-pdf/layout/lib/canvas/measureCanvas.js"));

var YOGA_NODE = '_yogaNode';

var YOGA_CONFIG = _yoga.default.Config.create();

YOGA_CONFIG.setPointScaleFactor(0);
var isType = R.propEq('type');
var isSvg = isType(P.Svg);
var isText = isType(P.Text);
var isNote = isType(P.Note);
var isPage = isType(P.Page);
var isImage = isType(P.Image);
var isCanvas = isType(P.Canvas);
var isTextInstance = isType(P.TextInstance);

var setNodeHeight = function setNodeHeight(node) {
  var value = isPage(node) ? node.box.height : node.style.height;
  return (0, _setDimension.setHeight)(value);
};
/**
 * Set styles valeus into yoga node before layout calculation
 *
 * @param {Object} node
 * @returns {Object} node
 */


var setYogaValues = R.tap(function (node) {
  R.compose(setNodeHeight(node), (0, _setDimension.setWidth)(node.style.width), (0, _setDimension.setMinWidth)(node.style.minWidth), (0, _setDimension.setMaxWidth)(node.style.maxWidth), (0, _setDimension.setMinHeight)(node.style.minHeight), (0, _setDimension.setMaxHeight)(node.style.maxHeight), (0, _setMargin.setMarginTop)(node.style.marginTop), (0, _setMargin.setMarginRight)(node.style.marginRight), (0, _setMargin.setMarginBottom)(node.style.marginBottom), (0, _setMargin.setMarginLeft)(node.style.marginLeft), (0, _setPadding.setPaddingTop)(node.style.paddingTop), (0, _setPadding.setPaddingRight)(node.style.paddingRight), (0, _setPadding.setPaddingBottom)(node.style.paddingBottom), (0, _setPadding.setPaddingLeft)(node.style.paddingLeft), (0, _setPositionType.default)(node.style.position), (0, _setPosition.setPositionTop)(node.style.top), (0, _setPosition.setPositionRight)(node.style.right), (0, _setPosition.setPositionBottom)(node.style.bottom), (0, _setPosition.setPositionLeft)(node.style.left), (0, _setBorderWidth.setBorderTop)(node.style.borderTopWidth), (0, _setBorderWidth.setBorderRight)(node.style.borderRightWidth), (0, _setBorderWidth.setBorderBottom)(node.style.borderBottomWidth), (0, _setBorderWidth.setBorderLeft)(node.style.borderLeftWidth), (0, _setDisplay.default)(node.style.display), (0, _setFlexDirection.default)(node.style.flexDirection), (0, _setAlignSelf.default)(node.style.alignSelf), (0, _setAlignContent.default)(node.style.alignContent), (0, _setAlignItems.default)(node.style.alignItems), (0, _setJustifyContent.default)(node.style.justifyContent), (0, _setFlexWrap.default)(node.style.flexWrap), (0, _setOverflow.default)(node.style.overflow), (0, _setAspectRatio.default)(node.style.aspectRatio), (0, _setFlexBasis.default)(node.style.flexBasis), (0, _setFlexGrow.default)(node.style.flexGrow), (0, _setFlexShrink.default)(node.style.flexShrink))(node);
});
/**
 * Inserts child into parent' yoga node
 *
 * @param {Object} parent
 * @param {Object} node
 * @param {Object} node
 */

var insertYogaNodes = function insertYogaNodes(parent) {
  return R.tap(function (child) {
    return parent.insertChild(child[YOGA_NODE], parent.getChildCount());
  });
};

var setMeasureFunc = function setMeasureFunc(page, fontStore) {
  return function (node) {
    var yogaNode = node[YOGA_NODE];

    if (isText(node)) {
      yogaNode.setMeasureFunc((0, _measureText.default)(page, node, fontStore));
    }

    if (isImage(node)) {
      yogaNode.setMeasureFunc((0, _measureImage.default)(page, node));
    }

    if (isCanvas(node)) {
      yogaNode.setMeasureFunc((0, _measureCanvas.default)(page, node));
    }

    if (isSvg(node)) {
      yogaNode.setMeasureFunc((0, _measureSvg.default)(page, node));
    }

    return node;
  };
};

var isNotText = R.complement(isText);
var isNotNote = R.complement(isNote);
var isNotSvg = R.complement(isSvg);
var isNotTextInstance = R.complement(isTextInstance);
var isLayoutElement = R.allPass([isNotText, isNotNote, isNotSvg]);
/**
 * Creates and add yoga node to document tree
 * Handles measure function for text and image nodes
 *
 * @param {Object} node
 * @returns {Object} node with appended yoga node
 */

var createYogaNodes = function createYogaNodes(page, fontStore) {
  return function (node) {
    var yogaNode = _yoga.default.Node.createWithConfig(YOGA_CONFIG);

    return R.compose(setMeasureFunc(page, fontStore), R.when(isLayoutElement, R.evolve({
      children: R.map(R.compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore)))
    })), setYogaValues, R.assoc(YOGA_NODE, yogaNode))(node);
  };
};
/**
 * Performs yoga calculation
 *
 * @param {Object} node
 * @returns {Object} node
 */


var calculateLayout = function calculateLayout(page) {
  page[YOGA_NODE].calculateLayout();
  return page;
};
/**
 * Saves Yoga layout result into 'box' attribute of node
 *
 * @param {Object} node
 * @returns {Object} node with box data
 */


var persistDimensions = function persistDimensions(node) {
  return R.evolve({
    children: R.map(R.when(isNotTextInstance, persistDimensions)),
    box: R.always(R.mergeAll([(0, _getPadding.default)(node), (0, _getMargin.default)(node), (0, _getBorderWidth.default)(node), (0, _getPosition.default)(node), (0, _getDimension.default)(node)]))
  })(node);
};
/**
 * Removes yoga node from document tree
 *
 * @param {Object} node
 * @returns {Object} node without yoga node
 */


var destroyYogaNodes = function destroyYogaNodes(node) {
  return R.compose(R.dissoc(YOGA_NODE), R.evolve({
    children: R.map(destroyYogaNodes)
  }))(node);
};
/**
 * Free yoga node from document tree
 *
 * @param {Object} node
 * @returns {Object} node without yoga node
 */


var freeYogaNodes = function freeYogaNodes(node) {
  if (node[YOGA_NODE]) node[YOGA_NODE].freeRecursive();
  return node;
};
/**
 * Calculates page object layout using Yoga.
 * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'
 * Destroy yoga values at the end.
 *
 * @param {Object} page object
 * @returns {Object} page object with correct 'box' layout attributes
 */


var resolvePageDimensions = function resolvePageDimensions(page, fontStore) {
  return R.ifElse(R.isNil, R.always(null), R.compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore)))(page);
};
/**
 * Calculates root object layout using Yoga.
 *
 * @param {Object} root object
 * @returns {Object} root object with correct 'box' layout attributes
 */


exports.resolvePageDimensions = resolvePageDimensions;

var resolveDimensions = function resolveDimensions(node, fontStore) {
  var mapChild = function mapChild(child) {
    return resolvePageDimensions(child, fontStore);
  };

  return R.evolve({
    children: R.map(mapChild)
  })(node);
};

var _default = resolveDimensions;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveInheritance.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveInheritance.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var INHERITED_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];
var isSvg = R.propEq('type', P.Svg);
/**
 * Get styles sub group of inherited properties
 *
 * @param {Object} style object
 * @returns {Object} style object only with inherited properties
 */

var getInheritStyles = R.compose(R.pick(INHERITED_PROPERTIES), R.propOr({}, 'style')); // Merge style values

var mergeValues = function mergeValues(styleName, value, inheritedValue) {
  switch (styleName) {
    case 'textDecoration':
      {
        // merge not none and not false textDecoration values to one rule
        return [inheritedValue, value].filter(function (v) {
          return v && v !== 'none';
        }).join(' ');
      }

    default:
      return value;
  }
}; // Merge inherited and node styles


var merge = function merge(inheritedStyles, style) {
  var mergedStyles = (0, _extends2.default)({}, inheritedStyles);
  Object.entries(style).forEach(function (_ref) {
    var styleName = _ref[0],
        value = _ref[1];
    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);
  });
  return mergedStyles;
};
/**
 * Merges styles with node
 *
 * @param {Object} style object
 * @param {Object} node
 * @returns {Object} node with styles merged
 */


var mergeStyles = function mergeStyles(inheritedStyles) {
  return R.evolve({
    style: function style(_style) {
      return merge(inheritedStyles, _style);
    }
  });
};
/**
 * Inherit style values from the root to the leafs
 *
 * @param {Object} document root
 * @returns {Object} document root with inheritance
 *
 */


var resolveInheritance = function resolveInheritance(node) {
  if (isSvg(node)) return node;
  var inheritStyles = getInheritStyles(node);
  var resolveChild = R.compose(resolveInheritance, mergeStyles(inheritStyles));
  return R.evolve({
    children: R.map(resolveChild)
  })(node);
};

var _default = resolveInheritance;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveLinkSubstitution.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveLinkSubstitution.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isType = R.propEq('type');
var isLink = isType(P.Link);
var isText = isType(P.Text);
var isTextInstance = isType(P.TextInstance);
/**
 * Checks if node has render prop
 *
 * @param {Object} node
 * @returns {Boolean} has render prop?
 */

var hasRenderProp = R.hasPath(['props', 'render']);
/**
 * Checks if node is text type (Text or TextInstance)
 *
 * @param {Object} node
 * @returns {Boolean} are all children text instances?
 */

var isTextType = R.either(isText, isTextInstance);
/**
 * Checks if is tet link that needs to be wrapped in Text
 *
 * @param {Object} node
 * @returns {Boolean} are all children text instances?
 */

var isTextLink = function isTextLink(node) {
  var children = node.children || []; // Text string inside a Link

  if (children.every(isTextInstance)) return true; // Text node inside a Link

  if (children.every(isText)) return false;
  return children.every(isTextType);
};
/**
 * Wraps node children inside Text node
 *
 * @param {Object} node
 * @returns {Boolean} node with intermediate Text child
 */


var wrapText = function wrapText(node) {
  var textElement = {
    type: P.Text,
    props: {},
    style: {},
    box: {},
    children: node.children
  };
  return R.assoc('children', [textElement], node);
};

var transformLink = function transformLink(node) {
  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will
  // ultimately render the inline Link via the textkit PDF renderer.

  if (hasRenderProp(node)) return R.assoc('type', P.Text, node); // If is a text link (either contains Text or TextInstalce), wrap it
  // inside a Text element so styles are applied correctly

  if (isTextLink(node)) return wrapText(node);
  return node;
};
/**
 * Transforms Link layout to correctly render text and dynamic rendered links
 *
 * @param {Object} node
 * @returns {Object} node with link substitution
 */


var resolveLinkSubstitution = function resolveLinkSubstitution(node) {
  var resolveChild = R.compose(transformLink, resolveLinkSubstitution);
  return R.evolve({
    children: R.map(resolveChild)
  })(node);
};

var _default = resolveLinkSubstitution;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveOrigins.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveOrigins.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _getOrigin = _interopRequireDefault(__webpack_require__(/*! ../node/getOrigin */ "./node_modules/@react-pdf/layout/lib/node/getOrigin.js"));

/**
 * Resolve node origin
 *
 * @param {Object} node
 * @returns {Object} node with origin attribute
 */
var resolveNodeOrigin = function resolveNodeOrigin(node) {
  return R.compose(R.evolve({
    children: R.map(resolveNodeOrigin)
  }), R.converge(R.assoc('origin'), [_getOrigin.default, R.identity]))(node);
};
/**
 * Resolve document origins
 *
 * @param {Object} document root
 * @returns {Object} documrnt root
 */


var resolveOrigin = R.evolve({
  children: R.map(resolveNodeOrigin)
});
var _default = resolveOrigin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolvePagePaddings.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolvePagePaddings.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

/*
 * Translates page percentage horizontal paddings in fixed ones
 *
 * @param {Object} page container
 * @param {String} padding value
 * @returns {Object} translated padding value
 */
var resolvePageHorizontalPadding = function resolvePageHorizontalPadding(container) {
  return function (value) {
    var match = (0, _matchPercent.default)(value);
    return match ? match.percent * container.width : value;
  };
};
/**
 * Translates page percentage vertical paddings in fixed ones
 *
 * @param {Object} page container
 * @param {String} padding value
 * @returns {Object} translated padding value
 */


var resolvePageVerticalPadding = function resolvePageVerticalPadding(container) {
  return function (value) {
    var match = (0, _matchPercent.default)(value);
    return match ? match.percent * container.height : value;
  };
};
/**
 * Translates page percentage paddings in fixed ones
 *
 * @param {Object} page
 * @returns {Object} page with fixed paddings
 */


var resolvePagePaddings = function resolvePagePaddings(page) {
  var container = page.style;
  return R.evolve({
    style: R.evolve({
      paddingTop: resolvePageVerticalPadding(container),
      paddingLeft: resolvePageHorizontalPadding(container),
      paddingRight: resolvePageHorizontalPadding(container),
      paddingBottom: resolvePageVerticalPadding(container)
    })
  })(page);
};
/**
 * Translates all pages percentage paddings in fixed ones
 * This has to be computed from pages calculated size and not by Yoga
 * because at this point we didn't performed pagination yet.
 *
 * @param {Object} document root
 * @returns {Object} document root with translated page paddings
 */


var _default = R.evolve({
  children: R.map(resolvePagePaddings)
});

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolvePageSizes.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolvePageSizes.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.resolvePageSize = exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _flatten = _interopRequireDefault(__webpack_require__(/*! @react-pdf/stylesheet/lib/flatten */ "./node_modules/@react-pdf/stylesheet/lib/flatten/index.js"));

var _getSize = _interopRequireDefault(__webpack_require__(/*! ../page/getSize */ "./node_modules/@react-pdf/layout/lib/page/getSize.js"));

/**
 * Resolves page size
 *
 * @param {Object} page
 * @returns {Object} page with resolved size in style attribute
 */
var resolvePageSize = function resolvePageSize(page) {
  var size = (0, _getSize.default)(page);
  var style = (0, _flatten.default)(page.style || {});
  return (0, _extends2.default)({}, page, {
    style: (0, _extends2.default)({}, style, size)
  });
};
/**
 * Resolves page sizes
 *
 * @param {Object} document root
 * @returns {Object} document root with resolved page sizes
 */


exports.resolvePageSize = resolvePageSize;
var resolvePageSizes = R.evolve({
  children: R.map(resolvePageSize)
});
var _default = resolvePageSizes;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolvePagination.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolvePagination.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _isFixed = _interopRequireDefault(__webpack_require__(/*! ../node/isFixed */ "./node_modules/@react-pdf/layout/lib/node/isFixed.js"));

var _splitText = _interopRequireDefault(__webpack_require__(/*! ../text/splitText */ "./node_modules/@react-pdf/layout/lib/text/splitText.js"));

var _splitNode2 = _interopRequireDefault(__webpack_require__(/*! ../node/splitNode */ "./node_modules/@react-pdf/layout/lib/node/splitNode.js"));

var _getWrap = _interopRequireDefault(__webpack_require__(/*! ../node/getWrap */ "./node_modules/@react-pdf/layout/lib/node/getWrap.js"));

var _getWrapArea = _interopRequireDefault(__webpack_require__(/*! ../page/getWrapArea */ "./node_modules/@react-pdf/layout/lib/page/getWrapArea.js"));

var _getContentArea = _interopRequireDefault(__webpack_require__(/*! ../page/getContentArea */ "./node_modules/@react-pdf/layout/lib/page/getContentArea.js"));

var _createInstance = _interopRequireDefault(__webpack_require__(/*! ../node/createInstance */ "./node_modules/@react-pdf/layout/lib/node/createInstance.js"));

var _shouldBreak = _interopRequireDefault(__webpack_require__(/*! ../node/shouldBreak */ "./node_modules/@react-pdf/layout/lib/node/shouldBreak.js"));

var _resolveTextLayout = _interopRequireDefault(__webpack_require__(/*! ./resolveTextLayout */ "./node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"));

var _resolveInheritance = _interopRequireDefault(__webpack_require__(/*! ./resolveInheritance */ "./node_modules/@react-pdf/layout/lib/steps/resolveInheritance.js"));

var _resolveDimensions = __webpack_require__(/*! ./resolveDimensions */ "./node_modules/@react-pdf/layout/lib/steps/resolveDimensions.js");

/* eslint-disable no-continue */

/* eslint-disable prefer-destructuring */
var isText = R.propEq('type', P.Text); // Prevent splitting elements by low decimal numbers

var SAFTY_THRESHOLD = 0.001;
var assingChildren = R.assoc('children');
var getTop = R.pathOr(0, ['box', 'top']);
var getHeight = R.path(['box', 'height']);
var getChildren = R.propOr([], 'children');
var isElementOutside = R.useWith(R.lte, [R.identity, getTop]);
var allFixed = R.all(_isFixed.default);
var isDynamic = R.hasPath(['props', 'render']);

var compose = function compose() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (value) {
    var result = value;
    var reversedFns = R.reverse(fns);

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    for (var i = 0; i < reversedFns.length; i += 1) {
      var fn = reversedFns[i];
      result = fn.apply(void 0, [result].concat(args));
    }

    return result;
  };
};

var relayoutPage = compose(_resolveTextLayout.default, _resolveInheritance.default, _resolveDimensions.resolvePageDimensions);

var warnUnavailableSpace = function warnUnavailableSpace(node) {
  console.warn("Node of type " + node.type + " can't wrap between pages and it's bigger than available page height");
};

var splitNodes = function splitNodes(height, contentArea, nodes) {
  var currentChildren = [];
  var nextChildren = [];

  for (var i = 0; i < nodes.length; i += 1) {
    var child = nodes[i];
    var futureNodes = nodes.slice(i + 1);
    var futureFixedNodes = R.filter(_isFixed.default, futureNodes);
    var nodeTop = getTop(child);
    var nodeHeight = getHeight(child);
    var isOutside = isElementOutside(height, child);
    var shouldBreak = (0, _shouldBreak.default)(child, futureNodes, height);
    var shouldSplit = height + SAFTY_THRESHOLD < nodeTop + nodeHeight;
    var canWrap = (0, _getWrap.default)(child);
    var fitsInsidePage = nodeHeight <= contentArea;

    if ((0, _isFixed.default)(child)) {
      nextChildren.push(child);
      currentChildren.push(child);
      continue;
    }

    if (isOutside) {
      var next = R.evolve({
        box: {
          top: R.subtract(R.__, height)
        }
      })(child);
      nextChildren.push(next);
      continue;
    }

    if (!fitsInsidePage && !canWrap) {
      currentChildren.push(child);
      nextChildren.push.apply(nextChildren, futureNodes);
      warnUnavailableSpace(child);
      break;
    }

    if (shouldBreak) {
      var _next = R.evolve({
        box: {
          top: R.subtract(R.__, height)
        },
        props: R.evolve({
          wrap: R.always(true),
          break: R.always(false)
        })
      })(child);

      currentChildren.push.apply(currentChildren, futureFixedNodes);
      nextChildren.push.apply(nextChildren, [_next].concat(futureNodes));
      break;
    }

    if (shouldSplit) {
      var _split = split(child, height, contentArea),
          currentChild = _split[0],
          nextChild = _split[1];

      if (currentChild) currentChildren.push(currentChild);
      if (nextChild) nextChildren.push(nextChild);
      continue;
    }

    currentChildren.push(child);
  }

  return [currentChildren, nextChildren];
};

var splitChildren = function splitChildren(height, contentArea, node) {
  var children = getChildren(node);
  var availableHeight = height - getTop(node);
  return splitNodes(availableHeight, contentArea, children);
};

var splitView = function splitView(node, height, contentArea) {
  var _splitNode = (0, _splitNode2.default)(node, height),
      currentNode = _splitNode[0],
      nextNode = _splitNode[1];

  var _splitChildren = splitChildren(height, contentArea, node),
      currentChilds = _splitChildren[0],
      nextChildren = _splitChildren[1];

  return [assingChildren(currentChilds)(currentNode), assingChildren(nextChildren)(nextNode)];
};

var split = R.ifElse(isText, _splitText.default, splitView);

var shouldResolveDynamicNodes = function shouldResolveDynamicNodes(node) {
  var children = node.children || [];
  return isDynamic(node) || children.some(shouldResolveDynamicNodes);
};

var resolveDynamicNodes = function resolveDynamicNodes(props, node) {
  var isNodeDynamic = isDynamic(node); // Call render prop on dynamic nodes and append result to children

  var resolveChildren = function resolveChildren(children) {
    if (children === void 0) {
      children = [];
    }

    if (isNodeDynamic) {
      var res = node.props.render(props);
      return [(0, _createInstance.default)(res)].filter(Boolean);
    }

    return children.map(function (c) {
      return resolveDynamicNodes(props, c);
    });
  }; // We reset dynamic text box so it can be computed again later on


  var resolveBox = function resolveBox(box) {
    return isNodeDynamic && isText(node) ? (0, _extends2.default)({}, box, {
      height: 0
    }) : box;
  };

  return R.evolve({
    box: resolveBox,
    children: resolveChildren,
    lines: function lines(prev) {
      return isNodeDynamic ? null : prev;
    }
  }, node);
};

var resolveDynamicPage = function resolveDynamicPage(props, page, fontStore) {
  if (shouldResolveDynamicNodes(page)) {
    var resolvedPage = resolveDynamicNodes(props, page);
    return relayoutPage(resolvedPage, fontStore);
  }

  return page;
};

var splitPage = function splitPage(page, pageNumber, fontStore) {
  var wrapArea = (0, _getWrapArea.default)(page);
  var contentArea = (0, _getContentArea.default)(page);
  var height = R.path(['style', 'height'], page);
  var dynamicPage = resolveDynamicPage({
    pageNumber: pageNumber
  }, page, fontStore);

  var _splitNodes = splitNodes(wrapArea, contentArea, dynamicPage.children),
      currentChilds = _splitNodes[0],
      nextChilds = _splitNodes[1];

  var relayout = function relayout(node) {
    return relayoutPage(node, fontStore);
  };

  var currentPage = R.compose(relayout, assingChildren(currentChilds), R.assocPath(['box', 'height'], height))(page);
  if (R.isEmpty(nextChilds) || allFixed(nextChilds)) return [currentPage, null];
  var nextPage = R.compose(relayout, assingChildren(nextChilds), R.dissocPath(['box', 'height']))(page);
  return [currentPage, nextPage];
};

var resolvePageIndices = function resolvePageIndices(fontStore) {
  return function (page, pageNumber, pages) {
    var totalPages = pages.length;
    var props = {
      totalPages: totalPages,
      pageNumber: pageNumber + 1,
      subPageNumber: page.subPageNumber + 1,
      subPageTotalPages: page.subPageTotalPages
    };
    return resolveDynamicPage(props, page, fontStore);
  };
};

var assocSubPageData = function assocSubPageData(subpages) {
  return subpages.map(function (page, i) {
    return (0, _extends2.default)({}, page, {
      subPageNumber: i,
      subPageTotalPages: subpages.length
    });
  });
};

var dissocSubPageData = function dissocSubPageData(page) {
  return R.compose(R.dissoc('subPageNumber'), R.dissoc('subPageTotalPages'))(page);
};

var paginate = function paginate(page, pageNumber, fontStore) {
  if (!page) return [];
  var splittedPage = splitPage(page, pageNumber, fontStore);
  var pages = [splittedPage[0]];
  var nextPage = splittedPage[1];

  while (nextPage !== null) {
    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore);
    pages.push(splittedPage[0]);
    nextPage = splittedPage[1];
  }

  return pages;
};
/**
 * Performs pagination. This is the step responsible of breaking the whole document
 * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.
 *
 * @param {Object} node
 * @param {Object} fontStore font store
 * @returns {Object} layout node
 */


var resolvePagination = function resolvePagination(doc, fontStore) {
  var pages = [];
  var pageNumber = 1;

  for (var i = 0; i < doc.children.length; i += 1) {
    var page = doc.children[i];
    var subpages = paginate(page, pageNumber, fontStore);
    subpages = assocSubPageData(subpages);
    pageNumber += subpages.length;
    pages = pages.concat(subpages);
  }

  pages = pages.map(R.compose(dissocSubPageData, resolvePageIndices(fontStore)));
  return assingChildren(pages, doc);
};

var _default = resolvePagination;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolvePercentHeight.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolvePercentHeight.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

/**
 * Transform percent height into fixed
 *
 * @param {String | number} height
 * @return {number} height
 */
var transformHeight = function transformHeight(pageArea) {
  return function (height) {
    var match = (0, _matchPercent.default)(height);
    return match ? match.percent * pageArea : height;
  };
};
/**
 * Get page area (height minus paddings)
 *
 * @param {Object} page
 * @return {number} page area
 */


var getPageArea = function getPageArea(page) {
  var pageHeight = R.path(['style', 'height'], page);
  var pagePaddingTop = R.pathOr(0, ['style', 'paddingTop'], page);
  var pagePaddingBottom = R.pathOr(0, ['style', 'paddingBottom'], page);
  return pageHeight - pagePaddingTop - pagePaddingBottom;
};
/**
 * Checks if page has height
 *
 * @param {Object} page
 * @return {boolean} page has height
 */


var hasHeight = R.hasPath(['style', 'height']);
/**
 * Transform node percent height to fixed
 *
 * @param {Object} page
 * @param {Object} node
 * @return {Object} transformed node
 */

var resolveNodePercentHeight = function resolveNodePercentHeight(page) {
  return function (node) {
    if (hasHeight(page)) {
      var pageArea = getPageArea(page);
      return R.evolve({
        style: {
          height: transformHeight(pageArea)
        }
      })(node);
    }

    return node;
  };
};
/**
 * Transform page immediate children with percent height to fixed
 *
 * @param {Object} page
 * @return {Object} transformed page
 */


var resolvePagePercentHeight = function resolvePagePercentHeight(page) {
  return R.evolve({
    children: R.map(resolveNodePercentHeight(page))
  })(page);
};
/**
 * Transform all page immediate children with percent height to fixed.
 * This is needed for computing correct dimensions on pre-pagination layout.
 *
 * @param {Object} document root
 * @return {Object} transformed document root
 */


var resolvePercentHeight = R.evolve({
  children: R.map(resolvePagePercentHeight)
});
var _default = resolvePercentHeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolvePercentRadius.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolvePercentRadius.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

/**
 *
 * @param {Object} container width and height
 * @param {String | Number} value border radius value
 * @returns {Number} fixed border radius value
 */
var resolveRadius = function resolveRadius(container) {
  return function (value) {
    var match = (0, _matchPercent.default)(value);
    return match ? match.percent * Math.min(container.width, container.height) : value;
  };
};
/**
 * Transforms percent border radius into fixed values
 *
 * @param {Object} node
 * @returns {Object} node
 */


var resolvePercentRadius = function resolvePercentRadius(node) {
  return R.evolve({
    children: R.map(resolvePercentRadius),
    style: R.evolve({
      borderTopLeftRadius: resolveRadius(node.box),
      borderTopRightRadius: resolveRadius(node.box),
      borderBottomRightRadius: resolveRadius(node.box),
      borderBottomLeftRadius: resolveRadius(node.box)
    })
  })(node);
};

var _default = resolvePercentRadius;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveStyles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveStyles.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _stylesheet = _interopRequireDefault(__webpack_require__(/*! @react-pdf/stylesheet */ "./node_modules/@react-pdf/stylesheet/lib/index.js"));

var isLink = R.propEq('type', P.Link);
var LINK_STYLES = {
  color: 'blue',
  textDecoration: 'underline'
};
/**
 * Resolves node styles
 *
 * @param {Object} container
 * @param {Object} document node
 * @returns {Object} node (and subnodes) with resolved styles
 */

var resolveNodeStyles = function resolveNodeStyles(container) {
  return function (node) {
    return R.o(R.when(isLink, R.evolve({
      style: R.merge(LINK_STYLES)
    })), R.evolve({
      style: (0, _stylesheet.default)(container),
      children: R.map(resolveNodeStyles(container))
    }))(node);
  };
};
/**
 * Resolves page styles
 *
 * @param {Object} document page
 * @returns {Object} document page with resolved styles
 */


var resolvePageStyles = function resolvePageStyles(page) {
  var box = R.prop('box', page);
  var style = R.prop('style', page);
  var container = R.isEmpty(box) ? style : box;
  return R.evolve({
    style: (0, _stylesheet.default)(container),
    children: R.map(resolveNodeStyles(container))
  })(page);
};
/**
 * Resolves document styles
 *
 * @param {Object} document root
 * @returns {Object} document root with resolved styles
 */


var _default = R.evolve({
  children: R.map(resolvePageStyles)
});

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveSvg.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveSvg.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _stylesheet = __webpack_require__(/*! @react-pdf/stylesheet */ "./node_modules/@react-pdf/stylesheet/lib/index.js");

var _layoutText = _interopRequireDefault(__webpack_require__(/*! ../svg/layoutText */ "./node_modules/@react-pdf/layout/lib/svg/layoutText.js"));

var _replaceDefs = _interopRequireDefault(__webpack_require__(/*! ../svg/replaceDefs */ "./node_modules/@react-pdf/layout/lib/svg/replaceDefs.js"));

var _getContainer = _interopRequireDefault(__webpack_require__(/*! ../svg/getContainer */ "./node_modules/@react-pdf/layout/lib/svg/getContainer.js"));

var _parseViewbox = _interopRequireDefault(__webpack_require__(/*! ../svg/parseViewbox */ "./node_modules/@react-pdf/layout/lib/svg/parseViewbox.js"));

var _inheritProps = _interopRequireDefault(__webpack_require__(/*! ../svg/inheritProps */ "./node_modules/@react-pdf/layout/lib/svg/inheritProps.js"));

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ../utils/matchPercent */ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js"));

var _parseAspectRatio = _interopRequireDefault(__webpack_require__(/*! ../svg/parseAspectRatio */ "./node_modules/@react-pdf/layout/lib/svg/parseAspectRatio.js"));

var STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];
var VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];
var HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];
var isType = R.propEq('type');
var isSvg = isType(P.Svg);
var isText = isType(P.Text);
var isTextInstance = isType(P.TextInstance);

var transformPercent = function transformPercent(container) {
  return R.mapObjIndexed(function (value, key) {
    var match = (0, _matchPercent.default)(value);

    if (match && VERTICAL_PROPS.includes(key)) {
      return match.percent * container.height;
    }

    if (match && HORIZONTAL_PROPS.includes(key)) {
      return match.percent * container.width;
    }

    return value;
  });
};

var parsePercent = function parsePercent(value) {
  var match = (0, _matchPercent.default)(value);
  return match ? match.percent : parseFloat(value);
};

var parseProps = function parseProps(container) {
  return R.compose(R.evolve({
    props: R.o(R.evolve({
      x: parseFloat,
      x1: parseFloat,
      x2: parseFloat,
      y: parseFloat,
      y1: parseFloat,
      y2: parseFloat,
      r: parseFloat,
      rx: parseFloat,
      ry: parseFloat,
      cx: parseFloat,
      cy: parseFloat,
      width: parseFloat,
      height: parseFloat,
      offset: parsePercent,
      fill: _stylesheet.transformColor,
      opacity: parsePercent,
      stroke: _stylesheet.transformColor,
      stopOpacity: parsePercent,
      stopColor: _stylesheet.transformColor,
      transform: _stylesheet.processTransform
    }), transformPercent(container))
  }));
};

var mergeStyles = function mergeStyles(node) {
  var style = node.style || {};
  return R.evolve({
    props: R.merge(style)
  }, node);
};

var removeNoneValues = R.evolve({
  props: R.map(R.when(R.equals('none'), R.always(null)))
});

var pickStyleProps = function pickStyleProps(node) {
  var props = node.props || {};
  var styleProps = R.pick(STYLE_PROPS, props);
  return R.evolve({
    style: R.merge(styleProps)
  }, node);
};

var parseSvgProps = R.evolve({
  props: R.evolve({
    width: parseFloat,
    height: parseFloat,
    viewBox: _parseViewbox.default,
    preserveAspectRatio: _parseAspectRatio.default
  })
});

var wrapBetweenTspan = function wrapBetweenTspan(node) {
  return {
    type: P.Tspan,
    props: {},
    children: [node]
  };
};

var addMissingTspan = R.when(isText, R.evolve({
  children: R.map(R.when(isTextInstance, wrapBetweenTspan))
}));

var resolveSvgNode = function resolveSvgNode(container) {
  return R.compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles);
};

var resolveChildren = function resolveChildren(container) {
  return function (node) {
    return R.evolve({
      children: R.map(R.compose(resolveChildren(container), resolveSvgNode(container)))
    })(node);
  };
};

var parseText = function parseText(fontStore) {
  return function (node) {
    return R.ifElse(isText, (0, _layoutText.default)(fontStore), R.evolve({
      children: R.map(parseText(fontStore))
    }))(node);
  };
};

var resolveSvgRoot = function resolveSvgRoot(fontStore) {
  return function (node) {
    var container = (0, _getContainer.default)(node);
    return R.compose(_replaceDefs.default, parseText(fontStore), parseSvgProps, pickStyleProps, _inheritProps.default, resolveChildren(container))(node);
  };
};
/**
 * Pre-process SVG nodes so they can be rendered in the next steps
 *
 * @param {Object} root node
 * @param {Object} fontStore font store
 * @returns {Object} root node
 */


var resolveSvg = function resolveSvg(node, fontStore) {
  var mapChild = function mapChild(child) {
    return resolveSvg(child, fontStore);
  };

  return R.compose(R.evolve({
    children: R.map(mapChild)
  }), R.when(isSvg, resolveSvgRoot(fontStore)))(node);
};

var _default = resolveSvg;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _layoutText = _interopRequireDefault(__webpack_require__(/*! ../text/layoutText */ "./node_modules/@react-pdf/layout/lib/text/layoutText.js"));

/* eslint-disable no-param-reassign */
var isType = R.propEq('type');
var isSvg = isType(P.Svg);
var isText = isType(P.Text);
var isNotSvg = R.complement(isSvg);
var isNotText = R.complement(isText);

var shouldIterate = function shouldIterate(node) {
  return isNotSvg(node) && isNotText(node);
};

var shouldLayoutText = function shouldLayoutText(node) {
  return isText(node) && !node.lines;
};
/**
 * Performs text layout on text node if wasn't calculated before.
 * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),
 * but we need to layout those nodes with fixed width and height.
 *
 * @param {Object} node
 * @returns {Object} layout node
 */


var resolveTextLayout = function resolveTextLayout(node, fontStore) {
  if (shouldLayoutText(node)) {
    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);
    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);
    node.lines = (0, _layoutText.default)(node, width, height, fontStore);
  }

  if (shouldIterate(node)) {
    var mapChild = function mapChild(child) {
      return resolveTextLayout(child, fontStore);
    };

    return R.evolve({
      children: R.map(mapChild)
    })(node);
  }

  return node;
};

var _default = resolveTextLayout;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/steps/resolveZIndex.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/steps/resolveZIndex.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _primitives = __webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js");

var getZIndex = R.path(['style', 'zIndex']);
var isType = R.propEq('type');
var shouldNotSort = R.anyPass([isType(_primitives.Document), isType(_primitives.Svg)]);

var sortZIndex = function sortZIndex(a, b) {
  var za = getZIndex(a);
  var zb = getZIndex(b);
  if (!za && !zb) return 0;
  if (!za) return 1;
  if (!zb) return -1;
  return zb - za;
};
/**
 * Sort children by zIndex value
 *
 * @param {Object} node
 * @returns {Object} node
 */


var resolveZIndex = function resolveZIndex(node) {
  return R.compose(R.evolve({
    children: R.map(resolveZIndex)
  }), R.unless(shouldNotSort, R.evolve({
    children: R.sort(sortZIndex)
  })))(node);
};

var _default = resolveZIndex;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/getContainer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/getContainer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _parseViewbox = _interopRequireDefault(__webpack_require__(/*! ./parseViewbox */ "./node_modules/@react-pdf/layout/lib/svg/parseViewbox.js"));

var getContainer = function getContainer(node) {
  var viewbox = (0, _parseViewbox.default)(node.props.viewBox);

  if (viewbox) {
    return {
      width: viewbox.maxX,
      height: viewbox.maxY
    };
  }

  if (node.props.width && node.props.height) {
    return {
      width: parseFloat(node.props.width),
      height: parseFloat(node.props.height)
    };
  }

  return {
    width: 0,
    height: 0
  };
};

var _default = getContainer;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/getDefs.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/getDefs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isDefs = R.propEq('type', P.Defs);
var getChildren = R.propOr([], 'children');
var getId = R.path(['props', 'id']);
var getDefs = R.compose(R.map(R.prop(0)), R.groupBy(getId), getChildren, R.defaultTo({}), R.find(isDefs), getChildren);
var _default = getDefs;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/inheritProps.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/inheritProps.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];

var getInheritProps = function getInheritProps(node) {
  var props = node.props || {};
  return R.pick(SVG_INHERITED_PROPS, props);
};

var inheritProps = function inheritProps(node) {
  var props = getInheritProps(node);
  return R.evolve({
    children: R.map(R.compose(inheritProps, R.evolve({
      props: R.merge(props)
    })))
  })(node);
};

var _default = inheritProps;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/layoutText.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/layoutText.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _layout = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/layout */ "./node_modules/@react-pdf/textkit/lib/layout/index.js"));

var _linebreaker = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/linebreaker */ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/index.js"));

var _attributedString = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/attributedString */ "./node_modules/@react-pdf/textkit/lib/attributedString/index.js"));

var _justification = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/justification */ "./node_modules/@react-pdf/textkit/lib/engines/justification/index.js"));

var _scriptItemizer = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/scriptItemizer */ "./node_modules/@react-pdf/textkit/lib/engines/scriptItemizer/index.js"));

var _wordHyphenation = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/wordHyphenation */ "./node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js"));

var _textDecoration = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/textDecoration */ "./node_modules/@react-pdf/textkit/lib/engines/textDecoration/index.js"));

var _transformText = _interopRequireDefault(__webpack_require__(/*! ../text/transformText */ "./node_modules/@react-pdf/layout/lib/text/transformText.js"));

var _fontSubstitution = _interopRequireDefault(__webpack_require__(/*! ../text/fontSubstitution */ "./node_modules/@react-pdf/layout/lib/text/fontSubstitution.js"));

var isTextInstance = R.propEq('type', P.TextInstance);
var engines = {
  linebreaker: _linebreaker.default,
  justification: _justification.default,
  scriptItemizer: _scriptItemizer.default,
  wordHyphenation: _wordHyphenation.default,
  fontSubstitution: _fontSubstitution.default,
  textDecoration: _textDecoration.default
};
var engine = (0, _layout.default)(engines);

var getFragments = function getFragments(fontStore, instance) {
  if (!instance) return [{
    string: ''
  }];
  var fragments = [];
  var _instance$props = instance.props,
      _instance$props$fill = _instance$props.fill,
      fill = _instance$props$fill === void 0 ? 'black' : _instance$props$fill,
      _instance$props$fontF = _instance$props.fontFamily,
      fontFamily = _instance$props$fontF === void 0 ? 'Helvetica' : _instance$props$fontF,
      fontWeight = _instance$props.fontWeight,
      fontStyle = _instance$props.fontStyle,
      _instance$props$fontS = _instance$props.fontSize,
      fontSize = _instance$props$fontS === void 0 ? 18 : _instance$props$fontS,
      textDecoration = _instance$props.textDecoration,
      textDecorationColor = _instance$props.textDecorationColor,
      textDecorationStyle = _instance$props.textDecorationStyle,
      textTransform = _instance$props.textTransform,
      opacity = _instance$props.opacity;
  var obj = fontStore ? fontStore.getFont({
    fontFamily: fontFamily,
    fontWeight: fontWeight,
    fontStyle: fontStyle
  }) : null;
  var font = obj ? obj.data : fontFamily;
  var attributes = {
    font: font,
    opacity: opacity,
    fontSize: fontSize,
    color: fill,
    underlineStyle: textDecorationStyle,
    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    underlineColor: textDecorationColor || fill,
    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    strikeStyle: textDecorationStyle,
    strikeColor: textDecorationColor || fill
  };

  for (var i = 0; i < instance.children.length; i += 1) {
    var child = instance.children[i];

    if (isTextInstance(child)) {
      fragments.push({
        string: (0, _transformText.default)(child.value, textTransform),
        attributes: attributes
      });
    } else if (child) {
      fragments.push.apply(fragments, getFragments(child));
    }
  }

  return fragments;
};

var getAttributedString = function getAttributedString(fontStore, instance) {
  return _attributedString.default.fromFragments(getFragments(fontStore, instance));
};

var AlmostInfinity = 999999999999;
var shrinkWhitespaceFactor = {
  before: -0.5,
  after: -0.5
};

var layoutTspan = function layoutTspan(fontStore) {
  return function (node) {
    var attributedString = getAttributedString(fontStore, node);
    var x = R.pathOr(0, ['props', 'x'], node);
    var y = R.pathOr(0, ['props', 'y'], node);
    var container = {
      x: x,
      y: y,
      width: AlmostInfinity,
      height: AlmostInfinity
    };
    var hyphenationCallback = node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null;
    var layoutOptions = {
      hyphenationCallback: hyphenationCallback,
      shrinkWhitespaceFactor: shrinkWhitespaceFactor
    };
    var lines = R.compose(R.reduce(R.concat, []), engine)(attributedString, container, layoutOptions);
    return R.assoc('lines', lines, node);
  };
};

var layoutText = function layoutText(fontStore, node) {
  return R.evolve({
    children: R.map(layoutTspan(fontStore))
  })(node);
};

var _default = R.curryN(2, layoutText);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/measureSvg.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/measureSvg.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var getAspectRatio = function getAspectRatio(viewbox) {
  if (!viewbox) return null;
  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);
};
/**
 * Yoga svg measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @param {Number} width
 * @param {Number} widthMode
 * @param {Number} height
 * @param {Number} heightMode
 * @returns {Object} canvas width and height
 */


var measureCanvas = function measureCanvas(page, node, width, widthMode, height, heightMode) {
  var aspectRatio = getAspectRatio(node.props.viewBox) || 1;

  if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY || widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {
    return {
      width: width,
      height: width / aspectRatio
    };
  }

  if (heightMode === _yoga.default.MEASURE_MODE_EXACTLY) {
    return {
      width: height * aspectRatio
    };
  }

  return {};
};

var _default = R.curryN(6, measureCanvas);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/parseAspectRatio.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/parseAspectRatio.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var parseAspectRatio = function parseAspectRatio(value) {
  var match = value.replace(/[\s\r\t\n]+/gm, ' ').replace(/^defer\s/, '').split(' ');
  var align = match[0] || 'xMidYMid';
  var meetOrSlice = match[1] || 'meet';
  return {
    align: align,
    meetOrSlice: meetOrSlice
  };
};

var _default = parseAspectRatio;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/parseViewbox.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/parseViewbox.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var parseViewbox = function parseViewbox(value) {
  if (!value) return null;
  var values = value.split(/[,\s]+/).map(parseFloat);
  if (values.length !== 4) return null;
  return {
    minX: values[0],
    minY: values[1],
    maxX: values[2],
    maxY: values[3]
  };
};

var _default = parseViewbox;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/svg/replaceDefs.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/svg/replaceDefs.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _getDefs = _interopRequireDefault(__webpack_require__(/*! ./getDefs */ "./node_modules/@react-pdf/layout/lib/svg/getDefs.js"));

var isDefs = R.propEq('type', P.Defs);
var isNotDefs = R.complement(isDefs);
var detachDefs = R.evolve({
  children: R.filter(isNotDefs)
});
var URL_REGEX = /url\(['"]?#([^'"]+)['"]?\)/;

var replaceDef = function replaceDef(defs) {
  return R.compose(R.when(R.test(URL_REGEX), R.compose(R.prop(R.__, defs), R.prop(1), R.match(URL_REGEX))), R.defaultTo(''));
};

var parseNodeDefs = function parseNodeDefs(defs) {
  return function (node) {
    return R.compose(R.evolve({
      props: R.evolve({
        fill: replaceDef(defs),
        clipPath: replaceDef(defs)
      })
    }), R.evolve({
      children: R.map(parseNodeDefs(defs))
    }))(node);
  };
};

var parseDefs = function parseDefs(root) {
  var defs = (0, _getDefs.default)(root);
  return R.evolve({
    children: R.map(parseNodeDefs(defs))
  }, root);
};

var replaceDefs = R.compose(detachDefs, parseDefs);
var _default = replaceDefs;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/emoji.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/emoji.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.fetchEmojis = exports.embedEmojis = exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js"));

var _emojiRegex = _interopRequireDefault(__webpack_require__(/*! emoji-regex */ "./node_modules/emoji-regex/index.js"));

var _image = _interopRequireDefault(__webpack_require__(/*! @react-pdf/image */ "./node_modules/@react-pdf/image/lib/index.browser.js"));

/* eslint-disable no-cond-assign */
// Caches emoji images data
var emojis = {};
var regex = (0, _emojiRegex.default)();

var reflect = function reflect(promise) {
  return function () {
    return promise.apply(void 0, arguments).then(function (v) {
      return v;
    }, function (e) {
      return e;
    });
  };
}; // Returns a function to be able to mock resolveImage.


var makeFetchEmojiImage = function makeFetchEmojiImage() {
  return reflect(_image.default);
};
/**
 * When an emoji as no color, it might still have 2 parts,
 * the canonical emoji and an empty string.
 * ex.
 *   (no color) Array.from('❤️') => ["❤", "️"]
 *   (w/ color) Array.from('👍🏿') => ["👍", "🏿"]
 *
 * The empty string needs to be removed otherwise the generated
 * url will be incorect.
 */


var _removeNoColor = function _removeNoColor(x) {
  return x !== '️';
};

var getCodePoints = function getCodePoints(string) {
  return Array.from(string).filter(_removeNoColor).map(function (char) {
    return char.codePointAt(0).toString(16);
  }).join('-');
};

var buildEmojiUrl = function buildEmojiUrl(emoji, source) {
  var url = source.url,
      format = source.format;
  return "" + url + getCodePoints(emoji) + "." + format;
};

var fetchEmojis = function fetchEmojis(string, source) {
  if (!source || !source.url) return [];
  var promises = [];
  var match;

  var _loop = function _loop() {
    var emoji = match[0];

    if (!emojis[emoji] || emojis[emoji].loading) {
      var emojiUrl = buildEmojiUrl(emoji, source);
      emojis[emoji] = {
        loading: true
      };
      var fetchEmojiImage = makeFetchEmojiImage();
      promises.push(fetchEmojiImage({
        uri: emojiUrl
      }).then(function (image) {
        emojis[emoji].loading = false;
        emojis[emoji].data = image.data;
      }));
    }
  };

  while (match = regex.exec(string)) {
    _loop();
  }

  return promises;
};

exports.fetchEmojis = fetchEmojis;

var embedEmojis = function embedEmojis(fragments) {
  var result = [];

  for (var i = 0; i < fragments.length; i += 1) {
    var fragment = fragments[i];
    var match = void 0;
    var lastIndex = 0;

    while (match = regex.exec(fragment.string)) {
      var _match = match,
          index = _match.index;
      var emoji = match[0];
      var emojiSize = fragment.attributes.fontSize;
      var chunk = fragment.string.slice(lastIndex, index + match[0].length); // If emoji image was found, we create a new fragment with the
      // correct attachment and object substitution character;

      if (emojis[emoji] && emojis[emoji].data) {
        result.push({
          string: chunk.replace(match, String.fromCharCode(0xfffc)),
          attributes: (0, _extends2.default)({}, fragment.attributes, {
            attachment: {
              width: emojiSize,
              height: emojiSize,
              yOffset: Math.floor(emojiSize * 0.1),
              image: emojis[emoji].data
            }
          })
        });
      } else {
        // If no emoji data, we just replace the emoji with a nodef char
        result.push({
          string: chunk.replace(match, String.fromCharCode(0)),
          attributes: fragment.attributes
        });
      }

      lastIndex = index + emoji.length;
    }

    if (lastIndex < fragment.string.length) {
      result.push({
        string: fragment.string.slice(lastIndex),
        attributes: fragment.attributes
      });
    }
  }

  return result;
};

exports.embedEmojis = embedEmojis;
var _default = fetchEmojis;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/fontSubstitution.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/fontSubstitution.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _standardFont = _interopRequireDefault(__webpack_require__(/*! ./standardFont */ "./node_modules/@react-pdf/layout/lib/text/standardFont.js"));

var fontCache = {};
var IGNORED_CODE_POINTS = [173];
var getFontSize = R.pathOr(12, ['attributes', 'fontSize']);

var getOrCreateFont = function getOrCreateFont(name) {
  if (fontCache[name]) return fontCache[name];
  var font = new _standardFont.default(name);
  fontCache[name] = font;
  return font;
};

var getFallbackFont = function getFallbackFont() {
  return getOrCreateFont('Helvetica');
};

var shouldFallbackToFont = function shouldFallbackToFont(codePoint, font) {
  return !font || !IGNORED_CODE_POINTS.includes(codePoint) && !font.hasGlyphForCodePoint(codePoint) && getFallbackFont().hasGlyphForCodePoint(codePoint);
};

var fontSubstitution = function fontSubstitution() {
  return function (_ref) {
    var string = _ref.string,
        runs = _ref.runs;
    var lastFont = null;
    var lastFontSize = null;
    var lastIndex = 0;
    var index = 0;
    var res = [];

    for (var i = 0; i < runs.length; i += 1) {
      var run = runs[i];
      var defaultFont = typeof run.attributes.font === 'string' ? getOrCreateFont(run.attributes.font) : run.attributes.font;

      if (string.length === 0) {
        res.push({
          start: 0,
          end: 0,
          attributes: {
            font: defaultFont
          }
        });
        break;
      }

      var chars = string.slice(run.start, run.end);

      for (var j = 0; j < chars.length; j += 1) {
        var char = chars[j];
        var codePoint = char.codePointAt();
        var shouldFallback = shouldFallbackToFont(codePoint, defaultFont); // If the default font does not have a glyph and the fallback font does, we use it

        var font = shouldFallback ? getFallbackFont() : defaultFont;
        var fontSize = getFontSize(run); // If anything that would impact res has changed, update it

        if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {
          if (lastFont) {
            res.push({
              start: lastIndex,
              end: index,
              attributes: {
                font: lastFont,
                scale: lastFontSize / lastFont.unitsPerEm
              }
            });
          }

          lastFont = font;
          lastFontSize = fontSize;
          lastIndex = index;
        }

        index += char.length;
      }
    }

    if (lastIndex < string.length) {
      var _fontSize = getFontSize(R.last(runs));

      res.push({
        start: lastIndex,
        end: string.length,
        attributes: {
          font: lastFont,
          scale: _fontSize / lastFont.unitsPerEm
        }
      });
    }

    return {
      string: string,
      runs: res
    };
  };
};

var _default = fontSubstitution;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/getAttributedString.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/getAttributedString.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _attributedString = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/attributedString */ "./node_modules/@react-pdf/textkit/lib/attributedString/index.js"));

var _emoji = __webpack_require__(/*! ./emoji */ "./node_modules/@react-pdf/layout/lib/text/emoji.js");

var _ignoreChars = _interopRequireDefault(__webpack_require__(/*! ./ignoreChars */ "./node_modules/@react-pdf/layout/lib/text/ignoreChars.js"));

var _transformText = _interopRequireDefault(__webpack_require__(/*! ./transformText */ "./node_modules/@react-pdf/layout/lib/text/transformText.js"));

var PREPROCESSORS = [_ignoreChars.default, _emoji.embedEmojis];
var isType = R.propEq('type');
var isImage = isType(P.Image);
var isTextInstance = isType(P.TextInstance);
/**
 * Get textkit fragments of given node object
 *
 * @param {Object} font store
 * @param {Object} instance node
 * @returns {Array} text fragments
 */

var getFragments = function getFragments(fontStore, instance, parentLink, level) {
  var _instance$props, _instance$props2;

  if (level === void 0) {
    level = 0;
  }

  if (!instance) return [{
    string: ''
  }];
  var fragments = [];
  var _instance$style = instance.style,
      _instance$style$color = _instance$style.color,
      color = _instance$style$color === void 0 ? 'black' : _instance$style$color,
      _instance$style$fontF = _instance$style.fontFamily,
      fontFamily = _instance$style$fontF === void 0 ? 'Helvetica' : _instance$style$fontF,
      fontWeight = _instance$style.fontWeight,
      fontStyle = _instance$style.fontStyle,
      _instance$style$fontS = _instance$style.fontSize,
      fontSize = _instance$style$fontS === void 0 ? 18 : _instance$style$fontS,
      _instance$style$textA = _instance$style.textAlign,
      textAlign = _instance$style$textA === void 0 ? 'left' : _instance$style$textA,
      lineHeight = _instance$style.lineHeight,
      textDecoration = _instance$style.textDecoration,
      textDecorationColor = _instance$style.textDecorationColor,
      textDecorationStyle = _instance$style.textDecorationStyle,
      textTransform = _instance$style.textTransform,
      letterSpacing = _instance$style.letterSpacing,
      textIndent = _instance$style.textIndent,
      opacity = _instance$style.opacity;
  var opts = {
    fontFamily: fontFamily,
    fontWeight: fontWeight,
    fontStyle: fontStyle
  };
  var obj = fontStore ? fontStore.getFont(opts) : null;
  var font = obj ? obj.data : fontFamily; // Don't pass main background color to textkit. Will be rendered by the render package instead

  var backgroundColor = level === 0 ? null : instance.style.backgroundColor;
  var attributes = {
    font: font,
    color: color,
    opacity: opacity,
    fontSize: fontSize,
    backgroundColor: backgroundColor,
    align: textAlign,
    indent: textIndent,
    characterSpacing: letterSpacing,
    strikeStyle: textDecorationStyle,
    underlineStyle: textDecorationStyle,
    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',
    strikeColor: textDecorationColor || color,
    underlineColor: textDecorationColor || color,
    link: parentLink || ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),
    lineHeight: lineHeight ? lineHeight * fontSize : null
  };

  for (var i = 0; i < instance.children.length; i += 1) {
    var child = instance.children[i];

    if (isImage(child)) {
      fragments.push({
        string: String.fromCharCode(0xfffc),
        attributes: (0, _extends2.default)({}, attributes, {
          attachment: {
            width: child.style.width || fontSize,
            height: child.style.height || fontSize,
            image: child.image.data
          }
        })
      });
    } else if (isTextInstance(child)) {
      fragments.push({
        string: (0, _transformText.default)(child.value, textTransform),
        attributes: attributes
      });
    } else if (child) {
      var _fragments;

      (_fragments = fragments).push.apply(_fragments, getFragments(fontStore, child, attributes.link, level + 1));
    }
  }

  for (var _i = 0; _i < PREPROCESSORS.length; _i += 1) {
    var preprocessor = PREPROCESSORS[_i];
    fragments = preprocessor(fragments);
  }

  return fragments;
};
/**
 * Get textkit attributed string from text node
 *
 * @param {Object} font store
 * @param {Object} instance node
 * @returns {Object} attributed string
 */


var getAttributedString = function getAttributedString(fontStore, instance) {
  var fragments = getFragments(fontStore, instance);
  return _attributedString.default.fromFragments(fragments);
};

var _default = R.curryN(2, getAttributedString);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/heightAtLineIndex.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/heightAtLineIndex.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get height for given text line index
 *
 * @param {Object} node
 * @param {Number} index
 */
var heightAtLineIndex = function heightAtLineIndex(node, index) {
  var counter = 0;
  if (!node.lines) return counter;

  for (var i = 0; i < index; i += 1) {
    var line = node.lines[i];
    if (!line) break;
    counter += line.box.height;
  }

  return counter;
};

var _default = heightAtLineIndex;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/ignoreChars.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/ignoreChars.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR
8233 // PARAGRAPH_SEPARATOR
];

var buildSubsetForFont = function buildSubsetForFont(font) {
  return IGNORABLE_CODEPOINTS.reduce(function (acc, codePoint) {
    if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {
      return acc;
    }

    return [].concat(acc, [String.fromCharCode(codePoint)]);
  }, []);
};

var ignoreChars = function ignoreChars(fragments) {
  return fragments.map(function (fragment) {
    var charSubset = buildSubsetForFont(fragment.attributes.font);
    var subsetRegex = new RegExp(charSubset.join('|'));
    return {
      string: fragment.string.replace(subsetRegex, ''),
      attributes: fragment.attributes
    };
  });
};

var _default = ignoreChars;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/layoutText.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/layoutText.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _layout = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/layout */ "./node_modules/@react-pdf/textkit/lib/layout/index.js"));

var _linebreaker = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/linebreaker */ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/index.js"));

var _justification = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/justification */ "./node_modules/@react-pdf/textkit/lib/engines/justification/index.js"));

var _textDecoration = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/textDecoration */ "./node_modules/@react-pdf/textkit/lib/engines/textDecoration/index.js"));

var _scriptItemizer = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/scriptItemizer */ "./node_modules/@react-pdf/textkit/lib/engines/scriptItemizer/index.js"));

var _wordHyphenation = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/engines/wordHyphenation */ "./node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js"));

var _fontSubstitution = _interopRequireDefault(__webpack_require__(/*! ./fontSubstitution */ "./node_modules/@react-pdf/layout/lib/text/fontSubstitution.js"));

var _getAttributedString = _interopRequireDefault(__webpack_require__(/*! ./getAttributedString */ "./node_modules/@react-pdf/layout/lib/text/getAttributedString.js"));

var engines = {
  linebreaker: _linebreaker.default,
  justification: _justification.default,
  textDecoration: _textDecoration.default,
  scriptItemizer: _scriptItemizer.default,
  wordHyphenation: _wordHyphenation.default,
  fontSubstitution: _fontSubstitution.default
};
var engine = (0, _layout.default)(engines);
var getMaxLines = R.path(['style', 'maxLines']);
var getTextOverflow = R.path(['style', 'textOverflow']);
/**
 * Get layout container for specific text node
 *
 * @param {Number} width
 * @param {Number} height
 * @param {Object} node
 * @returns {Object} layout container
 */

var getContainer = function getContainer(width, height, node) {
  var maxLines = getMaxLines(node);
  var textOverflow = getTextOverflow(node);
  return {
    x: 0,
    y: 0,
    width: width,
    maxLines: maxLines,
    height: height || Infinity,
    truncateMode: textOverflow
  };
};
/**
 * Get text layout options for specific text node
 *
 * @param {Object} node instance
 * @returns {Object} layout options
 */


var getLayoutOptions = function getLayoutOptions(fontStore, node) {
  return {
    hyphenationPenalty: node.props.hyphenationPenalty,
    shrinkWhitespaceFactor: {
      before: -0.5,
      after: -0.5
    },
    hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null
  };
};
/**
 * Get text lines for given node
 *
 * @param {Object} node
 * @param {Number} container width
 * @param {Number} container height
 * @param {Number} fontStore font store
 * @returns {Array} layout lines
 */


var layoutText = function layoutText(node, width, height, fontStore) {
  var attributedString = (0, _getAttributedString.default)(fontStore, node);
  var container = getContainer(width, height, node);
  var options = getLayoutOptions(fontStore, node);
  var lines = engine(attributedString, container, options);
  return R.reduce(R.concat, [], lines);
};

var _default = R.curryN(4, layoutText);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/lineIndexAtHeight.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/lineIndexAtHeight.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get line index at given height
 *
 * @param {Object} node
 * @param {Number} height
 */
var lineIndexAtHeight = function lineIndexAtHeight(node, height) {
  var y = 0;
  if (!node.lines) return 0;

  for (var i = 0; i < node.lines.length; i += 1) {
    var line = node.lines[i];
    if (y + line.box.height > height) return i;
    y += line.box.height;
  }

  return node.lines.length;
};

var _default = lineIndexAtHeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/linesHeight.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/linesHeight.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get lines height (if any)
 *
 * @param {Object} node
 * @returns {Number} lines height
 */
var linesHeight = function linesHeight(node) {
  if (!node.lines) return -1;
  return node.lines.reduce(function (acc, line) {
    return acc + line.box.height;
  }, 0);
};

var _default = linesHeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/linesWidth.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/linesWidth.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _attributedString = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/attributedString */ "./node_modules/@react-pdf/textkit/lib/attributedString/index.js"));

/**
 * Get lines width (if any)
 *
 * @param {Object} node
 * @returns {Number} lines width
 */
var linesWidth = function linesWidth(node) {
  if (!node.lines) return -1;
  return Math.max.apply(Math, node.lines.map(function (line) {
    return _attributedString.default.advanceWidth(line);
  }));
};

var _default = linesWidth;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/measureText.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/measureText.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _yoga = _interopRequireDefault(__webpack_require__(/*! @react-pdf/yoga */ "./node_modules/@react-pdf/yoga/src/dist/entry-browser.js"));

var _layoutText = _interopRequireDefault(__webpack_require__(/*! ./layoutText */ "./node_modules/@react-pdf/layout/lib/text/layoutText.js"));

var _linesWidth = _interopRequireDefault(__webpack_require__(/*! ./linesWidth */ "./node_modules/@react-pdf/layout/lib/text/linesWidth.js"));

var _linesHeight = _interopRequireDefault(__webpack_require__(/*! ./linesHeight */ "./node_modules/@react-pdf/layout/lib/text/linesHeight.js"));

/* eslint-disable no-param-reassign */
var ALIGNMENT_FACTORS = {
  center: 0.5,
  right: 1
};
/**
 * Yoga text measure function
 *
 * @param {Object} page
 * @param {Object} node
 * @param {Number} width
 * @param {Number} widthMode
 * @param {Number} height
 * @param {Number} heightMode
 * @returns {Object} text width and height
 */

var measureText = function measureText(page, node, fontStore, width, widthMode, height) {
  if (widthMode === _yoga.default.MEASURE_MODE_EXACTLY) {
    if (!node.lines) node.lines = (0, _layoutText.default)(node, width, height, fontStore);
    return {
      height: (0, _linesHeight.default)(node)
    };
  }

  if (widthMode === _yoga.default.MEASURE_MODE_AT_MOST) {
    var _node$style;

    var alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;

    if (!node.lines) {
      node.lines = (0, _layoutText.default)(node, width, height, fontStore);
      node.alignOffset = (width - (0, _linesWidth.default)(node)) * alignFactor; // Compensate align in variable width containers
    }

    return {
      height: (0, _linesHeight.default)(node),
      width: Math.min(width, (0, _linesWidth.default)(node))
    };
  }

  return {};
};

var _default = R.curryN(7, measureText);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/splitText.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/splitText.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _lineIndexAtHeight = _interopRequireDefault(__webpack_require__(/*! ./lineIndexAtHeight */ "./node_modules/@react-pdf/layout/lib/text/lineIndexAtHeight.js"));

var _heightAtLineIndex = _interopRequireDefault(__webpack_require__(/*! ./heightAtLineIndex */ "./node_modules/@react-pdf/layout/lib/text/heightAtLineIndex.js"));

var zero = R.always(0);
var getTop = R.pathOr(0, ['box', 'top']);
var getWidows = R.pathOr(2, ['props', 'widows']);
var getOrphans = R.pathOr(2, ['props', 'orphans']);

var getLineBreak = function getLineBreak(node, height) {
  var top = getTop(node);
  var widows = getWidows(node);
  var orphans = getOrphans(node);
  var linesQuantity = node.lines.length;
  var slicedLine = (0, _lineIndexAtHeight.default)(node, height - top);

  if (slicedLine === 0) {
    return 0;
  }

  if (linesQuantity < orphans) {
    return linesQuantity;
  }

  if (slicedLine < orphans || linesQuantity < orphans + widows) {
    return 0;
  }

  if (linesQuantity === orphans + widows) {
    return orphans;
  }

  if (linesQuantity - slicedLine < widows) {
    return linesQuantity - widows;
  }

  return slicedLine;
}; // Also receives contentArea in case it's needed


var splitText = function splitText(node, height) {
  var slicedLineIndex = getLineBreak(node, height);
  var currentHeight = (0, _heightAtLineIndex.default)(node, slicedLineIndex);
  var nextHeight = node.box.height - currentHeight;
  var current = R.evolve({
    lines: R.slice(0, slicedLineIndex),
    style: R.evolve({
      marginBottom: zero,
      paddingBottom: zero,
      borderBottomWidth: zero,
      borderBottomLeftRadius: zero,
      borderBottomRightRadius: zero
    }),
    box: {
      height: R.always(currentHeight),
      borderBottomWidth: zero
    }
  }, node);
  var next = R.evolve({
    lines: R.slice(slicedLineIndex, Infinity),
    style: R.evolve({
      marginTop: zero,
      paddingTop: zero,
      borderTopWidth: zero,
      borderTopLeftRadius: zero,
      borderTopRightRadius: zero
    }),
    box: {
      top: zero,
      height: R.always(nextHeight),
      borderTopWidth: zero
    }
  }, node);
  return [current, next];
};

var _default = splitText;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/standardFont.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/standardFont.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/createClass.js"));

var _pdfkit = __webpack_require__(/*! @react-pdf/pdfkit */ "./node_modules/@react-pdf/pdfkit/lib/pdfkit.browser.es.js");

/* eslint-disable class-methods-use-this */
var StandardFont = /*#__PURE__*/function () {
  function StandardFont(src) {
    this.name = src;
    this.src = _pdfkit.PDFFont.open(null, src);
  }

  var _proto = StandardFont.prototype;

  _proto.encode = function encode(str) {
    return this.src.encode(str);
  };

  _proto.layout = function layout(str) {
    var _this = this;

    var _this$encode = this.encode(str),
        encoded = _this$encode[0],
        positions = _this$encode[1];

    return {
      positions: positions,
      stringIndices: positions.map(function (_, i) {
        return i;
      }),
      glyphs: encoded.map(function (g, i) {
        var glyph = _this.getGlyph(parseInt(g, 16));

        glyph.advanceWidth = positions[i].advanceWidth;
        return glyph;
      })
    };
  };

  _proto.glyphForCodePoint = function glyphForCodePoint(codePoint) {
    var glyph = this.getGlyph(codePoint);
    glyph.advanceWidth = 400;
    return glyph;
  };

  _proto.getGlyph = function getGlyph(id) {
    return {
      id: id,
      _font: this.src,
      codePoints: [id],
      isLigature: false,
      name: this.src.font.characterToGlyph(id)
    };
  };

  _proto.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {
    return this.src.font.characterToGlyph(codePoint) !== '.notdef';
  } // Based on empirical observation
  ;

  (0, _createClass2.default)(StandardFont, [{
    key: "ascent",
    get: function get() {
      return 900;
    } // Based on empirical observation

  }, {
    key: "capHeight",
    get: function get() {
      switch (this.name) {
        case 'Times-Roman':
        case 'Times-Bold':
        case 'Times-Italic':
          return 650;

        case 'Courier':
        case 'Courier-Bold':
        case 'Courier-Oblique':
          return 550;

        default:
          return 690;
      }
    } // Based on empirical observation

  }, {
    key: "xHeight",
    get: function get() {
      switch (this.name) {
        case 'Times-Roman':
        case 'Times-Bold':
        case 'Times-Italic':
          return 440;

        case 'Courier':
        case 'Courier-Bold':
        case 'Courier-Oblique':
          return 390;

        default:
          return 490;
      }
    } // Based on empirical observation

  }, {
    key: "descent",
    get: function get() {
      switch (this.name) {
        case 'Times-Roman':
        case 'Times-Bold':
        case 'Times-Italic':
          return -220;

        case 'Courier':
        case 'Courier-Bold':
        case 'Courier-Oblique':
          return -230;

        default:
          return -200;
      }
    }
  }, {
    key: "lineGap",
    get: function get() {
      return 0;
    }
  }, {
    key: "unitsPerEm",
    get: function get() {
      return 1000;
    }
  }]);
  return StandardFont;
}();

var _default = StandardFont;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/text/transformText.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/text/transformText.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _capitalize = _interopRequireDefault(__webpack_require__(/*! ../utils/capitalize */ "./node_modules/@react-pdf/layout/lib/utils/capitalize.js"));

var _upperFirst = _interopRequireDefault(__webpack_require__(/*! ../utils/upperFirst */ "./node_modules/@react-pdf/layout/lib/utils/upperFirst.js"));

/**
 * Apply transformation to text string
 *
 * @param {String} text
 * @param {String} transformation type
 * @returns {String} transformed text
 */
var transformText = function transformText(text, transformation) {
  switch (transformation) {
    case 'uppercase':
      return text.toUpperCase();

    case 'lowercase':
      return text.toLowerCase();

    case 'capitalize':
      return (0, _capitalize.default)(text);

    case 'upperfirst':
      return (0, _upperFirst.default)(text);

    default:
      return text;
  }
};

var _default = transformText;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/utils/asyncCompose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/utils/asyncCompose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/* eslint-disable no-await-in-loop */

/**
 * Performs right-to-left function composition with async functions support
 *
 * @param  {...any} functions
 */
var asyncCompose = function asyncCompose() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(value) {
      var result,
          reversedFns,
          _len2,
          args,
          _key2,
          i,
          fn,
          _args = arguments;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = value;
              reversedFns = R.reverse(fns);

              for (_len2 = _args.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = _args[_key2];
              }

              i = 0;

            case 4:
              if (!(i < reversedFns.length)) {
                _context.next = 12;
                break;
              }

              fn = reversedFns[i];
              _context.next = 8;
              return fn.apply(void 0, [result].concat(args));

            case 8:
              result = _context.sent;

            case 9:
              i += 1;
              _context.next = 4;
              break;

            case 12:
              return _context.abrupt("return", result);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};

var _default = asyncCompose;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/utils/capitalize.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/utils/capitalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Capitalize first letter of each word
 *
 * @param {String} string
 * @returns {String} capitalized string
 */
var capitalize = function capitalize(value) {
  if (!value) return value;
  return value.replace(/(^|\s)\S/g, function (l) {
    return l.toUpperCase();
  });
};

var _default = capitalize;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/utils/castArray.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/utils/castArray.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Checks if value is not an array
 *
 * @param {any} value
 * @returns {Boolean} isn't value an array
 */
var isNotArray = R.complement(R.is(Array));
/**
 * Casts value to array
 *
 * @param {any} value
 * @returns {Array} casted value
 */

var castArray = R.when(isNotArray, function (v) {
  return [v];
});
var _default = castArray;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/utils/matchPercent.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/utils/matchPercent.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var isPercent = function isPercent(value) {
  return /((-)?\d+\.?\d*)%/g.exec(value);
};
/**
 * Get percentage value of input
 *
 * @param {String} value
 * @returns {Object} percent value (if matches)
 */


var matchPercent = function matchPercent(value) {
  var match = isPercent(value);

  if (match) {
    var f = parseFloat(match[1], 10);
    var percent = f / 100;
    return {
      percent: percent,
      value: f
    };
  }

  return null;
};

var _default = matchPercent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/lib/utils/upperFirst.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/utils/upperFirst.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Capitalize first letter of string
 *
 * @param {String} string
 * @returns {String} capitalized string
 */
var upperFirst = R.ifElse(R.isNil, R.identity, R.compose(R.join(''), R.juxt([R.compose(R.toUpper, R.head), R.tail])));

var _default = R.memoizeWith(R.identity, upperFirst);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \************************************************************************************************/
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/createClass.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/createClass.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/extends.js ***!
  \***************************************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}

module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*****************************************************************************************************/
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \************************************************************************************************************/
/***/ ((module) => {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/typeof.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/typeof.js ***!
  \**************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/@babel/runtime/regenerator/index.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@react-pdf/layout/node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/lib/pdfkit.browser.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/lib/pdfkit.browser.es.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EmbeddedFont": () => (/* binding */ EmbeddedFont),
/* harmony export */   "PDFFont": () => (/* binding */ PDFFont),
/* harmony export */   "StandardFont": () => (/* binding */ StandardFont),
/* harmony export */   "default": () => (/* binding */ PDFDocument)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zlib */ "./node_modules/browserify-zlib/lib/index.js");
/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(zlib__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelperLoose */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js");
/* harmony import */ var _react_pdf_fontkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-pdf/fontkit */ "./node_modules/@react-pdf/fontkit/lib/fontkit.browser.es.js");
/* harmony import */ var _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-pdf/png-js */ "./node_modules/@react-pdf/png-js/lib/png-js.browser.es.js");
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var crypto_js_md5__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! crypto-js/md5 */ "./node_modules/crypto-js/md5.js");
/* harmony import */ var crypto_js_md5__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(crypto_js_md5__WEBPACK_IMPORTED_MODULE_8__);
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];










var PDFReference = /*#__PURE__*/function (_stream$Writable) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(PDFReference, _stream$Writable);

  function PDFReference(document, id, data) {
    var _this;

    _this = _stream$Writable.call(this, {
      decodeStrings: false
    }) || this;
    _this.finalize = _this.finalize.bind((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__["default"])(_this));
    _this.document = document;
    _this.id = id;

    if (data == null) {
      data = {};
    }

    _this.data = data;
    _this.gen = 0;
    _this.deflate = null;
    _this.compress = _this.document.compress && !_this.data.Filter;
    _this.uncompressedLength = 0;
    _this.chunks = [];
    return _this;
  }

  var _proto = PDFReference.prototype;

  _proto.initDeflate = function initDeflate() {
    var _this2 = this;

    this.data.Filter = 'FlateDecode';
    this.deflate = zlib__WEBPACK_IMPORTED_MODULE_3___default().createDeflate();
    this.deflate.on('data', function (chunk) {
      _this2.chunks.push(chunk);

      return _this2.data.Length += chunk.length;
    });
    return this.deflate.on('end', this.finalize);
  };

  _proto._write = function _write(chunk, encoding, callback) {
    if (!Buffer.isBuffer(chunk)) {
      chunk = Buffer.from(chunk + '\n', 'binary');
    }

    this.uncompressedLength += chunk.length;

    if (this.data.Length == null) {
      this.data.Length = 0;
    }

    if (this.compress) {
      if (!this.deflate) {
        this.initDeflate();
      }

      this.deflate.write(chunk);
    } else {
      this.chunks.push(chunk);
      this.data.Length += chunk.length;
    }

    return callback();
  };

  _proto.end = function end() {
    _stream$Writable.prototype.end.apply(this, arguments);

    if (this.deflate) {
      return this.deflate.end();
    }

    return this.finalize();
  };

  _proto.finalize = function finalize() {
    this.offset = this.document._offset;

    this.document._write(this.id + " " + this.gen + " obj");

    this.document._write(PDFObject$1.convert(this.data));

    if (this.chunks.length) {
      this.document._write('stream');

      for (var _i = 0, _Array$from = Array.from(this.chunks); _i < _Array$from.length; _i++) {
        var chunk = _Array$from[_i];

        this.document._write(chunk);
      }

      this.chunks.length = 0; // free up memory

      this.document._write('\nendstream');
    }

    this.document._write('endobj');

    return this.document._refEnd(this);
  };

  _proto.toString = function toString() {
    return this.id + " " + this.gen + " R";
  };

  return PDFReference;
}((stream__WEBPACK_IMPORTED_MODULE_1___default().Writable));

var PDFNameTree = /*#__PURE__*/function () {
  function PDFNameTree() {
    this._items = {};
  }

  var _proto = PDFNameTree.prototype;

  _proto.add = function add(key, val) {
    return this._items[key] = val;
  };

  _proto.get = function get(key) {
    return this._items[key];
  };

  _proto.toString = function toString() {
    // Needs to be sorted by key
    var sortedKeys = Object.keys(this._items).sort(function (a, b) {
      return a.localeCompare(b);
    });
    var out = ['<<'];

    if (sortedKeys.length > 1) {
      var first = sortedKeys[0],
          last = sortedKeys[sortedKeys.length - 1];
      out.push("  /Limits " + PDFObject$1.convert([new String(first), new String(last)]));
    }

    out.push('  /Names [');

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(sortedKeys), _step; !(_step = _iterator()).done;) {
      var key = _step.value;
      out.push("    " + PDFObject$1.convert(new String(key)) + " " + PDFObject$1.convert(this._items[key]));
    }

    out.push(']');
    out.push('>>');
    return out.join('\n');
  };

  return PDFNameTree;
}();

var escapableRe = /[\n\r\t\b\f\(\)\\]/g;
var escapable = {
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\b': '\\b',
  '\f': '\\f',
  '\\': '\\\\',
  '(': '\\(',
  ')': '\\)'
};

var pad = function pad(str, length) {
  return (Array(length + 1).join('0') + str).slice(-length);
}; // Convert little endian UTF-16 to big endian


var swapBytes = function swapBytes(buff) {
  var l = buff.length;

  if (l & 0x01) {
    throw new Error('Buffer length must be even');
  } else {
    for (var i = 0, end = l - 1; i < end; i += 2) {
      var a = buff[i];
      buff[i] = buff[i + 1];
      buff[i + 1] = a;
    }
  }

  return buff;
};

var PDFObject = /*#__PURE__*/function () {
  function PDFObject() {}

  PDFObject.convert = function convert(object) {
    // String literals are converted to the PDF name type
    if (typeof object === 'string') {
      return "/" + object;
    } // String objects are converted to PDF strings (UTF-16)


    if (object instanceof String) {
      var string = object; // Detect if this is a unicode string

      var isUnicode = false;

      for (var i = 0, end = string.length; i < end; i++) {
        if (string.charCodeAt(i) > 0x7f) {
          isUnicode = true;
          break;
        }
      } // If so, encode it as big endian UTF-16


      if (isUnicode) {
        string = swapBytes(Buffer.from("\uFEFF" + string, 'utf16le')).toString('binary');
      } // Escape characters as required by the spec


      string = string.replace(escapableRe, function (c) {
        return escapable[c];
      });
      return "(" + string + ")"; // Buffers are converted to PDF hex strings
    }

    if (Buffer.isBuffer(object)) {
      return "<" + object.toString('hex') + ">";
    }

    if (object instanceof PDFReference || object instanceof PDFNameTree) {
      return object.toString();
    }

    if (object instanceof Date) {
      return "(D:" + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
    }

    if (Array.isArray(object)) {
      var items = Array.from(object).map(function (e) {
        return PDFObject.convert(e);
      }).join(' ');
      return "[" + items + "]";
    }

    if ({}.toString.call(object) === '[object Object]') {
      var out = ['<<'];

      for (var key in object) {
        var val = object[key];
        out.push("/" + key + " " + PDFObject.convert(val));
      }

      out.push('>>');
      return out.join('\n');
    }

    if (typeof object === 'number') {
      return PDFObject.number(object);
    }

    return "" + object;
  };

  PDFObject.number = function number(n) {
    if (n > -1e21 && n < 1e21) {
      return Math.round(n * 1e6) / 1e6;
    }

    throw new Error("unsupported number: " + n);
  };

  return PDFObject;
}();

var PDFObject$1 = PDFObject;

var DEFAULT_MARGINS = {
  top: 0,
  left: 0,
  bottom: 0,
  right: 0
};
var SIZES = {
  '4A0': [4767.87, 6740.79],
  '2A0': [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756.0],
  FOLIO: [612.0, 936.0],
  LEGAL: [612.0, 1008.0],
  LETTER: [612.0, 792.0],
  TABLOID: [792.0, 1224.0]
};

var PDFPage = /*#__PURE__*/function () {
  function PDFPage(document, options) {
    var _this = this;

    this.document = document;

    if (options == null) {
      options = {};
    }

    this.size = options.size || 'letter';
    this.layout = options.layout || 'portrait';
    this.userUnit = options.userUnit || 1.0;
    this.margins = DEFAULT_MARGINS; // calculate page dimensions

    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];
    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];
    this.content = this.document.ref(); // Initialize the Font, XObject, and ExtGState dictionaries

    this.resources = this.document.ref({
      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']
    }); // Lazily create these dictionaries

    Object.defineProperties(this, {
      fonts: {
        get: function get() {
          return _this.resources.data.Font != null ? _this.resources.data.Font : _this.resources.data.Font = {};
        }
      },
      xobjects: {
        get: function get() {
          return _this.resources.data.XObject != null ? _this.resources.data.XObject : _this.resources.data.XObject = {};
        }
      },
      ext_gstates: {
        get: function get() {
          return _this.resources.data.ExtGState != null ? _this.resources.data.ExtGState : _this.resources.data.ExtGState = {};
        }
      },
      patterns: {
        get: function get() {
          return _this.resources.data.Pattern != null ? _this.resources.data.Pattern : _this.resources.data.Pattern = {};
        }
      },
      annotations: {
        get: function get() {
          return _this.dictionary.data.Annots != null ? _this.dictionary.data.Annots : _this.dictionary.data.Annots = [];
        }
      }
    }); // The page dictionary

    this.dictionary = this.document.ref({
      Type: 'Page',
      Parent: this.document._root.data.Pages,
      MediaBox: [0, 0, this.width, this.height],
      Contents: this.content,
      Resources: this.resources,
      UserUnit: this.userUnit
    });
  }

  var _proto = PDFPage.prototype;

  _proto.maxY = function maxY() {
    return this.height;
  };

  _proto.write = function write(chunk) {
    return this.content.write(chunk);
  };

  _proto.end = function end() {
    this.dictionary.end();
    this.resources.end();
    return this.content.end();
  };

  return PDFPage;
}();

var number$2 = PDFObject$1.number;

var PDFGradient$1 = /*#__PURE__*/function () {
  function PDFGradient(doc) {
    this.doc = doc;
    this.stops = [];
    this.embedded = false;
    this.transform = [1, 0, 0, 1, 0, 0];
  }

  var _proto = PDFGradient.prototype;

  _proto.stop = function stop(pos, color, opacity) {
    if (opacity == null) {
      opacity = 1;
    }

    color = this.doc._normalizeColor(color);

    if (this.stops.length === 0) {
      if (color.length === 3) {
        this._colorSpace = 'DeviceRGB';
      } else if (color.length === 4) {
        this._colorSpace = 'DeviceCMYK';
      } else if (color.length === 1) {
        this._colorSpace = 'DeviceGray';
      } else {
        throw new Error('Unknown color space');
      }
    } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {
      throw new Error('All gradient stops must use the same color space');
    }

    opacity = Math.max(0, Math.min(1, opacity));
    this.stops.push([pos, color, opacity]);
    return this;
  };

  _proto.setTransform = function setTransform(m11, m12, m21, m22, dx, dy) {
    this.transform = [m11, m12, m21, m22, dx, dy];
    return this;
  };

  _proto.embed = function embed(m) {
    var fn;
    var stopsLength = this.stops.length;

    if (stopsLength === 0) {
      return;
    }

    this.embedded = true;
    this.matrix = m; // if the last stop comes before 100%, add a copy at 100%

    var last = this.stops[stopsLength - 1];

    if (last[0] < 1) {
      this.stops.push([1, last[1], last[2]]);
    }

    var bounds = [];
    var encode = [];
    var stops = [];

    for (var i = 0; i < stopsLength - 1; i++) {
      encode.push(0, 1);

      if (i + 2 !== stopsLength) {
        bounds.push(this.stops[i + 1][0]);
      }

      fn = this.doc.ref({
        FunctionType: 2,
        Domain: [0, 1],
        C0: this.stops[i + 0][1],
        C1: this.stops[i + 1][1],
        N: 1
      });
      stops.push(fn);
      fn.end();
    } // if there are only two stops, we don't need a stitching function


    if (stopsLength === 1) {
      fn = stops[0];
    } else {
      fn = this.doc.ref({
        FunctionType: 3,
        // stitching function
        Domain: [0, 1],
        Functions: stops,
        Bounds: bounds,
        Encode: encode
      });
      fn.end();
    }

    this.id = "Sh" + ++this.doc._gradCount;
    var shader = this.shader(fn);
    shader.end();
    var pattern = this.doc.ref({
      Type: 'Pattern',
      PatternType: 2,
      Shading: shader,
      Matrix: this.matrix.map(number$2)
    });
    pattern.end();

    if (this.stops.some(function (stop) {
      return stop[2] < 1;
    })) {
      var grad = this.opacityGradient();
      grad._colorSpace = 'DeviceGray';

      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(this.stops), _step; !(_step = _iterator()).done;) {
        var stop = _step.value;
        grad.stop(stop[0], [stop[2]]);
      }

      grad = grad.embed(this.matrix);
      var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
      var form = this.doc.ref({
        Type: 'XObject',
        Subtype: 'Form',
        FormType: 1,
        BBox: pageBBox,
        Group: {
          Type: 'Group',
          S: 'Transparency',
          CS: 'DeviceGray'
        },
        Resources: {
          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
          Pattern: {
            Sh1: grad
          }
        }
      });
      form.write('/Pattern cs /Sh1 scn');
      form.end(pageBBox.join(' ') + " re f");
      var gstate = this.doc.ref({
        Type: 'ExtGState',
        SMask: {
          Type: 'Mask',
          S: 'Luminosity',
          G: form
        }
      });
      gstate.end();
      var opacityPattern = this.doc.ref({
        Type: 'Pattern',
        PatternType: 1,
        PaintType: 1,
        TilingType: 2,
        BBox: pageBBox,
        XStep: pageBBox[2],
        YStep: pageBBox[3],
        Resources: {
          ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
          Pattern: {
            Sh1: pattern
          },
          ExtGState: {
            Gs1: gstate
          }
        }
      });
      opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');
      opacityPattern.end(pageBBox.join(' ') + " re f");
      this.doc.page.patterns[this.id] = opacityPattern;
    } else {
      this.doc.page.patterns[this.id] = pattern;
    }

    return pattern;
  };

  _proto.apply = function apply(op) {
    // apply gradient transform to existing document ctm
    var _this$doc$_ctm = this.doc._ctm,
        m0 = _this$doc$_ctm[0],
        m1 = _this$doc$_ctm[1],
        m2 = _this$doc$_ctm[2],
        m3 = _this$doc$_ctm[3],
        m4 = _this$doc$_ctm[4],
        m5 = _this$doc$_ctm[5];
    var _this$transform = this.transform,
        m11 = _this$transform[0],
        m12 = _this$transform[1],
        m21 = _this$transform[2],
        m22 = _this$transform[3],
        dx = _this$transform[4],
        dy = _this$transform[5];
    var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];

    if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {
      this.embed(m);
    }

    return this.doc.addContent("/" + this.id + " " + op);
  };

  return PDFGradient;
}();

var PDFLinearGradient$1 = /*#__PURE__*/function (_PDFGradient) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(PDFLinearGradient, _PDFGradient);

  function PDFLinearGradient(doc, x1, y1, x2, y2) {
    var _this;

    _this = _PDFGradient.call(this, doc) || this;
    _this.x1 = x1;
    _this.y1 = y1;
    _this.x2 = x2;
    _this.y2 = y2;
    return _this;
  }

  var _proto2 = PDFLinearGradient.prototype;

  _proto2.shader = function shader(fn) {
    return this.doc.ref({
      ShadingType: 2,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.x2, this.y2],
      Function: fn,
      Extend: [true, true]
    });
  };

  _proto2.opacityGradient = function opacityGradient() {
    return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
  };

  return PDFLinearGradient;
}(PDFGradient$1);

var PDFRadialGradient$1 = /*#__PURE__*/function (_PDFGradient2) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(PDFRadialGradient, _PDFGradient2);

  function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
    var _this2;

    _this2 = _PDFGradient2.call(this, doc) || this;
    _this2.doc = doc;
    _this2.x1 = x1;
    _this2.y1 = y1;
    _this2.r1 = r1;
    _this2.x2 = x2;
    _this2.y2 = y2;
    _this2.r2 = r2;
    return _this2;
  }

  var _proto3 = PDFRadialGradient.prototype;

  _proto3.shader = function shader(fn) {
    return this.doc.ref({
      ShadingType: 3,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
      Function: fn,
      Extend: [true, true]
    });
  };

  _proto3.opacityGradient = function opacityGradient() {
    return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
  };

  return PDFRadialGradient;
}(PDFGradient$1);

var Gradient = {
  PDFGradient: PDFGradient$1,
  PDFLinearGradient: PDFLinearGradient$1,
  PDFRadialGradient: PDFRadialGradient$1
};

var PDFGradient = Gradient.PDFGradient,
    PDFLinearGradient = Gradient.PDFLinearGradient,
    PDFRadialGradient = Gradient.PDFRadialGradient;
var Color = {
  initColor: function initColor() {
    // The opacity dictionaries
    this._opacityRegistry = {};
    this._opacityCount = 0;
    return this._gradCount = 0;
  },
  _normalizeColor: function _normalizeColor(color) {
    if (color instanceof PDFGradient) {
      return color;
    }

    var part;

    if (typeof color === 'string') {
      if (color.charAt(0) === '#') {
        if (color.length === 4) {
          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');
        }

        var hex = parseInt(color.slice(1), 16);
        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];
      } else if (namedColors[color]) {
        color = namedColors[color];
      }
    }

    if (Array.isArray(color)) {
      // RGB
      if (color.length === 3) {
        color = function () {
          var result = [];

          for (var _i = 0, _Array$from = Array.from(color); _i < _Array$from.length; _i++) {
            part = _Array$from[_i];
            result.push(part / 255);
          }

          return result;
        }(); // CMYK

      } else if (color.length === 4) {
        color = function () {
          var result1 = [];

          for (var _i2 = 0, _Array$from2 = Array.from(color); _i2 < _Array$from2.length; _i2++) {
            part = _Array$from2[_i2];
            result1.push(part / 100);
          }

          return result1;
        }();
      }

      return color;
    }

    return null;
  },
  _setColor: function _setColor(color, stroke) {
    color = this._normalizeColor(color);

    if (!color) {
      return false;
    }

    var op = stroke ? 'SCN' : 'scn';

    if (color instanceof PDFGradient) {
      this._setColorSpace('Pattern', stroke);

      color.apply(op);
    } else {
      var space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';

      this._setColorSpace(space, stroke);

      color = color.join(' ');
      this.addContent(color + " " + op);
    }

    return true;
  },
  _setColorSpace: function _setColorSpace(space, stroke) {
    var op = stroke ? 'CS' : 'cs';
    return this.addContent("/" + space + " " + op);
  },
  fillColor: function fillColor(color, opacity) {
    var set = this._setColor(color, false);

    if (set) {
      this.fillOpacity(opacity);
    } // save this for text wrapper, which needs to reset
    // the fill color on new pages


    this._fillColor = [color, opacity];
    return this;
  },
  strokeColor: function strokeColor(color, opacity) {
    var set = this._setColor(color, true);

    if (set) {
      this.strokeOpacity(opacity);
    }

    return this;
  },
  opacity: function opacity(_opacity) {
    this._doOpacity(_opacity, _opacity);

    return this;
  },
  fillOpacity: function fillOpacity(opacity) {
    this._doOpacity(opacity, null);

    return this;
  },
  strokeOpacity: function strokeOpacity(opacity) {
    this._doOpacity(null, opacity);

    return this;
  },
  _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {
    var dictionary, name;

    if (fillOpacity == null && strokeOpacity == null) {
      return;
    }

    if (fillOpacity != null) {
      fillOpacity = Math.max(0, Math.min(1, fillOpacity));
    }

    if (strokeOpacity != null) {
      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
    }

    var key = fillOpacity + "_" + strokeOpacity;

    if (this._opacityRegistry[key]) {
      var _Array$from3 = Array.from(this._opacityRegistry[key]);

      dictionary = _Array$from3[0];
      name = _Array$from3[1];
    } else {
      dictionary = {
        Type: 'ExtGState'
      };

      if (fillOpacity != null) {
        dictionary.ca = fillOpacity;
      }

      if (strokeOpacity != null) {
        dictionary.CA = strokeOpacity;
      }

      dictionary = this.ref(dictionary);
      dictionary.end();
      var id = ++this._opacityCount;
      name = "Gs" + id;
      this._opacityRegistry[key] = [dictionary, name];
    }

    this.page.ext_gstates[name] = dictionary;
    return this.addContent("/" + name + " gs");
  },
  linearGradient: function linearGradient(x1, y1, x2, y2) {
    return new PDFLinearGradient(this, x1, y1, x2, y2);
  },
  radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {
    return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
  }
};
var namedColors = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};

/* eslint-disable no-lonely-if */
var cx, cy, px, py, sx, sy;
cx = cy = px = py = sx = sy = 0; // parseDataPath copy pasted from svgo
// https://github.com/svg/svgo/blob/e4918ccdd1a2b5831defe0f00c1286744b479448/lib/path.js

var argsCountPerCommand = {
  M: 2,
  m: 2,
  Z: 0,
  z: 0,
  L: 2,
  l: 2,
  H: 1,
  h: 1,
  V: 1,
  v: 1,
  C: 6,
  c: 6,
  S: 4,
  s: 4,
  Q: 4,
  q: 4,
  T: 2,
  t: 2,
  A: 7,
  a: 7
};
/**
 * @type {(c: string) => c is PathDataCommand}
 */

var isCommand = function isCommand(c) {
  return c in argsCountPerCommand;
};
/**
 * @type {(c: string) => boolean}
 */


var isWsp = function isWsp(c) {
  var codePoint = c.codePointAt(0);
  return codePoint === 0x20 || codePoint === 0x9 || codePoint === 0xd || codePoint === 0xa;
};
/**
 * @type {(c: string) => boolean}
 */


var isDigit = function isDigit(c) {
  var codePoint = c.codePointAt(0);

  if (codePoint == null) {
    return false;
  }

  return 48 <= codePoint && codePoint <= 57;
};
/**
 * @typedef {'none' | 'sign' | 'whole' | 'decimal_point' | 'decimal' | 'e' | 'exponent_sign' | 'exponent'} ReadNumberState
 */

/**
 * @type {(string: string, cursor: number) => [number, number | null]}
 */


var readNumber = function readNumber(string, cursor) {
  var i = cursor;
  var value = '';
  var state =
  /** @type {ReadNumberState} */
  'none';

  for (; i < string.length; i += 1) {
    var c = string[i];

    if (c === '+' || c === '-') {
      if (state === 'none') {
        state = 'sign';
        value += c;
        continue;
      }

      if (state === 'e') {
        state = 'exponent_sign';
        value += c;
        continue;
      }
    }

    if (isDigit(c)) {
      if (state === 'none' || state === 'sign' || state === 'whole') {
        state = 'whole';
        value += c;
        continue;
      }

      if (state === 'decimal_point' || state === 'decimal') {
        state = 'decimal';
        value += c;
        continue;
      }

      if (state === 'e' || state === 'exponent_sign' || state === 'exponent') {
        state = 'exponent';
        value += c;
        continue;
      }
    }

    if (c === '.') {
      if (state === 'none' || state === 'sign' || state === 'whole') {
        state = 'decimal_point';
        value += c;
        continue;
      }
    }

    if (c === 'E' || c === 'e') {
      if (state === 'whole' || state === 'decimal_point' || state === 'decimal') {
        state = 'e';
        value += c;
        continue;
      }
    }

    break;
  }

  var number = Number.parseFloat(value);

  if (Number.isNaN(number)) {
    return [cursor, null];
  } else {
    // step back to delegate iteration to parent loop
    return [i - 1, number];
  }
};
/**
 * @type {(string: string) => Array<PathDataItem>}
 */


var parsePathData = function parsePathData(string) {
  /**
   * @type {Array<PathDataItem>}
   */
  var pathData = [];
  /**
   * @type {null | PathDataCommand}
   */

  var command = null;
  var args =
  /** @type {number[]} */
  [];
  var argsCount = 0;
  var canHaveComma = false;
  var hadComma = false;

  for (var i = 0; i < string.length; i += 1) {
    var c = string.charAt(i);

    if (isWsp(c)) {
      continue;
    } // allow comma only between arguments


    if (canHaveComma && c === ',') {
      if (hadComma) {
        break;
      }

      hadComma = true;
      continue;
    }

    if (isCommand(c)) {
      if (hadComma) {
        return pathData;
      }

      if (command == null) {
        // moveto should be leading command
        if (c !== 'M' && c !== 'm') {
          return pathData;
        }
      } else {
        // stop if previous command arguments are not flushed
        if (args.length !== 0) {
          return pathData;
        }
      }

      command = c;
      args = [];
      argsCount = argsCountPerCommand[command];
      canHaveComma = false; // flush command without arguments

      if (argsCount === 0) {
        pathData.push({
          command: command,
          args: args
        });
      }

      continue;
    } // avoid parsing arguments if no command detected


    if (command == null) {
      return pathData;
    } // read next argument


    var newCursor = i;
    var number = null;

    if (command === 'A' || command === 'a') {
      var position = args.length;

      if (position === 0 || position === 1) {
        // allow only positive number without sign as first two arguments
        if (c !== '+' && c !== '-') {
          var _readNumber = readNumber(string, i);

          newCursor = _readNumber[0];
          number = _readNumber[1];
        }
      }

      if (position === 2 || position === 5 || position === 6) {
        var _readNumber2 = readNumber(string, i);

        newCursor = _readNumber2[0];
        number = _readNumber2[1];
      }

      if (position === 3 || position === 4) {
        // read flags
        if (c === '0') {
          number = 0;
        }

        if (c === '1') {
          number = 1;
        }
      }
    } else {
      var _readNumber3 = readNumber(string, i);

      newCursor = _readNumber3[0];
      number = _readNumber3[1];
    }

    if (number == null) {
      return pathData;
    }

    args.push(number);
    canHaveComma = true;
    hadComma = false;
    i = newCursor; // flush arguments when necessary count is reached

    if (args.length === argsCount) {
      pathData.push({
        command: command,
        args: args
      }); // subsequent moveto coordinates are threated as implicit lineto commands

      if (command === 'M') {
        command = 'L';
      }

      if (command === 'm') {
        command = 'l';
      }

      args = [];
    }
  }

  return pathData;
};

var _apply = function apply(commands, doc) {
  // current point, control point, and subpath starting point
  cx = cy = px = py = sx = sy = 0; // run the commands

  for (var i = 0; i < commands.length; i++) {
    var _commands$i = commands[i],
        command = _commands$i.command,
        args = _commands$i.args;

    if (typeof runners[command] === 'function') {
      runners[command](doc, args);
    }
  }
};

var runners = {
  M: function M(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  m: function m(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  C: function C(doc, a) {
    cx = a[4];
    cy = a[5];
    px = a[2];
    py = a[3];
    return doc.bezierCurveTo.apply(doc, a);
  },
  c: function c(doc, a) {
    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
    px = cx + a[2];
    py = cy + a[3];
    cx += a[4];
    return cy += a[5];
  },
  S: function S(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }

    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
    px = a[0];
    py = a[1];
    cx = a[2];
    return cy = a[3];
  },
  s: function s(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }

    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  Q: function Q(doc, a) {
    px = a[0];
    py = a[1];
    cx = a[2];
    cy = a[3];
    return doc.quadraticCurveTo(a[0], a[1], cx, cy);
  },
  q: function q(doc, a) {
    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  T: function T(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }

    doc.quadraticCurveTo(px, py, a[0], a[1]);
    px = cx - (px - cx);
    py = cy - (py - cy);
    cx = a[0];
    return cy = a[1];
  },
  t: function t(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }

    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
    cx += a[0];
    return cy += a[1];
  },
  A: function A(doc, a) {
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  a: function a(doc, _a) {
    _a[5] += cx;
    _a[6] += cy;
    solveArc(doc, cx, cy, _a);
    cx = _a[5];
    return cy = _a[6];
  },
  L: function L(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  l: function l(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  H: function H(doc, a) {
    cx = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  h: function h(doc, a) {
    cx += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  V: function V(doc, a) {
    cy = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  v: function v(doc, a) {
    cy += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  Z: function Z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  },
  z: function z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  }
};

var solveArc = function solveArc(doc, x, y, coords) {
  var rx = coords[0],
      ry = coords[1],
      rot = coords[2],
      large = coords[3],
      sweep = coords[4],
      ex = coords[5],
      ey = coords[6];
  var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(segs), _step; !(_step = _iterator()).done;) {
    var seg = _step.value;
    var bez = segmentToBezier.apply(void 0, seg);
    doc.bezierCurveTo.apply(doc, bez);
  }
}; // from Inkscape svgtopdf, thanks!


var arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  var th = rotateX * (Math.PI / 180);
  var sin_th = Math.sin(th);
  var cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  var pl = px * px / (rx * rx) + py * py / (ry * ry);

  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }

  var a00 = cos_th / rx;
  var a01 = sin_th / rx;
  var a10 = -sin_th / ry;
  var a11 = cos_th / ry;
  var x0 = a00 * ox + a01 * oy;
  var y0 = a10 * ox + a11 * oy;
  var x1 = a00 * x + a01 * y;
  var y1 = a10 * x + a11 * y;
  var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
  var sfactor_sq = 1 / d - 0.25;

  if (sfactor_sq < 0) {
    sfactor_sq = 0;
  }

  var sfactor = Math.sqrt(sfactor_sq);

  if (sweep === large) {
    sfactor = -sfactor;
  }

  var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
  var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
  var th0 = Math.atan2(y0 - yc, x0 - xc);
  var th1 = Math.atan2(y1 - yc, x1 - xc);
  var th_arc = th1 - th0;

  if (th_arc < 0 && sweep === 1) {
    th_arc += 2 * Math.PI;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= 2 * Math.PI;
  }

  var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
  var result = [];

  for (var i = 0; i < segments; i++) {
    var th2 = th0 + i * th_arc / segments;
    var th3 = th0 + (i + 1) * th_arc / segments;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }

  return result;
};

var segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
  var a00 = cos_th * rx;
  var a01 = -sin_th * ry;
  var a10 = sin_th * rx;
  var a11 = cos_th * ry;
  var th_half = 0.5 * (th1 - th0);
  var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
  var x1 = cx + Math.cos(th0) - t * Math.sin(th0);
  var y1 = cy + Math.sin(th0) + t * Math.cos(th0);
  var x3 = cx + Math.cos(th1);
  var y3 = cy + Math.sin(th1);
  var x2 = x3 + t * Math.sin(th1);
  var y2 = y3 - t * Math.cos(th1);
  return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
};

var SVGPath = /*#__PURE__*/function () {
  function SVGPath() {}

  SVGPath.apply = function apply(doc, path) {
    var commands = parsePathData(path);

    _apply(commands, doc);
  };

  return SVGPath;
}();

var number$1 = PDFObject$1.number; // This constant is used to approximate a symmetrical arc using a cubic
// Bezier curve.

var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
var Vector = {
  initVector: function initVector() {
    this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix

    return this._ctmStack = [];
  },
  save: function save() {
    this._ctmStack.push(this._ctm.slice()); // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?


    return this.addContent('q');
  },
  restore: function restore() {
    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
    return this.addContent('Q');
  },
  closePath: function closePath() {
    return this.addContent('h');
  },
  lineWidth: function lineWidth(w) {
    return this.addContent(number$1(w) + " w");
  },
  _CAP_STYLES: {
    BUTT: 0,
    ROUND: 1,
    SQUARE: 2
  },
  lineCap: function lineCap(c) {
    if (typeof c === 'string') {
      c = this._CAP_STYLES[c.toUpperCase()];
    }

    return this.addContent(c + " J");
  },
  _JOIN_STYLES: {
    MITER: 0,
    ROUND: 1,
    BEVEL: 2
  },
  lineJoin: function lineJoin(j) {
    if (typeof j === 'string') {
      j = this._JOIN_STYLES[j.toUpperCase()];
    }

    return this.addContent(j + " j");
  },
  miterLimit: function miterLimit(m) {
    return this.addContent(number$1(m) + " M");
  },
  dash: function dash(length, options) {
    var phase;

    if (options == null) {
      options = {};
    }

    if (length == null) {
      return this;
    }

    if (Array.isArray(length)) {
      length = Array.from(length).map(function (v) {
        return PDFObject$1.number(v);
      }).join(' ');
      phase = options.phase || 0;
      return this.addContent("[" + length + "] " + PDFObject$1.number(phase) + " d");
    } else {
      var space = options.space != null ? options.space : length;
      phase = options.phase || 0;
      return this.addContent("[" + PDFObject$1.number(length) + " " + PDFObject$1.number(space) + "] " + PDFObject$1.number(phase) + " d");
    }
  },
  undash: function undash() {
    return this.addContent('[] 0 d');
  },
  moveTo: function moveTo(x, y) {
    return this.addContent(number$1(x) + " " + number$1(y) + " m");
  },
  lineTo: function lineTo(x, y) {
    return this.addContent(number$1(x) + " " + number$1(y) + " l");
  },
  bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
    return this.addContent(number$1(cp1x) + " " + number$1(cp1y) + " " + number$1(cp2x) + " " + number$1(cp2y) + " " + number$1(x) + " " + number$1(y) + " c");
  },
  quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {
    return this.addContent(number$1(cpx) + " " + number$1(cpy) + " " + number$1(x) + " " + number$1(y) + " v");
  },
  rect: function rect(x, y, w, h) {
    return this.addContent(number$1(x) + " " + number$1(y) + " " + number$1(w) + " " + number$1(h) + " re");
  },
  roundedRect: function roundedRect(x, y, w, h, r) {
    if (r == null) {
      r = 0;
    }

    r = Math.min(r, 0.5 * w, 0.5 * h); // amount to inset control points from corners (see `ellipse`)

    var c = r * (1.0 - KAPPA);
    this.moveTo(x + r, y);
    this.lineTo(x + w - r, y);
    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
    this.lineTo(x + w, y + h - r);
    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
    this.lineTo(x + r, y + h);
    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
    this.lineTo(x, y + r);
    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
    return this.closePath();
  },
  ellipse: function ellipse(x, y, r1, r2) {
    // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084
    if (r2 == null) {
      r2 = r1;
    }

    x -= r1;
    y -= r2;
    var ox = r1 * KAPPA;
    var oy = r2 * KAPPA;
    var xe = x + r1 * 2;
    var ye = y + r2 * 2;
    var xm = x + r1;
    var ym = y + r2;
    this.moveTo(x, ym);
    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
    return this.closePath();
  },
  circle: function circle(x, y, radius) {
    return this.ellipse(x, y, radius);
  },
  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    if (anticlockwise == null) {
      anticlockwise = false;
    }

    var TWO_PI = 2.0 * Math.PI;
    var HALF_PI = 0.5 * Math.PI;
    var deltaAng = endAngle - startAngle;

    if (Math.abs(deltaAng) > TWO_PI) {
      // draw only full circle if more than that is specified
      deltaAng = TWO_PI;
    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
      // necessary to flip direction of rendering
      var dir = anticlockwise ? -1 : 1;
      deltaAng = dir * TWO_PI + deltaAng;
    }

    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
    var segAng = deltaAng / numSegs;
    var handleLen = segAng / HALF_PI * KAPPA * radius;
    var curAng = startAngle; // component distances between anchor point and control point

    var deltaCx = -Math.sin(curAng) * handleLen;
    var deltaCy = Math.cos(curAng) * handleLen; // anchor point

    var ax = x + Math.cos(curAng) * radius;
    var ay = y + Math.sin(curAng) * radius; // calculate and render segments

    this.moveTo(ax, ay);

    for (var segIdx = 0, end = numSegs, asc = 0 <= end; asc ? segIdx < end : segIdx > end; asc ? segIdx++ : segIdx--) {
      // starting control point
      var cp1x = ax + deltaCx;
      var cp1y = ay + deltaCy; // step angle

      curAng += segAng; // next anchor point

      ax = x + Math.cos(curAng) * radius;
      ay = y + Math.sin(curAng) * radius; // next control point delta

      deltaCx = -Math.sin(curAng) * handleLen;
      deltaCy = Math.cos(curAng) * handleLen; // ending control point

      var cp2x = ax - deltaCx;
      var cp2y = ay - deltaCy; // render segment

      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
    }

    return this;
  },
  polygon: function polygon() {
    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
      points[_key] = arguments[_key];
    }

    this.moveTo.apply(this, Array.from(points.shift() || []));

    for (var _i = 0, _Array$from = Array.from(points); _i < _Array$from.length; _i++) {
      var point = _Array$from[_i];
      this.lineTo.apply(this, Array.from(point || []));
    }

    return this.closePath();
  },
  path: function path(_path) {
    SVGPath.apply(this, _path);
    return this;
  },
  _windingRule: function _windingRule(rule) {
    if (/even-?odd/.test(rule)) {
      return '*';
    }

    return '';
  },
  fill: function fill(color, rule) {
    if (/(even-?odd)|(non-?zero)/.test(color)) {
      rule = color;
      color = null;
    }

    if (color) {
      this.fillColor(color);
    }

    return this.addContent("f" + this._windingRule(rule));
  },
  stroke: function stroke(color) {
    if (color) {
      this.strokeColor(color);
    }

    return this.addContent('S');
  },
  fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {
    if (strokeColor == null) {
      strokeColor = fillColor;
    }

    var isFillRule = /(even-?odd)|(non-?zero)/;

    if (isFillRule.test(fillColor)) {
      rule = fillColor;
      fillColor = null;
    }

    if (isFillRule.test(strokeColor)) {
      rule = strokeColor;
      strokeColor = fillColor;
    }

    if (fillColor) {
      this.fillColor(fillColor);
      this.strokeColor(strokeColor);
    }

    return this.addContent("B" + this._windingRule(rule));
  },
  clip: function clip(rule) {
    return this.addContent("W" + this._windingRule(rule) + " n");
  },
  transform: function transform(m11, m12, m21, m22, dx, dy) {
    // keep track of the current transformation matrix
    var m = this._ctm;

    var _Array$from2 = Array.from(m),
        m0 = _Array$from2[0],
        m1 = _Array$from2[1],
        m2 = _Array$from2[2],
        m3 = _Array$from2[3],
        m4 = _Array$from2[4],
        m5 = _Array$from2[5];

    m[0] = m0 * m11 + m2 * m12;
    m[1] = m1 * m11 + m3 * m12;
    m[2] = m0 * m21 + m2 * m22;
    m[3] = m1 * m21 + m3 * m22;
    m[4] = m0 * dx + m2 * dy + m4;
    m[5] = m1 * dx + m3 * dy + m5;
    var values = [m11, m12, m21, m22, dx, dy].map(function (v) {
      return PDFObject$1.number(v);
    }).join(' ');
    return this.addContent(values + " cm");
  },
  translate: function translate(x, y) {
    return this.transform(1, 0, 0, 1, x, y);
  },
  rotate: function rotate(angle, options) {
    if (options === void 0) {
      options = {};
    }

    var y;
    var rad = angle * Math.PI / 180;
    var cos = Math.cos(rad);
    var sin = Math.sin(rad);
    var x = y = 0;

    if (options.origin != null) {
      var _Array$from3 = Array.from(options.origin);

      x = _Array$from3[0];
      y = _Array$from3[1];
      var x1 = x * cos - y * sin;
      var y1 = x * sin + y * cos;
      x -= x1;
      y -= y1;
    }

    return this.transform(cos, sin, -sin, cos, x, y);
  },
  scale: function scale(xFactor, yFactor, options) {
    if (options === void 0) {
      options = {};
    }

    var y;

    if (yFactor == null) {
      yFactor = xFactor;
    }

    if (typeof yFactor === 'object') {
      options = yFactor;
      yFactor = xFactor;
    }

    var x = y = 0;

    if (options.origin != null) {
      var _Array$from4 = Array.from(options.origin);

      x = _Array$from4[0];
      y = _Array$from4[1];
      x -= xFactor * x;
      y -= yFactor * y;
    }

    return this.transform(xFactor, 0, 0, yFactor, x, y);
  }
};

var range = function range(left, right, inclusive) {
  var range = [];
  var ascending = left < right;
  var end = !inclusive ? right : ascending ? right + 1 : right - 1;

  for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {
    range.push(i);
  }

  return range;
};

var WIN_ANSI_MAP = {
  402: 131,
  8211: 150,
  8212: 151,
  8216: 145,
  8217: 146,
  8218: 130,
  8220: 147,
  8221: 148,
  8222: 132,
  8224: 134,
  8225: 135,
  8226: 149,
  8230: 133,
  8364: 128,
  8240: 137,
  8249: 139,
  8250: 155,
  710: 136,
  8482: 153,
  338: 140,
  339: 156,
  732: 152,
  352: 138,
  353: 154,
  376: 159,
  381: 142,
  382: 158
};
var characters = ".notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis".split(/\s+/);

function _parse(contents) {
  var obj = {
    attributes: {},
    glyphWidths: {},
    kernPairs: {}
  };
  var section = '';

  for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(contents.split('\n')), _step; !(_step = _iterator()).done;) {
    var line = _step.value;
    var match;
    var a;

    if (match = line.match(/^Start(\w+)/)) {
      section = match[1];
      continue;
    } else if (match = line.match(/^End(\w+)/)) {
      section = '';
      continue;
    }

    switch (section) {
      case 'FontMetrics':
        match = line.match(/(^\w+)\s+(.*)/);
        var key = match[1];
        var value = match[2];

        if (a = obj.attributes[key]) {
          if (!Array.isArray(a)) {
            a = obj.attributes[key] = [a];
          }

          a.push(value);
        } else {
          obj.attributes[key] = value;
        }

        break;

      case 'CharMetrics':
        if (!/^CH?\s/.test(line)) {
          continue;
        }

        var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
        obj.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
        break;

      case 'KernPairs':
        match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);

        if (match) {
          obj.kernPairs[match[1] + match[2]] = parseInt(match[3]);
        }

        break;
    }
  }

  return obj;
}

var AFMFont = /*#__PURE__*/function () {
  AFMFont.open = function open(filename) {
    {
      throw new Error('AFMFont.open not available on browser build');
    }
  };

  AFMFont.fromJson = function fromJson(json) {
    return new AFMFont(json);
  };

  function AFMFont(contents) {
    var _this = this;

    if (typeof contents === 'string') {
      this.contents = contents;
      this.parse();
    } else {
      this.attributes = contents.attributes;
      this.glyphWidths = contents.glyphWidths;
      this.kernPairs = contents.kernPairs;
    }

    this.charWidths = range(0, 255, true).map(function (i) {
      return _this.glyphWidths[characters[i]];
    });
    this.bbox = Array.from(this.attributes.FontBBox.split(/\s+/)).map(function (e) {
      return +e;
    });
    this.ascender = +(this.attributes.Ascender || 0);
    this.descender = +(this.attributes.Descender || 0);
    this.xHeight = +(this.attributes.XHeight || 0);
    this.capHeight = +(this.attributes.CapHeight || 0);
    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
  }

  var _proto = AFMFont.prototype;

  _proto.parse = function parse() {
    var parsed = _parse(this.contents);

    this.attributes = parsed.attributes;
    this.glyphWidths = parsed.glyphWidths;
    this.kernPairs = parsed.kernPairs;
  };

  _proto.encodeText = function encodeText(text) {
    var res = [];

    for (var i = 0, end = text.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
      var char = text.charCodeAt(i);
      char = WIN_ANSI_MAP[char] || char;
      res.push(char.toString(16));
    }

    return res;
  };

  _proto.glyphsForString = function glyphsForString(string) {
    var glyphs = [];

    for (var i = 0, end = string.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
      var charCode = string.charCodeAt(i);
      glyphs.push(this.characterToGlyph(charCode));
    }

    return glyphs;
  };

  _proto.characterToGlyph = function characterToGlyph(character) {
    return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
  };

  _proto.widthOfGlyph = function widthOfGlyph(glyph) {
    return this.glyphWidths[glyph] || 0;
  };

  _proto.getKernPair = function getKernPair(left, right) {
    return this.kernPairs[left + right] || 0;
  };

  _proto.advancesForGlyphs = function advancesForGlyphs(glyphs) {
    var advances = [];

    for (var index = 0; index < glyphs.length; index++) {
      var left = glyphs[index];
      var right = glyphs[index + 1];
      advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
    }

    return advances;
  };

  return AFMFont;
}();

var attributes = [
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:43:52 1997",
			"UniqueID 43052",
			"VMusage 37169 48194"
		],
		FontName: "Helvetica-Bold",
		FullName: "Helvetica Bold",
		FamilyName: "Helvetica",
		Weight: "Bold",
		ItalicAngle: "0",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-170 -228 1003 962 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "718",
		XHeight: "532",
		Ascender: "718",
		Descender: "-207",
		StdHW: "118",
		StdVW: "140"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:45:12 1997",
			"UniqueID 43053",
			"VMusage 14482 68586"
		],
		FontName: "Helvetica-BoldOblique",
		FullName: "Helvetica Bold Oblique",
		FamilyName: "Helvetica",
		Weight: "Bold",
		ItalicAngle: "-12",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-174 -228 1114 962",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "718",
		XHeight: "532",
		Ascender: "718",
		Descender: "-207",
		StdHW: "118",
		StdVW: "140"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:44:31 1997",
			"UniqueID 43055",
			"VMusage 14960 69346"
		],
		FontName: "Helvetica-Oblique",
		FullName: "Helvetica Oblique",
		FamilyName: "Helvetica",
		Weight: "Medium",
		ItalicAngle: "-12",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-170 -225 1116 931 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "718",
		XHeight: "523",
		Ascender: "718",
		Descender: "-207",
		StdHW: "76",
		StdVW: "88"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:38:23 1997",
			"UniqueID 43054",
			"VMusage 37069 48094"
		],
		FontName: "Helvetica",
		FullName: "Helvetica",
		FamilyName: "Helvetica",
		Weight: "Medium",
		ItalicAngle: "0",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-166 -225 1000 931 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "718",
		XHeight: "523",
		Ascender: "718",
		Descender: "-207",
		StdHW: "76",
		StdVW: "88"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:52:56 1997",
			"UniqueID 43065",
			"VMusage 41636 52661"
		],
		FontName: "Times-Bold",
		FullName: "Times Bold",
		FamilyName: "Times",
		Weight: "Bold",
		ItalicAngle: "0",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-168 -218 1000 935 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "676",
		XHeight: "461",
		Ascender: "683",
		Descender: "-217",
		StdHW: "44",
		StdVW: "139"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 13:04:06 1997",
			"UniqueID 43066",
			"VMusage 45874 56899"
		],
		FontName: "Times-BoldItalic",
		FullName: "Times Bold Italic",
		FamilyName: "Times",
		Weight: "Bold",
		ItalicAngle: "-15",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-200 -218 996 921",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "669",
		XHeight: "462",
		Ascender: "683",
		Descender: "-217",
		StdHW: "42",
		StdVW: "121"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:56:55 1997",
			"UniqueID 43067",
			"VMusage 47727 58752"
		],
		FontName: "Times-Italic",
		FullName: "Times Italic",
		FamilyName: "Times",
		Weight: "Medium",
		ItalicAngle: "-15.5",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-169 -217 1010 883 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "653",
		XHeight: "441",
		Ascender: "683",
		Descender: "-217",
		StdHW: "32",
		StdVW: "76"
	},
	{
		Comment: [
			"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 12:49:17 1997",
			"UniqueID 43068",
			"VMusage 43909 54934"
		],
		FontName: "Times-Roman",
		FullName: "Times Roman",
		FamilyName: "Times",
		Weight: "Roman",
		ItalicAngle: "0",
		IsFixedPitch: "false",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-168 -218 1000 898 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "002.000",
		Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "662",
		XHeight: "450",
		Ascender: "683",
		Descender: "-217",
		StdHW: "28",
		StdVW: "84"
	},
	{
		Comment: [
			"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Mon Jun 23 16:28:00 1997",
			"UniqueID 43048",
			"VMusage 41139 52164"
		],
		FontName: "Courier-Bold",
		FullName: "Courier Bold",
		FamilyName: "Courier",
		Weight: "Bold",
		ItalicAngle: "0",
		IsFixedPitch: "true",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-113 -250 749 801 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "003.000",
		Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "562",
		XHeight: "439",
		Ascender: "629",
		Descender: "-157",
		StdHW: "84",
		StdVW: "106"
	},
	{
		Comment: [
			"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Mon Jun 23 16:28:46 1997",
			"UniqueID 43049",
			"VMusage 17529 79244"
		],
		FontName: "Courier-BoldOblique",
		FullName: "Courier Bold Oblique",
		FamilyName: "Courier",
		Weight: "Bold",
		ItalicAngle: "-12",
		IsFixedPitch: "true",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-57 -250 869 801",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "003.000",
		Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "562",
		XHeight: "439",
		Ascender: "629",
		Descender: "-157",
		StdHW: "84",
		StdVW: "106"
	},
	{
		Comment: [
			"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 17:37:52 1997",
			"UniqueID 43051",
			"VMusage 16248 75829"
		],
		FontName: "Courier-Oblique",
		FullName: "Courier Oblique",
		FamilyName: "Courier",
		Weight: "Medium",
		ItalicAngle: "-12",
		IsFixedPitch: "true",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-27 -250 849 805 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "003.000",
		Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "562",
		XHeight: "426",
		Ascender: "629",
		Descender: "-157",
		StdHW: "51",
		StdVW: "51"
	},
	{
		Comment: [
			"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
			"Creation Date: Thu May  1 17:27:09 1997",
			"UniqueID 43050",
			"VMusage 39754 50779"
		],
		FontName: "Courier",
		FullName: "Courier",
		FamilyName: "Courier",
		Weight: "Medium",
		ItalicAngle: "0",
		IsFixedPitch: "true",
		CharacterSet: "ExtendedRoman",
		FontBBox: "-23 -250 715 805 ",
		UnderlinePosition: "-100",
		UnderlineThickness: "50",
		Version: "003.000",
		Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
		EncodingScheme: "AdobeStandardEncoding",
		CapHeight: "562",
		XHeight: "426",
		Ascender: "629",
		Descender: "-157",
		StdHW: "51",
		StdVW: "51"
	}
];
var glyphWidths = {
	space: [
		278,
		278,
		278,
		278,
		250,
		250,
		250,
		250,
		600,
		600,
		600,
		600
	],
	exclam: [
		333,
		333,
		278,
		278,
		333,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	quotedbl: [
		474,
		474,
		355,
		355,
		555,
		555,
		420,
		408,
		600,
		600,
		600,
		600
	],
	numbersign: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	dollar: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	percent: [
		889,
		889,
		889,
		889,
		1000,
		833,
		833,
		833,
		600,
		600,
		600,
		600
	],
	ampersand: [
		722,
		722,
		667,
		667,
		833,
		778,
		778,
		778,
		600,
		600,
		600,
		600
	],
	quoteright: [
		278,
		278,
		222,
		222,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	parenleft: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	parenright: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	asterisk: [
		389,
		389,
		389,
		389,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	plus: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	comma: [
		278,
		278,
		278,
		278,
		250,
		250,
		250,
		250,
		600,
		600,
		600,
		600
	],
	hyphen: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	period: [
		278,
		278,
		278,
		278,
		250,
		250,
		250,
		250,
		600,
		600,
		600,
		600
	],
	slash: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	zero: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	one: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	two: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	three: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	four: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	five: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	six: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	seven: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	eight: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	nine: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	colon: [
		333,
		333,
		278,
		278,
		333,
		333,
		333,
		278,
		600,
		600,
		600,
		600
	],
	semicolon: [
		333,
		333,
		278,
		278,
		333,
		333,
		333,
		278,
		600,
		600,
		600,
		600
	],
	less: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	equal: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	greater: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	question: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	at: [
		975,
		975,
		1015,
		1015,
		930,
		832,
		920,
		921,
		600,
		600,
		600,
		600
	],
	A: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	B: [
		722,
		722,
		667,
		667,
		667,
		667,
		611,
		667,
		600,
		600,
		600,
		600
	],
	C: [
		722,
		722,
		722,
		722,
		722,
		667,
		667,
		667,
		600,
		600,
		600,
		600
	],
	D: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	E: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	F: [
		611,
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		600,
		600,
		600,
		600
	],
	G: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	H: [
		722,
		722,
		722,
		722,
		778,
		778,
		722,
		722,
		600,
		600,
		600,
		600
	],
	I: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	J: [
		556,
		556,
		500,
		500,
		500,
		500,
		444,
		389,
		600,
		600,
		600,
		600
	],
	K: [
		722,
		722,
		667,
		667,
		778,
		667,
		667,
		722,
		600,
		600,
		600,
		600
	],
	L: [
		611,
		611,
		556,
		556,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	M: [
		833,
		833,
		833,
		833,
		944,
		889,
		833,
		889,
		600,
		600,
		600,
		600
	],
	N: [
		722,
		722,
		722,
		722,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	O: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	P: [
		667,
		667,
		667,
		667,
		611,
		611,
		611,
		556,
		600,
		600,
		600,
		600
	],
	Q: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	R: [
		722,
		722,
		722,
		722,
		722,
		667,
		611,
		667,
		600,
		600,
		600,
		600
	],
	S: [
		667,
		667,
		667,
		667,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	T: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	U: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	V: [
		667,
		667,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	W: [
		944,
		944,
		944,
		944,
		1000,
		889,
		833,
		944,
		600,
		600,
		600,
		600
	],
	X: [
		667,
		667,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Y: [
		667,
		667,
		667,
		667,
		722,
		611,
		556,
		722,
		600,
		600,
		600,
		600
	],
	Z: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	bracketleft: [
		333,
		333,
		278,
		278,
		333,
		333,
		389,
		333,
		600,
		600,
		600,
		600
	],
	backslash: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	bracketright: [
		333,
		333,
		278,
		278,
		333,
		333,
		389,
		333,
		600,
		600,
		600,
		600
	],
	asciicircum: [
		584,
		584,
		469,
		469,
		581,
		570,
		422,
		469,
		600,
		600,
		600,
		600
	],
	underscore: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	quoteleft: [
		278,
		278,
		222,
		222,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	a: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	b: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	c: [
		556,
		556,
		500,
		500,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	d: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	e: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	f: [
		333,
		333,
		278,
		278,
		333,
		333,
		278,
		333,
		600,
		600,
		600,
		600
	],
	g: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	h: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	i: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	j: [
		278,
		278,
		222,
		222,
		333,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	k: [
		556,
		556,
		500,
		500,
		556,
		500,
		444,
		500,
		600,
		600,
		600,
		600
	],
	l: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	m: [
		889,
		889,
		833,
		833,
		833,
		778,
		722,
		778,
		600,
		600,
		600,
		600
	],
	n: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	o: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	p: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	q: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	r: [
		389,
		389,
		333,
		333,
		444,
		389,
		389,
		333,
		600,
		600,
		600,
		600
	],
	s: [
		556,
		556,
		500,
		500,
		389,
		389,
		389,
		389,
		600,
		600,
		600,
		600
	],
	t: [
		333,
		333,
		278,
		278,
		333,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	u: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	v: [
		556,
		556,
		500,
		500,
		500,
		444,
		444,
		500,
		600,
		600,
		600,
		600
	],
	w: [
		778,
		778,
		722,
		722,
		722,
		667,
		667,
		722,
		600,
		600,
		600,
		600
	],
	x: [
		556,
		556,
		500,
		500,
		500,
		500,
		444,
		500,
		600,
		600,
		600,
		600
	],
	y: [
		556,
		556,
		500,
		500,
		500,
		444,
		444,
		500,
		600,
		600,
		600,
		600
	],
	z: [
		500,
		500,
		500,
		500,
		444,
		389,
		389,
		444,
		600,
		600,
		600,
		600
	],
	braceleft: [
		389,
		389,
		334,
		334,
		394,
		348,
		400,
		480,
		600,
		600,
		600,
		600
	],
	bar: [
		280,
		280,
		260,
		260,
		220,
		220,
		275,
		200,
		600,
		600,
		600,
		600
	],
	braceright: [
		389,
		389,
		334,
		334,
		394,
		348,
		400,
		480,
		600,
		600,
		600,
		600
	],
	asciitilde: [
		584,
		584,
		584,
		584,
		520,
		570,
		541,
		541,
		600,
		600,
		600,
		600
	],
	exclamdown: [
		333,
		333,
		333,
		333,
		333,
		389,
		389,
		333,
		600,
		600,
		600,
		600
	],
	cent: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	sterling: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	fraction: [
		167,
		167,
		167,
		167,
		167,
		167,
		167,
		167,
		600,
		600,
		600,
		600
	],
	yen: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	florin: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	section: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	currency: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	quotesingle: [
		238,
		238,
		191,
		191,
		278,
		278,
		214,
		180,
		600,
		600,
		600,
		600
	],
	quotedblleft: [
		500,
		500,
		333,
		333,
		500,
		500,
		556,
		444,
		600,
		600,
		600,
		600
	],
	guillemotleft: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	guilsinglleft: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	guilsinglright: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	fi: [
		611,
		611,
		500,
		500,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	fl: [
		611,
		611,
		500,
		500,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	endash: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	dagger: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	daggerdbl: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	periodcentered: [
		278,
		278,
		278,
		278,
		250,
		250,
		250,
		250,
		600,
		600,
		600,
		600
	],
	paragraph: [
		556,
		556,
		537,
		537,
		540,
		500,
		523,
		453,
		600,
		600,
		600,
		600
	],
	bullet: [
		350,
		350,
		350,
		350,
		350,
		350,
		350,
		350,
		600,
		600,
		600,
		600
	],
	quotesinglbase: [
		278,
		278,
		222,
		222,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	quotedblbase: [
		500,
		500,
		333,
		333,
		500,
		500,
		556,
		444,
		600,
		600,
		600,
		600
	],
	quotedblright: [
		500,
		500,
		333,
		333,
		500,
		500,
		556,
		444,
		600,
		600,
		600,
		600
	],
	guillemotright: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	ellipsis: [
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		889,
		1000,
		600,
		600,
		600,
		600
	],
	perthousand: [
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		600,
		600,
		600,
		600
	],
	questiondown: [
		611,
		611,
		611,
		611,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	grave: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	acute: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	circumflex: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	tilde: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	macron: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	breve: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	dotaccent: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	dieresis: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	ring: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	cedilla: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	hungarumlaut: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	ogonek: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	caron: [
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		333,
		600,
		600,
		600,
		600
	],
	emdash: [
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		889,
		1000,
		600,
		600,
		600,
		600
	],
	AE: [
		1000,
		1000,
		1000,
		1000,
		1000,
		944,
		889,
		889,
		600,
		600,
		600,
		600
	],
	ordfeminine: [
		370,
		370,
		370,
		370,
		300,
		266,
		276,
		276,
		600,
		600,
		600,
		600
	],
	Lslash: [
		611,
		611,
		556,
		556,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	Oslash: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	OE: [
		1000,
		1000,
		1000,
		1000,
		1000,
		944,
		944,
		889,
		600,
		600,
		600,
		600
	],
	ordmasculine: [
		365,
		365,
		365,
		365,
		330,
		300,
		310,
		310,
		600,
		600,
		600,
		600
	],
	ae: [
		889,
		889,
		889,
		889,
		722,
		722,
		667,
		667,
		600,
		600,
		600,
		600
	],
	dotlessi: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	lslash: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	oslash: [
		611,
		611,
		611,
		611,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	oe: [
		944,
		944,
		944,
		944,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	germandbls: [
		611,
		611,
		611,
		611,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Idieresis: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	eacute: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	abreve: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	uhungarumlaut: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	ecaron: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	Ydieresis: [
		667,
		667,
		667,
		667,
		722,
		611,
		556,
		722,
		600,
		600,
		600,
		600
	],
	divide: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	Yacute: [
		667,
		667,
		667,
		667,
		722,
		611,
		556,
		722,
		600,
		600,
		600,
		600
	],
	Acircumflex: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	aacute: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Ucircumflex: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	yacute: [
		556,
		556,
		500,
		500,
		500,
		444,
		444,
		500,
		600,
		600,
		600,
		600
	],
	scommaaccent: [
		556,
		556,
		500,
		500,
		389,
		389,
		389,
		389,
		600,
		600,
		600,
		600
	],
	ecircumflex: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	Uring: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Udieresis: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	aogonek: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Uacute: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	uogonek: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Edieresis: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	Dcroat: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	commaaccent: [
		250,
		250,
		250,
		250,
		250,
		250,
		250,
		250,
		600,
		600,
		600,
		600
	],
	copyright: [
		737,
		737,
		737,
		737,
		747,
		747,
		760,
		760,
		600,
		600,
		600,
		600
	],
	Emacron: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	ccaron: [
		556,
		556,
		500,
		500,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	aring: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Ncommaaccent: [
		722,
		722,
		722,
		722,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	lacute: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	agrave: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Tcommaaccent: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	Cacute: [
		722,
		722,
		722,
		722,
		722,
		667,
		667,
		667,
		600,
		600,
		600,
		600
	],
	atilde: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Edotaccent: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	scaron: [
		556,
		556,
		500,
		500,
		389,
		389,
		389,
		389,
		600,
		600,
		600,
		600
	],
	scedilla: [
		556,
		556,
		500,
		500,
		389,
		389,
		389,
		389,
		600,
		600,
		600,
		600
	],
	iacute: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	lozenge: [
		494,
		494,
		471,
		471,
		494,
		494,
		471,
		471,
		600,
		600,
		600,
		600
	],
	Rcaron: [
		722,
		722,
		722,
		722,
		722,
		667,
		611,
		667,
		600,
		600,
		600,
		600
	],
	Gcommaaccent: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	ucircumflex: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	acircumflex: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	Amacron: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	rcaron: [
		389,
		389,
		333,
		333,
		444,
		389,
		389,
		333,
		600,
		600,
		600,
		600
	],
	ccedilla: [
		556,
		556,
		500,
		500,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	Zdotaccent: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	Thorn: [
		667,
		667,
		667,
		667,
		611,
		611,
		611,
		556,
		600,
		600,
		600,
		600
	],
	Omacron: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Racute: [
		722,
		722,
		722,
		722,
		722,
		667,
		611,
		667,
		600,
		600,
		600,
		600
	],
	Sacute: [
		667,
		667,
		667,
		667,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	dcaron: [
		743,
		743,
		643,
		643,
		672,
		608,
		544,
		588,
		600,
		600,
		600,
		600
	],
	Umacron: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	uring: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	threesuperior: [
		333,
		333,
		333,
		333,
		300,
		300,
		300,
		300,
		600,
		600,
		600,
		600
	],
	Ograve: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Agrave: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Abreve: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	multiply: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	uacute: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Tcaron: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	partialdiff: [
		494,
		494,
		476,
		476,
		494,
		494,
		476,
		476,
		600,
		600,
		600,
		600
	],
	ydieresis: [
		556,
		556,
		500,
		500,
		500,
		444,
		444,
		500,
		600,
		600,
		600,
		600
	],
	Nacute: [
		722,
		722,
		722,
		722,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	icircumflex: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	Ecircumflex: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	adieresis: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	edieresis: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	cacute: [
		556,
		556,
		500,
		500,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	nacute: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	umacron: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Ncaron: [
		722,
		722,
		722,
		722,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	Iacute: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	plusminus: [
		584,
		584,
		584,
		584,
		570,
		570,
		675,
		564,
		600,
		600,
		600,
		600
	],
	brokenbar: [
		280,
		280,
		260,
		260,
		220,
		220,
		275,
		200,
		600,
		600,
		600,
		600
	],
	registered: [
		737,
		737,
		737,
		737,
		747,
		747,
		760,
		760,
		600,
		600,
		600,
		600
	],
	Gbreve: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Idotaccent: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	summation: [
		600,
		600,
		600,
		600,
		600,
		600,
		600,
		600,
		600,
		600,
		600,
		600
	],
	Egrave: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	racute: [
		389,
		389,
		333,
		333,
		444,
		389,
		389,
		333,
		600,
		600,
		600,
		600
	],
	omacron: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Zacute: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	Zcaron: [
		611,
		611,
		611,
		611,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	greaterequal: [
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		600,
		600,
		600,
		600
	],
	Eth: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Ccedilla: [
		722,
		722,
		722,
		722,
		722,
		667,
		667,
		667,
		600,
		600,
		600,
		600
	],
	lcommaaccent: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	tcaron: [
		389,
		389,
		317,
		317,
		416,
		366,
		300,
		326,
		600,
		600,
		600,
		600
	],
	eogonek: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	Uogonek: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Aacute: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Adieresis: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	egrave: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	zacute: [
		500,
		500,
		500,
		500,
		444,
		389,
		389,
		444,
		600,
		600,
		600,
		600
	],
	iogonek: [
		278,
		278,
		222,
		222,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	Oacute: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	oacute: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	amacron: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		444,
		600,
		600,
		600,
		600
	],
	sacute: [
		556,
		556,
		500,
		500,
		389,
		389,
		389,
		389,
		600,
		600,
		600,
		600
	],
	idieresis: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	Ocircumflex: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Ugrave: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Delta: [
		612,
		612,
		612,
		612,
		612,
		612,
		612,
		612,
		600,
		600,
		600,
		600
	],
	thorn: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	twosuperior: [
		333,
		333,
		333,
		333,
		300,
		300,
		300,
		300,
		600,
		600,
		600,
		600
	],
	Odieresis: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	mu: [
		611,
		611,
		556,
		556,
		556,
		576,
		500,
		500,
		600,
		600,
		600,
		600
	],
	igrave: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	ohungarumlaut: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Eogonek: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	dcroat: [
		611,
		611,
		556,
		556,
		556,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	threequarters: [
		834,
		834,
		834,
		834,
		750,
		750,
		750,
		750,
		600,
		600,
		600,
		600
	],
	Scedilla: [
		667,
		667,
		667,
		667,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	lcaron: [
		400,
		400,
		299,
		299,
		394,
		382,
		300,
		344,
		600,
		600,
		600,
		600
	],
	Kcommaaccent: [
		722,
		722,
		667,
		667,
		778,
		667,
		667,
		722,
		600,
		600,
		600,
		600
	],
	Lacute: [
		611,
		611,
		556,
		556,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	trademark: [
		1000,
		1000,
		1000,
		1000,
		1000,
		1000,
		980,
		980,
		600,
		600,
		600,
		600
	],
	edotaccent: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	Igrave: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	Imacron: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	Lcaron: [
		611,
		611,
		556,
		556,
		667,
		611,
		611,
		611,
		600,
		600,
		600,
		600
	],
	onehalf: [
		834,
		834,
		834,
		834,
		750,
		750,
		750,
		750,
		600,
		600,
		600,
		600
	],
	lessequal: [
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		600,
		600,
		600,
		600
	],
	ocircumflex: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	ntilde: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Uhungarumlaut: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	Eacute: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	emacron: [
		556,
		556,
		556,
		556,
		444,
		444,
		444,
		444,
		600,
		600,
		600,
		600
	],
	gbreve: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	onequarter: [
		834,
		834,
		834,
		834,
		750,
		750,
		750,
		750,
		600,
		600,
		600,
		600
	],
	Scaron: [
		667,
		667,
		667,
		667,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	Scommaaccent: [
		667,
		667,
		667,
		667,
		556,
		556,
		500,
		556,
		600,
		600,
		600,
		600
	],
	Ohungarumlaut: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	degree: [
		400,
		400,
		400,
		400,
		400,
		400,
		400,
		400,
		600,
		600,
		600,
		600
	],
	ograve: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Ccaron: [
		722,
		722,
		722,
		722,
		722,
		667,
		667,
		667,
		600,
		600,
		600,
		600
	],
	ugrave: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	radical: [
		549,
		549,
		453,
		453,
		549,
		549,
		453,
		453,
		600,
		600,
		600,
		600
	],
	Dcaron: [
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	rcommaaccent: [
		389,
		389,
		333,
		333,
		444,
		389,
		389,
		333,
		600,
		600,
		600,
		600
	],
	Ntilde: [
		722,
		722,
		722,
		722,
		722,
		722,
		667,
		722,
		600,
		600,
		600,
		600
	],
	otilde: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	Rcommaaccent: [
		722,
		722,
		722,
		722,
		722,
		667,
		611,
		667,
		600,
		600,
		600,
		600
	],
	Lcommaaccent: [
		611,
		611,
		556,
		556,
		667,
		611,
		556,
		611,
		600,
		600,
		600,
		600
	],
	Atilde: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Aogonek: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Aring: [
		722,
		722,
		667,
		667,
		722,
		667,
		611,
		722,
		600,
		600,
		600,
		600
	],
	Otilde: [
		778,
		778,
		778,
		778,
		778,
		722,
		722,
		722,
		600,
		600,
		600,
		600
	],
	zdotaccent: [
		500,
		500,
		500,
		500,
		444,
		389,
		389,
		444,
		600,
		600,
		600,
		600
	],
	Ecaron: [
		667,
		667,
		667,
		667,
		667,
		667,
		611,
		611,
		600,
		600,
		600,
		600
	],
	Iogonek: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	kcommaaccent: [
		556,
		556,
		500,
		500,
		556,
		500,
		444,
		500,
		600,
		600,
		600,
		600
	],
	minus: [
		584,
		584,
		584,
		584,
		570,
		606,
		675,
		564,
		600,
		600,
		600,
		600
	],
	Icircumflex: [
		278,
		278,
		278,
		278,
		389,
		389,
		333,
		333,
		600,
		600,
		600,
		600
	],
	ncaron: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	tcommaaccent: [
		333,
		333,
		278,
		278,
		333,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	logicalnot: [
		584,
		584,
		584,
		584,
		570,
		606,
		675,
		564,
		600,
		600,
		600,
		600
	],
	odieresis: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	udieresis: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	notequal: [
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		549,
		600,
		600,
		600,
		600
	],
	gcommaaccent: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	eth: [
		611,
		611,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	],
	zcaron: [
		500,
		500,
		500,
		500,
		444,
		389,
		389,
		444,
		600,
		600,
		600,
		600
	],
	ncommaaccent: [
		611,
		611,
		556,
		556,
		556,
		556,
		500,
		500,
		600,
		600,
		600,
		600
	],
	onesuperior: [
		333,
		333,
		333,
		333,
		300,
		300,
		300,
		300,
		600,
		600,
		600,
		600
	],
	imacron: [
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		278,
		600,
		600,
		600,
		600
	],
	Euro: [
		556,
		556,
		556,
		556,
		500,
		500,
		500,
		500,
		600,
		600,
		600,
		600
	]
};
var kernPairs = {
	AC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	ACacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	ACcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	ACcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	ATcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	ATcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Au: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Auacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Audieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Augrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Auhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Auogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Auring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Av: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Aw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Ay: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Ayacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Aydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AacuteC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AacuteCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AacuteCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AacuteCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AacuteG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AacuteGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AacuteGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AacuteO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AacuteQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AacuteT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AacuteTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AacuteTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AacuteU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AacuteV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AacuteW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AacuteY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AacuteYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AacuteYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Aacuteu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacuteuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aacutev: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Aacutew: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Aacutey: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Aacuteyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Aacuteydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AbreveC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AbreveCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AbreveCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AbreveCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AbreveG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AbreveGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AbreveGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AbreveO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AbreveQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AbreveT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AbreveTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AbreveTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AbreveU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AbreveV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AbreveW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AbreveY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AbreveYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AbreveYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Abreveu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abreveuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Abrevev: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Abrevew: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Abrevey: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Abreveyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Abreveydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AcircumflexC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AcircumflexCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AcircumflexCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AcircumflexCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AcircumflexG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AcircumflexGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AcircumflexGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AcircumflexO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AcircumflexQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AcircumflexT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AcircumflexTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AcircumflexTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AcircumflexU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AcircumflexV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AcircumflexW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AcircumflexY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AcircumflexYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AcircumflexYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Acircumflexu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Acircumflexv: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Acircumflexw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Acircumflexy: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Acircumflexyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Acircumflexydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AdieresisC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AdieresisCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AdieresisCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AdieresisCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AdieresisG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AdieresisGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AdieresisGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AdieresisO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AdieresisQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AdieresisT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AdieresisTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AdieresisTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AdieresisU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AdieresisV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AdieresisW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AdieresisY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AdieresisYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AdieresisYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Adieresisu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Adieresisv: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Adieresisw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Adieresisy: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Adieresisyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Adieresisydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AgraveC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AgraveCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AgraveCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AgraveCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AgraveG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AgraveGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AgraveGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AgraveO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AgraveQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AgraveT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AgraveTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AgraveTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AgraveU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AgraveV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AgraveW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AgraveY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AgraveYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AgraveYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Agraveu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agraveuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Agravev: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Agravew: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Agravey: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Agraveyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Agraveydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AmacronC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AmacronCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AmacronCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AmacronCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AmacronG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AmacronGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AmacronGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AmacronO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AmacronQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AmacronT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AmacronTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AmacronTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AmacronU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AmacronV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AmacronW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AmacronY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AmacronYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AmacronYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Amacronu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Amacronv: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Amacronw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Amacrony: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Amacronyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Amacronydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AogonekC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AogonekCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AogonekCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AogonekCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AogonekG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AogonekGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AogonekGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AogonekO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AogonekQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AogonekT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AogonekTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AogonekTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AogonekU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AogonekV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AogonekW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AogonekY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AogonekYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AogonekYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Aogoneku: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aogonekv: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Aogonekw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-52
	],
	Aogoneky: [
		-30,
		-30,
		-40,
		-40,
		-34,
		-34,
		-55,
		-52
	],
	Aogonekyacute: [
		-30,
		-30,
		-40,
		-40,
		-34,
		-34,
		-55,
		-52
	],
	Aogonekydieresis: [
		-30,
		-30,
		-40,
		-40,
		-34,
		-34,
		-55,
		-52
	],
	AringC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AringCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AringCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AringCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AringG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AringGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AringGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AringO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AringQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AringT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AringTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AringTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AringU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AringV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AringW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AringY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AringYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AringYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Aringu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Aringv: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Aringw: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Aringy: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Aringyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Aringydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	AtildeC: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AtildeCacute: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AtildeCcaron: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AtildeCcedilla: [
		-40,
		-40,
		-30,
		-30,
		-55,
		-65,
		-30,
		-40
	],
	AtildeG: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AtildeGbreve: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AtildeGcommaaccent: [
		-50,
		-50,
		-30,
		-30,
		-55,
		-60,
		-35,
		-40
	],
	AtildeO: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOacute: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOcircumflex: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOdieresis: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOgrave: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOhungarumlaut: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOmacron: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOslash: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeOtilde: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-50,
		-40,
		-55
	],
	AtildeQ: [
		-40,
		-40,
		-30,
		-30,
		-45,
		-55,
		-40,
		-55
	],
	AtildeT: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AtildeTcaron: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AtildeTcommaaccent: [
		-90,
		-90,
		-120,
		-120,
		-95,
		-55,
		-37,
		-111
	],
	AtildeU: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUacute: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUcircumflex: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUdieresis: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUgrave: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUhungarumlaut: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUmacron: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUogonek: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeUring: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-55
	],
	AtildeV: [
		-80,
		-80,
		-70,
		-70,
		-145,
		-95,
		-105,
		-135
	],
	AtildeW: [
		-60,
		-60,
		-50,
		-50,
		-130,
		-100,
		-95,
		-90
	],
	AtildeY: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AtildeYacute: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	AtildeYdieresis: [
		-110,
		-110,
		-100,
		-100,
		-100,
		-70,
		-55,
		-105
	],
	Atildeu: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeuacute: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeudieresis: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeugrave: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeumacron: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeuogonek: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildeuring: [
		-30,
		-30,
		-30,
		-30,
		-50,
		-30,
		-20
	],
	Atildev: [
		-40,
		-40,
		-40,
		-40,
		-100,
		-74,
		-55,
		-74
	],
	Atildew: [
		-30,
		-30,
		-40,
		-40,
		-90,
		-74,
		-55,
		-92
	],
	Atildey: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Atildeyacute: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	Atildeydieresis: [
		-30,
		-30,
		-40,
		-40,
		-74,
		-74,
		-55,
		-92
	],
	BA: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAacute: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAbreve: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAcircumflex: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAdieresis: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAgrave: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAmacron: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAogonek: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAring: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BAtilde: [
		-30,
		-30,
		0,
		0,
		-30,
		-25,
		-25,
		-35
	],
	BU: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUacute: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUcircumflex: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUdieresis: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUgrave: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUhungarumlaut: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUmacron: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUogonek: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	BUring: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	DA: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAacute: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAbreve: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAdieresis: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAgrave: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAmacron: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAogonek: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAring: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DAtilde: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DV: [
		-40,
		-40,
		-70,
		-70,
		-40,
		-50,
		-40,
		-40
	],
	DW: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-30
	],
	DY: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DYacute: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DYdieresis: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	Dcomma: [
		-30,
		-30,
		-70,
		-70
	],
	Dperiod: [
		-30,
		-30,
		-70,
		-70,
		-20
	],
	DcaronA: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAacute: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAbreve: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAdieresis: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAgrave: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAmacron: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAogonek: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAring: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronAtilde: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcaronV: [
		-40,
		-40,
		-70,
		-70,
		-40,
		-50,
		-40,
		-40
	],
	DcaronW: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-30
	],
	DcaronY: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DcaronYacute: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DcaronYdieresis: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	Dcaroncomma: [
		-30,
		-30,
		-70,
		-70
	],
	Dcaronperiod: [
		-30,
		-30,
		-70,
		-70,
		-20
	],
	DcroatA: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAacute: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAbreve: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAdieresis: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAgrave: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAmacron: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAogonek: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAring: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatAtilde: [
		-40,
		-40,
		-40,
		-40,
		-35,
		-25,
		-35,
		-40
	],
	DcroatV: [
		-40,
		-40,
		-70,
		-70,
		-40,
		-50,
		-40,
		-40
	],
	DcroatW: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-30
	],
	DcroatY: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DcroatYacute: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	DcroatYdieresis: [
		-70,
		-70,
		-90,
		-90,
		-40,
		-50,
		-40,
		-55
	],
	Dcroatcomma: [
		-30,
		-30,
		-70,
		-70
	],
	Dcroatperiod: [
		-30,
		-30,
		-70,
		-70,
		-20
	],
	FA: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAacute: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAbreve: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAcircumflex: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAdieresis: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAgrave: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAmacron: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAogonek: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAring: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	FAtilde: [
		-80,
		-80,
		-80,
		-80,
		-90,
		-100,
		-115,
		-74
	],
	Fa: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Faacute: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Fabreve: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Facircumflex: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Fadieresis: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Fagrave: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Famacron: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Faogonek: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Faring: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Fatilde: [
		-20,
		-20,
		-50,
		-50,
		-25,
		-95,
		-75,
		-15
	],
	Fcomma: [
		-100,
		-100,
		-150,
		-150,
		-92,
		-129,
		-135,
		-80
	],
	Fperiod: [
		-100,
		-100,
		-150,
		-150,
		-110,
		-129,
		-135,
		-80
	],
	JA: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAacute: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAbreve: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAdieresis: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAgrave: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAmacron: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAogonek: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAring: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	JAtilde: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-25,
		-40,
		-60
	],
	Jcomma: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		-25
	],
	Jperiod: [
		-20,
		-20,
		-30,
		-30,
		-20,
		-10,
		-25
	],
	Ju: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Juacute: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jucircumflex: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Judieresis: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jugrave: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Juhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jumacron: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Juogonek: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Juring: [
		-20,
		-20,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	KO: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOacute: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOcircumflex: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOdieresis: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOgrave: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOhungarumlaut: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOmacron: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOslash: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KOtilde: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	Ke: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Keacute: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kecaron: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kecircumflex: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kedieresis: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kedotaccent: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kegrave: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kemacron: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Keogonek: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Ko: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Koacute: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kocircumflex: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kodieresis: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kograve: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kohungarumlaut: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Komacron: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Koslash: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kotilde: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Ku: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kuacute: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kudieresis: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kugrave: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kumacron: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kuogonek: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kuring: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Ky: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	Kyacute: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	Kydieresis: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	KcommaaccentO: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOacute: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOcircumflex: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOdieresis: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOgrave: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOhungarumlaut: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOmacron: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOslash: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	KcommaaccentOtilde: [
		-30,
		-30,
		-50,
		-50,
		-30,
		-30,
		-50,
		-30
	],
	Kcommaaccente: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccenteacute: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentecaron: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentecircumflex: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentedieresis: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentedotaccent: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentegrave: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccentemacron: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccenteogonek: [
		-15,
		-15,
		-40,
		-40,
		-25,
		-25,
		-35,
		-25
	],
	Kcommaaccento: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentoacute: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentocircumflex: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentodieresis: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentograve: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentohungarumlaut: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentomacron: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentoslash: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentotilde: [
		-35,
		-35,
		-40,
		-40,
		-25,
		-25,
		-40,
		-35
	],
	Kcommaaccentu: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentuacute: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentucircumflex: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentudieresis: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentugrave: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentuhungarumlaut: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentumacron: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccentuogonek: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccenturing: [
		-30,
		-30,
		-30,
		-30,
		-15,
		-20,
		-40,
		-15
	],
	Kcommaaccenty: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	Kcommaaccentyacute: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	Kcommaaccentydieresis: [
		-40,
		-40,
		-50,
		-50,
		-45,
		-20,
		-40,
		-25
	],
	LT: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LTcaron: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LTcommaaccent: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LV: [
		-110,
		-110,
		-110,
		-110,
		-92,
		-37,
		-55,
		-100
	],
	LW: [
		-80,
		-80,
		-70,
		-70,
		-92,
		-37,
		-55,
		-74
	],
	LY: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LYacute: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LYdieresis: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	Lquotedblright: [
		-140,
		-140,
		-140,
		-140,
		-20
	],
	Lquoteright: [
		-140,
		-140,
		-160,
		-160,
		-110,
		-55,
		-37,
		-92
	],
	Ly: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lyacute: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lydieresis: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	LacuteT: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LacuteTcaron: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LacuteTcommaaccent: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LacuteV: [
		-110,
		-110,
		-110,
		-110,
		-92,
		-37,
		-55,
		-100
	],
	LacuteW: [
		-80,
		-80,
		-70,
		-70,
		-92,
		-37,
		-55,
		-74
	],
	LacuteY: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LacuteYacute: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LacuteYdieresis: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	Lacutequotedblright: [
		-140,
		-140,
		-140,
		-140,
		-20
	],
	Lacutequoteright: [
		-140,
		-140,
		-160,
		-160,
		-110,
		-55,
		-37,
		-92
	],
	Lacutey: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lacuteyacute: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lacuteydieresis: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	LcommaaccentT: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LcommaaccentTcaron: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LcommaaccentTcommaaccent: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LcommaaccentV: [
		-110,
		-110,
		-110,
		-110,
		-92,
		-37,
		-55,
		-100
	],
	LcommaaccentW: [
		-80,
		-80,
		-70,
		-70,
		-92,
		-37,
		-55,
		-74
	],
	LcommaaccentY: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LcommaaccentYacute: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LcommaaccentYdieresis: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	Lcommaaccentquotedblright: [
		-140,
		-140,
		-140,
		-140,
		-20
	],
	Lcommaaccentquoteright: [
		-140,
		-140,
		-160,
		-160,
		-110,
		-55,
		-37,
		-92
	],
	Lcommaaccenty: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lcommaaccentyacute: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lcommaaccentydieresis: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	LslashT: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LslashTcaron: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LslashTcommaaccent: [
		-90,
		-90,
		-110,
		-110,
		-92,
		-18,
		-20,
		-92
	],
	LslashV: [
		-110,
		-110,
		-110,
		-110,
		-92,
		-37,
		-55,
		-100
	],
	LslashW: [
		-80,
		-80,
		-70,
		-70,
		-92,
		-37,
		-55,
		-74
	],
	LslashY: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LslashYacute: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	LslashYdieresis: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-37,
		-20,
		-100
	],
	Lslashquotedblright: [
		-140,
		-140,
		-140,
		-140,
		-20
	],
	Lslashquoteright: [
		-140,
		-140,
		-160,
		-160,
		-110,
		-55,
		-37,
		-92
	],
	Lslashy: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lslashyacute: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	Lslashydieresis: [
		-30,
		-30,
		-30,
		-30,
		-55,
		-37,
		-30,
		-55
	],
	OA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Ocomma: [
		-40,
		-40,
		-40,
		-40
	],
	Operiod: [
		-40,
		-40,
		-40,
		-40
	],
	OacuteA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OacuteT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OacuteTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OacuteTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OacuteV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OacuteW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OacuteX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OacuteY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OacuteYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OacuteYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Oacutecomma: [
		-40,
		-40,
		-40,
		-40
	],
	Oacuteperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OcircumflexA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OcircumflexT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OcircumflexTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OcircumflexTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OcircumflexV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OcircumflexW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OcircumflexX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OcircumflexY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OcircumflexYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OcircumflexYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Ocircumflexcomma: [
		-40,
		-40,
		-40,
		-40
	],
	Ocircumflexperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OdieresisA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OdieresisT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OdieresisTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OdieresisTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OdieresisV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OdieresisW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OdieresisX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OdieresisY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OdieresisYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OdieresisYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Odieresiscomma: [
		-40,
		-40,
		-40,
		-40
	],
	Odieresisperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OgraveA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OgraveT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OgraveTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OgraveTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OgraveV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OgraveW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OgraveX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OgraveY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OgraveYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OgraveYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Ogravecomma: [
		-40,
		-40,
		-40,
		-40
	],
	Ograveperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OhungarumlautA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OhungarumlautT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OhungarumlautTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OhungarumlautTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OhungarumlautV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OhungarumlautW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OhungarumlautX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OhungarumlautY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OhungarumlautYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OhungarumlautYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Ohungarumlautcomma: [
		-40,
		-40,
		-40,
		-40
	],
	Ohungarumlautperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OmacronA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OmacronT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OmacronTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OmacronTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OmacronV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OmacronW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OmacronX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OmacronY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OmacronYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OmacronYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Omacroncomma: [
		-40,
		-40,
		-40,
		-40
	],
	Omacronperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OslashA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OslashT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OslashTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OslashTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OslashV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OslashW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OslashX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OslashY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OslashYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OslashYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Oslashcomma: [
		-40,
		-40,
		-40,
		-40
	],
	Oslashperiod: [
		-40,
		-40,
		-40,
		-40
	],
	OtildeA: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAacute: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAbreve: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAcircumflex: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAdieresis: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAgrave: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAmacron: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAogonek: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAring: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeAtilde: [
		-50,
		-50,
		-20,
		-20,
		-40,
		-40,
		-55,
		-35
	],
	OtildeT: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OtildeTcaron: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OtildeTcommaaccent: [
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	OtildeV: [
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50,
		-50
	],
	OtildeW: [
		-50,
		-50,
		-30,
		-30,
		-50,
		-50,
		-50,
		-35
	],
	OtildeX: [
		-50,
		-50,
		-60,
		-60,
		-40,
		-40,
		-40,
		-40
	],
	OtildeY: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OtildeYacute: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	OtildeYdieresis: [
		-70,
		-70,
		-70,
		-70,
		-50,
		-50,
		-50,
		-50
	],
	Otildecomma: [
		-40,
		-40,
		-40,
		-40
	],
	Otildeperiod: [
		-40,
		-40,
		-40,
		-40
	],
	PA: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAacute: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAbreve: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAcircumflex: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAdieresis: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAgrave: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAmacron: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAogonek: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAring: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	PAtilde: [
		-100,
		-100,
		-120,
		-120,
		-74,
		-85,
		-90,
		-92
	],
	Pa: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Paacute: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Pabreve: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Pacircumflex: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Padieresis: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Pagrave: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Pamacron: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Paogonek: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Paring: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Patilde: [
		-30,
		-30,
		-40,
		-40,
		-10,
		-40,
		-80,
		-15
	],
	Pcomma: [
		-120,
		-120,
		-180,
		-180,
		-92,
		-129,
		-135,
		-111
	],
	Pe: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Peacute: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pecaron: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pecircumflex: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pedieresis: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pedotaccent: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pegrave: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Pemacron: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Peogonek: [
		-30,
		-30,
		-50,
		-50,
		-20,
		-50,
		-80
	],
	Po: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Poacute: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Pocircumflex: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Podieresis: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Pograve: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Pohungarumlaut: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Pomacron: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Poslash: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Potilde: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-55,
		-80
	],
	Pperiod: [
		-120,
		-120,
		-180,
		-180,
		-110,
		-129,
		-135,
		-111
	],
	QU: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUacute: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUcircumflex: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUdieresis: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUgrave: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUhungarumlaut: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUmacron: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUogonek: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	QUring: [
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10,
		-10
	],
	Qcomma: [
		20,
		20
	],
	Qperiod: [
		20,
		20,
		0,
		0,
		-20
	],
	RO: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROacute: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROdieresis: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROgrave: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROmacron: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROslash: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	ROtilde: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RT: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RTcaron: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RTcommaaccent: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RU: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUacute: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUcircumflex: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUdieresis: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUgrave: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUhungarumlaut: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUmacron: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUogonek: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RUring: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RV: [
		-50,
		-50,
		-50,
		-50,
		-55,
		-18,
		-18,
		-80
	],
	RW: [
		-40,
		-40,
		-30,
		-30,
		-35,
		-18,
		-18,
		-55
	],
	RY: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RYacute: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RYdieresis: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RacuteO: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOacute: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOdieresis: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOgrave: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOmacron: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOslash: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteOtilde: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RacuteT: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RacuteTcaron: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RacuteTcommaaccent: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RacuteU: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUacute: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUcircumflex: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUdieresis: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUgrave: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUhungarumlaut: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUmacron: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUogonek: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteUring: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RacuteV: [
		-50,
		-50,
		-50,
		-50,
		-55,
		-18,
		-18,
		-80
	],
	RacuteW: [
		-40,
		-40,
		-30,
		-30,
		-35,
		-18,
		-18,
		-55
	],
	RacuteY: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RacuteYacute: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RacuteYdieresis: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcaronO: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOacute: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOdieresis: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOgrave: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOmacron: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOslash: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronOtilde: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcaronT: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcaronTcaron: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcaronTcommaaccent: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcaronU: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUacute: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUcircumflex: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUdieresis: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUgrave: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUhungarumlaut: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUmacron: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUogonek: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronUring: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcaronV: [
		-50,
		-50,
		-50,
		-50,
		-55,
		-18,
		-18,
		-80
	],
	RcaronW: [
		-40,
		-40,
		-30,
		-30,
		-35,
		-18,
		-18,
		-55
	],
	RcaronY: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcaronYacute: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcaronYdieresis: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcommaaccentO: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOacute: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOdieresis: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOgrave: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOmacron: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOslash: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentOtilde: [
		-20,
		-20,
		-20,
		-20,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentT: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcommaaccentTcaron: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcommaaccentTcommaaccent: [
		-20,
		-20,
		-30,
		-30,
		-40,
		-30,
		0,
		-60
	],
	RcommaaccentU: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUacute: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUcircumflex: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUdieresis: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUgrave: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUhungarumlaut: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUmacron: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUogonek: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentUring: [
		-20,
		-20,
		-40,
		-40,
		-30,
		-40,
		-40,
		-40
	],
	RcommaaccentV: [
		-50,
		-50,
		-50,
		-50,
		-55,
		-18,
		-18,
		-80
	],
	RcommaaccentW: [
		-40,
		-40,
		-30,
		-30,
		-35,
		-18,
		-18,
		-55
	],
	RcommaaccentY: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcommaaccentYacute: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	RcommaaccentYdieresis: [
		-50,
		-50,
		-50,
		-50,
		-35,
		-18,
		-18,
		-65
	],
	TA: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAacute: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAbreve: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAcircumflex: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAdieresis: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAgrave: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAmacron: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAogonek: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAring: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TAtilde: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TO: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOacute: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOdieresis: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOgrave: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOhungarumlaut: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOmacron: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOslash: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TOtilde: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	Ta: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Taacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tabreve: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-80
	],
	Tacircumflex: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-80
	],
	Tadieresis: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tagrave: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tamacron: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Taogonek: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Taring: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tatilde: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Tcolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-55,
		-50
	],
	Tcomma: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-92,
		-74,
		-74
	],
	Te: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Teacute: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tecaron: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tecircumflex: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-52,
		-70
	],
	Tedieresis: [
		-60,
		-60,
		-120,
		-120,
		-52,
		-52,
		-52,
		-30
	],
	Tedotaccent: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tegrave: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-70
	],
	Temacron: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-30
	],
	Teogonek: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Thyphen: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-92,
		-74,
		-92
	],
	To: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Toacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tocircumflex: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Todieresis: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tograve: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tohungarumlaut: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tomacron: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Toslash: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Totilde: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Tperiod: [
		-80,
		-80,
		-120,
		-120,
		-90,
		-92,
		-74,
		-74
	],
	Tr: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tracute: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Trcommaaccent: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tsemicolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-65,
		-55
	],
	Tu: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tuacute: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tucircumflex: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tudieresis: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tugrave: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tuhungarumlaut: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tumacron: [
		-90,
		-90,
		-60,
		-60,
		-92,
		-37,
		-55,
		-45
	],
	Tuogonek: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Turing: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tw: [
		-60,
		-60,
		-120,
		-120,
		-74,
		-37,
		-74,
		-80
	],
	Ty: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tyacute: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tydieresis: [
		-60,
		-60,
		-60,
		-60,
		-34,
		-37,
		-34,
		-80
	],
	TcaronA: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAacute: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAbreve: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAcircumflex: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAdieresis: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAgrave: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAmacron: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAogonek: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAring: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronAtilde: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcaronO: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOacute: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOdieresis: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOgrave: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOhungarumlaut: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOmacron: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOslash: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcaronOtilde: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	Tcarona: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcaronaacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcaronabreve: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-80
	],
	Tcaronacircumflex: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-80
	],
	Tcaronadieresis: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tcaronagrave: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tcaronamacron: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Tcaronaogonek: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcaronaring: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcaronatilde: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Tcaroncolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-55,
		-50
	],
	Tcaroncomma: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-92,
		-74,
		-74
	],
	Tcarone: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcaroneacute: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcaronecaron: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcaronecircumflex: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-52,
		-30
	],
	Tcaronedieresis: [
		-60,
		-60,
		-120,
		-120,
		-52,
		-52,
		-52,
		-30
	],
	Tcaronedotaccent: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcaronegrave: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-70
	],
	Tcaronemacron: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-30
	],
	Tcaroneogonek: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcaronhyphen: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-92,
		-74,
		-92
	],
	Tcarono: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronoacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronocircumflex: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronodieresis: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronograve: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronohungarumlaut: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronomacron: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronoslash: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronotilde: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Tcaronperiod: [
		-80,
		-80,
		-120,
		-120,
		-90,
		-92,
		-74,
		-74
	],
	Tcaronr: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcaronracute: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcaronrcommaaccent: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcaronsemicolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-65,
		-55
	],
	Tcaronu: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronuacute: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronucircumflex: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronudieresis: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronugrave: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronuhungarumlaut: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronumacron: [
		-90,
		-90,
		-60,
		-60,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronuogonek: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronuring: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcaronw: [
		-60,
		-60,
		-120,
		-120,
		-74,
		-37,
		-74,
		-80
	],
	Tcarony: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tcaronyacute: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tcaronydieresis: [
		-60,
		-60,
		-60,
		-60,
		-34,
		-37,
		-34,
		-80
	],
	TcommaaccentA: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAacute: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAbreve: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAcircumflex: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAdieresis: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAgrave: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAmacron: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAogonek: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAring: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentAtilde: [
		-90,
		-90,
		-120,
		-120,
		-90,
		-55,
		-50,
		-93
	],
	TcommaaccentO: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOacute: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOcircumflex: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOdieresis: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOgrave: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOhungarumlaut: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOmacron: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOslash: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	TcommaaccentOtilde: [
		-40,
		-40,
		-40,
		-40,
		-18,
		-18,
		-18,
		-18
	],
	Tcommaaccenta: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcommaaccentaacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcommaaccentabreve: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-80
	],
	Tcommaaccentacircumflex: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-80
	],
	Tcommaaccentadieresis: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tcommaaccentagrave: [
		-80,
		-80,
		-120,
		-120,
		-52,
		-92,
		-92,
		-40
	],
	Tcommaaccentamacron: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Tcommaaccentaogonek: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcommaaccentaring: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-92,
		-92,
		-80
	],
	Tcommaaccentatilde: [
		-80,
		-80,
		-60,
		-60,
		-52,
		-92,
		-92,
		-40
	],
	Tcommaaccentcolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-55,
		-50
	],
	Tcommaaccentcomma: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-92,
		-74,
		-74
	],
	Tcommaaccente: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcommaaccenteacute: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcommaaccentecaron: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcommaaccentecircumflex: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-52,
		-30
	],
	Tcommaaccentedieresis: [
		-60,
		-60,
		-120,
		-120,
		-52,
		-52,
		-52,
		-30
	],
	Tcommaaccentedotaccent: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcommaaccentegrave: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-30
	],
	Tcommaaccentemacron: [
		-60,
		-60,
		-60,
		-60,
		-52,
		-52,
		-52,
		-70
	],
	Tcommaaccenteogonek: [
		-60,
		-60,
		-120,
		-120,
		-92,
		-92,
		-92,
		-70
	],
	Tcommaaccenthyphen: [
		-120,
		-120,
		-140,
		-140,
		-92,
		-92,
		-74,
		-92
	],
	Tcommaaccento: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentoacute: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentocircumflex: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentodieresis: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentograve: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentohungarumlaut: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentomacron: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentoslash: [
		-80,
		-80,
		-120,
		-120,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentotilde: [
		-80,
		-80,
		-60,
		-60,
		-92,
		-95,
		-92,
		-80
	],
	Tcommaaccentperiod: [
		-80,
		-80,
		-120,
		-120,
		-90,
		-92,
		-74,
		-74
	],
	Tcommaaccentr: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcommaaccentracute: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcommaaccentrcommaaccent: [
		-80,
		-80,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcommaaccentsemicolon: [
		-40,
		-40,
		-20,
		-20,
		-74,
		-74,
		-65,
		-55
	],
	Tcommaaccentu: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentuacute: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentucircumflex: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentudieresis: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentugrave: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentuhungarumlaut: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentumacron: [
		-90,
		-90,
		-60,
		-60,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentuogonek: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccenturing: [
		-90,
		-90,
		-120,
		-120,
		-92,
		-37,
		-55,
		-45
	],
	Tcommaaccentw: [
		-60,
		-60,
		-120,
		-120,
		-74,
		-37,
		-74,
		-80
	],
	Tcommaaccenty: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tcommaaccentyacute: [
		-60,
		-60,
		-120,
		-120,
		-34,
		-37,
		-74,
		-80
	],
	Tcommaaccentydieresis: [
		-60,
		-60,
		-60,
		-60,
		-34,
		-37,
		-34,
		-80
	],
	UA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Ucomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Uperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UacuteA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UacuteAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Uacutecomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Uacuteperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UcircumflexA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UcircumflexAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Ucircumflexcomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Ucircumflexperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UdieresisA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UdieresisAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Udieresiscomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Udieresisperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UgraveA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UgraveAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Ugravecomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Ugraveperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UhungarumlautA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UhungarumlautAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Uhungarumlautcomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Uhungarumlautperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UmacronA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UmacronAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Umacroncomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Umacronperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UogonekA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UogonekAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Uogonekcomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Uogonekperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	UringA: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAacute: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAbreve: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAdieresis: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAgrave: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAmacron: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAogonek: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAring: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	UringAtilde: [
		-50,
		-50,
		-40,
		-40,
		-60,
		-45,
		-40,
		-40
	],
	Uringcomma: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	Uringperiod: [
		-30,
		-30,
		-40,
		-40,
		-50,
		0,
		-25
	],
	VA: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAacute: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAbreve: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAcircumflex: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAdieresis: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAgrave: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAmacron: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAogonek: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAring: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VAtilde: [
		-80,
		-80,
		-80,
		-80,
		-135,
		-85,
		-60,
		-135
	],
	VG: [
		-50,
		-50,
		-40,
		-40,
		-30,
		-10,
		0,
		-15
	],
	VGbreve: [
		-50,
		-50,
		-40,
		-40,
		-30,
		-10,
		0,
		-15
	],
	VGcommaaccent: [
		-50,
		-50,
		-40,
		-40,
		-30,
		-10,
		0,
		-15
	],
	VO: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOacute: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOcircumflex: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOdieresis: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOgrave: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOhungarumlaut: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOmacron: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOslash: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	VOtilde: [
		-50,
		-50,
		-40,
		-40,
		-45,
		-30,
		-30,
		-40
	],
	Va: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-111
	],
	Vaacute: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-111
	],
	Vabreve: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-111
	],
	Vacircumflex: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-71
	],
	Vadieresis: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-71
	],
	Vagrave: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-71
	],
	Vamacron: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-71
	],
	Vaogonek: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-111
	],
	Varing: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-111
	],
	Vatilde: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-111,
		-111,
		-71
	],
	Vcolon: [
		-40,
		-40,
		-40,
		-40,
		-92,
		-74,
		-65,
		-74
	],
	Vcomma: [
		-120,
		-120,
		-125,
		-125,
		-129,
		-129,
		-129,
		-129
	],
	Ve: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-111
	],
	Veacute: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-111
	],
	Vecaron: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-71
	],
	Vecircumflex: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-71
	],
	Vedieresis: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-71,
		-71,
		-71
	],
	Vedotaccent: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-111
	],
	Vegrave: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-71,
		-71,
		-71
	],
	Vemacron: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-71,
		-71,
		-71
	],
	Veogonek: [
		-50,
		-50,
		-80,
		-80,
		-100,
		-111,
		-111,
		-111
	],
	Vhyphen: [
		-80,
		-80,
		-80,
		-80,
		-74,
		-70,
		-55,
		-100
	],
	Vo: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-129
	],
	Voacute: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-129
	],
	Vocircumflex: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-129
	],
	Vodieresis: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-89
	],
	Vograve: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-89
	],
	Vohungarumlaut: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-129
	],
	Vomacron: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-89
	],
	Voslash: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-129
	],
	Votilde: [
		-90,
		-90,
		-80,
		-80,
		-100,
		-111,
		-111,
		-89
	],
	Vperiod: [
		-120,
		-120,
		-125,
		-125,
		-145,
		-129,
		-129,
		-129
	],
	Vsemicolon: [
		-40,
		-40,
		-40,
		-40,
		-92,
		-74,
		-74,
		-74
	],
	Vu: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vuacute: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vucircumflex: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vudieresis: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vugrave: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vuhungarumlaut: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vumacron: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vuogonek: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	Vuring: [
		-60,
		-60,
		-70,
		-70,
		-92,
		-55,
		-74,
		-75
	],
	WA: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAacute: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAbreve: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAcircumflex: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAdieresis: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAgrave: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAmacron: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAogonek: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAring: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WAtilde: [
		-60,
		-60,
		-50,
		-50,
		-120,
		-74,
		-60,
		-120
	],
	WO: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOacute: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOcircumflex: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOdieresis: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOgrave: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOmacron: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOslash: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	WOtilde: [
		-20,
		-20,
		-20,
		-20,
		-10,
		-15,
		-25,
		-10
	],
	Wa: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Waacute: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wabreve: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wacircumflex: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wadieresis: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wagrave: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wamacron: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Waogonek: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Waring: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Watilde: [
		-40,
		-40,
		-40,
		-40,
		-65,
		-85,
		-92,
		-80
	],
	Wcolon: [
		-10,
		-10,
		0,
		0,
		-55,
		-55,
		-65,
		-37
	],
	Wcomma: [
		-80,
		-80,
		-80,
		-80,
		-92,
		-74,
		-92,
		-92
	],
	We: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Weacute: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Wecaron: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Wecircumflex: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Wedieresis: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-50,
		-52,
		-40
	],
	Wedotaccent: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Wegrave: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-50,
		-52,
		-40
	],
	Wemacron: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-50,
		-52,
		-40
	],
	Weogonek: [
		-35,
		-35,
		-30,
		-30,
		-65,
		-90,
		-92,
		-80
	],
	Whyphen: [
		-40,
		-40,
		-40,
		-40,
		-37,
		-50,
		-37,
		-65
	],
	Wo: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Woacute: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wocircumflex: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wodieresis: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wograve: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wohungarumlaut: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Womacron: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Woslash: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wotilde: [
		-60,
		-60,
		-30,
		-30,
		-75,
		-80,
		-92,
		-80
	],
	Wperiod: [
		-80,
		-80,
		-80,
		-80,
		-92,
		-74,
		-92,
		-92
	],
	Wsemicolon: [
		-10,
		-10,
		0,
		0,
		-55,
		-55,
		-65,
		-37
	],
	Wu: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wuacute: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wucircumflex: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wudieresis: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wugrave: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wuhungarumlaut: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wumacron: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wuogonek: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wuring: [
		-45,
		-45,
		-30,
		-30,
		-50,
		-55,
		-55,
		-50
	],
	Wy: [
		-20,
		-20,
		-20,
		-20,
		-60,
		-55,
		-70,
		-73
	],
	Wyacute: [
		-20,
		-20,
		-20,
		-20,
		-60,
		-55,
		-70,
		-73
	],
	Wydieresis: [
		-20,
		-20,
		-20,
		-20,
		-60,
		-55,
		-70,
		-73
	],
	YA: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAacute: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAbreve: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAcircumflex: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAdieresis: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAgrave: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAmacron: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAogonek: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAring: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YAtilde: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YO: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOacute: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOcircumflex: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOdieresis: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOgrave: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOhungarumlaut: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOmacron: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOslash: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YOtilde: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	Ya: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yaacute: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yabreve: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-100
	],
	Yacircumflex: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yadieresis: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Yagrave: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Yamacron: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-60
	],
	Yaogonek: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yaring: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yatilde: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Ycolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Ycomma: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-92,
		-92,
		-129
	],
	Ye: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yeacute: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yecaron: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yecircumflex: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-71,
		-92,
		-100
	],
	Yedieresis: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Yedotaccent: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yegrave: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Yemacron: [
		-80,
		-80,
		-70,
		-70,
		-71,
		-71,
		-52,
		-60
	],
	Yeogonek: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yo: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yoacute: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yocircumflex: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yodieresis: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yograve: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yohungarumlaut: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yomacron: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yoslash: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yotilde: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yperiod: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-74,
		-92,
		-129
	],
	Ysemicolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Yu: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yuacute: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yucircumflex: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yudieresis: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yugrave: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yuhungarumlaut: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yumacron: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yuogonek: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yuring: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	YacuteA: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAacute: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAbreve: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAcircumflex: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAdieresis: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAgrave: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAmacron: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAogonek: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAring: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteAtilde: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YacuteO: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOacute: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOcircumflex: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOdieresis: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOgrave: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOhungarumlaut: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOmacron: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOslash: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YacuteOtilde: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	Yacutea: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yacuteaacute: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yacuteabreve: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-100
	],
	Yacuteacircumflex: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yacuteadieresis: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Yacuteagrave: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Yacuteamacron: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-60
	],
	Yacuteaogonek: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yacutearing: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Yacuteatilde: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-60
	],
	Yacutecolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Yacutecomma: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-92,
		-92,
		-129
	],
	Yacutee: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yacuteeacute: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yacuteecaron: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yacuteecircumflex: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-71,
		-92,
		-100
	],
	Yacuteedieresis: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Yacuteedotaccent: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yacuteegrave: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Yacuteemacron: [
		-80,
		-80,
		-70,
		-70,
		-71,
		-71,
		-52,
		-60
	],
	Yacuteeogonek: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Yacuteo: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yacuteoacute: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yacuteocircumflex: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yacuteodieresis: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yacuteograve: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yacuteohungarumlaut: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yacuteomacron: [
		-100,
		-100,
		-70,
		-70,
		-111,
		-111,
		-92,
		-70
	],
	Yacuteoslash: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Yacuteotilde: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Yacuteperiod: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-74,
		-92,
		-129
	],
	Yacutesemicolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Yacuteu: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yacuteuacute: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yacuteucircumflex: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yacuteudieresis: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yacuteugrave: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yacuteuhungarumlaut: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yacuteumacron: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Yacuteuogonek: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Yacuteuring: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	YdieresisA: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAacute: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAbreve: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAcircumflex: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAdieresis: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAgrave: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAmacron: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAogonek: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAring: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisAtilde: [
		-110,
		-110,
		-110,
		-110,
		-110,
		-74,
		-50,
		-120
	],
	YdieresisO: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOacute: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOcircumflex: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOdieresis: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOgrave: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOhungarumlaut: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOmacron: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOslash: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	YdieresisOtilde: [
		-70,
		-70,
		-85,
		-85,
		-35,
		-25,
		-15,
		-30
	],
	Ydieresisa: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisaacute: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisabreve: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisacircumflex: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisadieresis: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Ydieresisagrave: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-60
	],
	Ydieresisamacron: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-60
	],
	Ydieresisaogonek: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisaring: [
		-90,
		-90,
		-140,
		-140,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresisatilde: [
		-90,
		-90,
		-70,
		-70,
		-85,
		-92,
		-92,
		-100
	],
	Ydieresiscolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Ydieresiscomma: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-92,
		-92,
		-129
	],
	Ydieresise: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Ydieresiseacute: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Ydieresisecaron: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Ydieresisecircumflex: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-71,
		-92,
		-100
	],
	Ydieresisedieresis: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Ydieresisedotaccent: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Ydieresisegrave: [
		-80,
		-80,
		-140,
		-140,
		-71,
		-71,
		-52,
		-60
	],
	Ydieresisemacron: [
		-80,
		-80,
		-70,
		-70,
		-71,
		-71,
		-52,
		-60
	],
	Ydieresiseogonek: [
		-80,
		-80,
		-140,
		-140,
		-111,
		-111,
		-92,
		-100
	],
	Ydieresiso: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Ydieresisoacute: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Ydieresisocircumflex: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Ydieresisodieresis: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Ydieresisograve: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Ydieresisohungarumlaut: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Ydieresisomacron: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Ydieresisoslash: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-110
	],
	Ydieresisotilde: [
		-100,
		-100,
		-140,
		-140,
		-111,
		-111,
		-92,
		-70
	],
	Ydieresisperiod: [
		-100,
		-100,
		-140,
		-140,
		-92,
		-74,
		-92,
		-129
	],
	Ydieresissemicolon: [
		-50,
		-50,
		-60,
		-60,
		-92,
		-92,
		-65,
		-92
	],
	Ydieresisu: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Ydieresisuacute: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Ydieresisucircumflex: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Ydieresisudieresis: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Ydieresisugrave: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Ydieresisuhungarumlaut: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Ydieresisumacron: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-71
	],
	Ydieresisuogonek: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	Ydieresisuring: [
		-100,
		-100,
		-110,
		-110,
		-92,
		-92,
		-92,
		-111
	],
	ag: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	agbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	agcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	av: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	aw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	ay: [
		-20,
		-20,
		-30,
		-30
	],
	ayacute: [
		-20,
		-20,
		-30,
		-30
	],
	aydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	aacuteg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aacutegbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aacutegcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aacutev: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	aacutew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	aacutey: [
		-20,
		-20,
		-30,
		-30
	],
	aacuteyacute: [
		-20,
		-20,
		-30,
		-30
	],
	aacuteydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	abreveg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	abrevegbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	abrevegcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	abrevev: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	abrevew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	abrevey: [
		-20,
		-20,
		-30,
		-30
	],
	abreveyacute: [
		-20,
		-20,
		-30,
		-30
	],
	abreveydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	acircumflexg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	acircumflexgbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	acircumflexgcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	acircumflexv: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	acircumflexw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	acircumflexy: [
		-20,
		-20,
		-30,
		-30
	],
	acircumflexyacute: [
		-20,
		-20,
		-30,
		-30
	],
	acircumflexydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	adieresisg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	adieresisgbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	adieresisgcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	adieresisv: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	adieresisw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	adieresisy: [
		-20,
		-20,
		-30,
		-30
	],
	adieresisyacute: [
		-20,
		-20,
		-30,
		-30
	],
	adieresisydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	agraveg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	agravegbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	agravegcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	agravev: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	agravew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	agravey: [
		-20,
		-20,
		-30,
		-30
	],
	agraveyacute: [
		-20,
		-20,
		-30,
		-30
	],
	agraveydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	amacrong: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	amacrongbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	amacrongcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	amacronv: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	amacronw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	amacrony: [
		-20,
		-20,
		-30,
		-30
	],
	amacronyacute: [
		-20,
		-20,
		-30,
		-30
	],
	amacronydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	aogonekg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aogonekgbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aogonekgcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aogonekv: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	aogonekw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	aogoneky: [
		-20,
		-20,
		-30,
		-30
	],
	aogonekyacute: [
		-20,
		-20,
		-30,
		-30
	],
	aogonekydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	aringg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aringgbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aringgcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	aringv: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	aringw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	aringy: [
		-20,
		-20,
		-30,
		-30
	],
	aringyacute: [
		-20,
		-20,
		-30,
		-30
	],
	aringydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	atildeg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	atildegbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	atildegcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	atildev: [
		-15,
		-15,
		-20,
		-20,
		-25,
		0,
		0,
		-20
	],
	atildew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		0,
		-15
	],
	atildey: [
		-20,
		-20,
		-30,
		-30
	],
	atildeyacute: [
		-20,
		-20,
		-30,
		-30
	],
	atildeydieresis: [
		-20,
		-20,
		-30,
		-30
	],
	bl: [
		-10,
		-10,
		-20,
		-20
	],
	blacute: [
		-10,
		-10,
		-20,
		-20
	],
	blcommaaccent: [
		-10,
		-10,
		-20,
		-20
	],
	blslash: [
		-10,
		-10,
		-20,
		-20
	],
	bu: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	buacute: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	bucircumflex: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	budieresis: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	bugrave: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	buhungarumlaut: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	bumacron: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	buogonek: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	buring: [
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20,
		-20
	],
	bv: [
		-20,
		-20,
		-20,
		-20,
		-15,
		0,
		0,
		-15
	],
	by: [
		-20,
		-20,
		-20,
		-20
	],
	byacute: [
		-20,
		-20,
		-20,
		-20
	],
	bydieresis: [
		-20,
		-20,
		-20,
		-20
	],
	ch: [
		-10,
		-10,
		0,
		0,
		0,
		-10,
		-15
	],
	ck: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	ckcommaaccent: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	cl: [
		-20,
		-20
	],
	clacute: [
		-20,
		-20
	],
	clcommaaccent: [
		-20,
		-20
	],
	clslash: [
		-20,
		-20
	],
	cy: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	cyacute: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	cydieresis: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	cacuteh: [
		-10,
		-10,
		0,
		0,
		0,
		-10,
		-15
	],
	cacutek: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	cacutekcommaaccent: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	cacutel: [
		-20,
		-20
	],
	cacutelacute: [
		-20,
		-20
	],
	cacutelcommaaccent: [
		-20,
		-20
	],
	cacutelslash: [
		-20,
		-20
	],
	cacutey: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	cacuteyacute: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	cacuteydieresis: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccaronh: [
		-10,
		-10,
		0,
		0,
		0,
		-10,
		-15
	],
	ccaronk: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	ccaronkcommaaccent: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	ccaronl: [
		-20,
		-20
	],
	ccaronlacute: [
		-20,
		-20
	],
	ccaronlcommaaccent: [
		-20,
		-20
	],
	ccaronlslash: [
		-20,
		-20
	],
	ccarony: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccaronyacute: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccaronydieresis: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccedillah: [
		-10,
		-10,
		0,
		0,
		0,
		-10,
		-15
	],
	ccedillak: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	ccedillakcommaaccent: [
		-20,
		-20,
		-20,
		-20,
		0,
		-10,
		-20
	],
	ccedillal: [
		-20,
		-20
	],
	ccedillalacute: [
		-20,
		-20
	],
	ccedillalcommaaccent: [
		-20,
		-20
	],
	ccedillalslash: [
		-20,
		-20
	],
	ccedillay: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccedillayacute: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	ccedillaydieresis: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		0,
		-15
	],
	colonspace: [
		-40,
		-40,
		-50,
		-50
	],
	commaquotedblright: [
		-120,
		-120,
		-100,
		-100,
		-45,
		-95,
		-140,
		-70
	],
	commaquoteright: [
		-120,
		-120,
		-100,
		-100,
		-55,
		-95,
		-140,
		-70
	],
	commaspace: [
		-40,
		-40
	],
	dd: [
		-10,
		-10
	],
	ddcroat: [
		-10,
		-10
	],
	dv: [
		-15,
		-15
	],
	dw: [
		-15,
		-15,
		0,
		0,
		-15
	],
	dy: [
		-15,
		-15
	],
	dyacute: [
		-15,
		-15
	],
	dydieresis: [
		-15,
		-15
	],
	dcroatd: [
		-10,
		-10
	],
	dcroatdcroat: [
		-10,
		-10
	],
	dcroatv: [
		-15,
		-15
	],
	dcroatw: [
		-15,
		-15,
		0,
		0,
		-15
	],
	dcroaty: [
		-15,
		-15
	],
	dcroatyacute: [
		-15,
		-15
	],
	dcroatydieresis: [
		-15,
		-15
	],
	ecomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	eperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	ev: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	ew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	ex: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	ey: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eacutecomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	eacuteperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	eacutev: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	eacutew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	eacutex: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	eacutey: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eacuteyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eacuteydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecaroncomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	ecaronperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	ecaronv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	ecaronw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	ecaronx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	ecarony: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecaronyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecaronydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecircumflexcomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	ecircumflexperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	ecircumflexv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	ecircumflexw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	ecircumflexx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	ecircumflexy: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecircumflexyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	ecircumflexydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edieresiscomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	edieresisperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	edieresisv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	edieresisw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	edieresisx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	edieresisy: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edieresisyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edieresisydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edotaccentcomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	edotaccentperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	edotaccentv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	edotaccentw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	edotaccentx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	edotaccenty: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edotaccentyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	edotaccentydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	egravecomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	egraveperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	egravev: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	egravew: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	egravex: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	egravey: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	egraveyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	egraveydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	emacroncomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	emacronperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	emacronv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	emacronw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	emacronx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	emacrony: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	emacronyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	emacronydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eogonekcomma: [
		10,
		10,
		-15,
		-15,
		0,
		0,
		-10
	],
	eogonekperiod: [
		20,
		20,
		-15,
		-15,
		0,
		0,
		-15
	],
	eogonekv: [
		-15,
		-15,
		-30,
		-30,
		-15,
		0,
		-15,
		-25
	],
	eogonekw: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-15,
		-25
	],
	eogonekx: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		-20,
		-15
	],
	eogoneky: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eogonekyacute: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	eogonekydieresis: [
		-15,
		-15,
		-20,
		-20,
		0,
		0,
		-30,
		-15
	],
	fcomma: [
		-10,
		-10,
		-30,
		-30,
		-15,
		-10,
		-10
	],
	fe: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10
	],
	feacute: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10
	],
	fecaron: [
		-10,
		-10,
		-30,
		-30
	],
	fecircumflex: [
		-10,
		-10,
		-30,
		-30
	],
	fedieresis: [
		-10,
		-10,
		-30,
		-30
	],
	fedotaccent: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10
	],
	fegrave: [
		-10,
		-10,
		-30,
		-30
	],
	femacron: [
		-10,
		-10,
		-30,
		-30
	],
	feogonek: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10
	],
	fo: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	foacute: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	focircumflex: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	fodieresis: [
		-20,
		-20,
		-30,
		-30,
		-25
	],
	fograve: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	fohungarumlaut: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	fomacron: [
		-20,
		-20,
		-30,
		-30,
		-25
	],
	foslash: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	fotilde: [
		-20,
		-20,
		-30,
		-30,
		-25,
		-10
	],
	fperiod: [
		-10,
		-10,
		-30,
		-30,
		-15,
		-10,
		-15
	],
	fquotedblright: [
		30,
		30,
		60,
		60,
		50
	],
	fquoteright: [
		30,
		30,
		50,
		50,
		55,
		55,
		92,
		55
	],
	ge: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	geacute: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gecaron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gecircumflex: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gedieresis: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gedotaccent: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gegrave: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gemacron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	geogonek: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	ggbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	ggcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gbrevee: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveeacute: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveecaron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveecircumflex: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveedieresis: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveedotaccent: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveegrave: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveemacron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveeogonek: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gbreveg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gbrevegbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gbrevegcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccente: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccenteacute: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentecaron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentecircumflex: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentedieresis: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentedotaccent: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentegrave: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentemacron: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccenteogonek: [
		10,
		10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentg: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentgbreve: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentgcommaaccent: [
		-10,
		-10,
		0,
		0,
		0,
		0,
		-10
	],
	hy: [
		-20,
		-20,
		-30,
		-30,
		-15,
		0,
		0,
		-5
	],
	hyacute: [
		-20,
		-20,
		-30,
		-30,
		-15,
		0,
		0,
		-5
	],
	hydieresis: [
		-20,
		-20,
		-30,
		-30,
		-15,
		0,
		0,
		-5
	],
	ko: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	koacute: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kocircumflex: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kodieresis: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kograve: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kohungarumlaut: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	komacron: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	koslash: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kotilde: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccento: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentoacute: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentocircumflex: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentodieresis: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentograve: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentohungarumlaut: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentomacron: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentoslash: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	kcommaaccentotilde: [
		-15,
		-15,
		-20,
		-20,
		-15,
		-10,
		-10,
		-10
	],
	lw: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ly: [
		-15,
		-15
	],
	lyacute: [
		-15,
		-15
	],
	lydieresis: [
		-15,
		-15
	],
	lacutew: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	lacutey: [
		-15,
		-15
	],
	lacuteyacute: [
		-15,
		-15
	],
	lacuteydieresis: [
		-15,
		-15
	],
	lcommaaccentw: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	lcommaaccenty: [
		-15,
		-15
	],
	lcommaaccentyacute: [
		-15,
		-15
	],
	lcommaaccentydieresis: [
		-15,
		-15
	],
	lslashw: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	lslashy: [
		-15,
		-15
	],
	lslashyacute: [
		-15,
		-15
	],
	lslashydieresis: [
		-15,
		-15
	],
	mu: [
		-20,
		-20,
		-10,
		-10
	],
	muacute: [
		-20,
		-20,
		-10,
		-10
	],
	mucircumflex: [
		-20,
		-20,
		-10,
		-10
	],
	mudieresis: [
		-20,
		-20,
		-10,
		-10
	],
	mugrave: [
		-20,
		-20,
		-10,
		-10
	],
	muhungarumlaut: [
		-20,
		-20,
		-10,
		-10
	],
	mumacron: [
		-20,
		-20,
		-10,
		-10
	],
	muogonek: [
		-20,
		-20,
		-10,
		-10
	],
	muring: [
		-20,
		-20,
		-10,
		-10
	],
	my: [
		-30,
		-30,
		-15,
		-15
	],
	myacute: [
		-30,
		-30,
		-15,
		-15
	],
	mydieresis: [
		-30,
		-30,
		-15,
		-15
	],
	nu: [
		-10,
		-10,
		-10,
		-10
	],
	nuacute: [
		-10,
		-10,
		-10,
		-10
	],
	nucircumflex: [
		-10,
		-10,
		-10,
		-10
	],
	nudieresis: [
		-10,
		-10,
		-10,
		-10
	],
	nugrave: [
		-10,
		-10,
		-10,
		-10
	],
	nuhungarumlaut: [
		-10,
		-10,
		-10,
		-10
	],
	numacron: [
		-10,
		-10,
		-10,
		-10
	],
	nuogonek: [
		-10,
		-10,
		-10,
		-10
	],
	nuring: [
		-10,
		-10,
		-10,
		-10
	],
	nv: [
		-40,
		-40,
		-20,
		-20,
		-40,
		-40,
		-40,
		-40
	],
	ny: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	nyacute: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	nydieresis: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	nacuteu: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteuacute: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteucircumflex: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteudieresis: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteugrave: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteuhungarumlaut: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteumacron: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteuogonek: [
		-10,
		-10,
		-10,
		-10
	],
	nacuteuring: [
		-10,
		-10,
		-10,
		-10
	],
	nacutev: [
		-40,
		-40,
		-20,
		-20,
		-40,
		-40,
		-40,
		-40
	],
	nacutey: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	nacuteyacute: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	nacuteydieresis: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncaronu: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronuacute: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronucircumflex: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronudieresis: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronugrave: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronuhungarumlaut: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronumacron: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronuogonek: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronuring: [
		-10,
		-10,
		-10,
		-10
	],
	ncaronv: [
		-40,
		-40,
		-20,
		-20,
		-40,
		-40,
		-40,
		-40
	],
	ncarony: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncaronyacute: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncaronydieresis: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncommaaccentu: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentuacute: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentucircumflex: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentudieresis: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentugrave: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentuhungarumlaut: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentumacron: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentuogonek: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccenturing: [
		-10,
		-10,
		-10,
		-10
	],
	ncommaaccentv: [
		-40,
		-40,
		-20,
		-20,
		-40,
		-40,
		-40,
		-40
	],
	ncommaaccenty: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncommaaccentyacute: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ncommaaccentydieresis: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ntildeu: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeuacute: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeucircumflex: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeudieresis: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeugrave: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeuhungarumlaut: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeumacron: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeuogonek: [
		-10,
		-10,
		-10,
		-10
	],
	ntildeuring: [
		-10,
		-10,
		-10,
		-10
	],
	ntildev: [
		-40,
		-40,
		-20,
		-20,
		-40,
		-40,
		-40,
		-40
	],
	ntildey: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ntildeyacute: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ntildeydieresis: [
		-20,
		-20,
		-15,
		-15,
		0,
		0,
		0,
		-15
	],
	ov: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	ow: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	ox: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	oy: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oacutev: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	oacutew: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	oacutex: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	oacutey: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oacuteyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oacuteydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ocircumflexv: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	ocircumflexw: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	ocircumflexx: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	ocircumflexy: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ocircumflexyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ocircumflexydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	odieresisv: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	odieresisw: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	odieresisx: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	odieresisy: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	odieresisyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	odieresisydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ogravev: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	ogravew: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	ogravex: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	ogravey: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ograveyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ograveydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ohungarumlautv: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	ohungarumlautw: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	ohungarumlautx: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	ohungarumlauty: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ohungarumlautyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	ohungarumlautydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	omacronv: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	omacronw: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	omacronx: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	omacrony: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	omacronyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	omacronydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	oslashv: [
		-20,
		-20,
		-70,
		-70,
		-10,
		-15,
		-10,
		-15
	],
	oslashw: [
		-15,
		-15,
		-70,
		-70,
		-10,
		-25,
		0,
		-25
	],
	oslashx: [
		-30,
		-30,
		-85,
		-85,
		0,
		-10
	],
	oslashy: [
		-20,
		-20,
		-70,
		-70,
		0,
		-10,
		0,
		-10
	],
	oslashyacute: [
		-20,
		-20,
		-70,
		-70,
		0,
		-10,
		0,
		-10
	],
	oslashydieresis: [
		-20,
		-20,
		-70,
		-70,
		0,
		-10,
		0,
		-10
	],
	otildev: [
		-20,
		-20,
		-15,
		-15,
		-10,
		-15,
		-10,
		-15
	],
	otildew: [
		-15,
		-15,
		-15,
		-15,
		-10,
		-25,
		0,
		-25
	],
	otildex: [
		-30,
		-30,
		-30,
		-30,
		0,
		-10
	],
	otildey: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	otildeyacute: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	otildeydieresis: [
		-20,
		-20,
		-30,
		-30,
		0,
		-10,
		0,
		-10
	],
	py: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	pyacute: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	pydieresis: [
		-15,
		-15,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	periodquotedblright: [
		-120,
		-120,
		-100,
		-100,
		-55,
		-95,
		-140,
		-70
	],
	periodquoteright: [
		-120,
		-120,
		-100,
		-100,
		-55,
		-95,
		-140,
		-70
	],
	periodspace: [
		-40,
		-40,
		-60,
		-60
	],
	quotedblrightspace: [
		-80,
		-80,
		-40,
		-40
	],
	quoteleftquoteleft: [
		-46,
		-46,
		-57,
		-57,
		-63,
		-74,
		-111,
		-74
	],
	quoterightd: [
		-80,
		-80,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterightdcroat: [
		-80,
		-80,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterightl: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	quoterightlacute: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	quoterightlcommaaccent: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	quoterightlslash: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	quoterightquoteright: [
		-46,
		-46,
		-57,
		-57,
		-63,
		-74,
		-111,
		-74
	],
	quoterightr: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterightracute: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterightrcaron: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterightrcommaaccent: [
		-40,
		-40,
		-50,
		-50,
		-20,
		-15,
		-25,
		-50
	],
	quoterights: [
		-60,
		-60,
		-50,
		-50,
		-37,
		-74,
		-40,
		-55
	],
	quoterightsacute: [
		-60,
		-60,
		-50,
		-50,
		-37,
		-74,
		-40,
		-55
	],
	quoterightscaron: [
		-60,
		-60,
		-50,
		-50,
		-37,
		-74,
		-40,
		-55
	],
	quoterightscedilla: [
		-60,
		-60,
		-50,
		-50,
		-37,
		-74,
		-40,
		-55
	],
	quoterightscommaaccent: [
		-60,
		-60,
		-50,
		-50,
		-37,
		-74,
		-40,
		-55
	],
	quoterightspace: [
		-80,
		-80,
		-70,
		-70,
		-74,
		-74,
		-111,
		-74
	],
	quoterightv: [
		-20,
		-20,
		0,
		0,
		-20,
		-15,
		-10,
		-50
	],
	rc: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rccaron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rccedilla: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcomma: [
		-60,
		-60,
		-50,
		-50,
		-92,
		-65,
		-111,
		-40
	],
	rd: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rdcroat: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rg: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rgbreve: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rgcommaaccent: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rhyphen: [
		-20,
		-20,
		0,
		0,
		-37,
		0,
		-20,
		-20
	],
	ro: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	roacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rocircumflex: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rodieresis: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rograve: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rohungarumlaut: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	romacron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	roslash: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rotilde: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rperiod: [
		-60,
		-60,
		-50,
		-50,
		-100,
		-65,
		-111,
		-55
	],
	rq: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rs: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rsacute: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rscaron: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rscedilla: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rscommaaccent: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rt: [
		20,
		20,
		40,
		40
	],
	rtcommaaccent: [
		20,
		20,
		40,
		40
	],
	rv: [
		10,
		10,
		30,
		30,
		-10
	],
	ry: [
		10,
		10,
		30,
		30
	],
	ryacute: [
		10,
		10,
		30,
		30
	],
	rydieresis: [
		10,
		10,
		30,
		30
	],
	racutec: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	racutecacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteccaron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteccedilla: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	racutecomma: [
		-60,
		-60,
		-50,
		-50,
		-92,
		-65,
		-111,
		-40
	],
	racuted: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	racutedcroat: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	racuteg: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	racutegbreve: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	racutegcommaaccent: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	racutehyphen: [
		-20,
		-20,
		0,
		0,
		-37,
		0,
		-20,
		-20
	],
	racuteo: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteoacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteocircumflex: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteodieresis: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteograve: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteohungarumlaut: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteomacron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteoslash: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteotilde: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	racuteperiod: [
		-60,
		-60,
		-50,
		-50,
		-100,
		-65,
		-111,
		-55
	],
	racuteq: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	racutes: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	racutesacute: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	racutescaron: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	racutescedilla: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	racutescommaaccent: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	racutet: [
		20,
		20,
		40,
		40
	],
	racutetcommaaccent: [
		20,
		20,
		40,
		40
	],
	racutev: [
		10,
		10,
		30,
		30,
		-10
	],
	racutey: [
		10,
		10,
		30,
		30
	],
	racuteyacute: [
		10,
		10,
		30,
		30
	],
	racuteydieresis: [
		10,
		10,
		30,
		30
	],
	rcaronc: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaroncacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronccaron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronccedilla: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaroncomma: [
		-60,
		-60,
		-50,
		-50,
		-92,
		-65,
		-111,
		-40
	],
	rcarond: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rcarondcroat: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rcarong: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcarongbreve: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcarongcommaaccent: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcaronhyphen: [
		-20,
		-20,
		0,
		0,
		-37,
		0,
		-20,
		-20
	],
	rcarono: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronoacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronocircumflex: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronodieresis: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronograve: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronohungarumlaut: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronomacron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronoslash: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronotilde: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcaronperiod: [
		-60,
		-60,
		-50,
		-50,
		-100,
		-65,
		-111,
		-55
	],
	rcaronq: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcarons: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcaronsacute: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcaronscaron: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcaronscedilla: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcaronscommaaccent: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcaront: [
		20,
		20,
		40,
		40
	],
	rcarontcommaaccent: [
		20,
		20,
		40,
		40
	],
	rcaronv: [
		10,
		10,
		30,
		30,
		-10
	],
	rcarony: [
		10,
		10,
		30,
		30
	],
	rcaronyacute: [
		10,
		10,
		30,
		30
	],
	rcaronydieresis: [
		10,
		10,
		30,
		30
	],
	rcommaaccentc: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentcacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentccaron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentccedilla: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentcomma: [
		-60,
		-60,
		-50,
		-50,
		-92,
		-65,
		-111,
		-40
	],
	rcommaaccentd: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rcommaaccentdcroat: [
		-20,
		-20,
		0,
		0,
		0,
		0,
		-37
	],
	rcommaaccentg: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcommaaccentgbreve: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcommaaccentgcommaaccent: [
		-15,
		-15,
		0,
		0,
		-10,
		0,
		-37,
		-18
	],
	rcommaaccenthyphen: [
		-20,
		-20,
		0,
		0,
		-37,
		0,
		-20,
		-20
	],
	rcommaaccento: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentoacute: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentocircumflex: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentodieresis: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentograve: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentohungarumlaut: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentomacron: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentoslash: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentotilde: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-45
	],
	rcommaaccentperiod: [
		-60,
		-60,
		-50,
		-50,
		-100,
		-65,
		-111,
		-55
	],
	rcommaaccentq: [
		-20,
		-20,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccents: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcommaaccentsacute: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcommaaccentscaron: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcommaaccentscedilla: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcommaaccentscommaaccent: [
		-15,
		-15,
		0,
		0,
		0,
		0,
		-10
	],
	rcommaaccentt: [
		20,
		20,
		40,
		40
	],
	rcommaaccenttcommaaccent: [
		20,
		20,
		40,
		40
	],
	rcommaaccentv: [
		10,
		10,
		30,
		30,
		-10
	],
	rcommaaccenty: [
		10,
		10,
		30,
		30
	],
	rcommaaccentyacute: [
		10,
		10,
		30,
		30
	],
	rcommaaccentydieresis: [
		10,
		10,
		30,
		30
	],
	sw: [
		-15,
		-15,
		-30,
		-30
	],
	sacutew: [
		-15,
		-15,
		-30,
		-30
	],
	scaronw: [
		-15,
		-15,
		-30,
		-30
	],
	scedillaw: [
		-15,
		-15,
		-30,
		-30
	],
	scommaaccentw: [
		-15,
		-15,
		-30,
		-30
	],
	semicolonspace: [
		-40,
		-40,
		-50,
		-50
	],
	spaceT: [
		-100,
		-100,
		-50,
		-50,
		-30,
		0,
		-18,
		-18
	],
	spaceTcaron: [
		-100,
		-100,
		-50,
		-50,
		-30,
		0,
		-18,
		-18
	],
	spaceTcommaaccent: [
		-100,
		-100,
		-50,
		-50,
		-30,
		0,
		-18,
		-18
	],
	spaceV: [
		-80,
		-80,
		-50,
		-50,
		-45,
		-70,
		-35,
		-50
	],
	spaceW: [
		-80,
		-80,
		-40,
		-40,
		-30,
		-70,
		-40,
		-30
	],
	spaceY: [
		-120,
		-120,
		-90,
		-90,
		-55,
		-70,
		-75,
		-90
	],
	spaceYacute: [
		-120,
		-120,
		-90,
		-90,
		-55,
		-70,
		-75,
		-90
	],
	spaceYdieresis: [
		-120,
		-120,
		-90,
		-90,
		-55,
		-70,
		-75,
		-90
	],
	spacequotedblleft: [
		-80,
		-80,
		-30,
		-30
	],
	spacequoteleft: [
		-60,
		-60,
		-60,
		-60
	],
	va: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vaacute: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vabreve: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vacircumflex: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vadieresis: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vagrave: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vamacron: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vaogonek: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	varing: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vatilde: [
		-20,
		-20,
		-25,
		-25,
		-10,
		0,
		0,
		-25
	],
	vcomma: [
		-80,
		-80,
		-80,
		-80,
		-55,
		-37,
		-74,
		-65
	],
	vo: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	voacute: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vocircumflex: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vodieresis: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vograve: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vohungarumlaut: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vomacron: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	voslash: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	votilde: [
		-30,
		-30,
		-25,
		-25,
		-10,
		-15,
		0,
		-20
	],
	vperiod: [
		-80,
		-80,
		-80,
		-80,
		-70,
		-37,
		-74,
		-65
	],
	wcomma: [
		-40,
		-40,
		-60,
		-60,
		-55,
		-37,
		-74,
		-65
	],
	wo: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	woacute: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wocircumflex: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wodieresis: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wograve: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wohungarumlaut: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	womacron: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	woslash: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wotilde: [
		-20,
		-20,
		-10,
		-10,
		-10,
		-15,
		0,
		-10
	],
	wperiod: [
		-40,
		-40,
		-60,
		-60,
		-70,
		-37,
		-74,
		-65
	],
	xe: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xeacute: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xecaron: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xecircumflex: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xedieresis: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xedotaccent: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xegrave: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xemacron: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	xeogonek: [
		-10,
		-10,
		-30,
		-30,
		0,
		-10,
		0,
		-15
	],
	ya: [
		-30,
		-30,
		-20,
		-20
	],
	yaacute: [
		-30,
		-30,
		-20,
		-20
	],
	yabreve: [
		-30,
		-30,
		-20,
		-20
	],
	yacircumflex: [
		-30,
		-30,
		-20,
		-20
	],
	yadieresis: [
		-30,
		-30,
		-20,
		-20
	],
	yagrave: [
		-30,
		-30,
		-20,
		-20
	],
	yamacron: [
		-30,
		-30,
		-20,
		-20
	],
	yaogonek: [
		-30,
		-30,
		-20,
		-20
	],
	yaring: [
		-30,
		-30,
		-20,
		-20
	],
	yatilde: [
		-30,
		-30,
		-20,
		-20
	],
	ycomma: [
		-80,
		-80,
		-100,
		-100,
		-55,
		-37,
		-55,
		-65
	],
	ye: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yeacute: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yecaron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yecircumflex: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yedieresis: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yedotaccent: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yegrave: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yemacron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yeogonek: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yo: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yoacute: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yocircumflex: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yodieresis: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yograve: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yohungarumlaut: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yomacron: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yoslash: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yotilde: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yperiod: [
		-80,
		-80,
		-100,
		-100,
		-70,
		-37,
		-55,
		-65
	],
	yacutea: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteaacute: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteabreve: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteacircumflex: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteadieresis: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteagrave: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteamacron: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteaogonek: [
		-30,
		-30,
		-20,
		-20
	],
	yacutearing: [
		-30,
		-30,
		-20,
		-20
	],
	yacuteatilde: [
		-30,
		-30,
		-20,
		-20
	],
	yacutecomma: [
		-80,
		-80,
		-100,
		-100,
		-55,
		-37,
		-55,
		-65
	],
	yacutee: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteeacute: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteecaron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteecircumflex: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteedieresis: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteedotaccent: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteegrave: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteemacron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteeogonek: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	yacuteo: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteoacute: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteocircumflex: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteodieresis: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteograve: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteohungarumlaut: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteomacron: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteoslash: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteotilde: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	yacuteperiod: [
		-80,
		-80,
		-100,
		-100,
		-70,
		-37,
		-55,
		-65
	],
	ydieresisa: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisaacute: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisabreve: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisacircumflex: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisadieresis: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisagrave: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisamacron: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisaogonek: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisaring: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresisatilde: [
		-30,
		-30,
		-20,
		-20
	],
	ydieresiscomma: [
		-80,
		-80,
		-100,
		-100,
		-55,
		-37,
		-55,
		-65
	],
	ydieresise: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresiseacute: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisecaron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisecircumflex: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisedieresis: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisedotaccent: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisegrave: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresisemacron: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresiseogonek: [
		-10,
		-10,
		-20,
		-20,
		-10
	],
	ydieresiso: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisoacute: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisocircumflex: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisodieresis: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisograve: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisohungarumlaut: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisomacron: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisoslash: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisotilde: [
		-25,
		-25,
		-20,
		-20,
		-25
	],
	ydieresisperiod: [
		-80,
		-80,
		-100,
		-100,
		-70,
		-37,
		-55,
		-65
	],
	ze: [
		10,
		10,
		-15,
		-15
	],
	zeacute: [
		10,
		10,
		-15,
		-15
	],
	zecaron: [
		10,
		10,
		-15,
		-15
	],
	zecircumflex: [
		10,
		10,
		-15,
		-15
	],
	zedieresis: [
		10,
		10,
		-15,
		-15
	],
	zedotaccent: [
		10,
		10,
		-15,
		-15
	],
	zegrave: [
		10,
		10,
		-15,
		-15
	],
	zemacron: [
		10,
		10,
		-15,
		-15
	],
	zeogonek: [
		10,
		10,
		-15,
		-15
	],
	zacutee: [
		10,
		10,
		-15,
		-15
	],
	zacuteeacute: [
		10,
		10,
		-15,
		-15
	],
	zacuteecaron: [
		10,
		10,
		-15,
		-15
	],
	zacuteecircumflex: [
		10,
		10,
		-15,
		-15
	],
	zacuteedieresis: [
		10,
		10,
		-15,
		-15
	],
	zacuteedotaccent: [
		10,
		10,
		-15,
		-15
	],
	zacuteegrave: [
		10,
		10,
		-15,
		-15
	],
	zacuteemacron: [
		10,
		10,
		-15,
		-15
	],
	zacuteeogonek: [
		10,
		10,
		-15,
		-15
	],
	zcarone: [
		10,
		10,
		-15,
		-15
	],
	zcaroneacute: [
		10,
		10,
		-15,
		-15
	],
	zcaronecaron: [
		10,
		10,
		-15,
		-15
	],
	zcaronecircumflex: [
		10,
		10,
		-15,
		-15
	],
	zcaronedieresis: [
		10,
		10,
		-15,
		-15
	],
	zcaronedotaccent: [
		10,
		10,
		-15,
		-15
	],
	zcaronegrave: [
		10,
		10,
		-15,
		-15
	],
	zcaronemacron: [
		10,
		10,
		-15,
		-15
	],
	zcaroneogonek: [
		10,
		10,
		-15,
		-15
	],
	zdotaccente: [
		10,
		10,
		-15,
		-15
	],
	zdotaccenteacute: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentecaron: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentecircumflex: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentedieresis: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentedotaccent: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentegrave: [
		10,
		10,
		-15,
		-15
	],
	zdotaccentemacron: [
		10,
		10,
		-15,
		-15
	],
	zdotaccenteogonek: [
		10,
		10,
		-15,
		-15
	],
	Bcomma: [
		0,
		0,
		-20,
		-20
	],
	Bperiod: [
		0,
		0,
		-20,
		-20
	],
	Ccomma: [
		0,
		0,
		-30,
		-30
	],
	Cperiod: [
		0,
		0,
		-30,
		-30
	],
	Cacutecomma: [
		0,
		0,
		-30,
		-30
	],
	Cacuteperiod: [
		0,
		0,
		-30,
		-30
	],
	Ccaroncomma: [
		0,
		0,
		-30,
		-30
	],
	Ccaronperiod: [
		0,
		0,
		-30,
		-30
	],
	Ccedillacomma: [
		0,
		0,
		-30,
		-30
	],
	Ccedillaperiod: [
		0,
		0,
		-30,
		-30
	],
	Fe: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Feacute: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fecaron: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fecircumflex: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fedieresis: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fedotaccent: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fegrave: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Femacron: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Feogonek: [
		0,
		0,
		-30,
		-30,
		-25,
		-100,
		-75
	],
	Fo: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Foacute: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Focircumflex: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fodieresis: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fograve: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fohungarumlaut: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fomacron: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Foslash: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fotilde: [
		0,
		0,
		-30,
		-30,
		-25,
		-70,
		-105,
		-15
	],
	Fr: [
		0,
		0,
		-45,
		-45,
		0,
		-50,
		-55
	],
	Fracute: [
		0,
		0,
		-45,
		-45,
		0,
		-50,
		-55
	],
	Frcaron: [
		0,
		0,
		-45,
		-45,
		0,
		-50,
		-55
	],
	Frcommaaccent: [
		0,
		0,
		-45,
		-45,
		0,
		-50,
		-55
	],
	Ja: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jaacute: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jabreve: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jacircumflex: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jadieresis: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jagrave: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jamacron: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jaogonek: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jaring: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	Jatilde: [
		0,
		0,
		-20,
		-20,
		-15,
		-40,
		-35
	],
	LcaronT: [
		0,
		0,
		-110,
		-110
	],
	LcaronTcaron: [
		0,
		0,
		-110,
		-110
	],
	LcaronTcommaaccent: [
		0,
		0,
		-110,
		-110
	],
	LcaronV: [
		0,
		0,
		-110,
		-110
	],
	LcaronW: [
		0,
		0,
		-70,
		-70
	],
	LcaronY: [
		0,
		0,
		-140,
		-140
	],
	LcaronYacute: [
		0,
		0,
		-140,
		-140
	],
	LcaronYdieresis: [
		0,
		0,
		-140,
		-140
	],
	Lcaronquotedblright: [
		0,
		0,
		-140,
		-140
	],
	Lcaronquoteright: [
		0,
		0,
		-160,
		-160,
		0,
		0,
		0,
		-92
	],
	Lcarony: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-55
	],
	Lcaronyacute: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-55
	],
	Lcaronydieresis: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-55
	],
	Scomma: [
		0,
		0,
		-20,
		-20
	],
	Speriod: [
		0,
		0,
		-20,
		-20
	],
	Sacutecomma: [
		0,
		0,
		-20,
		-20
	],
	Sacuteperiod: [
		0,
		0,
		-20,
		-20
	],
	Scaroncomma: [
		0,
		0,
		-20,
		-20
	],
	Scaronperiod: [
		0,
		0,
		-20,
		-20
	],
	Scedillacomma: [
		0,
		0,
		-20,
		-20
	],
	Scedillaperiod: [
		0,
		0,
		-20,
		-20
	],
	Scommaaccentcomma: [
		0,
		0,
		-20,
		-20
	],
	Scommaaccentperiod: [
		0,
		0,
		-20,
		-20
	],
	Trcaron: [
		0,
		0,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcaronrcaron: [
		0,
		0,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Tcommaaccentrcaron: [
		0,
		0,
		-120,
		-120,
		-74,
		-37,
		-55,
		-35
	],
	Yhyphen: [
		0,
		0,
		-140,
		-140,
		-92,
		-92,
		-74,
		-111
	],
	Yi: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Yiacute: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Yiogonek: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Yacutehyphen: [
		0,
		0,
		-140,
		-140,
		-92,
		-92,
		-74,
		-111
	],
	Yacutei: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Yacuteiacute: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Yacuteiogonek: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Ydieresishyphen: [
		0,
		0,
		-140,
		-140,
		-92,
		-92,
		-74,
		-111
	],
	Ydieresisi: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Ydieresisiacute: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	Ydieresisiogonek: [
		0,
		0,
		-20,
		-20,
		-37,
		-55,
		-74,
		-55
	],
	bb: [
		0,
		0,
		-10,
		-10,
		-10,
		-10
	],
	bcomma: [
		0,
		0,
		-40,
		-40
	],
	bperiod: [
		0,
		0,
		-40,
		-40,
		-40,
		-40,
		-40,
		-40
	],
	ccomma: [
		0,
		0,
		-15,
		-15
	],
	cacutecomma: [
		0,
		0,
		-15,
		-15
	],
	ccaroncomma: [
		0,
		0,
		-15,
		-15
	],
	ccedillacomma: [
		0,
		0,
		-15,
		-15
	],
	fa: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	faacute: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	fabreve: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	facircumflex: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	fadieresis: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	fagrave: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	famacron: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	faogonek: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	faring: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	fatilde: [
		0,
		0,
		-30,
		-30,
		0,
		0,
		0,
		-10
	],
	fdotlessi: [
		0,
		0,
		-28,
		-28,
		-35,
		-30,
		-60,
		-50
	],
	gr: [
		0,
		0,
		-10,
		-10
	],
	gracute: [
		0,
		0,
		-10,
		-10
	],
	grcaron: [
		0,
		0,
		-10,
		-10
	],
	grcommaaccent: [
		0,
		0,
		-10,
		-10
	],
	gbrever: [
		0,
		0,
		-10,
		-10
	],
	gbreveracute: [
		0,
		0,
		-10,
		-10
	],
	gbrevercaron: [
		0,
		0,
		-10,
		-10
	],
	gbrevercommaaccent: [
		0,
		0,
		-10,
		-10
	],
	gcommaaccentr: [
		0,
		0,
		-10,
		-10
	],
	gcommaaccentracute: [
		0,
		0,
		-10,
		-10
	],
	gcommaaccentrcaron: [
		0,
		0,
		-10,
		-10
	],
	gcommaaccentrcommaaccent: [
		0,
		0,
		-10,
		-10
	],
	ke: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	keacute: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kecaron: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kecircumflex: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kedieresis: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kedotaccent: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kegrave: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kemacron: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	keogonek: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccente: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccenteacute: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentecaron: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentecircumflex: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentedieresis: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentedotaccent: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentegrave: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccentemacron: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	kcommaaccenteogonek: [
		0,
		0,
		-20,
		-20,
		-10,
		-30,
		-10,
		-10
	],
	ocomma: [
		0,
		0,
		-40,
		-40
	],
	operiod: [
		0,
		0,
		-40,
		-40
	],
	oacutecomma: [
		0,
		0,
		-40,
		-40
	],
	oacuteperiod: [
		0,
		0,
		-40,
		-40
	],
	ocircumflexcomma: [
		0,
		0,
		-40,
		-40
	],
	ocircumflexperiod: [
		0,
		0,
		-40,
		-40
	],
	odieresiscomma: [
		0,
		0,
		-40,
		-40
	],
	odieresisperiod: [
		0,
		0,
		-40,
		-40
	],
	ogravecomma: [
		0,
		0,
		-40,
		-40
	],
	ograveperiod: [
		0,
		0,
		-40,
		-40
	],
	ohungarumlautcomma: [
		0,
		0,
		-40,
		-40
	],
	ohungarumlautperiod: [
		0,
		0,
		-40,
		-40
	],
	omacroncomma: [
		0,
		0,
		-40,
		-40
	],
	omacronperiod: [
		0,
		0,
		-40,
		-40
	],
	oslasha: [
		0,
		0,
		-55,
		-55
	],
	oslashaacute: [
		0,
		0,
		-55,
		-55
	],
	oslashabreve: [
		0,
		0,
		-55,
		-55
	],
	oslashacircumflex: [
		0,
		0,
		-55,
		-55
	],
	oslashadieresis: [
		0,
		0,
		-55,
		-55
	],
	oslashagrave: [
		0,
		0,
		-55,
		-55
	],
	oslashamacron: [
		0,
		0,
		-55,
		-55
	],
	oslashaogonek: [
		0,
		0,
		-55,
		-55
	],
	oslasharing: [
		0,
		0,
		-55,
		-55
	],
	oslashatilde: [
		0,
		0,
		-55,
		-55
	],
	oslashb: [
		0,
		0,
		-55,
		-55
	],
	oslashc: [
		0,
		0,
		-55,
		-55
	],
	oslashcacute: [
		0,
		0,
		-55,
		-55
	],
	oslashccaron: [
		0,
		0,
		-55,
		-55
	],
	oslashccedilla: [
		0,
		0,
		-55,
		-55
	],
	oslashcomma: [
		0,
		0,
		-95,
		-95
	],
	oslashd: [
		0,
		0,
		-55,
		-55
	],
	oslashdcroat: [
		0,
		0,
		-55,
		-55
	],
	oslashe: [
		0,
		0,
		-55,
		-55
	],
	oslasheacute: [
		0,
		0,
		-55,
		-55
	],
	oslashecaron: [
		0,
		0,
		-55,
		-55
	],
	oslashecircumflex: [
		0,
		0,
		-55,
		-55
	],
	oslashedieresis: [
		0,
		0,
		-55,
		-55
	],
	oslashedotaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashegrave: [
		0,
		0,
		-55,
		-55
	],
	oslashemacron: [
		0,
		0,
		-55,
		-55
	],
	oslasheogonek: [
		0,
		0,
		-55,
		-55
	],
	oslashf: [
		0,
		0,
		-55,
		-55
	],
	oslashg: [
		0,
		0,
		-55,
		-55,
		0,
		0,
		-10
	],
	oslashgbreve: [
		0,
		0,
		-55,
		-55,
		0,
		0,
		-10
	],
	oslashgcommaaccent: [
		0,
		0,
		-55,
		-55,
		0,
		0,
		-10
	],
	oslashh: [
		0,
		0,
		-55,
		-55
	],
	oslashi: [
		0,
		0,
		-55,
		-55
	],
	oslashiacute: [
		0,
		0,
		-55,
		-55
	],
	oslashicircumflex: [
		0,
		0,
		-55,
		-55
	],
	oslashidieresis: [
		0,
		0,
		-55,
		-55
	],
	oslashigrave: [
		0,
		0,
		-55,
		-55
	],
	oslashimacron: [
		0,
		0,
		-55,
		-55
	],
	oslashiogonek: [
		0,
		0,
		-55,
		-55
	],
	oslashj: [
		0,
		0,
		-55,
		-55
	],
	oslashk: [
		0,
		0,
		-55,
		-55
	],
	oslashkcommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashl: [
		0,
		0,
		-55,
		-55
	],
	oslashlacute: [
		0,
		0,
		-55,
		-55
	],
	oslashlcommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashlslash: [
		0,
		0,
		-55,
		-55
	],
	oslashm: [
		0,
		0,
		-55,
		-55
	],
	oslashn: [
		0,
		0,
		-55,
		-55
	],
	oslashnacute: [
		0,
		0,
		-55,
		-55
	],
	oslashncaron: [
		0,
		0,
		-55,
		-55
	],
	oslashncommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashntilde: [
		0,
		0,
		-55,
		-55
	],
	oslasho: [
		0,
		0,
		-55,
		-55
	],
	oslashoacute: [
		0,
		0,
		-55,
		-55
	],
	oslashocircumflex: [
		0,
		0,
		-55,
		-55
	],
	oslashodieresis: [
		0,
		0,
		-55,
		-55
	],
	oslashograve: [
		0,
		0,
		-55,
		-55
	],
	oslashohungarumlaut: [
		0,
		0,
		-55,
		-55
	],
	oslashomacron: [
		0,
		0,
		-55,
		-55
	],
	oslashoslash: [
		0,
		0,
		-55,
		-55
	],
	oslashotilde: [
		0,
		0,
		-55,
		-55
	],
	oslashp: [
		0,
		0,
		-55,
		-55
	],
	oslashperiod: [
		0,
		0,
		-95,
		-95
	],
	oslashq: [
		0,
		0,
		-55,
		-55
	],
	oslashr: [
		0,
		0,
		-55,
		-55
	],
	oslashracute: [
		0,
		0,
		-55,
		-55
	],
	oslashrcaron: [
		0,
		0,
		-55,
		-55
	],
	oslashrcommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashs: [
		0,
		0,
		-55,
		-55
	],
	oslashsacute: [
		0,
		0,
		-55,
		-55
	],
	oslashscaron: [
		0,
		0,
		-55,
		-55
	],
	oslashscedilla: [
		0,
		0,
		-55,
		-55
	],
	oslashscommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslasht: [
		0,
		0,
		-55,
		-55
	],
	oslashtcommaaccent: [
		0,
		0,
		-55,
		-55
	],
	oslashu: [
		0,
		0,
		-55,
		-55
	],
	oslashuacute: [
		0,
		0,
		-55,
		-55
	],
	oslashucircumflex: [
		0,
		0,
		-55,
		-55
	],
	oslashudieresis: [
		0,
		0,
		-55,
		-55
	],
	oslashugrave: [
		0,
		0,
		-55,
		-55
	],
	oslashuhungarumlaut: [
		0,
		0,
		-55,
		-55
	],
	oslashumacron: [
		0,
		0,
		-55,
		-55
	],
	oslashuogonek: [
		0,
		0,
		-55,
		-55
	],
	oslashuring: [
		0,
		0,
		-55,
		-55
	],
	oslashz: [
		0,
		0,
		-55,
		-55
	],
	oslashzacute: [
		0,
		0,
		-55,
		-55
	],
	oslashzcaron: [
		0,
		0,
		-55,
		-55
	],
	oslashzdotaccent: [
		0,
		0,
		-55,
		-55
	],
	otildecomma: [
		0,
		0,
		-40,
		-40
	],
	otildeperiod: [
		0,
		0,
		-40,
		-40
	],
	pcomma: [
		0,
		0,
		-35,
		-35
	],
	pperiod: [
		0,
		0,
		-35,
		-35
	],
	ra: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	raacute: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rabreve: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racircumflex: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	radieresis: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	ragrave: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	ramacron: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	raogonek: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	raring: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	ratilde: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcolon: [
		0,
		0,
		30,
		30
	],
	ri: [
		0,
		0,
		15,
		15
	],
	riacute: [
		0,
		0,
		15,
		15
	],
	ricircumflex: [
		0,
		0,
		15,
		15
	],
	ridieresis: [
		0,
		0,
		15,
		15
	],
	rigrave: [
		0,
		0,
		15,
		15
	],
	rimacron: [
		0,
		0,
		15,
		15
	],
	riogonek: [
		0,
		0,
		15,
		15
	],
	rk: [
		0,
		0,
		15,
		15
	],
	rkcommaaccent: [
		0,
		0,
		15,
		15
	],
	rl: [
		0,
		0,
		15,
		15
	],
	rlacute: [
		0,
		0,
		15,
		15
	],
	rlcommaaccent: [
		0,
		0,
		15,
		15
	],
	rlslash: [
		0,
		0,
		15,
		15
	],
	rm: [
		0,
		0,
		25,
		25
	],
	rn: [
		0,
		0,
		25,
		25,
		-15
	],
	rnacute: [
		0,
		0,
		25,
		25,
		-15
	],
	rncaron: [
		0,
		0,
		25,
		25,
		-15
	],
	rncommaaccent: [
		0,
		0,
		25,
		25,
		-15
	],
	rntilde: [
		0,
		0,
		25,
		25,
		-15
	],
	rp: [
		0,
		0,
		30,
		30,
		-10
	],
	rsemicolon: [
		0,
		0,
		30,
		30
	],
	ru: [
		0,
		0,
		15,
		15
	],
	ruacute: [
		0,
		0,
		15,
		15
	],
	rucircumflex: [
		0,
		0,
		15,
		15
	],
	rudieresis: [
		0,
		0,
		15,
		15
	],
	rugrave: [
		0,
		0,
		15,
		15
	],
	ruhungarumlaut: [
		0,
		0,
		15,
		15
	],
	rumacron: [
		0,
		0,
		15,
		15
	],
	ruogonek: [
		0,
		0,
		15,
		15
	],
	ruring: [
		0,
		0,
		15,
		15
	],
	racutea: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteaacute: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteabreve: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteacircumflex: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteadieresis: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteagrave: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteamacron: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteaogonek: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racutearing: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racuteatilde: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	racutecolon: [
		0,
		0,
		30,
		30
	],
	racutei: [
		0,
		0,
		15,
		15
	],
	racuteiacute: [
		0,
		0,
		15,
		15
	],
	racuteicircumflex: [
		0,
		0,
		15,
		15
	],
	racuteidieresis: [
		0,
		0,
		15,
		15
	],
	racuteigrave: [
		0,
		0,
		15,
		15
	],
	racuteimacron: [
		0,
		0,
		15,
		15
	],
	racuteiogonek: [
		0,
		0,
		15,
		15
	],
	racutek: [
		0,
		0,
		15,
		15
	],
	racutekcommaaccent: [
		0,
		0,
		15,
		15
	],
	racutel: [
		0,
		0,
		15,
		15
	],
	racutelacute: [
		0,
		0,
		15,
		15
	],
	racutelcommaaccent: [
		0,
		0,
		15,
		15
	],
	racutelslash: [
		0,
		0,
		15,
		15
	],
	racutem: [
		0,
		0,
		25,
		25
	],
	racuten: [
		0,
		0,
		25,
		25,
		-15
	],
	racutenacute: [
		0,
		0,
		25,
		25,
		-15
	],
	racutencaron: [
		0,
		0,
		25,
		25,
		-15
	],
	racutencommaaccent: [
		0,
		0,
		25,
		25,
		-15
	],
	racutentilde: [
		0,
		0,
		25,
		25,
		-15
	],
	racutep: [
		0,
		0,
		30,
		30,
		-10
	],
	racutesemicolon: [
		0,
		0,
		30,
		30
	],
	racuteu: [
		0,
		0,
		15,
		15
	],
	racuteuacute: [
		0,
		0,
		15,
		15
	],
	racuteucircumflex: [
		0,
		0,
		15,
		15
	],
	racuteudieresis: [
		0,
		0,
		15,
		15
	],
	racuteugrave: [
		0,
		0,
		15,
		15
	],
	racuteuhungarumlaut: [
		0,
		0,
		15,
		15
	],
	racuteumacron: [
		0,
		0,
		15,
		15
	],
	racuteuogonek: [
		0,
		0,
		15,
		15
	],
	racuteuring: [
		0,
		0,
		15,
		15
	],
	rcarona: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronaacute: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronabreve: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronacircumflex: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronadieresis: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronagrave: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronamacron: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronaogonek: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronaring: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaronatilde: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcaroncolon: [
		0,
		0,
		30,
		30
	],
	rcaroni: [
		0,
		0,
		15,
		15
	],
	rcaroniacute: [
		0,
		0,
		15,
		15
	],
	rcaronicircumflex: [
		0,
		0,
		15,
		15
	],
	rcaronidieresis: [
		0,
		0,
		15,
		15
	],
	rcaronigrave: [
		0,
		0,
		15,
		15
	],
	rcaronimacron: [
		0,
		0,
		15,
		15
	],
	rcaroniogonek: [
		0,
		0,
		15,
		15
	],
	rcaronk: [
		0,
		0,
		15,
		15
	],
	rcaronkcommaaccent: [
		0,
		0,
		15,
		15
	],
	rcaronl: [
		0,
		0,
		15,
		15
	],
	rcaronlacute: [
		0,
		0,
		15,
		15
	],
	rcaronlcommaaccent: [
		0,
		0,
		15,
		15
	],
	rcaronlslash: [
		0,
		0,
		15,
		15
	],
	rcaronm: [
		0,
		0,
		25,
		25
	],
	rcaronn: [
		0,
		0,
		25,
		25,
		-15
	],
	rcaronnacute: [
		0,
		0,
		25,
		25,
		-15
	],
	rcaronncaron: [
		0,
		0,
		25,
		25,
		-15
	],
	rcaronncommaaccent: [
		0,
		0,
		25,
		25,
		-15
	],
	rcaronntilde: [
		0,
		0,
		25,
		25,
		-15
	],
	rcaronp: [
		0,
		0,
		30,
		30,
		-10
	],
	rcaronsemicolon: [
		0,
		0,
		30,
		30
	],
	rcaronu: [
		0,
		0,
		15,
		15
	],
	rcaronuacute: [
		0,
		0,
		15,
		15
	],
	rcaronucircumflex: [
		0,
		0,
		15,
		15
	],
	rcaronudieresis: [
		0,
		0,
		15,
		15
	],
	rcaronugrave: [
		0,
		0,
		15,
		15
	],
	rcaronuhungarumlaut: [
		0,
		0,
		15,
		15
	],
	rcaronumacron: [
		0,
		0,
		15,
		15
	],
	rcaronuogonek: [
		0,
		0,
		15,
		15
	],
	rcaronuring: [
		0,
		0,
		15,
		15
	],
	rcommaaccenta: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentaacute: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentabreve: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentacircumflex: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentadieresis: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentagrave: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentamacron: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentaogonek: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentaring: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentatilde: [
		0,
		0,
		-10,
		-10,
		0,
		0,
		-15
	],
	rcommaaccentcolon: [
		0,
		0,
		30,
		30
	],
	rcommaaccenti: [
		0,
		0,
		15,
		15
	],
	rcommaaccentiacute: [
		0,
		0,
		15,
		15
	],
	rcommaaccenticircumflex: [
		0,
		0,
		15,
		15
	],
	rcommaaccentidieresis: [
		0,
		0,
		15,
		15
	],
	rcommaaccentigrave: [
		0,
		0,
		15,
		15
	],
	rcommaaccentimacron: [
		0,
		0,
		15,
		15
	],
	rcommaaccentiogonek: [
		0,
		0,
		15,
		15
	],
	rcommaaccentk: [
		0,
		0,
		15,
		15
	],
	rcommaaccentkcommaaccent: [
		0,
		0,
		15,
		15
	],
	rcommaaccentl: [
		0,
		0,
		15,
		15
	],
	rcommaaccentlacute: [
		0,
		0,
		15,
		15
	],
	rcommaaccentlcommaaccent: [
		0,
		0,
		15,
		15
	],
	rcommaaccentlslash: [
		0,
		0,
		15,
		15
	],
	rcommaaccentm: [
		0,
		0,
		25,
		25
	],
	rcommaaccentn: [
		0,
		0,
		25,
		25,
		-15
	],
	rcommaaccentnacute: [
		0,
		0,
		25,
		25,
		-15
	],
	rcommaaccentncaron: [
		0,
		0,
		25,
		25,
		-15
	],
	rcommaaccentncommaaccent: [
		0,
		0,
		25,
		25,
		-15
	],
	rcommaaccentntilde: [
		0,
		0,
		25,
		25,
		-15
	],
	rcommaaccentp: [
		0,
		0,
		30,
		30,
		-10
	],
	rcommaaccentsemicolon: [
		0,
		0,
		30,
		30
	],
	rcommaaccentu: [
		0,
		0,
		15,
		15
	],
	rcommaaccentuacute: [
		0,
		0,
		15,
		15
	],
	rcommaaccentucircumflex: [
		0,
		0,
		15,
		15
	],
	rcommaaccentudieresis: [
		0,
		0,
		15,
		15
	],
	rcommaaccentugrave: [
		0,
		0,
		15,
		15
	],
	rcommaaccentuhungarumlaut: [
		0,
		0,
		15,
		15
	],
	rcommaaccentumacron: [
		0,
		0,
		15,
		15
	],
	rcommaaccentuogonek: [
		0,
		0,
		15,
		15
	],
	rcommaaccenturing: [
		0,
		0,
		15,
		15
	],
	scomma: [
		0,
		0,
		-15,
		-15
	],
	speriod: [
		0,
		0,
		-15,
		-15
	],
	sacutecomma: [
		0,
		0,
		-15,
		-15
	],
	sacuteperiod: [
		0,
		0,
		-15,
		-15
	],
	scaroncomma: [
		0,
		0,
		-15,
		-15
	],
	scaronperiod: [
		0,
		0,
		-15,
		-15
	],
	scedillacomma: [
		0,
		0,
		-15,
		-15
	],
	scedillaperiod: [
		0,
		0,
		-15,
		-15
	],
	scommaaccentcomma: [
		0,
		0,
		-15,
		-15
	],
	scommaaccentperiod: [
		0,
		0,
		-15,
		-15
	],
	ve: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	veacute: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vecaron: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vecircumflex: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vedieresis: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vedotaccent: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vegrave: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	vemacron: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	veogonek: [
		0,
		0,
		-25,
		-25,
		-10,
		-15,
		0,
		-15
	],
	wa: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	waacute: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	wabreve: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	wacircumflex: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	wadieresis: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	wagrave: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	wamacron: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	waogonek: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	waring: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	watilde: [
		0,
		0,
		-15,
		-15,
		0,
		-10,
		0,
		-10
	],
	we: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	weacute: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wecaron: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wecircumflex: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wedieresis: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wedotaccent: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wegrave: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	wemacron: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	weogonek: [
		0,
		0,
		-10,
		-10,
		0,
		-10
	],
	zo: [
		0,
		0,
		-15,
		-15
	],
	zoacute: [
		0,
		0,
		-15,
		-15
	],
	zocircumflex: [
		0,
		0,
		-15,
		-15
	],
	zodieresis: [
		0,
		0,
		-15,
		-15
	],
	zograve: [
		0,
		0,
		-15,
		-15
	],
	zohungarumlaut: [
		0,
		0,
		-15,
		-15
	],
	zomacron: [
		0,
		0,
		-15,
		-15
	],
	zoslash: [
		0,
		0,
		-15,
		-15
	],
	zotilde: [
		0,
		0,
		-15,
		-15
	],
	zacuteo: [
		0,
		0,
		-15,
		-15
	],
	zacuteoacute: [
		0,
		0,
		-15,
		-15
	],
	zacuteocircumflex: [
		0,
		0,
		-15,
		-15
	],
	zacuteodieresis: [
		0,
		0,
		-15,
		-15
	],
	zacuteograve: [
		0,
		0,
		-15,
		-15
	],
	zacuteohungarumlaut: [
		0,
		0,
		-15,
		-15
	],
	zacuteomacron: [
		0,
		0,
		-15,
		-15
	],
	zacuteoslash: [
		0,
		0,
		-15,
		-15
	],
	zacuteotilde: [
		0,
		0,
		-15,
		-15
	],
	zcarono: [
		0,
		0,
		-15,
		-15
	],
	zcaronoacute: [
		0,
		0,
		-15,
		-15
	],
	zcaronocircumflex: [
		0,
		0,
		-15,
		-15
	],
	zcaronodieresis: [
		0,
		0,
		-15,
		-15
	],
	zcaronograve: [
		0,
		0,
		-15,
		-15
	],
	zcaronohungarumlaut: [
		0,
		0,
		-15,
		-15
	],
	zcaronomacron: [
		0,
		0,
		-15,
		-15
	],
	zcaronoslash: [
		0,
		0,
		-15,
		-15
	],
	zcaronotilde: [
		0,
		0,
		-15,
		-15
	],
	zdotaccento: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentoacute: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentocircumflex: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentodieresis: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentograve: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentohungarumlaut: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentomacron: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentoslash: [
		0,
		0,
		-15,
		-15
	],
	zdotaccentotilde: [
		0,
		0,
		-15,
		-15
	],
	Ap: [
		0,
		0,
		0,
		0,
		-25
	],
	Aquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Aacutep: [
		0,
		0,
		0,
		0,
		-25
	],
	Aacutequoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Abrevep: [
		0,
		0,
		0,
		0,
		-25
	],
	Abrevequoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Acircumflexp: [
		0,
		0,
		0,
		0,
		-25
	],
	Acircumflexquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Adieresisp: [
		0,
		0,
		0,
		0,
		-25
	],
	Adieresisquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Agravep: [
		0,
		0,
		0,
		0,
		-25
	],
	Agravequoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Amacronp: [
		0,
		0,
		0,
		0,
		-25
	],
	Amacronquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Aogonekp: [
		0,
		0,
		0,
		0,
		-25
	],
	Aogonekquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Aringp: [
		0,
		0,
		0,
		0,
		-25
	],
	Aringquoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Atildep: [
		0,
		0,
		0,
		0,
		-25
	],
	Atildequoteright: [
		0,
		0,
		0,
		0,
		-74,
		-74,
		-37,
		-111
	],
	Je: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jeacute: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jecaron: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jecircumflex: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jedieresis: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jedotaccent: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jegrave: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jemacron: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jeogonek: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jo: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Joacute: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jocircumflex: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jodieresis: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jograve: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Johungarumlaut: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jomacron: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Joslash: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	Jotilde: [
		0,
		0,
		0,
		0,
		-15,
		-40,
		-25
	],
	NA: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAacute: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAbreve: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAcircumflex: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAdieresis: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAgrave: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAmacron: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAogonek: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAring: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NAtilde: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteA: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAacute: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAbreve: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAcircumflex: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAdieresis: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAgrave: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAmacron: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAogonek: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAring: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NacuteAtilde: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronA: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAacute: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAbreve: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAcircumflex: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAdieresis: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAgrave: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAmacron: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAogonek: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAring: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcaronAtilde: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentA: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAacute: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAbreve: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAcircumflex: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAdieresis: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAgrave: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAmacron: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAogonek: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAring: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NcommaaccentAtilde: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeA: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAacute: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAbreve: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAcircumflex: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAdieresis: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAgrave: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAmacron: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAogonek: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAring: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	NtildeAtilde: [
		0,
		0,
		0,
		0,
		-20,
		-30,
		-27,
		-35
	],
	Ti: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tiacute: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tiogonek: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcaroni: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcaroniacute: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcaroniogonek: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcommaaccenti: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcommaaccentiacute: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Tcommaaccentiogonek: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-35
	],
	Vi: [
		0,
		0,
		0,
		0,
		-37,
		-55,
		-74,
		-60
	],
	Viacute: [
		0,
		0,
		0,
		0,
		-37,
		-55,
		-74,
		-60
	],
	Vicircumflex: [
		0,
		0,
		0,
		0,
		-37,
		0,
		-34,
		-20
	],
	Vidieresis: [
		0,
		0,
		0,
		0,
		-37,
		0,
		-34,
		-20
	],
	Vigrave: [
		0,
		0,
		0,
		0,
		-37,
		0,
		-34,
		-20
	],
	Vimacron: [
		0,
		0,
		0,
		0,
		-37,
		0,
		-34,
		-20
	],
	Viogonek: [
		0,
		0,
		0,
		0,
		-37,
		-55,
		-74,
		-60
	],
	Wi: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-40
	],
	Wiacute: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-40
	],
	Wiogonek: [
		0,
		0,
		0,
		0,
		-18,
		-37,
		-55,
		-40
	],
	fi: [
		0,
		0,
		0,
		0,
		-25,
		0,
		-20,
		-20
	],
	gperiod: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-15
	],
	gbreveperiod: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-15
	],
	gcommaaccentperiod: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-15
	],
	iv: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	iacutev: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	icircumflexv: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	idieresisv: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	igravev: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	imacronv: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	iogonekv: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-25
	],
	ky: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	kyacute: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	kydieresis: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	kcommaaccenty: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	kcommaaccentyacute: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	kcommaaccentydieresis: [
		0,
		0,
		0,
		0,
		-15,
		0,
		-10,
		-15
	],
	quotedblleftA: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAacute: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAbreve: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAcircumflex: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAdieresis: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAgrave: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAmacron: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAogonek: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAring: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quotedblleftAtilde: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftA: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAacute: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAbreve: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAcircumflex: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAdieresis: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAgrave: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAmacron: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAogonek: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAring: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	quoteleftAtilde: [
		0,
		0,
		0,
		0,
		-10,
		0,
		0,
		-80
	],
	re: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	reacute: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	recaron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	recircumflex: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	redieresis: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	redotaccent: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	regrave: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	remacron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	reogonek: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racutee: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteeacute: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteecaron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteecircumflex: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteedieresis: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteedotaccent: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteegrave: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteemacron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	racuteeogonek: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcarone: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaroneacute: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronecaron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronecircumflex: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronedieresis: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronedotaccent: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronegrave: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaronemacron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcaroneogonek: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccente: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccenteacute: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentecaron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentecircumflex: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentedieresis: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentedotaccent: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentegrave: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccentemacron: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	rcommaaccenteogonek: [
		0,
		0,
		0,
		0,
		-18,
		0,
		-37
	],
	spaceA: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAacute: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAbreve: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAcircumflex: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAdieresis: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAgrave: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAmacron: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAogonek: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAring: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	spaceAtilde: [
		0,
		0,
		0,
		0,
		-55,
		-37,
		-18,
		-55
	],
	Fi: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Fiacute: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Ficircumflex: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Fidieresis: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Figrave: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Fimacron: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	Fiogonek: [
		0,
		0,
		0,
		0,
		0,
		-40,
		-45
	],
	eb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	eacuteb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ecaronb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ecircumflexb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	edieresisb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	edotaccentb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	egraveb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	emacronb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	eogonekb: [
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ff: [
		0,
		0,
		0,
		0,
		0,
		-18,
		-18,
		-25
	],
	quoterightt: [
		0,
		0,
		0,
		0,
		0,
		-37,
		-30,
		-18
	],
	quoterighttcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		-37,
		-30,
		-18
	],
	Yicircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yidieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yigrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yimacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yacuteicircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yacuteidieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yacuteigrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Yacuteimacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Ydieresisicircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Ydieresisidieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Ydieresisigrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	Ydieresisimacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		-34
	],
	eg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	egbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	egcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eacuteg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eacutegbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eacutegcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecarong: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecarongbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecarongcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecircumflexg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecircumflexgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	ecircumflexgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edieresisg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edieresisgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edieresisgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edotaccentg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edotaccentgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	edotaccentgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	egraveg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	egravegbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	egravegcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	emacrong: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	emacrongbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	emacrongcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eogonekg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eogonekgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	eogonekgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-40,
		-15
	],
	fiogonek: [
		0,
		0,
		0,
		0,
		0,
		0,
		-20
	],
	gcomma: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	gbrevecomma: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	gcommaaccentcomma: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	og: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ogbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ogcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	oacuteg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	oacutegbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	oacutegcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ocircumflexg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ocircumflexgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ocircumflexgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	odieresisg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	odieresisgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	odieresisgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ograveg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ogravegbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ogravegcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ohungarumlautg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ohungarumlautgbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	ohungarumlautgcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	omacrong: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	omacrongbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	omacrongcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	otildeg: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	otildegbreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	otildegcommaaccent: [
		0,
		0,
		0,
		0,
		0,
		0,
		-10
	],
	fiacute: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-20
	],
	ga: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gaacute: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gabreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gacircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gadieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gagrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gamacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gaogonek: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	garing: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gatilde: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbrevea: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveaacute: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveabreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveacircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveadieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveagrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveamacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveaogonek: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbrevearing: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gbreveatilde: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccenta: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentaacute: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentabreve: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentacircumflex: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentadieresis: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentagrave: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentamacron: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentaogonek: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentaring: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	],
	gcommaaccentatilde: [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-5
	]
};
var data = {
	attributes: attributes,
	glyphWidths: glyphWidths,
	kernPairs: kernPairs
};

var initFont = function initFont(font) {
  return [font.FontName, {
    attributes: font,
    glyphWidths: {},
    kernPairs: {}
  }];
};

var expandData = function expandData(data) {
  var attributes = data.attributes,
      glyphWidths = data.glyphWidths,
      kernPairs = data.kernPairs;
  var fonts = attributes.map(initFont);
  Object.keys(glyphWidths).forEach(function (key) {
    glyphWidths[key].forEach(function (value, index) {
      if (value) fonts[index][1].glyphWidths[key] = value;
    });
  });
  Object.keys(kernPairs).forEach(function (key) {
    kernPairs[key].forEach(function (value, index) {
      if (value) fonts[index][1].kernPairs[key] = value;
    });
  });
  return Object.fromEntries(fonts);
};

var STANDARD_FONTS = expandData(data);

var createStandardFont = function createStandardFont(PDFFont) {
  return /*#__PURE__*/function (_PDFFont) {
    (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(StandardFont, _PDFFont);

    function StandardFont(document, name, id) {
      var _this;

      _this = _PDFFont.call(this) || this;
      _this.document = document;
      _this.name = name;
      _this.id = id;
      _this.font = AFMFont.fromJson(STANDARD_FONTS[_this.name]);
      _this.ascender = _this.font.ascender;
      _this.descender = _this.font.descender;
      _this.bbox = _this.font.bbox;
      _this.lineGap = _this.font.lineGap;
      return _this;
    }

    var _proto = StandardFont.prototype;

    _proto.embed = function embed() {
      this.dictionary.data = {
        Type: 'Font',
        BaseFont: this.name,
        Subtype: 'Type1',
        Encoding: 'WinAnsiEncoding'
      };
      return this.dictionary.end();
    };

    _proto.encode = function encode(text) {
      var encoded = this.font.encodeText(text);
      var glyphs = this.font.glyphsForString("" + text);
      var advances = this.font.advancesForGlyphs(glyphs);
      var positions = [];

      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];
        positions.push({
          xAdvance: advances[i],
          yAdvance: 0,
          xOffset: 0,
          yOffset: 0,
          advanceWidth: this.font.widthOfGlyph(glyph)
        });
      }

      return [encoded, positions];
    };

    _proto.encodeGlyphs = function encodeGlyphs(glyphs) {
      var res = [];

      for (var _i = 0, _Array$from = Array.from(glyphs); _i < _Array$from.length; _i++) {
        var glyph = _Array$from[_i];
        res.push(("00" + glyph.id.toString(16)).slice(-2));
      }

      return res;
    };

    _proto.widthOfString = function widthOfString(string, size) {
      var glyphs = this.font.glyphsForString("" + string);
      var advances = this.font.advancesForGlyphs(glyphs);
      var width = 0;

      for (var _i2 = 0, _Array$from2 = Array.from(advances); _i2 < _Array$from2.length; _i2++) {
        var advance = _Array$from2[_i2];
        width += advance;
      }

      var scale = size / 1000;
      return width * scale;
    };

    StandardFont.isStandardFont = function isStandardFont(name) {
      return name in STANDARD_FONTS;
    };

    return StandardFont;
  }(PDFFont);
};

var toHex = function toHex() {
  for (var _len = arguments.length, codePoints = new Array(_len), _key = 0; _key < _len; _key++) {
    codePoints[_key] = arguments[_key];
  }

  var codes = Array.from(codePoints).map(function (code) {
    return ("0000" + code.toString(16)).slice(-4);
  });
  return codes.join('');
};

var createEmbeddedFont = function createEmbeddedFont(PDFFont) {
  return /*#__PURE__*/function (_PDFFont) {
    (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(EmbeddedFont, _PDFFont);

    function EmbeddedFont(document, font, id) {
      var _this;

      _this = _PDFFont.call(this) || this;
      _this.document = document;
      _this.font = font;
      _this.id = id;
      _this.subset = _this.font.createSubset();
      _this.unicode = [[0]];
      _this.widths = [_this.font.getGlyph(0).advanceWidth];
      _this.name = _this.font.postscriptName;
      _this.scale = 1000 / _this.font.unitsPerEm;
      _this.ascender = _this.font.ascent * _this.scale;
      _this.descender = _this.font.descent * _this.scale;
      _this.xHeight = _this.font.xHeight * _this.scale;
      _this.capHeight = _this.font.capHeight * _this.scale;
      _this.lineGap = _this.font.lineGap * _this.scale;
      _this.bbox = _this.font.bbox;
      _this.layoutCache = Object.create(null);
      return _this;
    }

    var _proto = EmbeddedFont.prototype;

    _proto.layoutRun = function layoutRun(text, features) {
      var run = this.font.layout(text, features); // Normalize position values

      for (var i = 0; i < run.positions.length; i++) {
        var position = run.positions[i];

        for (var key in position) {
          position[key] *= this.scale;
        }

        position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
      }

      return run;
    };

    _proto.layoutCached = function layoutCached(text) {
      var cached;

      if (cached = this.layoutCache[text]) {
        return cached;
      }

      var run = this.layoutRun(text);
      this.layoutCache[text] = run;
      return run;
    };

    _proto.layout = function layout(text, features, onlyWidth) {
      // Skip the cache if any user defined features are applied
      if (onlyWidth == null) {
        onlyWidth = false;
      }

      if (features) {
        return this.layoutRun(text, features);
      }

      var glyphs = onlyWidth ? null : [];
      var positions = onlyWidth ? null : [];
      var advanceWidth = 0; // Split the string by words to increase cache efficiency.
      // For this purpose, spaces and tabs are a good enough delimeter.

      var last = 0;
      var index = 0;

      while (index <= text.length) {
        var needle;

        if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\t'].includes(needle))) {
          var run = this.layoutCached(text.slice(last, ++index));

          if (!onlyWidth) {
            glyphs.push.apply(glyphs, Array.from(run.glyphs || []));
            positions.push.apply(positions, Array.from(run.positions || []));
          }

          advanceWidth += run.advanceWidth;
          last = index;
        } else {
          index++;
        }
      }

      return {
        glyphs: glyphs,
        positions: positions,
        advanceWidth: advanceWidth
      };
    };

    _proto.encode = function encode(text, features) {
      var _this$layout = this.layout(text, features),
          glyphs = _this$layout.glyphs,
          positions = _this$layout.positions;

      var res = [];

      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];
        var gid = this.subset.includeGlyph(glyph.id);
        res.push(("0000" + gid.toString(16)).slice(-4));

        if (this.widths[gid] == null) {
          this.widths[gid] = glyph.advanceWidth * this.scale;
        }

        if (this.unicode[gid] == null) {
          this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);
        }
      }

      return [res, positions];
    };

    _proto.encodeGlyphs = function encodeGlyphs(glyphs) {
      var res = [];

      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];
        var gid = this.subset.includeGlyph(glyph.id);
        res.push(("0000" + gid.toString(16)).slice(-4));

        if (this.widths[gid] == null) {
          this.widths[gid] = glyph.advanceWidth * this.scale;
        }

        if (this.unicode[gid] == null) {
          this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id);
        }
      }

      return res;
    };

    _proto.widthOfString = function widthOfString(string, size, features) {
      var width = this.layout(string, features, true).advanceWidth;
      var scale = size / 1000;
      return width * scale;
    };

    _proto.embed = function embed() {
      var isCFF = this.subset.cff != null;
      var fontFile = this.document.ref();

      if (isCFF) {
        fontFile.data.Subtype = 'CIDFontType0C';
      }

      this.subset.encodeStream().pipe(fontFile);
      var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;
      var flags = 0;

      if (this.font.post.isFixedPitch) {
        flags |= 1 << 0;
      }

      if (1 <= familyClass && familyClass <= 7) {
        flags |= 1 << 1;
      }

      flags |= 1 << 2; // assume the font uses non-latin characters

      if (familyClass === 10) {
        flags |= 1 << 3;
      }

      if (this.font.head.macStyle.italic) {
        flags |= 1 << 6;
      } // generate a random tag (6 uppercase letters. 65 is the char code for 'A')


      var tag = [0, 1, 2, 3, 4, 5].map(function (i) {
        return String.fromCharCode(Math.random() * 26 + 65);
      }).join('');
      var name = tag + '+' + this.font.postscriptName;
      var bbox = this.font.bbox;
      var descriptor = this.document.ref({
        Type: 'FontDescriptor',
        FontName: name,
        Flags: flags,
        FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
        ItalicAngle: this.font.italicAngle,
        Ascent: this.ascender,
        Descent: this.descender,
        CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
        XHeight: (this.font.xHeight || 0) * this.scale,
        StemV: 0
      }); // not sure how to calculate this

      if (isCFF) {
        descriptor.data.FontFile3 = fontFile;
      } else {
        descriptor.data.FontFile2 = fontFile;
      }

      descriptor.end();
      var descendantFont = this.document.ref({
        Type: 'Font',
        Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',
        BaseFont: name,
        CIDSystemInfo: {
          Registry: new String('Adobe'),
          Ordering: new String('Identity'),
          Supplement: 0
        },
        FontDescriptor: descriptor,
        W: [0, this.widths]
      });
      descendantFont.end();
      this.dictionary.data = {
        Type: 'Font',
        Subtype: 'Type0',
        BaseFont: name,
        Encoding: 'Identity-H',
        DescendantFonts: [descendantFont],
        ToUnicode: this.toUnicodeCmap()
      };
      return this.dictionary.end();
    } // Maps the glyph ids encoded in the PDF back to unicode strings
    // Because of ligature substitutions and the like, there may be one or more
    // unicode characters represented by each glyph.
    ;

    _proto.toUnicodeCmap = function toUnicodeCmap() {
      var cmap = this.document.ref();
      var entries = [];

      for (var _i = 0, _Array$from = Array.from(this.unicode); _i < _Array$from.length; _i++) {
        var codePoints = _Array$from[_i];
        var encoded = [];

        for (var _i2 = 0, _Array$from2 = Array.from(codePoints); _i2 < _Array$from2.length; _i2++) {
          var value = _Array$from2[_i2];

          if (value > 0xffff) {
            value -= 0x10000;
            encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
            value = 0xdc00 | value & 0x3ff;
          }

          encoded.push(toHex(value));
          entries.push("<" + encoded.join(' ') + ">");
        }
      }

      cmap.end("  /CIDInit /ProcSet findresource begin\n  12 dict begin\n  begincmap\n  /CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n  >> def\n  /CMapName /Adobe-Identity-UCS def\n  /CMapType 2 def\n  1 begincodespacerange\n  <0000><ffff>\n  endcodespacerange\n  1 beginbfrange\n  <0000> <" + toHex(entries.length - 1) + "> [" + entries.join(' ') + "]\n  endbfrange\n  endcmap\n  CMapName currentdict /CMap defineresource pop\n  end\n  end  ");
      return cmap;
    };

    return EmbeddedFont;
  }(PDFFont);
};

var PDFFont = /*#__PURE__*/function () {
  function PDFFont() {}

  PDFFont.open = function open(document, src, family, id) {
    var font;

    if (typeof src === 'string') {
      if (StandardFont.isStandardFont(src)) {
        return new StandardFont(document, src, id);
      }

      font = _react_pdf_fontkit__WEBPACK_IMPORTED_MODULE_5__["default"].openSync(src, family);
    } else if (Buffer.isBuffer(src)) {
      font = _react_pdf_fontkit__WEBPACK_IMPORTED_MODULE_5__["default"].create(src, family);
    } else if (src instanceof Uint8Array) {
      font = _react_pdf_fontkit__WEBPACK_IMPORTED_MODULE_5__["default"].create(Buffer.from(src), family);
    } else if (src instanceof ArrayBuffer) {
      font = _react_pdf_fontkit__WEBPACK_IMPORTED_MODULE_5__["default"].create(Buffer.from(new Uint8Array(src)), family);
    } else if (typeof src === 'object') {
      font = src;
    }

    if (font == null) {
      throw new Error('Not a supported font format or standard PDF font.');
    }

    return new EmbeddedFont(document, font, id);
  };

  var _proto = PDFFont.prototype;

  _proto.encode = function encode(text) {
    throw new Error('Must be implemented by subclasses');
  };

  _proto.widthOfString = function widthOfString(text) {
    throw new Error('Must be implemented by subclasses');
  };

  _proto.ref = function ref() {
    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
  };

  _proto.finalize = function finalize() {
    if (this.embedded || this.dictionary == null) {
      return;
    }

    this.embed();
    return this.embedded = true;
  };

  _proto.embed = function embed() {
    throw new Error('Must be implemented by subclasses');
  };

  _proto.lineHeight = function lineHeight(size, includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }

    var gap = includeGap ? this.lineGap : 0;
    return (this.ascender + gap - this.descender) / 1000 * size;
  };

  return PDFFont;
}();
var StandardFont = createStandardFont(PDFFont);
var EmbeddedFont = createEmbeddedFont(PDFFont);

var Fonts = {
  initFonts: function initFonts() {
    // Lookup table for embedded fonts
    this._fontFamilies = {};
    this._fontCount = 0; // Font state

    this._fontSize = 12;
    this._font = null;
    this._registeredFonts = {}; // Set the default font

    return this.font('Helvetica');
  },
  font: function font(src, family, size) {
    var cacheKey, font;

    if (typeof family === 'number') {
      size = family;
      family = null;
    } // check registered fonts if src is a string


    if (typeof src === 'string' && this._registeredFonts[src]) {
      cacheKey = src;
      var _this$_registeredFont = this._registeredFonts[src];
      src = _this$_registeredFont.src;
      family = _this$_registeredFont.family;
    } else {
      cacheKey = family || src;

      if (typeof cacheKey !== 'string') {
        cacheKey = null;
      }
    }

    if (size != null) {
      this.fontSize(size);
    } // fast path: check if the font is already in the PDF


    if (font = this._fontFamilies[cacheKey]) {
      this._font = font;
      return this;
    } // load the font


    var id = "F" + ++this._fontCount;
    this._font = PDFFont.open(this, src, family, id); // check for existing font familes with the same name already in the PDF
    // useful if the font was passed as a buffer

    if (font = this._fontFamilies[this._font.name]) {
      this._font = font;
      return this;
    } // save the font for reuse later


    if (cacheKey) {
      this._fontFamilies[cacheKey] = this._font;
    }

    if (this._font.name) {
      this._fontFamilies[this._font.name] = this._font;
    }

    return this;
  },
  fontSize: function fontSize(_fontSize) {
    this._fontSize = _fontSize;
    return this;
  },
  currentLineHeight: function currentLineHeight(includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }

    return this._font.lineHeight(this._fontSize, includeGap);
  },
  registerFont: function registerFont(name, src, family) {
    this._registeredFonts[name] = {
      src: src,
      family: family
    };
    return this;
  }
};

var number = PDFObject$1.number;
var Text = {
  initText: function initText() {
    this._line = this._line.bind(this); // Current coordinates

    this.x = 0;
    this.y = 0;
    return this._lineGap = 0;
  },
  _text: function _text(text, x, y, options, lineCallback) {
    var _this = this;

    options = this._initOptions(x, y, options); // Convert text to a string

    text = text == null ? '' : "" + text; // if the wordSpacing option is specified, remove multiple consecutive spaces

    if (options.wordSpacing) {
      text = text.replace(/\s{2,}/g, ' ');
    }

    var addStructure = function addStructure() {
      if (options.structParent) {
        options.structParent.add(_this.struct(options.structType || 'P', [_this.markStructureContent(options.structType || 'P')]));
      }
    };

    for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(text.split('\n')), _step; !(_step = _iterator()).done;) {
      var line = _step.value;
      addStructure();
      lineCallback(line, options);
    }

    return this;
  },
  text: function text(_text2, x, y, options) {
    return this._text(_text2, x, y, options, this._line);
  },
  widthOfString: function widthOfString(string, options) {
    if (options === void 0) {
      options = {};
    }

    return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
  },
  _initOptions: function _initOptions(x, y, options) {
    if (x === void 0) {
      x = {};
    }

    if (options === void 0) {
      options = {};
    }

    if (typeof x === 'object') {
      options = x;
      x = null;
    } // clone options object


    var result = Object.assign({}, options); // extend options with previous values for continued text

    if (this._textOptions) {
      for (var key in this._textOptions) {
        var val = this._textOptions[key];

        if (key !== 'continued') {
          if (result[key] === undefined) {
            result[key] = val;
          }
        }
      }
    } // Update the current position


    if (x != null) {
      this.x = x;
    }

    if (y != null) {
      this.y = y;
    } // wrap to margins if no x or y position passed


    if (result.lineBreak !== false) {
      if (result.width == null) {
        result.width = this.page.width - this.x - this.page.margins.right;
      }

      result.width = Math.max(result.width, 0);
    }

    if (!result.columns) {
      result.columns = 0;
    }

    if (result.columnGap == null) {
      result.columnGap = 18;
    } // 1/4 inch


    return result;
  },
  _line: function _line(text, options) {
    if (options === void 0) {
      options = {};
    }

    this._fragment(text, this.x, this.y, options);

    return this.x += this.widthOfString(text);
  },
  _fragment: function _fragment(text, x, y, options) {
    text = ("" + text).replace(/\n/g, '');
    if (text.length === 0) return;

    var _this$_font$encode = this._font.encode(text, options.features),
        encoded = _this$_font$encode[0],
        positions = _this$_font$encode[1];

    var dy = this._font.ascender / 1000 * this._fontSize;

    this._glyphs(encoded, positions, x, y + dy, options);
  },
  _glyphs: function _glyphs(encoded, positions, x, y, options) {
    var _this2 = this;

    var commands = [];
    var scale = this._fontSize / 1000;
    var i;
    var last = 0;
    var hadOffset = false;
    this.save(); // flip coordinate system

    this.transform(1, 0, 0, -1, 0, this.page.height);
    y = this.page.height - y; // add current font to page if necessary

    if (this.page.fonts[this._font.id] == null) {
      this.page.fonts[this._font.id] = this._font.ref();
    } // begin the text object


    this.addContent('BT'); // text position

    this.addContent("1 0 0 1 " + number(x) + " " + number(y) + " Tm"); // font and font size

    this.addContent("/" + this._font.id + " " + number(this._fontSize) + " Tf"); // rendering mode

    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;

    if (mode) {
      this.addContent(mode + " Tr");
    } // Adds a segment of text to the TJ command buffer


    var addSegment = function addSegment(cur) {
      if (last < cur) {
        var hex = encoded.slice(last, cur).join('');
        var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
        commands.push("<" + hex + "> " + number(-advance));
      }

      return last = cur;
    }; // Flushes the current TJ commands to the output stream


    var flush = function flush(i) {
      addSegment(i);

      if (commands.length > 0) {
        _this2.addContent("[" + commands.join(' ') + "] TJ");

        return commands.length = 0;
      }
    };

    for (i = 0; i < positions.length; i++) {
      // If we have an x or y offset, we have to break out of the current TJ command
      // so we can move the text position.
      var pos = positions[i];

      if (pos.xOffset || pos.yOffset) {
        // Flush the current buffer
        flush(i); // Move the text position and flush just the current character

        this.addContent("1 0 0 1 " + number(x + pos.xOffset * scale) + " " + number(y + pos.yOffset * scale) + " Tm");
        flush(i + 1);
        hadOffset = true;
      } else {
        // If the last character had an offset, reset the text position
        if (hadOffset) {
          this.addContent("1 0 0 1 " + number(x) + " " + number(y) + " Tm");
          hadOffset = false;
        } // Group segments that don't have any advance adjustments


        if (pos.xAdvance - pos.advanceWidth !== 0) {
          addSegment(i + 1);
        }
      }

      x += pos.xAdvance * scale;
    } // Flush any remaining commands


    flush(i); // end the text object

    this.addContent('ET'); // restore flipped coordinate system

    return this.restore();
  }
};

var MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];

var JPEG = /*#__PURE__*/function () {
  function JPEG(data, label) {
    var marker;
    this.data = data;
    this.label = label;

    if (this.data.readUInt16BE(0) !== 0xffd8) {
      throw 'SOI not found in JPEG';
    }

    var pos = 2;

    while (pos < this.data.length) {
      marker = this.data.readUInt16BE(pos);
      pos += 2;

      if (Array.from(MARKERS).includes(marker)) {
        break;
      }

      pos += this.data.readUInt16BE(pos);
    }

    if (!Array.from(MARKERS).includes(marker)) {
      throw 'Invalid JPEG.';
    }

    pos += 2;
    this.bits = this.data[pos++];
    this.height = this.data.readUInt16BE(pos);
    pos += 2;
    this.width = this.data.readUInt16BE(pos);
    pos += 2;
    var channels = this.data[pos++];

    this.colorSpace = function () {
      switch (channels) {
        case 1:
          return 'DeviceGray';

        case 3:
          return 'DeviceRGB';

        case 4:
          return 'DeviceCMYK';
      }
    }();

    this.obj = null;
  }

  var _proto = JPEG.prototype;

  _proto.embed = function embed(document) {
    if (this.obj) {
      return;
    }

    this.obj = document.ref({
      Type: 'XObject',
      Subtype: 'Image',
      BitsPerComponent: this.bits,
      Width: this.width,
      Height: this.height,
      ColorSpace: this.colorSpace,
      Filter: 'DCTDecode'
    }); // add extra decode params for CMYK images. By swapping the
    // min and max values from the default, we invert the colors. See
    // section 4.8.4 of the spec.

    if (this.colorSpace === 'DeviceCMYK') {
      this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];
    }

    this.obj.end(this.data); // free memory

    this.data = null;
  };

  return JPEG;
}();

var PNGImage = /*#__PURE__*/function () {
  function PNGImage(data, label) {
    this.label = label;
    this.image = new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__["default"](data);
    this.width = this.image.width;
    this.height = this.image.height;
    this.imgData = this.image.imgData;
    this.obj = null;
  }

  var _proto = PNGImage.prototype;

  _proto.embed = function embed(document) {
    var dataDecoded = false;
    this.document = document;
    if (this.obj) return;
    var hasAlphaChannel = this.image.hasAlphaChannel;
    var isInterlaced = this.image.interlaceMethod === 1;
    this.obj = this.document.ref({
      Type: 'XObject',
      Subtype: 'Image',
      BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
      Width: this.width,
      Height: this.height,
      Filter: 'FlateDecode'
    });

    if (!hasAlphaChannel) {
      var params = this.document.ref({
        Predictor: isInterlaced ? 1 : 15,
        Colors: this.image.colors,
        BitsPerComponent: this.image.bits,
        Columns: this.width
      });
      this.obj.data['DecodeParms'] = params;
      params.end();
    }

    if (this.image.palette.length === 0) {
      this.obj.data['ColorSpace'] = this.image.colorSpace;
    } else {
      // embed the color palette in the PDF as an object stream
      var palette = this.document.ref();
      palette.end(Buffer.from(this.image.palette)); // build the color space array for the image

      this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];
    } // For PNG color types 0, 2 and 3, the transparency data is stored in
    // a dedicated PNG chunk.


    if (this.image.transparency.grayscale != null) {
      // Use Color Key Masking (spec section 4.8.5)
      // An array with N elements, where N is two times the number of color components.
      var val = this.image.transparency.grayscale;
      this.obj.data['Mask'] = [val, val];
    } else if (this.image.transparency.rgb) {
      // Use Color Key Masking (spec section 4.8.5)
      // An array with N elements, where N is two times the number of color components.
      var rgb = this.image.transparency.rgb;
      var mask = [];

      for (var _iterator = (0,_babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__["default"])(rgb), _step; !(_step = _iterator()).done;) {
        var x = _step.value;
        mask.push(x, x);
      }

      this.obj.data['Mask'] = mask;
    } else if (this.image.transparency.indexed) {
      // Create a transparency SMask for the image based on the data
      // in the PLTE and tRNS sections. See below for details on SMasks.
      dataDecoded = true;
      return this.loadIndexedAlphaChannel();
    } else if (hasAlphaChannel) {
      // For PNG color types 4 and 6, the transparency data is stored as a alpha
      // channel mixed in with the main image data. Separate this data out into an
      // SMask object and store it separately in the PDF.
      dataDecoded = true;
      return this.splitAlphaChannel();
    }

    if (isInterlaced && !dataDecoded) {
      return this.decodeData();
    }

    this.finalize();
  };

  _proto.finalize = function finalize() {
    if (this.alphaChannel) {
      var sMask = this.document.ref({
        Type: 'XObject',
        Subtype: 'Image',
        Height: this.height,
        Width: this.width,
        BitsPerComponent: 8,
        Filter: 'FlateDecode',
        ColorSpace: 'DeviceGray',
        Decode: [0, 1]
      });
      sMask.end(this.alphaChannel);
      this.obj.data['SMask'] = sMask;
    } // add the actual image data


    this.obj.end(this.imgData); // free memory

    this.image = null;
    this.imgData = null;
  };

  _proto.splitAlphaChannel = function splitAlphaChannel() {
    var _this = this;

    return this.image.decodePixels(function (pixels) {
      var a;
      var p;
      var colorCount = _this.image.colors;
      var pixelCount = _this.width * _this.height;
      var imgData = Buffer.alloc(pixelCount * colorCount);
      var alphaChannel = Buffer.alloc(pixelCount);
      var i = p = a = 0;
      var len = pixels.length; // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)

      var skipByteCount = _this.image.bits === 16 ? 1 : 0;

      while (i < len) {
        for (var colorIndex = 0; colorIndex < colorCount; colorIndex++) {
          imgData[p++] = pixels[i++];
          i += skipByteCount;
        }

        alphaChannel[a++] = pixels[i++];
        i += skipByteCount;
      }

      _this.imgData = zlib__WEBPACK_IMPORTED_MODULE_3___default().deflateSync(imgData);
      _this.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_3___default().deflateSync(alphaChannel);
      return _this.finalize();
    });
  };

  _proto.loadIndexedAlphaChannel = function loadIndexedAlphaChannel() {
    var _this2 = this;

    var transparency = this.image.transparency.indexed;
    return this.image.decodePixels(function (pixels) {
      var alphaChannel = Buffer.alloc(_this2.width * _this2.height);
      var i = 0;

      for (var j = 0, end = pixels.length; j < end; j++) {
        alphaChannel[i++] = transparency[pixels[j]];
      }

      _this2.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_3___default().deflateSync(alphaChannel);
      return _this2.finalize();
    });
  };

  _proto.decodeData = function decodeData() {
    var _this3 = this;

    this.image.decodePixels(function (pixels) {
      _this3.imgData = zlib__WEBPACK_IMPORTED_MODULE_3___default().deflateSync(pixels);

      _this3.finalize();
    });
  };

  return PNGImage;
}();

var PDFImage = /*#__PURE__*/function () {
  function PDFImage() {}

  PDFImage.open = function open(src, label) {
    var data;

    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      var match = /^data:.+;base64,(.*)$/.exec(src);

      if (match) {
        data = Buffer.from(match[1], 'base64');
      }
    }

    if (data[0] === 0xff && data[1] === 0xd8) {
      return new JPEG(data, label);
    }

    if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {
      return new PNGImage(data, label);
    }

    throw new Error('Unknown image format.');
  };

  return PDFImage;
}();

var Images = {
  initImages: function initImages() {
    this._imageRegistry = {};
    this._imageCount = 0;
  },
  embedImage: function embedImage(src) {
    var image;

    if (typeof src === 'string') {
      image = this._imageRegistry[src];
    }

    if (!image) {
      if (src.width && src.height) {
        image = src;
      } else {
        image = this.openImage(src);
      }
    }

    if (!image.obj) {
      image.embed(this);
    }

    return image;
  },
  image: function image(src, x, y, options) {
    if (options === void 0) {
      options = {};
    }

    var bh;
    var bp;
    var bw;
    var ip;
    var left;
    var left1;

    if (typeof x === 'object') {
      options = x;
      x = null;
    }

    var image = src instanceof PDFImage ? src : this.embedImage(src);
    x = (left = x != null ? x : options.x) != null ? left : this.x;
    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;

    if (this.page.xobjects[image.label] == null) {
      this.page.xobjects[image.label] = image.obj;
    }

    var w = options.width || image.width;
    var h = options.height || image.height;

    if (options.width && !options.height) {
      var wp = w / image.width;
      w = image.width * wp;
      h = image.height * wp;
    } else if (options.height && !options.width) {
      var hp = h / image.height;
      w = image.width * hp;
      h = image.height * hp;
    } else if (options.scale) {
      w = image.width * options.scale;
      h = image.height * options.scale;
    } else if (options.fit) {
      var _Array$from = Array.from(options.fit);

      bw = _Array$from[0];
      bh = _Array$from[1];
      bp = bw / bh;
      ip = image.width / image.height;

      if (ip > bp) {
        w = bw;
        h = bw / ip;
      } else {
        h = bh;
        w = bh * ip;
      }
    } // Set the current y position to below the image if it is in the document flow


    if (this.y === y) {
      this.y += h;
    }

    this.save();
    this.transform(w, 0, 0, -h, x, y + h);
    this.addContent("/" + image.label + " Do");
    this.restore();
    return this;
  },
  openImage: function openImage(src) {
    var image;

    if (typeof src === 'string') {
      image = this._imageRegistry[src];
    }

    if (!image) {
      image = PDFImage.open(src, "I" + ++this._imageCount);

      if (typeof src === 'string') {
        this._imageRegistry[src] = image;
      }
    }

    return image;
  }
};

var Annotations = {
  annotate: function annotate(x, y, w, h, options) {
    options.Type = 'Annot';
    options.Rect = this._convertRect(x, y, w, h);
    options.Border = [0, 0, 0];

    if (options.Subtype === 'Link' && typeof options.F === 'undefined') {
      options.F = 1 << 2; // Print Annotation Flag
    }

    if (options.Subtype !== 'Link') {
      if (options.C == null) {
        options.C = this._normalizeColor(options.color || [0, 0, 0]);
      }
    } // convert colors


    delete options.color;

    if (typeof options.Dest === 'string') {
      options.Dest = new String(options.Dest);
    } // Capitalize keys


    for (var key in options) {
      var val = options[key];
      options[key[0].toUpperCase() + key.slice(1)] = val;
    }

    var ref = this.ref(options);
    this.page.annotations.push(ref);
    ref.end();
    return this;
  },
  note: function note(x, y, w, h, contents, options) {
    if (options === void 0) {
      options = {};
    }

    options.Subtype = 'Text';
    options.Contents = new String(contents);
    options.Name = 'Comment';

    if (options.color == null) {
      options.color = [243, 223, 92];
    }

    options.Border = [0, 0, options.borderWidth || 0];
    delete options.borderWidth;
    return this.annotate(x, y, w, h, options);
  },
  goTo: function goTo(x, y, w, h, name, options) {
    if (options === void 0) {
      options = {};
    }

    options.Subtype = 'Link';
    options.A = this.ref({
      S: 'GoTo',
      D: new String(name)
    });
    options.A.end();
    return this.annotate(x, y, w, h, options);
  },
  link: function link(x, y, w, h, url, options) {
    if (options === void 0) {
      options = {};
    }

    options.Subtype = 'Link';

    if (typeof url === 'number') {
      // Link to a page in the document (the page must already exist)
      var pages = this._root.data.Pages.data;

      if (url >= 0 && url < pages.Kids.length) {
        options.A = this.ref({
          S: 'GoTo',
          D: [pages.Kids[url], 'XYZ', null, null, null]
        });
        options.A.end();
      } else {
        throw new Error("The document has no page " + url);
      }
    } else {
      // Link to an external url
      options.A = this.ref({
        S: 'URI',
        URI: new String(url)
      });
      options.A.end();
    }

    return this.annotate(x, y, w, h, options);
  },
  _markup: function _markup(x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    var _this$_convertRect = this._convertRect(x, y, w, h),
        x1 = _this$_convertRect[0],
        y1 = _this$_convertRect[1],
        x2 = _this$_convertRect[2],
        y2 = _this$_convertRect[3];

    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  highlight: function highlight(x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    options.Subtype = 'Highlight';

    if (options.color == null) {
      options.color = [241, 238, 148];
    }

    return this._markup(x, y, w, h, options);
  },
  fileAnnotation: function fileAnnotation(x, y, w, h, file, options) {
    if (file === void 0) {
      file = {};
    }

    if (options === void 0) {
      options = {};
    }

    // create hidden file
    var filespec = this.file(file.src, Object.assign({
      hidden: true
    }, file));
    options.Subtype = 'FileAttachment';
    options.FS = filespec; // add description from filespec unless description (Contents) has already been set

    if (options.Contents) {
      options.Contents = new String(options.Contents);
    } else if (filespec.data.Desc) {
      options.Contents = filespec.data.Desc;
    }

    return this.annotate(x, y, w, h, options);
  },
  _convertRect: function _convertRect(x1, y1, w, h) {
    // flip y1 and y2
    var y2 = y1;
    y1 += h; // make x2

    var x2 = x1 + w; // apply current transformation matrix to points

    var _this$_ctm = this._ctm,
        m0 = _this$_ctm[0],
        m1 = _this$_ctm[1],
        m2 = _this$_ctm[2],
        m3 = _this$_ctm[3],
        m4 = _this$_ctm[4],
        m5 = _this$_ctm[5];
    x1 = m0 * x1 + m2 * y1 + m4;
    y1 = m1 * x1 + m3 * y1 + m5;
    x2 = m0 * x2 + m2 * y2 + m4;
    y2 = m1 * x2 + m3 * y2 + m5;
    return [x1, y1, x2, y2];
  }
};

var DEFAULT_OPTIONS = {
  top: 0,
  left: 0,
  zoom: 0,
  fit: false,
  pageNumber: null,
  expanded: false
};

var PDFOutline = /*#__PURE__*/function () {
  function PDFOutline(document, parent, title, dest, options) {
    if (options === void 0) {
      options = DEFAULT_OPTIONS;
    }

    this.document = document;
    this.options = options;
    this.outlineData = {};

    if (dest !== null) {
      var destWidth = dest.data.MediaBox[2];
      var destHeight = dest.data.MediaBox[3];
      var top = destHeight - (options.top || 0);
      var left = destWidth - (options.left || 0);
      var zoom = options.zoom || 0;
      this.outlineData.Dest = options.fit ? [dest, 'Fit'] : [dest, 'XYZ', left, top, zoom];
    }

    if (parent !== null) {
      this.outlineData.Parent = parent;
    }

    if (title !== null) {
      this.outlineData.Title = new String(title);
    }

    this.dictionary = this.document.ref(this.outlineData);
    this.children = [];
  }

  var _proto = PDFOutline.prototype;

  _proto.addItem = function addItem(title, options) {
    if (options === void 0) {
      options = DEFAULT_OPTIONS;
    }

    var pages = this.document._root.data.Pages.data.Kids;
    var dest = options.pageNumber !== null ? pages[options.pageNumber] : this.document.page.dictionary;
    var result = new PDFOutline(this.document, this.dictionary, title, dest, options);
    this.children.push(result);
    return result;
  };

  _proto.endOutline = function endOutline() {
    if (this.children.length > 0) {
      if (this.options.expanded) {
        this.outlineData.Count = this.children.length;
      }

      var first = this.children[0];
      var last = this.children[this.children.length - 1];
      this.outlineData.First = first.dictionary;
      this.outlineData.Last = last.dictionary;

      for (var i = 0, len = this.children.length; i < len; i++) {
        var child = this.children[i];

        if (i > 0) {
          child.outlineData.Prev = this.children[i - 1].dictionary;
        }

        if (i < this.children.length - 1) {
          child.outlineData.Next = this.children[i + 1].dictionary;
        }

        child.endOutline();
      }
    }

    return this.dictionary.end();
  };

  return PDFOutline;
}();

var OutlineMixin = {
  initOutline: function initOutline() {
    this.outline = new PDFOutline(this, null, null, null);
  },
  endOutline: function endOutline() {
    this.outline.endOutline();

    if (this.outline.children.length > 0) {
      this._root.data.Outlines = this.outline.dictionary;
      this._root.data.PageMode = this._root.data.PageMode || 'UseOutlines';
    }
  }
};

var FIELD_FLAGS = {
  readOnly: 1,
  required: 2,
  noExport: 4,
  multiline: 0x1000,
  password: 0x2000,
  toggleToOffButton: 0x4000,
  radioButton: 0x8000,
  pushButton: 0x10000,
  combo: 0x20000,
  edit: 0x40000,
  sort: 0x80000,
  multiSelect: 0x200000,
  noSpell: 0x400000
};
var FIELD_JUSTIFY = {
  left: 0,
  center: 1,
  right: 2
};
var VALUE_MAP = {
  value: 'V',
  defaultValue: 'DV'
};
var FORMAT_SPECIAL = {
  zip: '0',
  zipPlus4: '1',
  zip4: '1',
  phone: '2',
  ssn: '3'
};
var FORMAT_DEFAULT = {
  number: {
    nDec: 0,
    sepComma: false,
    negStyle: 'MinusBlack',
    currency: '',
    currencyPrepend: true
  },
  percent: {
    nDec: 0,
    sepComma: false
  }
};
var AcroFormMixin = {
  /**
   * Must call if adding AcroForms to a document. Must also call font() before
   * this method to set the default font.
   */
  initForm: function initForm() {
    if (!this._font) {
      throw new Error('Must set a font before calling initForm method');
    }

    this._acroform = {
      fonts: {},
      defaultFont: this._font.name
    };
    this._acroform.fonts[this._font.id] = this._font.ref();
    var data = {
      Fields: [],
      NeedAppearances: true,
      DA: new String("/" + this._font.id + " 0 Tf 0 g"),
      DR: {
        Font: {}
      }
    };
    data.DR.Font[this._font.id] = this._font.ref();
    var AcroForm = this.ref(data);
    this._root.data.AcroForm = AcroForm;
    return this;
  },

  /**
   * Called automatically by document.js
   */
  endAcroForm: function endAcroForm() {
    var _this = this;

    if (this._root.data.AcroForm) {
      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
        throw new Error('No fonts specified for PDF form');
      }

      var fontDict = this._root.data.AcroForm.data.DR.Font;
      Object.keys(this._acroform.fonts).forEach(function (name) {
        fontDict[name] = _this._acroform.fonts[name];
      });

      this._root.data.AcroForm.data.Fields.forEach(function (fieldRef) {
        _this._endChild(fieldRef);
      });

      this._root.data.AcroForm.end();
    }

    return this;
  },
  _endChild: function _endChild(ref) {
    var _this2 = this;

    if (Array.isArray(ref.data.Kids)) {
      ref.data.Kids.forEach(function (childRef) {
        _this2._endChild(childRef);
      });
      ref.end();
    }

    return this;
  },

  /**
   * Creates and adds a form field to the document. Form fields are intermediate
   * nodes in a PDF form that are used to specify form name heirarchy and form
   * value defaults.
   * @param {string} name - field name (T attribute in field dictionary)
   * @param {object} options  - other attributes to include in field dictionary
   */
  formField: function formField(name, options) {
    if (options === void 0) {
      options = {};
    }

    var fieldDict = this._fieldDict(name, null, options);

    var fieldRef = this.ref(fieldDict);

    this._addToParent(fieldRef);

    return fieldRef;
  },

  /**
   * Creates and adds a Form Annotation to the document. Form annotations are
   * called Widget annotations internally within a PDF file.
   * @param {string} name - form field name (T attribute of widget annotation
   * dictionary)
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {object} options
   */
  formAnnotation: function formAnnotation(name, type, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    var fieldDict = this._fieldDict(name, type, options);

    fieldDict.Subtype = 'Widget';

    if (fieldDict.F === undefined) {
      fieldDict.F = 4; // print the annotation
    } // Add Field annot to page, and get it's ref


    this.annotate(x, y, w, h, fieldDict);
    var annotRef = this.page.annotations[this.page.annotations.length - 1];
    return this._addToParent(annotRef);
  },
  formText: function formText(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'text', x, y, w, h, options);
  },
  formPushButton: function formPushButton(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'pushButton', x, y, w, h, options);
  },
  formCombo: function formCombo(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'combo', x, y, w, h, options);
  },
  formList: function formList(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'list', x, y, w, h, options);
  },
  formRadioButton: function formRadioButton(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'radioButton', x, y, w, h, options);
  },
  formCheckbox: function formCheckbox(name, x, y, w, h, options) {
    if (options === void 0) {
      options = {};
    }

    return this.formAnnotation(name, 'checkbox', x, y, w, h, options);
  },
  _addToParent: function _addToParent(fieldRef) {
    var parent = fieldRef.data.Parent;

    if (parent) {
      if (!parent.data.Kids) {
        parent.data.Kids = [];
      }

      parent.data.Kids.push(fieldRef);
    } else {
      this._root.data.AcroForm.data.Fields.push(fieldRef);
    }

    return this;
  },
  _fieldDict: function _fieldDict(name, type, options) {
    if (options === void 0) {
      options = {};
    }

    if (!this._acroform) {
      throw new Error('Call document.initForms() method before adding form elements to document');
    }

    var opts = Object.assign({}, options);

    if (type !== null) {
      opts = this._resolveType(type, options);
    }

    opts = this._resolveFlags(opts);
    opts = this._resolveJustify(opts);
    opts = this._resolveFont(opts);
    opts = this._resolveStrings(opts);
    opts = this._resolveColors(opts);
    opts = this._resolveFormat(opts);
    opts.T = new String(name);

    if (opts.parent) {
      opts.Parent = opts.parent;
      delete opts.parent;
    }

    return opts;
  },
  _resolveType: function _resolveType(type, opts) {
    if (type === 'text') {
      opts.FT = 'Tx';
    } else if (type === 'pushButton') {
      opts.FT = 'Btn';
      opts.pushButton = true;
    } else if (type === 'radioButton') {
      opts.FT = 'Btn';
      opts.radioButton = true;
    } else if (type === 'checkbox') {
      opts.FT = 'Btn';
    } else if (type === 'combo') {
      opts.FT = 'Ch';
      opts.combo = true;
    } else if (type === 'list') {
      opts.FT = 'Ch';
    } else {
      throw new Error("Invalid form annotation type '" + type + "'");
    }

    return opts;
  },
  _resolveFormat: function _resolveFormat(opts) {
    var f = opts.format;

    if (f && f.type) {
      var fnKeystroke;
      var fnFormat;
      var params = '';

      if (FORMAT_SPECIAL[f.type] !== undefined) {
        fnKeystroke = "AFSpecial_Keystroke";
        fnFormat = "AFSpecial_Format";
        params = FORMAT_SPECIAL[f.type];
      } else {
        var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
        fnKeystroke = "AF" + format + "_Keystroke";
        fnFormat = "AF" + format + "_Format";

        if (f.type === 'date') {
          fnKeystroke += 'Ex';
          params = String(f.param);
        } else if (f.type === 'time') {
          params = String(f.param);
        } else if (f.type === 'number') {
          var p = Object.assign({}, FORMAT_DEFAULT.number, f);
          params = String([String(p.nDec), p.sepComma ? '0' : '1', '"' + p.negStyle + '"', 'null', '"' + p.currency + '"', String(p.currencyPrepend)].join(','));
        } else if (f.type === 'percent') {
          var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);

          params = String([String(_p.nDec), _p.sepComma ? '0' : '1'].join(','));
        }
      }

      opts.AA = opts.AA ? opts.AA : {};
      opts.AA.K = {
        S: 'JavaScript',
        JS: new String(fnKeystroke + "(" + params + ");")
      };
      opts.AA.F = {
        S: 'JavaScript',
        JS: new String(fnFormat + "(" + params + ");")
      };
    }

    delete opts.format;
    return opts;
  },
  _resolveColors: function _resolveColors(opts) {
    var color = this._normalizeColor(opts.backgroundColor);

    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }

      opts.MK.BG = color;
    }

    color = this._normalizeColor(opts.borderColor);

    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }

      opts.MK.BC = color;
    }

    delete opts.backgroundColor;
    delete opts.borderColor;
    return opts;
  },
  _resolveFlags: function _resolveFlags(options) {
    var result = 0;
    Object.keys(options).forEach(function (key) {
      if (FIELD_FLAGS[key]) {
        result |= FIELD_FLAGS[key];
        delete options[key];
      }
    });

    if (result !== 0) {
      options.Ff = options.Ff ? options.Ff : 0;
      options.Ff |= result;
    }

    return options;
  },
  _resolveJustify: function _resolveJustify(options) {
    var result = 0;

    if (options.align !== undefined) {
      if (typeof FIELD_JUSTIFY[options.align] === 'number') {
        result = FIELD_JUSTIFY[options.align];
      }

      delete options.align;
    }

    if (result !== 0) {
      options.Q = result; // default
    }

    return options;
  },
  _resolveFont: function _resolveFont(options) {
    // add current font to document-level AcroForm dict if necessary
    if (this._acroform.fonts[this._font.id] === null) {
      this._acroform.fonts[this._font.id] = this._font.ref();
    } // add current font to field's resource dict (RD) if not the default acroform font


    if (this._acroform.defaultFont !== this._font.name) {
      options.DR = {
        Font: {}
      };
      options.DR.Font[this._font.id] = this._font.ref();
      options.DA = new String("/" + this._font.id + " 0 Tf 0 g");
    }

    return options;
  },
  _resolveStrings: function _resolveStrings(options) {
    var select = [];

    function appendChoices(a) {
      if (Array.isArray(a)) {
        for (var idx = 0; idx < a.length; idx++) {
          if (typeof a[idx] === 'string') {
            select.push(new String(a[idx]));
          } else {
            select.push(a[idx]);
          }
        }
      }
    }

    appendChoices(options.Opt);

    if (options.select) {
      appendChoices(options.select);
      delete options.select;
    }

    if (select.length) {
      options.Opt = select;
    }

    Object.keys(VALUE_MAP).forEach(function (key) {
      if (options[key] !== undefined) {
        options[VALUE_MAP[key]] = options[key];
        delete options[key];
      }
    });
    ['V', 'DV'].forEach(function (key) {
      if (typeof options[key] === 'string') {
        options[key] = new String(options[key]);
      }
    });

    if (options.MK && options.MK.CA) {
      options.MK.CA = new String(options.MK.CA);
    }

    if (options.label) {
      options.MK = options.MK ? options.MK : {};
      options.MK.CA = new String(options.label);
      delete options.label;
    }

    return options;
  }
};

var Attachments = {
  /**
   * Embed contents of `src` in PDF
   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file
   * @param {object} options
   *  * options.name: filename to be shown in PDF, will use `src` if none set
   *  * options.type: filetype to be shown in PDF
   *  * options.description: description to be shown in PDF
   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations
   *  * options.creationDate: override creation date
   *  * options.modifiedDate: override modified date
   * @returns filespec reference
   */
  file: function file(src, options) {
    if (options === void 0) {
      options = {};
    }

    options.name = options.name || src;
    var refBody = {
      Type: 'EmbeddedFile',
      Params: {}
    };
    var data;

    if (!src) {
      throw new Error('No src specified');
    }

    if (Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = Buffer.from(new Uint8Array(src));
    } else {
      var match;

      if (match = /^data:(.*);base64,(.*)$/.exec(src)) {
        if (match[1]) {
          refBody.Subtype = match[1].replace('/', '#2F');
        }

        data = Buffer.from(match[2], 'base64');
      } else {
        throw new Error("Could not find file " + src);
      }
    } // override creation date and modified date


    if (options.creationDate instanceof Date) {
      refBody.Params.CreationDate = options.creationDate;
    }

    if (options.modifiedDate instanceof Date) {
      refBody.Params.ModDate = options.modifiedDate;
    } // add optional subtype


    if (options.type) {
      refBody.Subtype = options.type.replace('/', '#2F');
    } // add checksum and size information


    var checksum = crypto_js_md5__WEBPACK_IMPORTED_MODULE_8___default().MD5(crypto_js_md5__WEBPACK_IMPORTED_MODULE_8___default().lib.WordArray.create(new Uint8Array(data)));
    refBody.Params.CheckSum = new String(checksum);
    refBody.Params.Size = data.byteLength; // save some space when embedding the same file again
    // if a file with the same name and metadata exists, reuse its reference

    var ref;
    if (!this._fileRegistry) this._fileRegistry = {};
    var file = this._fileRegistry[options.name];

    if (file && isEqual(refBody, file)) {
      ref = file.ref;
    } else {
      ref = this.ref(refBody);
      ref.end(data);
      this._fileRegistry[options.name] = (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_7__["default"])({}, refBody, {
        ref: ref
      });
    } // add filespec for embedded file


    var fileSpecBody = {
      Type: 'Filespec',
      F: new String(options.name),
      EF: {
        F: ref
      },
      UF: new String(options.name)
    };

    if (options.description) {
      fileSpecBody.Desc = new String(options.description);
    }

    var filespec = this.ref(fileSpecBody);
    filespec.end();

    if (!options.hidden) {
      this.addNamedEmbeddedFile(options.name, filespec);
    }

    return filespec;
  }
};
/** check two embedded file metadata objects for equality */

function isEqual(a, b) {
  if (a.Subtype !== b.Subtype || a.Params.CheckSum.toString() !== b.Params.CheckSum.toString() || a.Params.Size !== b.Params.Size || a.Params.CreationDate !== b.Params.CreationDate || a.Params.ModDate !== b.Params.ModDate) {
    return false;
  }

  return true;
}

var capitalize = function capitalize(v) {
  return v[0].toUpperCase() + v.slice(1);
};

var PDFDocument = /*#__PURE__*/function (_stream$Readable) {
  (0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(PDFDocument, _stream$Readable);

  function PDFDocument(options) {
    var _this;

    if (options === void 0) {
      options = {};
    }

    _this = _stream$Readable.call(this) || this;
    _this.options = options; // PDF version

    switch (options.pdfVersion) {
      case '1.4':
        _this.version = 1.4;
        break;

      case '1.5':
        _this.version = 1.5;
        break;

      case '1.6':
        _this.version = 1.6;
        break;

      case '1.7':
      case '1.7ext3':
        _this.version = 1.7;
        break;

      default:
        _this.version = 1.3;
        break;
    } // Whether streams should be compressed


    _this.compress = _this.options.compress != null ? _this.options.compress : true;
    _this._pageBuffer = [];
    _this._pageBufferStart = 0; // The PDF object store

    _this._offsets = [];
    _this._waiting = 0;
    _this._ended = false;
    _this._offset = 0;

    var Pages = _this.ref({
      Type: 'Pages',
      Count: 0,
      Kids: []
    });

    var Names = _this.ref({
      Dests: new PDFNameTree()
    });

    _this._root = _this.ref({
      Type: 'Catalog',
      Pages: Pages,
      Names: Names
    });

    if (_this.options.lang) {
      _this._root.data.Lang = new String(_this.options.lang);
    }

    if (_this.options.pageLayout) {
      _this._root.data.PageLayout = capitalize(_this.options.pageLayout);
    }

    if (_this.options.pageMode) {
      _this._root.data.PageMode = capitalize(_this.options.pageMode);
    } // The current page


    _this.page = null; // Initialize mixins

    _this.initColor();

    _this.initVector();

    _this.initFonts();

    _this.initText();

    _this.initImages();

    _this.initOutline(); // Initialize the metadata


    _this.info = {
      Producer: 'PDFKit',
      Creator: 'PDFKit',
      CreationDate: new Date()
    };

    if (_this.options.info) {
      for (var key in _this.options.info) {
        var val = _this.options.info[key];
        _this.info[key] = val;
      }
    }

    if (_this.options.displayTitle) {
      _this._root.data.ViewerPreferences = _this.ref({
        DisplayDocTitle: true
      });
    } // Write the header PDF version


    _this._write("%PDF-" + _this.version); // 4 binary chars, as recommended by the spec


    _this._write('%\xFF\xFF\xFF\xFF'); // Add the first page


    if (_this.options.autoFirstPage !== false) {
      _this.addPage();
    }

    return _this;
  }

  var _proto = PDFDocument.prototype;

  _proto.addPage = function addPage(options) {
    // end the current page if needed
    if (options == null) {
      options = this.options;
    }

    if (!this.options.bufferPages) {
      this.flushPages();
    } // create a page object


    this.page = new PDFPage(this, options);

    this._pageBuffer.push(this.page); // add the page to the object store


    var pages = this._root.data.Pages.data;
    pages.Kids.push(this.page.dictionary);
    pages.Count++; // flip PDF coordinate system so that the origin is in
    // the top left rather than the bottom left

    this._ctm = [1, 0, 0, 1, 0, 0];
    this.transform(1, 0, 0, -1, 0, this.page.height);
    return this;
  };

  _proto.flushPages = function flushPages() {
    // this local variable exists so we're future-proof against
    // reentrant calls to flushPages.
    var pages = this._pageBuffer;
    this._pageBuffer = [];
    this._pageBufferStart += pages.length;

    for (var _i = 0, _Array$from = Array.from(pages); _i < _Array$from.length; _i++) {
      var page = _Array$from[_i];
      page.end();
    }
  };

  _proto.addNamedDestination = function addNamedDestination(name) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (args.length === 0) {
      args = ['XYZ', null, null, null];
    }

    if (args[0] === 'XYZ' && args[2] !== null) {
      args[2] = this.page.height - args[2];
    }

    args.unshift(this.page.dictionary);

    this._root.data.Names.data.Dests.add(name, args);
  };

  _proto.addNamedEmbeddedFile = function addNamedEmbeddedFile(name, ref) {
    if (!this._root.data.Names.data.EmbeddedFiles) {
      // disabling /Limits for this tree fixes attachments not showing in Adobe Reader
      this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
        limits: false
      });
    } // add filespec to EmbeddedFiles


    this._root.data.Names.data.EmbeddedFiles.add(name, ref);
  };

  _proto.addNamedJavaScript = function addNamedJavaScript(name, js) {
    if (!this._root.data.Names.data.JavaScript) {
      this._root.data.Names.data.JavaScript = new PDFNameTree();
    }

    var data = {
      JS: new String(js),
      S: 'JavaScript'
    };

    this._root.data.Names.data.JavaScript.add(name, data);
  };

  _proto.ref = function ref(data) {
    var ref = new PDFReference(this, this._offsets.length + 1, data);

    this._offsets.push(null); // placeholder for this object's offset once it is finalized


    this._waiting++;
    return ref;
  };

  _proto._read = function _read() {// do nothing, but this method is required by node
  };

  _proto._write = function _write(data) {
    if (!Buffer.isBuffer(data)) {
      data = Buffer.from(data + '\n', 'binary');
    }

    this.push(data);
    return this._offset += data.length;
  };

  _proto.addContent = function addContent(data) {
    this.page.write(data);
    return this;
  };

  _proto._refEnd = function _refEnd(ref) {
    this._offsets[ref.id - 1] = ref.offset;

    if (--this._waiting === 0 && this._ended) {
      this._finalize();

      return this._ended = false;
    }
  };

  _proto.end = function end() {
    this.flushPages();
    this._info = this.ref();

    for (var key in this.info) {
      var val = this.info[key];

      if (typeof val === 'string') {
        val = new String(val);
      }

      var entry = this.ref(val);
      entry.end();
      this._info.data[key] = entry;
    }

    this._info.end();

    for (var name in this._fontFamilies) {
      var font = this._fontFamilies[name];
      font.finalize();
    }

    this.endOutline();

    this._root.end();

    this._root.data.Pages.end();

    this._root.data.Names.end();

    this.endAcroForm();

    if (this._root.data.ViewerPreferences) {
      this._root.data.ViewerPreferences.end();
    }

    if (this._waiting === 0) {
      return this._finalize();
    }

    this._ended = true;
  };

  _proto._finalize = function _finalize(fn) {
    // generate xref
    var xRefOffset = this._offset;

    this._write('xref');

    this._write("0 " + (this._offsets.length + 1));

    this._write('0000000000 65535 f ');

    for (var _i2 = 0, _Array$from2 = Array.from(this._offsets); _i2 < _Array$from2.length; _i2++) {
      var offset = _Array$from2[_i2];
      offset = ("0000000000" + offset).slice(-10);

      this._write(offset + ' 00000 n ');
    } // trailer


    this._write('trailer');

    this._write(PDFObject$1.convert({
      Size: this._offsets.length + 1,
      Root: this._root,
      Info: this._info
    }));

    this._write('startxref');

    this._write("" + xRefOffset);

    this._write('%%EOF'); // end the stream


    return this.push(null);
  };

  _proto.toString = function toString() {
    return '[object PDFDocument]';
  };

  return PDFDocument;
}((stream__WEBPACK_IMPORTED_MODULE_1___default().Readable));

var mixin = function mixin(methods) {
  return function () {
    var result = [];

    for (var name in methods) {
      var method = methods[name];
      result.push(PDFDocument.prototype[name] = method);
    }

    return result;
  }();
}; // Load mixins


mixin(Color);
mixin(Vector);
mixin(Fonts);
mixin(Text);
mixin(Images);
mixin(Annotations);
mixin(OutlineMixin);
mixin(AcroFormMixin);
mixin(Attachments);




/***/ }),

/***/ "./node_modules/@react-pdf/png-js/lib/png-js.browser.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/png-js/lib/png-js.browser.es.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PNG)
/* harmony export */ });
/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zlib */ "./node_modules/browserify-zlib/lib/index.js");
/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(zlib__WEBPACK_IMPORTED_MODULE_0__);
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];


var PNG = /*#__PURE__*/function () {
  PNG.decode = function decode(path, fn) {
    {
      throw new Error('PNG.decode not available in browser build');
    }
  };

  PNG.load = function load(path) {
    {
      throw new Error('PNG.load not available in browser build');
    }
  };

  function PNG(data) {
    var i;
    this.data = data;
    this.pos = 8; // Skip the default header

    this.palette = [];
    this.imgData = [];
    this.transparency = {};
    this.text = {};

    while (true) {
      var chunkSize = this.readUInt32();
      var section = '';

      for (i = 0; i < 4; i++) {
        section += String.fromCharCode(this.data[this.pos++]);
      }

      switch (section) {
        case 'IHDR':
          // we can grab  interesting values from here (like width, height, etc)
          this.width = this.readUInt32();
          this.height = this.readUInt32();
          this.bits = this.data[this.pos++];
          this.colorType = this.data[this.pos++];
          this.compressionMethod = this.data[this.pos++];
          this.filterMethod = this.data[this.pos++];
          this.interlaceMethod = this.data[this.pos++];
          break;

        case 'PLTE':
          this.palette = this.read(chunkSize);
          break;

        case 'IDAT':
          for (i = 0; i < chunkSize; i++) {
            this.imgData.push(this.data[this.pos++]);
          }

          break;

        case 'tRNS':
          // This chunk can only occur once and it must occur after the
          // PLTE chunk and before the IDAT chunk.
          this.transparency = {};

          switch (this.colorType) {
            case 3:
              // Indexed color, RGB. Each byte in this chunk is an alpha for
              // the palette index in the PLTE ("palette") chunk up until the
              // last non-opaque entry. Set up an array, stretching over all
              // palette entries which will be 0 (opaque) or 1 (transparent).
              this.transparency.indexed = this.read(chunkSize);
              var short = 255 - this.transparency.indexed.length;

              if (short > 0) {
                for (i = 0; i < short; i++) {
                  this.transparency.indexed.push(255);
                }
              }

              break;

            case 0:
              // Greyscale. Corresponding to entries in the PLTE chunk.
              // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1
              this.transparency.grayscale = this.read(chunkSize)[0];
              break;

            case 2:
              // True color with proper alpha channel.
              this.transparency.rgb = this.read(chunkSize);
              break;
          }

          break;

        case 'tEXt':
          var text = this.read(chunkSize);
          var index = text.indexOf(0);
          var key = String.fromCharCode.apply(String, text.slice(0, index));
          this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
          break;

        case 'IEND':
          // we've got everything we need!
          switch (this.colorType) {
            case 0:
            case 3:
            case 4:
              this.colors = 1;
              break;

            case 2:
            case 6:
              this.colors = 3;
              break;
          }

          this.hasAlphaChannel = [4, 6].includes(this.colorType);
          var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
          this.pixelBitlength = this.bits * colors;

          switch (this.colors) {
            case 1:
              this.colorSpace = 'DeviceGray';
              break;

            case 3:
              this.colorSpace = 'DeviceRGB';
              break;
          }

          this.imgData = Buffer.from(this.imgData);
          return;

        default:
          // unknown (or unimportant) section, skip it
          this.pos += chunkSize;
      }

      this.pos += 4; // Skip the CRC

      if (this.pos > this.data.length) {
        throw new Error('Incomplete or corrupt PNG file');
      }
    }
  }

  var _proto = PNG.prototype;

  _proto.read = function read(bytes) {
    var result = new Array(bytes);

    for (var i = 0; i < bytes; i++) {
      result[i] = this.data[this.pos++];
    }

    return result;
  };

  _proto.readUInt32 = function readUInt32() {
    var b1 = this.data[this.pos++] << 24;
    var b2 = this.data[this.pos++] << 16;
    var b3 = this.data[this.pos++] << 8;
    var b4 = this.data[this.pos++];
    return b1 | b2 | b3 | b4;
  };

  _proto.readUInt16 = function readUInt16() {
    var b1 = this.data[this.pos++] << 8;
    var b2 = this.data[this.pos++];
    return b1 | b2;
  };

  _proto.decodePixels = function decodePixels(fn) {
    var _this = this;

    return zlib__WEBPACK_IMPORTED_MODULE_0___default().inflate(this.imgData, function (err, data) {
      if (err) throw err;
      var pos = 0;
      var width = _this.width,
          height = _this.height;
      var pixelBytes = _this.pixelBitlength / 8;
      var pixels = Buffer.alloc(width * height * pixelBytes);

      function pass(x0, y0, dx, dy, singlePass) {
        if (singlePass === void 0) {
          singlePass = false;
        }

        var w = Math.ceil((width - x0) / dx);
        var h = Math.ceil((height - y0) / dy);
        var scanlineLength = pixelBytes * w;
        var buffer = singlePass ? pixels : Buffer.alloc(scanlineLength * h);
        var row = 0;
        var c = 0;

        while (row < h && pos < data.length) {
          var byte;
          var col;
          var i;
          var left;
          var upper;

          switch (data[pos++]) {
            case 0:
              // None
              for (i = 0; i < scanlineLength; i++) {
                buffer[c++] = data[pos++];
              }

              break;

            case 1:
              // Sub
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                buffer[c++] = (byte + left) % 256;
              }

              break;

            case 2:
              // Up
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                buffer[c++] = (upper + byte) % 256;
              }

              break;

            case 3:
              // Average
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
              }

              break;

            case 4:
              // Paeth
              for (i = 0; i < scanlineLength; i++) {
                var paeth;
                var upperLeft;
                byte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];

                if (row === 0) {
                  upper = upperLeft = 0;
                } else {
                  upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                  upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                }

                var p = left + upper - upperLeft;
                var pa = Math.abs(p - left);
                var pb = Math.abs(p - upper);
                var pc = Math.abs(p - upperLeft);

                if (pa <= pb && pa <= pc) {
                  paeth = left;
                } else if (pb <= pc) {
                  paeth = upper;
                } else {
                  paeth = upperLeft;
                }

                buffer[c++] = (byte + paeth) % 256;
              }

              break;

            default:
              throw new Error("Invalid filter algorithm: " + data[pos - 1]);
          }

          if (!singlePass) {
            var pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
            var bufferPos = row * scanlineLength;

            for (i = 0; i < w; i++) {
              for (var j = 0; j < pixelBytes; j++) {
                pixels[pixelsPos++] = buffer[bufferPos++];
              }

              pixelsPos += (dx - 1) * pixelBytes;
            }
          }

          row++;
        }
      }

      if (_this.interlaceMethod === 1) {
        /*
          1 6 4 6 2 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
          3 6 4 6 3 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
        */
        pass(0, 0, 8, 8); // 1

        pass(4, 0, 8, 8); // 2

        pass(0, 4, 4, 8); // 3

        pass(2, 0, 4, 4); // 4

        pass(0, 2, 2, 4); // 5

        pass(1, 0, 2, 2); // 6

        pass(0, 1, 1, 2); // 7
      } else {
        pass(0, 0, 1, 1, true);
      }

      return fn(pixels);
    });
  };

  _proto.decodePalette = function decodePalette() {
    var palette = this.palette;
    var length = palette.length;
    var transparency = this.transparency.indexed || [];
    var ret = Buffer.alloc(transparency.length + length);
    var pos = 0;
    var c = 0;

    for (var i = 0; i < length; i += 3) {
      var left;
      ret[pos++] = palette[i];
      ret[pos++] = palette[i + 1];
      ret[pos++] = palette[i + 2];
      ret[pos++] = (left = transparency[c++]) != null ? left : 255;
    }

    return ret;
  };

  _proto.copyToImageData = function copyToImageData(imageData, pixels) {
    var j;
    var k;
    var colors = this.colors;
    var palette = null;
    var alpha = this.hasAlphaChannel;

    if (this.palette.length) {
      palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
      colors = 4;
      alpha = true;
    }

    var data = imageData.data || imageData;
    var length = data.length;
    var input = palette || pixels;
    var i = j = 0;

    if (colors === 1) {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        var v = input[k++];
        data[i++] = v;
        data[i++] = v;
        data[i++] = v;
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    } else {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    }
  };

  _proto.decode = function decode(fn) {
    var _this2 = this;

    var ret = Buffer.alloc(this.width * this.height * 4);
    return this.decodePixels(function (pixels) {
      _this2.copyToImageData(ret, pixels);

      return fn(ret);
    });
  };

  return PNG;
}();




/***/ }),

/***/ "./node_modules/@react-pdf/primitives/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/primitives/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

exports.G = 'G';
exports.Svg = 'SVG';
exports.View = 'VIEW';
exports.Text = 'TEXT';
exports.Link = 'LINK';
exports.Page = 'PAGE';
exports.Note = 'NOTE';
exports.Path = 'PATH';
exports.Rect = 'RECT';
exports.Line = 'LINE';
exports.Stop = 'STOP';
exports.Defs = 'DEFS';
exports.Image = 'IMAGE';
exports.Tspan = 'TSPAN';
exports.Canvas = 'CANVAS';
exports.Circle = 'CIRCLE';
exports.Ellipse = 'ELLIPSE';
exports.Polygon = 'POLYGON';
exports.Document = 'DOCUMENT';
exports.Polyline = 'POLYLINE';
exports.ClipPath = 'CLIP_PATH';
exports.TextInstance = 'TEXT_INSTANCE';
exports.LinearGradient = 'LINEAR_GRADIENT';
exports.RadialGradient = 'RADIAL_GRADIENT';


/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _renderNode = _interopRequireDefault(__webpack_require__(/*! ./primitives/renderNode */ "./node_modules/@react-pdf/render/lib/primitives/renderNode.js"));

var _addMetadata = _interopRequireDefault(__webpack_require__(/*! ./operations/addMetadata */ "./node_modules/@react-pdf/render/lib/operations/addMetadata.js"));

var renderDocument = function renderDocument(ctx) {
  return function (doc) {
    var pages = doc.children || [];
    pages.forEach((0, _renderNode.default)(ctx));
  };
};

var render = function render(ctx, doc) {
  (0, _addMetadata.default)(ctx)(doc);
  renderDocument(ctx)(doc);
  ctx.end();
  return ctx;
};

var _default = render;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/addMetadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/addMetadata.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/* eslint-disable no-param-reassign */
var getDocumentProp = function getDocumentProp(target) {
  return function (or, prop) {
    return R.pathOr(or, ['props', prop], target);
  };
};

var setPDFMetadata = function setPDFMetadata(target) {
  return function (key, value) {
    if (value) target.info[key] = value;
  };
};
/**
 * Set document instance metadata
 *
 * @param {Object} ctx document instance
 * @param {Object} doc document root
 */


var addMetadata = function addMetadata(ctx, doc) {
  var getProp = getDocumentProp(doc);
  var setProp = setPDFMetadata(ctx);
  var title = getProp(null, 'title');
  var author = getProp(null, 'author');
  var subject = getProp(null, 'subject');
  var keywords = getProp(null, 'keywords');
  var creator = getProp('react-pdf', 'creator');
  var producer = getProp('react-pdf', 'producer');
  setProp('Title', title);
  setProp('Author', author);
  setProp('Subject', subject);
  setProp('Keywords', keywords);
  setProp('Creator', creator);
  setProp('Producer', producer);
  return doc;
};

var _default = R.curryN(2, addMetadata);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/clipNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/clipNode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

// This constant is used to approximate a symmetrical arc using a cubic
// Bezier curve.
var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

var clipNode = function clipNode(ctx, node) {
  if (!node.style) return node;
  var _node$box = node.box,
      top = _node$box.top,
      left = _node$box.left,
      width = _node$box.width,
      height = _node$box.height;
  var _node$style = node.style,
      _node$style$borderTop = _node$style.borderTopLeftRadius,
      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,
      _node$style$borderTop2 = _node$style.borderTopRightRadius,
      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,
      _node$style$borderBot = _node$style.borderBottomRightRadius,
      borderBottomRightRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,
      _node$style$borderBot2 = _node$style.borderBottomLeftRadius,
      borderBottomLeftRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2; // Border top

  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);
  var ctr = rtr * (1.0 - KAPPA);
  ctx.moveTo(left + rtr, top);
  ctx.lineTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr); // Border right

  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);
  var cbr = rbr * (1.0 - KAPPA);
  ctx.lineTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height); // Border bottom

  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);
  var cbl = rbl * (1.0 - KAPPA);
  ctx.lineTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl); // Border left

  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);
  var ctl = rtl * (1.0 - KAPPA);
  ctx.lineTo(left, top + rtl);
  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);
  ctx.closePath();
  ctx.clip();
  return node;
};

var _default = R.curryN(2, clipNode);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/restore.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/restore.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var restore = function restore(ctx, node) {
  ctx.restore();
  return node;
};

var _default = R.curryN(2, restore);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/save.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/save.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var save = function save(ctx, node) {
  ctx.save();
  return node;
};

var _default = R.curryN(2, save);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/setDestination.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/setDestination.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var setDestination = function setDestination(ctx, node) {
  var _node$props;

  if ((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.id) {
    ctx.addNamedDestination(node.props.id, 'XYZ', null, node.box.top, null);
  }

  return node;
};

var _default = R.curryN(2, setDestination);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/setLink.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/setLink.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var DEST_REGEXP = /^#.+/;
var isSrcId = R.test(DEST_REGEXP);

var getSource = function getSource(node) {
  var props = node.props || {};
  return props.src || props.href;
};

var setLink = function setLink(ctx, node) {
  var _node$box = node.box,
      top = _node$box.top,
      left = _node$box.left,
      width = _node$box.width,
      height = _node$box.height;
  var src = getSource(node);

  if (src) {
    var isId = isSrcId(src);
    var method = isId ? 'goTo' : 'link';
    var value = isId ? src.slice(1) : src;
    ctx[method](left, top, width, height, value);
  }

  return node;
};

var _default = R.curryN(2, setLink);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/operations/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/operations/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

// TODO: Implement using only matrices to support skew and even more operations than css.
var applySingleTransformation = function applySingleTransformation(ctx, transform, origin) {
  var operation = transform.operation,
      value = transform.value;

  switch (operation) {
    case 'scale':
      {
        var scaleX = value[0],
            scaleY = value[1];
        ctx.scale(scaleX, scaleY, {
          origin: origin
        });
        break;
      }

    case 'rotate':
      {
        var angle = value[0];
        ctx.rotate(angle, {
          origin: origin
        });
        break;
      }

    case 'translate':
      {
        var x = value[0],
            y = value[1];
        ctx.translate(x, y, {
          origin: origin
        });
        break;
      }

    case 'matrix':
      {
        ctx.transform.apply(ctx, value);
        break;
      }

    default:
      {
        console.error("Transform operation: '" + operation + "' doesn't supported");
      }
  }
};

var applyTransformations = function applyTransformations(ctx, node) {
  var _node$style, _node$props;

  if (!node.origin) return node;
  var origin = [node.origin.left, node.origin.top];
  var operations = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.transform) || ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.transform) || [];
  operations.forEach(function (operation) {
    applySingleTransformation(ctx, operation, origin);
  });
  return node;
};

var _default = R.curryN(2, applyTransformations);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderBackground.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderBackground.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var _clipNode = _interopRequireDefault(__webpack_require__(/*! ../operations/clipNode */ "./node_modules/@react-pdf/render/lib/operations/clipNode.js"));

var _parseColor = _interopRequireDefault(__webpack_require__(/*! ../utils/parseColor */ "./node_modules/@react-pdf/render/lib/utils/parseColor.js"));

var drawBackground = function drawBackground(ctx, node) {
  if (node.box && node.style.backgroundColor) {
    var _node$style;

    var _node$box = node.box,
        top = _node$box.top,
        left = _node$box.left,
        width = _node$box.width,
        height = _node$box.height;
    var color = (0, _parseColor.default)(node.style.backgroundColor);
    var nodeOpacity = R.isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity) ? 1 : node.style.opacity;
    var opacity = Math.min(color.opacity, nodeOpacity);
    ctx.fillOpacity(opacity).fillColor(color.value).rect(left, top, width, height).fill();
  }

  return node;
};

var renderBackground = function renderBackground(ctx, node) {
  var _node$style2;

  var hasBackground = !!node.box && !!((_node$style2 = node.style) !== null && _node$style2 !== void 0 && _node$style2.backgroundColor);

  if (hasBackground) {
    (0, _save.default)(ctx, node);
    (0, _clipNode.default)(ctx, node);
    drawBackground(ctx, node);
    (0, _restore.default)(ctx, node);
  }

  return node;
};

var _default = R.curryN(2, renderBackground);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderBorders.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderBorders.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders
// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.
var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

var clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderTopWidth = style.borderTopWidth,
      borderRightWidth = style.borderRightWidth,
      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge

  ctx.moveTo(left + rtl, top);
  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap

  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap

  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius

  var topRightYCoord = top + Math.max(borderTopWidth, rtr);
  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap

  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap

  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);
  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);
  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);
  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap

  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge

  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap

  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);
  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);
  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);
  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);
  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap

  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);
  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius

  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap

  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap

  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);
  ctx.closePath();
  ctx.clip(); // Clip border top cap joins

  if (borderRightWidth) {
    var trSlope = -borderTopWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left, top);
    ctx.lineTo(left, top + height);
    ctx.closePath();
    ctx.clip();
  }

  if (borderLeftWidth) {
    var _trSlope = -borderTopWidth / borderLeftWidth;

    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);
    ctx.lineTo(left, top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left + width, top + height);
    ctx.closePath();
    ctx.clip();
  }
};

var fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {
  var top = layout.top,
      left = layout.left,
      width = layout.width;
  var borderTopColor = style.borderTopColor,
      borderTopWidth = style.borderTopWidth,
      borderTopStyle = style.borderTopStyle,
      borderRightWidth = style.borderRightWidth,
      borderLeftWidth = style.borderLeftWidth;
  var c0 = rtl * (1.0 - KAPPA);
  var c1 = rtr * (1.0 - KAPPA);
  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));
  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);
  ctx.lineTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);
  ctx.strokeColor(borderTopColor);
  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);

  if (borderTopStyle === 'dashed') {
    ctx.dash(borderTopWidth * 2, {
      space: borderTopWidth * 1.2
    });
  } else if (borderTopStyle === 'dotted') {
    ctx.dash(borderTopWidth, {
      space: borderTopWidth * 1.2
    });
  }

  ctx.stroke();
  ctx.undash();
};

var clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderTopWidth = style.borderTopWidth,
      borderRightWidth = style.borderRightWidth,
      borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge

  ctx.moveTo(left + width, top + rtr);
  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap

  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap

  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius

  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);
  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap

  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap

  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);
  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);
  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);
  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap

  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge

  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap

  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);
  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);
  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);
  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);
  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap

  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);
  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius

  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap

  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap

  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);
  ctx.closePath();
  ctx.clip(); // Clip border right cap joins

  if (borderTopWidth) {
    var trSlope = -borderTopWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left, top + height);
    ctx.closePath();
    ctx.clip();
  }

  if (borderBottomWidth) {
    var brSlope = borderBottomWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left + width, top);
    ctx.lineTo(left, top);
    ctx.closePath();
    ctx.clip();
  }
};

var fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderRightColor = style.borderRightColor,
      borderRightStyle = style.borderRightStyle,
      borderRightWidth = style.borderRightWidth,
      borderTopWidth = style.borderTopWidth,
      borderBottomWidth = style.borderBottomWidth;
  var c0 = rbr * (1.0 - KAPPA);
  var c1 = rtr * (1.0 - KAPPA);
  ctx.moveTo(left + width - rtr, top);
  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);
  ctx.lineTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);
  ctx.strokeColor(borderRightColor);
  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);

  if (borderRightStyle === 'dashed') {
    ctx.dash(borderRightWidth * 2, {
      space: borderRightWidth * 1.2
    });
  } else if (borderRightStyle === 'dotted') {
    ctx.dash(borderRightWidth, {
      space: borderRightWidth * 1.2
    });
  }

  ctx.stroke();
  ctx.undash();
};

var clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderBottomWidth = style.borderBottomWidth,
      borderRightWidth = style.borderRightWidth,
      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge

  ctx.moveTo(left + width - rbr, top + height);
  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap

  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap

  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius

  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);
  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap

  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap

  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);
  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);
  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);
  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap

  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge

  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap

  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);
  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);
  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);
  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);
  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap

  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);
  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius

  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap

  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap

  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);
  ctx.closePath();
  ctx.clip(); // Clip border bottom cap joins

  if (borderRightWidth) {
    var brSlope = borderBottomWidth / borderRightWidth;
    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left, top);
    ctx.closePath();
    ctx.clip();
  }

  if (borderLeftWidth) {
    var trSlope = -borderBottomWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left + width, top + height);
    ctx.lineTo(left + width, top);
    ctx.closePath();
    ctx.clip();
  }
};

var fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderBottomColor = style.borderBottomColor,
      borderBottomStyle = style.borderBottomStyle,
      borderBottomWidth = style.borderBottomWidth,
      borderRightWidth = style.borderRightWidth,
      borderLeftWidth = style.borderLeftWidth;
  var c0 = rbl * (1.0 - KAPPA);
  var c1 = rbr * (1.0 - KAPPA);
  ctx.moveTo(left + width, top + height - rbr);
  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);
  ctx.lineTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);
  ctx.strokeColor(borderBottomColor);
  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);

  if (borderBottomStyle === 'dashed') {
    ctx.dash(borderBottomWidth * 2, {
      space: borderBottomWidth * 1.2
    });
  } else if (borderBottomStyle === 'dotted') {
    ctx.dash(borderBottomWidth, {
      space: borderBottomWidth * 1.2
    });
  }

  ctx.stroke();
  ctx.undash();
};

var clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {
  var top = layout.top,
      left = layout.left,
      width = layout.width,
      height = layout.height;
  var borderTopWidth = style.borderTopWidth,
      borderLeftWidth = style.borderLeftWidth,
      borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge

  ctx.moveTo(left, top + height - rbl);
  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap

  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap

  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius

  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);
  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap

  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap

  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);
  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);
  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);
  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap

  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge

  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap

  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);
  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);
  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);
  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);
  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap

  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);
  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius

  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap

  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap

  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);
  ctx.closePath();
  ctx.clip(); // Clip border right cap joins

  if (borderBottomWidth) {
    var trSlope = -borderBottomWidth / borderLeftWidth;
    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left, top);
    ctx.lineTo(left + width, top);
    ctx.closePath();
    ctx.clip();
  }

  if (borderBottomWidth) {
    var _trSlope2 = -borderTopWidth / borderLeftWidth;

    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);
    ctx.lineTo(left, top);
    ctx.lineTo(left, top + height);
    ctx.lineTo(left + width, top + height);
    ctx.closePath();
    ctx.clip();
  }
};

var fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {
  var top = layout.top,
      left = layout.left,
      height = layout.height;
  var borderLeftColor = style.borderLeftColor,
      borderLeftStyle = style.borderLeftStyle,
      borderLeftWidth = style.borderLeftWidth,
      borderTopWidth = style.borderTopWidth,
      borderBottomWidth = style.borderBottomWidth;
  var c0 = rbl * (1.0 - KAPPA);
  var c1 = rtl * (1.0 - KAPPA);
  ctx.moveTo(left + rbl, top + height);
  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);
  ctx.lineTo(left, top + rtl);
  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);
  ctx.strokeColor(borderLeftColor);
  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);

  if (borderLeftStyle === 'dashed') {
    ctx.dash(borderLeftWidth * 2, {
      space: borderLeftWidth * 1.2
    });
  } else if (borderLeftStyle === 'dotted') {
    ctx.dash(borderLeftWidth, {
      space: borderLeftWidth * 1.2
    });
  }

  ctx.stroke();
  ctx.undash();
};

var shouldRenderBorders = function shouldRenderBorders(node) {
  return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);
};

var renderBorders = function renderBorders(ctx, node) {
  if (!shouldRenderBorders(node)) return node;
  var _node$box = node.box,
      width = _node$box.width,
      height = _node$box.height,
      borderTopWidth = _node$box.borderTopWidth,
      borderLeftWidth = _node$box.borderLeftWidth,
      borderRightWidth = _node$box.borderRightWidth,
      borderBottomWidth = _node$box.borderBottomWidth;
  var _node$style = node.style,
      opacity = _node$style.opacity,
      _node$style$borderTop = _node$style.borderTopLeftRadius,
      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,
      _node$style$borderTop2 = _node$style.borderTopRightRadius,
      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,
      _node$style$borderBot = _node$style.borderBottomLeftRadius,
      borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,
      _node$style$borderBot2 = _node$style.borderBottomRightRadius,
      borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2,
      _node$style$borderTop3 = _node$style.borderTopColor,
      borderTopColor = _node$style$borderTop3 === void 0 ? 'black' : _node$style$borderTop3,
      _node$style$borderTop4 = _node$style.borderTopStyle,
      borderTopStyle = _node$style$borderTop4 === void 0 ? 'solid' : _node$style$borderTop4,
      _node$style$borderLef = _node$style.borderLeftColor,
      borderLeftColor = _node$style$borderLef === void 0 ? 'black' : _node$style$borderLef,
      _node$style$borderLef2 = _node$style.borderLeftStyle,
      borderLeftStyle = _node$style$borderLef2 === void 0 ? 'solid' : _node$style$borderLef2,
      _node$style$borderRig = _node$style.borderRightColor,
      borderRightColor = _node$style$borderRig === void 0 ? 'black' : _node$style$borderRig,
      _node$style$borderRig2 = _node$style.borderRightStyle,
      borderRightStyle = _node$style$borderRig2 === void 0 ? 'solid' : _node$style$borderRig2,
      _node$style$borderBot3 = _node$style.borderBottomColor,
      borderBottomColor = _node$style$borderBot3 === void 0 ? 'black' : _node$style$borderBot3,
      _node$style$borderBot4 = _node$style.borderBottomStyle,
      borderBottomStyle = _node$style$borderBot4 === void 0 ? 'solid' : _node$style$borderBot4;
  var style = {
    borderTopColor: borderTopColor,
    borderTopWidth: borderTopWidth,
    borderTopStyle: borderTopStyle,
    borderLeftColor: borderLeftColor,
    borderLeftWidth: borderLeftWidth,
    borderLeftStyle: borderLeftStyle,
    borderRightColor: borderRightColor,
    borderRightWidth: borderRightWidth,
    borderRightStyle: borderRightStyle,
    borderBottomColor: borderBottomColor,
    borderBottomWidth: borderBottomWidth,
    borderBottomStyle: borderBottomStyle,
    borderTopLeftRadius: borderTopLeftRadius,
    borderTopRightRadius: borderTopRightRadius,
    borderBottomLeftRadius: borderBottomLeftRadius,
    borderBottomRightRadius: borderBottomRightRadius
  };
  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);
  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);
  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);
  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);
  ctx.save();
  ctx.strokeOpacity(opacity);

  if (borderTopWidth) {
    ctx.save();
    clipBorderTop(ctx, node.box, style, rtr, rtl);
    fillBorderTop(ctx, node.box, style, rtr, rtl);
    ctx.restore();
  }

  if (borderRightWidth) {
    ctx.save();
    clipBorderRight(ctx, node.box, style, rtr, rbr);
    fillBorderRight(ctx, node.box, style, rtr, rbr);
    ctx.restore();
  }

  if (borderBottomWidth) {
    ctx.save();
    clipBorderBottom(ctx, node.box, style, rbl, rbr);
    fillBorderBottom(ctx, node.box, style, rbl, rbr);
    ctx.restore();
  }

  if (borderLeftWidth) {
    ctx.save();
    clipBorderLeft(ctx, node.box, style, rbl, rtl);
    fillBorderLeft(ctx, node.box, style, rbl, rtl);
    ctx.restore();
  }

  ctx.restore();
  return node;
};

var _default = R.curryN(2, renderBorders);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderCanvas.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderCanvas.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends3 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var availableMethods = ['dash', 'clip', 'save', 'path', 'fill', 'font', 'text', 'rect', 'scale', 'moveTo', 'lineTo', 'stroke', 'rotate', 'circle', 'lineCap', 'opacity', 'ellipse', 'polygon', 'restore', 'lineJoin', 'fontSize', 'fillColor', 'lineWidth', 'translate', 'miterLimit', 'strokeColor', 'fillOpacity', 'roundedRect', 'fillAndStroke', 'strokeOpacity', 'bezierCurveTo', 'quadraticCurveTo', 'linearGradient', 'radialGradient'];

var painter = function painter(ctx) {
  var p = availableMethods.reduce(function (acc, prop) {
    var _extends2;

    return (0, _extends3.default)({}, acc, (_extends2 = {}, _extends2[prop] = function () {
      ctx[prop].apply(ctx, arguments);
      return p;
    }, _extends2));
  }, {});
  return p;
};

var defaultsZero = R.propOr(0);

var renderCanvas = function renderCanvas(ctx, node) {
  var _node$box = node.box,
      top = _node$box.top,
      left = _node$box.left,
      width = _node$box.width,
      height = _node$box.height;
  var paddingTop = defaultsZero('paddingTop', node.box);
  var paddingLeft = defaultsZero('paddingLeft', node.box);
  var paddingRight = defaultsZero('paddingRight', node.box);
  var paddingBottom = defaultsZero('paddingBottom', node.box);
  var availableWidth = width - paddingLeft - paddingRight;
  var availableHeight = height - paddingTop - paddingBottom;

  if (!availableWidth || !availableHeight) {
    console.warn('Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.');
  }

  ctx.save().translate(left + paddingLeft, top + paddingTop);

  if (node.props.paint) {
    node.props.paint(painter(ctx), availableWidth, availableHeight);
  }

  ctx.restore();
  return node;
};

var _default = R.curryN(2, renderCanvas);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderCircle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderCircle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _renderEllipse = __webpack_require__(/*! ./renderEllipse */ "./node_modules/@react-pdf/render/lib/primitives/renderEllipse.js");

var getProp = function getProp(p, v) {
  return R.path(['props', p], v);
};

var renderCircle = function renderCircle(ctx, node) {
  var cx = getProp('cx', node);
  var cy = getProp('cy', node);
  var r = getProp('r', node);
  (0, _renderEllipse.drawEllipse)(ctx, cx, cy, r, r);
  return node;
};

var _default = R.curryN(2, renderCircle);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderDebug.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderDebug.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var CONTENT_COLOR = '#a1c6e7';
var PADDING_COLOR = '#c4deb9';
var MARGIN_COLOR = '#f8cca1';
var shouldDebug = R.pathEq(['props', 'debug'], true); // TODO: Draw debug boxes using clipping to enhance quality

var debugContent = function debugContent(ctx) {
  return function (node) {
    var _node$box = node.box,
        left = _node$box.left,
        top = _node$box.top,
        width = _node$box.width,
        height = _node$box.height,
        _node$box$paddingLeft = _node$box.paddingLeft,
        paddingLeft = _node$box$paddingLeft === void 0 ? 0 : _node$box$paddingLeft,
        _node$box$paddingTop = _node$box.paddingTop,
        paddingTop = _node$box$paddingTop === void 0 ? 0 : _node$box$paddingTop,
        _node$box$paddingRigh = _node$box.paddingRight,
        paddingRight = _node$box$paddingRigh === void 0 ? 0 : _node$box$paddingRigh,
        _node$box$paddingBott = _node$box.paddingBottom,
        paddingBottom = _node$box$paddingBott === void 0 ? 0 : _node$box$paddingBott,
        _node$box$borderLeftW = _node$box.borderLeftWidth,
        borderLeftWidth = _node$box$borderLeftW === void 0 ? 0 : _node$box$borderLeftW,
        _node$box$borderTopWi = _node$box.borderTopWidth,
        borderTopWidth = _node$box$borderTopWi === void 0 ? 0 : _node$box$borderTopWi,
        _node$box$borderRight = _node$box.borderRightWidth,
        borderRightWidth = _node$box$borderRight === void 0 ? 0 : _node$box$borderRight,
        _node$box$borderBotto = _node$box.borderBottomWidth,
        borderBottomWidth = _node$box$borderBotto === void 0 ? 0 : _node$box$borderBotto;
    ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();
    return node;
  };
};

var debugPadding = function debugPadding(ctx) {
  return function (node) {
    var _node$box2 = node.box,
        left = _node$box2.left,
        top = _node$box2.top,
        width = _node$box2.width,
        height = _node$box2.height,
        _node$box2$paddingLef = _node$box2.paddingLeft,
        paddingLeft = _node$box2$paddingLef === void 0 ? 0 : _node$box2$paddingLef,
        _node$box2$paddingTop = _node$box2.paddingTop,
        paddingTop = _node$box2$paddingTop === void 0 ? 0 : _node$box2$paddingTop,
        _node$box2$paddingRig = _node$box2.paddingRight,
        paddingRight = _node$box2$paddingRig === void 0 ? 0 : _node$box2$paddingRig,
        _node$box2$paddingBot = _node$box2.paddingBottom,
        paddingBottom = _node$box2$paddingBot === void 0 ? 0 : _node$box2$paddingBot,
        _node$box2$borderLeft = _node$box2.borderLeftWidth,
        borderLeftWidth = _node$box2$borderLeft === void 0 ? 0 : _node$box2$borderLeft,
        _node$box2$borderTopW = _node$box2.borderTopWidth,
        borderTopWidth = _node$box2$borderTopW === void 0 ? 0 : _node$box2$borderTopW,
        _node$box2$borderRigh = _node$box2.borderRightWidth,
        borderRightWidth = _node$box2$borderRigh === void 0 ? 0 : _node$box2$borderRigh,
        _node$box2$borderBott = _node$box2.borderBottomWidth,
        borderBottomWidth = _node$box2$borderBott === void 0 ? 0 : _node$box2$borderBott;
    ctx.fillColor(PADDING_COLOR).opacity(0.5); // Padding top

    ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill(); // Padding left

    ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill(); // Padding right

    ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill(); // Padding bottom

    ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();
    return node;
  };
};

var getMargin = function getMargin(box) {
  var marginLeft = box.marginLeft === 'auto' ? 0 : box.marginLeft;
  var marginTop = box.marginTop === 'auto' ? 0 : box.marginTop;
  var marginRight = box.marginRight === 'auto' ? 0 : box.marginRight;
  var marginBottom = box.marginBottom === 'auto' ? 0 : box.marginBottom;
  return {
    marginLeft: marginLeft,
    marginTop: marginTop,
    marginRight: marginRight,
    marginBottom: marginBottom
  };
};

var debugMargin = function debugMargin(ctx) {
  return function (node) {
    var _node$box3 = node.box,
        left = _node$box3.left,
        top = _node$box3.top,
        width = _node$box3.width,
        height = _node$box3.height;

    var _getMargin = getMargin(node.box),
        _getMargin$marginLeft = _getMargin.marginLeft,
        marginLeft = _getMargin$marginLeft === void 0 ? 0 : _getMargin$marginLeft,
        _getMargin$marginTop = _getMargin.marginTop,
        marginTop = _getMargin$marginTop === void 0 ? 0 : _getMargin$marginTop,
        _getMargin$marginRigh = _getMargin.marginRight,
        marginRight = _getMargin$marginRigh === void 0 ? 0 : _getMargin$marginRigh,
        _getMargin$marginBott = _getMargin.marginBottom,
        marginBottom = _getMargin$marginBott === void 0 ? 0 : _getMargin$marginBott;

    ctx.fillColor(MARGIN_COLOR).opacity(0.5); // Margin top

    ctx.rect(left, top - marginTop, width, marginTop).fill(); // Margin left

    ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill(); // Margin right

    ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill(); // Margin bottom

    ctx.rect(left, top + height, width, marginBottom).fill();
    return node;
  };
};

var debugText = function debugText(ctx) {
  return function (node) {
    var _node$box4 = node.box,
        left = _node$box4.left,
        top = _node$box4.top,
        width = _node$box4.width,
        height = _node$box4.height;

    var _getMargin2 = getMargin(node.box),
        _getMargin2$marginLef = _getMargin2.marginLeft,
        marginLeft = _getMargin2$marginLef === void 0 ? 0 : _getMargin2$marginLef,
        _getMargin2$marginTop = _getMargin2.marginTop,
        marginTop = _getMargin2$marginTop === void 0 ? 0 : _getMargin2$marginTop,
        _getMargin2$marginRig = _getMargin2.marginRight,
        marginRight = _getMargin2$marginRig === void 0 ? 0 : _getMargin2$marginRig,
        _getMargin2$marginBot = _getMargin2.marginBottom,
        marginBottom = _getMargin2$marginBot === void 0 ? 0 : _getMargin2$marginBot;

    var roundedWidth = Math.round(width + marginLeft + marginRight);
    var roundedHeight = Math.round(height + marginTop + marginBottom);
    ctx.fontSize(6).opacity(1).fillColor('black').text(roundedWidth + " x " + roundedHeight, left - marginLeft, Math.max(top - marginTop - 4, 1));
    return node;
  };
};

var debugOrigin = function debugOrigin(ctx) {
  return function (node) {
    if (node.origin) {
      ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');
    }

    return node;
  };
};

var renderDebug = function renderDebug(ctx) {
  return R.tap(R.when(shouldDebug, R.compose((0, _restore.default)(ctx), debugOrigin(ctx), debugText(ctx), debugMargin(ctx), debugPadding(ctx), debugContent(ctx), (0, _save.default)(ctx))));
};

var _default = renderDebug;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderEllipse.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderEllipse.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports.drawEllipse = exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

var getProp = function getProp(p, v) {
  return R.path(['props', p], v);
};

var drawEllipse = function drawEllipse(ctx, cx, cy, rx, ry) {
  var x = cx - rx;
  var y = cy - ry;
  var ox = rx * KAPPA;
  var oy = ry * KAPPA;
  var xe = x + rx * 2;
  var ye = y + ry * 2;
  var xm = x + rx;
  var ym = y + ry;
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.closePath();
};

exports.drawEllipse = drawEllipse;

var renderEllipse = function renderEllipse(ctx, node) {
  var cx = getProp('cx', node);
  var cy = getProp('cy', node);
  var rx = getProp('rx', node);
  var ry = getProp('ry', node);
  drawEllipse(ctx, cx, cy, rx, ry);
  return node;
};

var _default = R.curryN(2, renderEllipse);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderGlyphs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderGlyphs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var renderGlyphs = function renderGlyphs(ctx, glyphs, positions, x, y, options) {
  if (options === void 0) {
    options = {};
  }

  var scale = 1000 / ctx._fontSize;
  var unitsPerEm = ctx._font.font.unitsPerEm || 1000;
  var advanceWidthScale = 1000 / unitsPerEm; // Glyph encoding and positioning

  var encodedGlyphs = ctx._font.encodeGlyphs(glyphs);

  var encodedPositions = positions.map(function (pos, i) {
    return {
      xAdvance: pos.xAdvance * scale,
      yAdvance: pos.yAdvance * scale,
      xOffset: pos.xOffset,
      yOffset: pos.yOffset,
      advanceWidth: glyphs[i].advanceWidth * advanceWidthScale
    };
  });
  return ctx._glyphs(encodedGlyphs, encodedPositions, x, y, options);
};

var _default = renderGlyphs;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderGroup.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderGroup.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var renderGroup = function renderGroup() {
  return R.identity;
};

var _default = renderGroup;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderImage.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderImage.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var _clipNode = _interopRequireDefault(__webpack_require__(/*! ../operations/clipNode */ "./node_modules/@react-pdf/render/lib/operations/clipNode.js"));

var _resolveObjectFit2 = _interopRequireDefault(__webpack_require__(/*! ../utils/resolveObjectFit */ "./node_modules/@react-pdf/render/lib/utils/resolveObjectFit.js"));

var drawImage = function drawImage(ctx) {
  return function (node) {
    var _node$style, _node$style2, _node$style3, _node$style4;

    var _node$box = node.box,
        left = _node$box.left,
        top = _node$box.top;
    var opacity = (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity;
    var objectFit = (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.objectFit;
    var objectPositionX = (_node$style3 = node.style) === null || _node$style3 === void 0 ? void 0 : _node$style3.objectPositionX;
    var objectPositionY = (_node$style4 = node.style) === null || _node$style4 === void 0 ? void 0 : _node$style4.objectPositionY;
    var paddingTop = node.box.paddingTop || 0;
    var paddingRight = node.box.paddingRight || 0;
    var paddingBottom = node.box.paddingBottom || 0;
    var paddingLeft = node.box.paddingLeft || 0;

    var _resolveObjectFit = (0, _resolveObjectFit2.default)(objectFit, node.box.width - paddingLeft - paddingRight, node.box.height - paddingTop - paddingBottom, node.image.width, node.image.height, objectPositionX, objectPositionY),
        width = _resolveObjectFit.width,
        height = _resolveObjectFit.height,
        xOffset = _resolveObjectFit.xOffset,
        yOffset = _resolveObjectFit.yOffset;

    if (node.image.data) {
      if (width !== 0 && height !== 0) {
        ctx.fillOpacity(opacity || 1).image(node.image.data, left + paddingLeft + xOffset, top + paddingTop + yOffset, {
          width: width,
          height: height
        });
      } else {
        console.warn("Image with src '" + node.props.src + "' skipped due to invalid dimensions");
      }
    }

    return node;
  };
};

var renderImage = function renderImage(ctx, node) {
  R.compose((0, _restore.default)(ctx), drawImage(ctx), (0, _clipNode.default)(ctx), (0, _save.default)(ctx))(node);
  return node;
};

var _default = R.curryN(2, renderImage);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderLine.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderLine.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var getProp = function getProp(p, v) {
  return R.path(['props', p], v);
};

var renderLine = function renderLine(ctx) {
  return function (node) {
    var x1 = getProp('x1', node);
    var y1 = getProp('y1', node);
    var x2 = getProp('x2', node);
    var y2 = getProp('y2', node);
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    return node;
  };
};

var _default = renderLine;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _renderSvg = _interopRequireDefault(__webpack_require__(/*! ./renderSvg */ "./node_modules/@react-pdf/render/lib/primitives/renderSvg.js"));

var _renderText = _interopRequireDefault(__webpack_require__(/*! ./renderText */ "./node_modules/@react-pdf/render/lib/primitives/renderText.js"));

var _renderPage = _interopRequireDefault(__webpack_require__(/*! ./renderPage */ "./node_modules/@react-pdf/render/lib/primitives/renderPage.js"));

var _renderNote = _interopRequireDefault(__webpack_require__(/*! ./renderNote */ "./node_modules/@react-pdf/render/lib/primitives/renderNote.js"));

var _renderImage = _interopRequireDefault(__webpack_require__(/*! ./renderImage */ "./node_modules/@react-pdf/render/lib/primitives/renderImage.js"));

var _renderDebug = _interopRequireDefault(__webpack_require__(/*! ./renderDebug */ "./node_modules/@react-pdf/render/lib/primitives/renderDebug.js"));

var _renderCanvas = _interopRequireDefault(__webpack_require__(/*! ./renderCanvas */ "./node_modules/@react-pdf/render/lib/primitives/renderCanvas.js"));

var _renderBorders = _interopRequireDefault(__webpack_require__(/*! ./renderBorders */ "./node_modules/@react-pdf/render/lib/primitives/renderBorders.js"));

var _renderBackground = _interopRequireDefault(__webpack_require__(/*! ./renderBackground */ "./node_modules/@react-pdf/render/lib/primitives/renderBackground.js"));

var _isSvg = _interopRequireDefault(__webpack_require__(/*! ../utils/isSvg */ "./node_modules/@react-pdf/render/lib/utils/isSvg.js"));

var _isLink = _interopRequireDefault(__webpack_require__(/*! ../utils/isLink */ "./node_modules/@react-pdf/render/lib/utils/isLink.js"));

var _isPage = _interopRequireDefault(__webpack_require__(/*! ../utils/isPage */ "./node_modules/@react-pdf/render/lib/utils/isPage.js"));

var _isNote = _interopRequireDefault(__webpack_require__(/*! ../utils/isNote */ "./node_modules/@react-pdf/render/lib/utils/isNote.js"));

var _isText = _interopRequireDefault(__webpack_require__(/*! ../utils/isText */ "./node_modules/@react-pdf/render/lib/utils/isText.js"));

var _isImage = _interopRequireDefault(__webpack_require__(/*! ../utils/isImage */ "./node_modules/@react-pdf/render/lib/utils/isImage.js"));

var _isCanvas = _interopRequireDefault(__webpack_require__(/*! ../utils/isCanvas */ "./node_modules/@react-pdf/render/lib/utils/isCanvas.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _setLink = _interopRequireDefault(__webpack_require__(/*! ../operations/setLink */ "./node_modules/@react-pdf/render/lib/operations/setLink.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var _clipNode = _interopRequireDefault(__webpack_require__(/*! ../operations/clipNode */ "./node_modules/@react-pdf/render/lib/operations/clipNode.js"));

var _transform = _interopRequireDefault(__webpack_require__(/*! ../operations/transform */ "./node_modules/@react-pdf/render/lib/operations/transform.js"));

var _setDestination = _interopRequireDefault(__webpack_require__(/*! ../operations/setDestination */ "./node_modules/@react-pdf/render/lib/operations/setDestination.js"));

var shouldRenderChildren = function shouldRenderChildren(v) {
  return !(0, _isText.default)(v) && !(0, _isSvg.default)(v);
};

var isOverflowHidden = R.pathEq(['style', 'overflow'], 'hidden');

var renderChildren = function renderChildren(ctx) {
  return function (node) {
    (0, _save.default)(ctx, node);

    if (node.box) {
      ctx.translate(node.box.left, node.box.top);
    }

    var children = node.children || [];
    var renderChild = renderNode(ctx);
    children.forEach(renderChild);
    (0, _restore.default)(ctx, node);
    return node;
  };
};

var renderNode = function renderNode(ctx) {
  return function (node) {
    return R.compose((0, _restore.default)(ctx), (0, _renderDebug.default)(ctx), (0, _setDestination.default)(ctx), R.when(shouldRenderChildren, renderChildren(ctx)), R.when(_isLink.default, (0, _setLink.default)(ctx)), R.cond([[_isText.default, (0, _renderText.default)(ctx)], [_isNote.default, (0, _renderNote.default)(ctx)], [_isImage.default, (0, _renderImage.default)(ctx)], [_isCanvas.default, (0, _renderCanvas.default)(ctx)], [_isSvg.default, (0, _renderSvg.default)(ctx)], [R.T, R.identity]]), (0, _renderBorders.default)(ctx), (0, _renderBackground.default)(ctx), (0, _transform.default)(ctx), R.when(isOverflowHidden, (0, _clipNode.default)(ctx)), (0, _save.default)(ctx), R.when(_isPage.default, (0, _renderPage.default)(ctx)))(node);
  };
};

var _default = renderNode;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderNote.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderNote.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var renderNote = function renderNote(ctx, node) {
  var _node$children;

  var _node$box = node.box,
      top = _node$box.top,
      left = _node$box.left;
  var value = (node === null || node === void 0 ? void 0 : (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children[0].value) || '';
  ctx.note(left, top, 0, 0, value);
  return node;
};

var _default = R.curryN(2, renderNote);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderPage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderPage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var renderPage = function renderPage(ctx, node) {
  var _node$box = node.box,
      width = _node$box.width,
      height = _node$box.height;
  ctx.addPage({
    size: [width, height],
    margin: 0
  });
  return node;
};

var _default = R.curryN(2, renderPage);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderPath.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderPath.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var renderPath = function renderPath(ctx) {
  return R.tap(function (node) {
    var d = R.path(['props', 'd'], node);
    if (d) ctx.path(node.props.d);
  });
};

var _default = renderPath;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderPolygon.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderPolygon.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _renderPolyline = _interopRequireDefault(__webpack_require__(/*! ./renderPolyline */ "./node_modules/@react-pdf/render/lib/primitives/renderPolyline.js"));

var closePath = function closePath(ctx) {
  return R.tap(function () {
    return ctx.closePath();
  });
};

var renderPolygon = function renderPolygon(ctx) {
  return R.compose(closePath(ctx), (0, _renderPolyline.default)(ctx));
};

var _default = renderPolygon;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderPolyline.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderPolyline.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports.drawPolyline = exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _parsePoints = _interopRequireDefault(__webpack_require__(/*! ../svg/parsePoints */ "./node_modules/@react-pdf/render/lib/svg/parsePoints.js"));

var drawPolyline = function drawPolyline(ctx) {
  return function (points) {
    if (points.length > 0) {
      ctx.moveTo(points[0][0], points[0][1]);
      points.slice(1).forEach(function (p) {
        return ctx.lineTo(p[0], p[1]);
      });
    }
  };
};

exports.drawPolyline = drawPolyline;

var renderPolyline = function renderPolyline(ctx) {
  return R.tap(R.compose(drawPolyline(ctx), _parsePoints.default, R.pathOr('', ['props', 'points'])));
};

var _default = renderPolyline;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderRect.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderRect.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

var getProp = function getProp(d, p, v) {
  return R.pathOr(d, ['props', p], v);
};

var renderRect = function renderRect(ctx) {
  return function (node) {
    var x = getProp(0, 'x', node);
    var y = getProp(0, 'y', node);
    var rx = getProp(0, 'rx', node);
    var ry = getProp(0, 'ry', node);
    var width = getProp(0, 'width', node);
    var height = getProp(0, 'height', node);
    if (!width || !height) return node;

    if (rx && ry) {
      var krx = rx * KAPPA;
      var kry = ry * KAPPA;
      ctx.moveTo(x + rx, y);
      ctx.lineTo(x - rx + width, y);
      ctx.bezierCurveTo(x - rx + width + krx, y, x + width, y + ry - kry, x + width, y + ry);
      ctx.lineTo(x + width, y + height - ry);
      ctx.bezierCurveTo(x + width, y + height - ry + kry, x - rx + width + krx, y + height, x - rx + width, y + height);
      ctx.lineTo(x + rx, y + height);
      ctx.bezierCurveTo(x + rx - krx, y + height, x, y + height - ry + kry, x, y + height - ry);
      ctx.lineTo(x, y + ry);
      ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);
    } else {
      ctx.moveTo(x, y);
      ctx.lineTo(x + width, y);
      ctx.lineTo(x + width, y + height);
      ctx.lineTo(x, y + height);
    }

    ctx.closePath();
    return node;
  };
};

var _default = renderRect;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderSvg.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderSvg.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var _renderPath = _interopRequireDefault(__webpack_require__(/*! ./renderPath */ "./node_modules/@react-pdf/render/lib/primitives/renderPath.js"));

var _renderRect = _interopRequireDefault(__webpack_require__(/*! ./renderRect */ "./node_modules/@react-pdf/render/lib/primitives/renderRect.js"));

var _renderLine = _interopRequireDefault(__webpack_require__(/*! ./renderLine */ "./node_modules/@react-pdf/render/lib/primitives/renderLine.js"));

var _renderGroup = _interopRequireDefault(__webpack_require__(/*! ./renderGroup */ "./node_modules/@react-pdf/render/lib/primitives/renderGroup.js"));

var _renderCircle = _interopRequireDefault(__webpack_require__(/*! ./renderCircle */ "./node_modules/@react-pdf/render/lib/primitives/renderCircle.js"));

var _renderSvgText = _interopRequireDefault(__webpack_require__(/*! ./renderSvgText */ "./node_modules/@react-pdf/render/lib/primitives/renderSvgText.js"));

var _renderEllipse = _interopRequireDefault(__webpack_require__(/*! ./renderEllipse */ "./node_modules/@react-pdf/render/lib/primitives/renderEllipse.js"));

var _renderPolygon = _interopRequireDefault(__webpack_require__(/*! ./renderPolygon */ "./node_modules/@react-pdf/render/lib/primitives/renderPolygon.js"));

var _renderPolyline = _interopRequireDefault(__webpack_require__(/*! ./renderPolyline */ "./node_modules/@react-pdf/render/lib/primitives/renderPolyline.js"));

var _renderSvgImage = _interopRequireDefault(__webpack_require__(/*! ./renderSvgImage */ "./node_modules/@react-pdf/render/lib/primitives/renderSvgImage.js"));

var _isPath = _interopRequireDefault(__webpack_require__(/*! ../utils/isPath */ "./node_modules/@react-pdf/render/lib/utils/isPath.js"));

var _isText = _interopRequireDefault(__webpack_require__(/*! ../utils/isText */ "./node_modules/@react-pdf/render/lib/utils/isText.js"));

var _isRect = _interopRequireDefault(__webpack_require__(/*! ../utils/isRect */ "./node_modules/@react-pdf/render/lib/utils/isRect.js"));

var _isLine = _interopRequireDefault(__webpack_require__(/*! ../utils/isLine */ "./node_modules/@react-pdf/render/lib/utils/isLine.js"));

var _isTspan = _interopRequireDefault(__webpack_require__(/*! ../utils/isTspan */ "./node_modules/@react-pdf/render/lib/utils/isTspan.js"));

var _isImage = _interopRequireDefault(__webpack_require__(/*! ../utils/isImage */ "./node_modules/@react-pdf/render/lib/utils/isImage.js"));

var _isGroup = _interopRequireDefault(__webpack_require__(/*! ../utils/isGroup */ "./node_modules/@react-pdf/render/lib/utils/isGroup.js"));

var _isCircle = _interopRequireDefault(__webpack_require__(/*! ../utils/isCircle */ "./node_modules/@react-pdf/render/lib/utils/isCircle.js"));

var _isEllipse = _interopRequireDefault(__webpack_require__(/*! ../utils/isEllipse */ "./node_modules/@react-pdf/render/lib/utils/isEllipse.js"));

var _isPolygon = _interopRequireDefault(__webpack_require__(/*! ../utils/isPolygon */ "./node_modules/@react-pdf/render/lib/utils/isPolygon.js"));

var _isPolyline = _interopRequireDefault(__webpack_require__(/*! ../utils/isPolyline */ "./node_modules/@react-pdf/render/lib/utils/isPolyline.js"));

var _isTextInstance = _interopRequireDefault(__webpack_require__(/*! ../utils/isTextInstance */ "./node_modules/@react-pdf/render/lib/utils/isTextInstance.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var _clipNode = _interopRequireDefault(__webpack_require__(/*! ../operations/clipNode */ "./node_modules/@react-pdf/render/lib/operations/clipNode.js"));

var _transform = _interopRequireDefault(__webpack_require__(/*! ../operations/transform */ "./node_modules/@react-pdf/render/lib/operations/transform.js"));

var _getBoundingBox = _interopRequireDefault(__webpack_require__(/*! ../svg/getBoundingBox */ "./node_modules/@react-pdf/render/lib/svg/getBoundingBox.js"));

var warnUnsupportedNode = R.tap(function (node) {
  console.warn("SVG node of type " + node.type + " is not currenty supported");
});

var getProp = function getProp(d, p, v) {
  return R.pathOr(d, ['props', p], v);
};

var setStrokeWidth = function setStrokeWidth(ctx) {
  return function (node) {
    var lineWidth = getProp(0, 'strokeWidth', node);
    if (lineWidth) ctx.lineWidth(lineWidth);
    return node;
  };
};

var setStrokeColor = function setStrokeColor(ctx) {
  return function (node) {
    var strokeColor = getProp(null, 'stroke', node);
    if (strokeColor) ctx.strokeColor(strokeColor);
    return node;
  };
};

var setOpacity = function setOpacity(ctx) {
  return function (node) {
    var opacity = getProp(null, 'opacity', node);
    if (!R.isNil(opacity)) ctx.opacity(opacity);
    return node;
  };
};

var setFillOpacity = function setFillOpacity(ctx) {
  return function (node) {
    var fillOpacity = getProp(null, 'fillOpacity', node);
    if (!R.isNil(fillOpacity)) ctx.fillOpacity(fillOpacity);
    return node;
  };
};

var setStrokeOpacity = function setStrokeOpacity(ctx) {
  return function (node) {
    var strokeOpacity = getProp(null, 'strokeOpacity', node);
    if (!R.isNil(strokeOpacity)) ctx.strokeOpacity(strokeOpacity);
    return node;
  };
};

var setLineJoin = function setLineJoin(ctx) {
  return function (node) {
    var lineJoin = getProp(null, 'strokeLinejoin', node);
    if (lineJoin) ctx.lineJoin(lineJoin);
    return node;
  };
};

var setLineCap = function setLineCap(ctx) {
  return function (node) {
    var lineCap = getProp(null, 'strokeLinecap', node);
    if (lineCap) ctx.lineCap(lineCap);
    return node;
  };
};

var setLineDash = function setLineDash(ctx) {
  return function (node) {
    var value = getProp(null, 'strokeDasharray', node);
    if (value) ctx.dash(R.split(',', value));
    return node;
  };
};

var hasLinearGradientFill = R.pathEq(['props', 'fill', 'type'], P.LinearGradient);
var hasRadialGradientFill = R.pathEq(['props', 'fill', 'type'], P.RadialGradient); // Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L104

var setLinearGradientFill = function setLinearGradientFill(ctx) {
  return R.tap(function (node) {
    var bbox = (0, _getBoundingBox.default)(node);
    var gradient = getProp(null, 'fill', node);
    var x1 = R.pathOr(0, ['props', 'x1'], gradient);
    var y1 = R.pathOr(0, ['props', 'y1'], gradient);
    var x2 = R.pathOr(1, ['props', 'x2'], gradient);
    var y2 = R.pathOr(0, ['props', 'y2'], gradient);
    var m0 = bbox[2] - bbox[0];
    var m3 = bbox[3] - bbox[1];
    var m4 = bbox[0];
    var m5 = bbox[1];
    var gx1 = m0 * x1 + m4;
    var gy1 = m3 * y1 + m5;
    var gx2 = m0 * x2 + m4;
    var gy2 = m3 * y2 + m5;
    var grad = ctx.linearGradient(gx1, gy1, gx2, gy2);
    gradient.children.forEach(function (stop) {
      grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);
    });
    ctx.fill(grad);
  });
}; // Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L155


var setRadialGradientFill = function setRadialGradientFill(ctx) {
  return R.tap(function (node) {
    var bbox = (0, _getBoundingBox.default)(node);
    var gradient = getProp(null, 'fill', node);
    var cx = R.pathOr(0.5, ['props', 'cx'], gradient);
    var cy = R.pathOr(0.5, ['props', 'cy'], gradient);
    var fx = R.pathOr(cx, ['props', 'fx'], gradient);
    var fy = R.pathOr(cy, ['props', 'fy'], gradient);
    var r = R.pathOr(0.5, ['props', 'r'], gradient);
    var m0 = bbox[2] - bbox[0];
    var m3 = bbox[3] - bbox[1];
    var m4 = bbox[0];
    var m5 = bbox[1];
    var gr = r * m0;
    var gcx = m0 * cx + m4;
    var gcy = m3 * cy + m5;
    var gfx = m0 * fx + m4;
    var gfy = m3 * fy + m5;
    var grad = ctx.radialGradient(gfx, gfy, 0, gcx, gcy, gr);
    gradient.children.forEach(function (stop) {
      grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);
    });
    ctx.fill(grad);
  });
};

var setFillColor = function setFillColor(ctx) {
  return R.tap(function (node) {
    var fillColor = getProp(null, 'fill', node);
    if (fillColor) ctx.fillColor(fillColor);
  });
};

var setFill = function setFill(ctx) {
  return R.cond([[hasLinearGradientFill, setLinearGradientFill(ctx)], [hasRadialGradientFill, setRadialGradientFill(ctx)], [R.T, setFillColor(ctx)]]);
};

var draw = function draw(ctx) {
  return function (node) {
    var props = R.propOr({}, 'props', node);

    if (props.fill && props.stroke) {
      ctx.fillAndStroke(props.fillRule);
    } else if (props.fill) {
      ctx.fill(props.fillRule);
    } else if (props.stroke) {
      ctx.stroke();
    } else {
      ctx.save();
      ctx.opacity(0);
      ctx.fill(null);
      ctx.restore();
    }

    return node;
  };
};

var renderNode = function renderNode(ctx) {
  return R.cond([[_isTspan.default, R.identity], [_isTextInstance.default, R.identity], [_isPath.default, (0, _renderPath.default)(ctx)], [_isRect.default, (0, _renderRect.default)(ctx)], [_isLine.default, (0, _renderLine.default)(ctx)], [_isGroup.default, (0, _renderGroup.default)(ctx)], [_isText.default, (0, _renderSvgText.default)(ctx)], [_isCircle.default, (0, _renderCircle.default)(ctx)], [_isImage.default, (0, _renderSvgImage.default)(ctx)], [_isEllipse.default, (0, _renderEllipse.default)(ctx)], [_isPolygon.default, (0, _renderPolygon.default)(ctx)], [_isPolyline.default, (0, _renderPolyline.default)(ctx)], [R.T, warnUnsupportedNode]]);
};

var drawNode = function drawNode(ctx) {
  return R.compose(draw(ctx), renderNode(ctx), (0, _transform.default)(ctx), setOpacity(ctx), setFillOpacity(ctx), setStrokeOpacity(ctx), setFill(ctx), setStrokeColor(ctx), setStrokeWidth(ctx), setLineJoin(ctx), setLineDash(ctx), setLineCap(ctx));
};

var clipPath = function clipPath(ctx) {
  return function (node) {
    var value = R.path(['props', 'clipPath'], node);

    if (value) {
      R.compose(function () {
        return ctx.clip();
      }, R.forEach(renderNode(ctx)), R.propOr([], 'children'))(value);
    }

    return node;
  };
};

var drawChildren = function drawChildren(ctx) {
  return function (node) {
    return R.compose(R.map(R.compose((0, _restore.default)(ctx), drawChildren(ctx), drawNode(ctx), clipPath(ctx), (0, _save.default)(ctx))), R.propOr([], 'children'))(node);
  };
};

var defaultsZero = R.pathOr(0);

var resolveAspectRatio = function resolveAspectRatio(ctx) {
  return function (node) {
    var _node$box = node.box,
        width = _node$box.width,
        height = _node$box.height;
    var _node$props = node.props,
        viewBox = _node$props.viewBox,
        _node$props$preserveA = _node$props.preserveAspectRatio,
        preserveAspectRatio = _node$props$preserveA === void 0 ? {} : _node$props$preserveA;
    var _preserveAspectRatio$ = preserveAspectRatio.meetOrSlice,
        meetOrSlice = _preserveAspectRatio$ === void 0 ? 'meet' : _preserveAspectRatio$,
        _preserveAspectRatio$2 = preserveAspectRatio.align,
        align = _preserveAspectRatio$2 === void 0 ? 'xMidYMid' : _preserveAspectRatio$2;
    if (viewBox == null || width == null || height == null) return node;
    var x = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minX) || 0;
    var y = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minY) || 0;
    var logicalWidth = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxX) || width;
    var logicalHeight = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxY) || height;
    var logicalRatio = logicalWidth / logicalHeight;
    var physicalRatio = width / height;
    var scaleX = width / logicalWidth;
    var scaleY = height / logicalHeight;

    if (align === 'none') {
      ctx.scale(scaleX, scaleY);
      ctx.translate(-x, -y);
      return node;
    }

    if (logicalRatio < physicalRatio && meetOrSlice === 'meet' || logicalRatio >= physicalRatio && meetOrSlice === 'slice') {
      ctx.scale(scaleY, scaleY);

      switch (align) {
        case 'xMinYMin':
        case 'xMinYMid':
        case 'xMinYMax':
          ctx.translate(-x, -y);
          break;

        case 'xMidYMin':
        case 'xMidYMid':
        case 'xMidYMax':
          ctx.translate(-x - (logicalWidth - width * logicalHeight / height) / 2, -y);
          break;

        default:
          ctx.translate(-x - (logicalWidth - width * logicalHeight / height), -y);
      }
    } else {
      ctx.scale(scaleX, scaleX);

      switch (align) {
        case 'xMinYMin':
        case 'xMidYMin':
        case 'xMaxYMin':
          ctx.translate(-x, -y);
          break;

        case 'xMinYMid':
        case 'xMidYMid':
        case 'xMaxYMid':
          ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width) / 2);
          break;

        default:
          ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width));
      }
    }

    return node;
  };
};

var moveToOrigin = function moveToOrigin(ctx) {
  return function (node) {
    var _node$box2 = node.box,
        top = _node$box2.top,
        left = _node$box2.left;
    var paddingLeft = defaultsZero('paddingLeft', node.box);
    var paddingTop = defaultsZero('paddingTop', node.box);
    ctx.translate(left + paddingLeft, top + paddingTop);
    return node;
  };
};

var renderSvg = function renderSvg(ctx, node) {
  R.compose((0, _restore.default)(ctx), drawChildren(ctx), resolveAspectRatio(ctx), moveToOrigin(ctx), (0, _clipNode.default)(ctx), (0, _save.default)(ctx))(node);
  return node;
};

var _default = R.curryN(2, renderSvg);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderSvgImage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderSvgImage.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _save = _interopRequireDefault(__webpack_require__(/*! ../operations/save */ "./node_modules/@react-pdf/render/lib/operations/save.js"));

var _restore = _interopRequireDefault(__webpack_require__(/*! ../operations/restore */ "./node_modules/@react-pdf/render/lib/operations/restore.js"));

var drawImage = function drawImage(ctx) {
  return function (node) {
    var _node$props = node.props,
        x = _node$props.x,
        y = _node$props.y;
    var _node$style = node.style,
        width = _node$style.width,
        height = _node$style.height,
        opacity = _node$style.opacity;
    var paddingTop = node.box.paddingLeft || 0;
    var paddingLeft = node.box.paddingLeft || 0;

    if (node.image.data) {
      if (width !== 0 && height !== 0) {
        ctx.fillOpacity(opacity || 1).image(node.image.data, x + paddingLeft, y + paddingTop, {
          width: width,
          height: height
        });
      } else {
        console.warn("Image with src '" + node.props.href + "' skipped due to invalid dimensions");
      }
    }

    return node;
  };
};

var renderImage = function renderImage(ctx, node) {
  R.compose((0, _restore.default)(ctx), drawImage(ctx), (0, _save.default)(ctx))(node);
  return node;
};

var _default = R.curryN(2, renderImage);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderSvgText.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderSvgText.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/run/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js"));

var _advanceWidth2 = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/attributedString/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js"));

var _renderGlyphs = _interopRequireDefault(__webpack_require__(/*! ./renderGlyphs */ "./node_modules/@react-pdf/render/lib/primitives/renderGlyphs.js"));

var renderRun = function renderRun(ctx, run) {
  var runAdvanceWidth = (0, _advanceWidth.default)(run);
  var _run$attributes = run.attributes,
      font = _run$attributes.font,
      fontSize = _run$attributes.fontSize,
      color = _run$attributes.color,
      opacity = _run$attributes.opacity;
  ctx.fillColor(color);
  ctx.fillOpacity(opacity);

  if (font.sbix || font.COLR && font.CPAL) {
    ctx.save();
    ctx.translate(0, -run.ascent);

    for (var i = 0; i < run.glyphs.length; i += 1) {
      var position = run.positions[i];
      var glyph = run.glyphs[i];
      ctx.save();
      ctx.translate(position.xOffset, position.yOffset);
      glyph.render(ctx, fontSize);
      ctx.restore();
      ctx.translate(position.xAdvance, position.yAdvance);
    }

    ctx.restore();
  } else {
    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);

    try {
      (0, _renderGlyphs.default)(ctx, run.glyphs, run.positions, 0, 0);
    } catch (error) {
      console.log(error);
    }
  }

  ctx.translate(runAdvanceWidth, 0);
};

var renderSpan = function renderSpan(ctx, line, textAnchor, dominantBaseline) {
  ctx.save();
  var x = R.pathOr(0, ['box', 'x'], line);
  var y = R.pathOr(0, ['box', 'y'], line);
  var font = R.pathOr(1, ['runs', 0, 'attributes', 'font'], line);
  var scale = R.pathOr(1, ['runs', 0, 'attributes', 'scale'], line);
  var width = (0, _advanceWidth2.default)(line);
  var ascent = font.ascent * scale;
  var xHeight = font.xHeight * scale;
  var descent = font.descent * scale;
  var capHeight = font.capHeight * scale;
  var xTranslate = x;
  var yTranslate = y;

  switch (textAnchor) {
    case 'middle':
      xTranslate = x - width / 2;
      break;

    case 'end':
      xTranslate = x - width;
      break;

    default:
      xTranslate = x;
      break;
  }

  switch (dominantBaseline) {
    case 'middle':
    case 'central':
      yTranslate = y + capHeight / 2;
      break;

    case 'hanging':
      yTranslate = y + capHeight;
      break;

    case 'mathematical':
      yTranslate = y + xHeight;
      break;

    case 'text-after-edge':
      yTranslate = y + descent;
      break;

    case 'text-before-edge':
      yTranslate = y + ascent;
      break;

    default:
      yTranslate = y;
      break;
  }

  ctx.translate(xTranslate, yTranslate);
  line.runs.forEach(function (run) {
    return renderRun(ctx, run);
  });
  ctx.restore();
};

var renderSvgText = function renderSvgText(ctx) {
  return function (node) {
    node.children.forEach(function (span) {
      return renderSpan(ctx, span.lines[0], span.props.textAnchor, span.props.dominantBaseline);
    });
    return node;
  };
};

var _default = renderSvgText;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/primitives/renderText.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/primitives/renderText.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _height = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/run/height */ "./node_modules/@react-pdf/textkit/lib/run/height.js"));

var _descent = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/run/descent */ "./node_modules/@react-pdf/textkit/lib/run/descent.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/run/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js"));

var _ascent = _interopRequireDefault(__webpack_require__(/*! @react-pdf/textkit/lib/attributedString/ascent */ "./node_modules/@react-pdf/textkit/lib/attributedString/ascent.js"));

var _renderGlyphs = _interopRequireDefault(__webpack_require__(/*! ./renderGlyphs */ "./node_modules/@react-pdf/render/lib/primitives/renderGlyphs.js"));

var _parseColor = _interopRequireDefault(__webpack_require__(/*! ../utils/parseColor */ "./node_modules/@react-pdf/render/lib/utils/parseColor.js"));

/* eslint-disable no-param-reassign */
var DEST_REGEXP = /^#.+/;

var isSrcId = function isSrcId(src) {
  return src.match(DEST_REGEXP);
};

var renderAttachment = function renderAttachment(ctx, attachment) {
  var _attachment$xOffset = attachment.xOffset,
      xOffset = _attachment$xOffset === void 0 ? 0 : _attachment$xOffset,
      _attachment$yOffset = attachment.yOffset,
      yOffset = _attachment$yOffset === void 0 ? 0 : _attachment$yOffset,
      width = attachment.width,
      height = attachment.height,
      image = attachment.image;
  ctx.translate(-width + xOffset, -height + yOffset);
  ctx.image(image, 0, 0, {
    fit: [width, height],
    align: 'center',
    valign: 'bottom'
  });
};

var renderAttachments = function renderAttachments(ctx, run) {
  ctx.save();
  var font = run.attributes.font;
  var space = font.glyphForCodePoint(0x20);
  var objectReplacement = font.glyphForCodePoint(0xfffc);
  var attachmentAdvance = 0;

  for (var i = 0; i < run.glyphs.length; i += 1) {
    var position = run.positions[i];
    var glyph = run.glyphs[i];
    attachmentAdvance += position.xAdvance || 0;

    if (glyph.id === objectReplacement.id && run.attributes.attachment) {
      ctx.translate(attachmentAdvance, position.yOffset || 0);
      renderAttachment(ctx, run.attributes.attachment);
      run.glyphs[i] = space;
      attachmentAdvance = 0;
    }
  }

  ctx.restore();
};

var renderRun = function renderRun(ctx, run, options) {
  var _run$attributes = run.attributes,
      font = _run$attributes.font,
      fontSize = _run$attributes.fontSize,
      link = _run$attributes.link;
  var color = (0, _parseColor.default)(run.attributes.color);
  var opacity = R.defaultTo(color.opacity, run.attributes.opacity);
  var height = (0, _height.default)(run);
  var descent = (0, _descent.default)(run);
  var runAdvanceWidth = (0, _advanceWidth.default)(run);

  if (options.outlineRuns) {
    ctx.rect(0, -height, runAdvanceWidth, height).stroke();
  }

  ctx.fillColor(color.value);
  ctx.fillOpacity(opacity);

  if (link) {
    if (isSrcId(link)) {
      ctx.goTo(0, -height - descent, runAdvanceWidth, height, link.slice(1));
    } else {
      ctx.link(0, -height - descent, runAdvanceWidth, height, link);
    }
  }

  renderAttachments(ctx, run);

  if (font.sbix || font.COLR && font.CPAL) {
    ctx.save();
    ctx.translate(0, -run.ascent);

    for (var i = 0; i < run.glyphs.length; i += 1) {
      var position = run.positions[i];
      var glyph = run.glyphs[i];
      ctx.save();
      ctx.translate(position.xOffset, position.yOffset);
      glyph.render(ctx, fontSize);
      ctx.restore();
      ctx.translate(position.xAdvance, position.yAdvance);
    }

    ctx.restore();
  } else {
    ctx.font(typeof font.name === 'string' ? font.name : font, fontSize);

    try {
      (0, _renderGlyphs.default)(ctx, run.glyphs, run.positions, 0, 0);
    } catch (error) {
      console.log(error);
    }
  }

  ctx.translate(runAdvanceWidth, 0);
};

var renderBackground = function renderBackground(ctx, rect, backgroundColor) {
  var color = (0, _parseColor.default)(backgroundColor);
  ctx.save();
  ctx.fillOpacity(color.opacity);
  ctx.rect(rect.x, rect.y, rect.width, rect.height);
  ctx.fill(color.value);
  ctx.restore();
};

var renderDecorationLine = function renderDecorationLine(ctx, line) {
  ctx.save();
  ctx.lineWidth(line.rect.height);
  ctx.strokeOpacity(line.opacity);

  if (/dashed/.test(line.style)) {
    ctx.dash(3 * line.rect.height);
  } else if (/dotted/.test(line.style)) {
    ctx.dash(line.rect.height);
  }

  if (/wavy/.test(line.style)) {
    var dist = Math.max(2, line.rect.height);
    var step = 1.1 * dist;
    var stepCount = Math.floor(line.rect.width / (2 * step)); // Adjust step to fill entire width

    var remainingWidth = line.rect.width - stepCount * 2 * step;
    var adjustment = remainingWidth / stepCount / 2;
    step += adjustment;
    var cp1y = line.rect.y + dist;
    var cp2y = line.rect.y - dist;
    var x = line.rect.x;
    ctx.moveTo(line.rect.x, line.rect.y);

    for (var i = 0; i < stepCount; i += 1) {
      ctx.bezierCurveTo(x + step, cp1y, x + step, cp2y, x + 2 * step, line.rect.y);
      x += 2 * step;
    }
  } else {
    ctx.moveTo(line.rect.x, line.rect.y);
    ctx.lineTo(line.rect.x + line.rect.width, line.rect.y);

    if (/double/.test(line.style)) {
      ctx.moveTo(line.rect.x, line.rect.y + line.rect.height * 2);
      ctx.lineTo(line.rect.x + line.rect.width, line.rect.y + line.rect.height * 2);
    }
  }

  ctx.stroke(line.color);
  ctx.restore();
};

var renderLine = function renderLine(ctx, line, options) {
  var lineAscent = (0, _ascent.default)(line);

  if (options.outlineLines) {
    ctx.rect(line.box.x, line.box.y, line.box.width, line.box.height).stroke();
  }

  ctx.save();
  ctx.translate(line.box.x, line.box.y + lineAscent);

  for (var i = 0; i < line.runs.length; i += 1) {
    var run = line.runs[i];
    var isLastRun = i === line.runs.length - 1;

    if (run.attributes.backgroundColor) {
      var overflowRight = isLastRun ? line.overflowRight : 0;
      var backgroundRect = {
        x: 0,
        y: -lineAscent,
        height: line.box.height,
        width: (0, _advanceWidth.default)(run) - overflowRight
      };
      renderBackground(ctx, backgroundRect, run.attributes.backgroundColor);
    }

    renderRun(ctx, run, options);
  }

  ctx.restore();
  ctx.save();
  ctx.translate(line.box.x, line.box.y);

  for (var _i = 0; _i < line.decorationLines.length; _i += 1) {
    var decorationLine = line.decorationLines[_i];
    renderDecorationLine(ctx, decorationLine);
  }

  ctx.restore();
};

var renderBlock = function renderBlock(ctx, block, options) {
  block.forEach(function (line) {
    renderLine(ctx, line, options);
  });
};

var renderText = function renderText(ctx, node) {
  var _node$box = node.box,
      top = _node$box.top,
      left = _node$box.left;
  var blocks = [node.lines];
  var paddingTop = R.pathOr(0, ['box', 'paddingTop'], node);
  var paddingLeft = R.pathOr(0, ['box', 'paddingLeft'], node);
  var initialY = node.lines[0] ? node.lines[0].box.y : 0;
  var offsetX = node.alignOffset || 0;
  ctx.save();
  ctx.translate(left + paddingLeft - offsetX, top + paddingTop - initialY);
  blocks.forEach(function (block) {
    renderBlock(ctx, block, {});
  });
  ctx.restore();
  return node;
};

var _default = R.curryN(2, renderText);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/svg/getBoundingBox.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/svg/getBoundingBox.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _absSvgPath = _interopRequireDefault(__webpack_require__(/*! abs-svg-path */ "./node_modules/abs-svg-path/index.js"));

var _parseSvgPath = _interopRequireDefault(__webpack_require__(/*! parse-svg-path */ "./node_modules/parse-svg-path/index.js"));

var _normalizeSvgPath = _interopRequireDefault(__webpack_require__(/*! normalize-svg-path */ "./node_modules/normalize-svg-path/index.js"));

var _isRect = _interopRequireDefault(__webpack_require__(/*! ../utils/isRect */ "./node_modules/@react-pdf/render/lib/utils/isRect.js"));

var _isLine = _interopRequireDefault(__webpack_require__(/*! ../utils/isLine */ "./node_modules/@react-pdf/render/lib/utils/isLine.js"));

var _isPath = _interopRequireDefault(__webpack_require__(/*! ../utils/isPath */ "./node_modules/@react-pdf/render/lib/utils/isPath.js"));

var _isCircle = _interopRequireDefault(__webpack_require__(/*! ../utils/isCircle */ "./node_modules/@react-pdf/render/lib/utils/isCircle.js"));

var _isPolygon = _interopRequireDefault(__webpack_require__(/*! ../utils/isPolygon */ "./node_modules/@react-pdf/render/lib/utils/isPolygon.js"));

var _isEllipse = _interopRequireDefault(__webpack_require__(/*! ../utils/isEllipse */ "./node_modules/@react-pdf/render/lib/utils/isEllipse.js"));

var _isPolyline = _interopRequireDefault(__webpack_require__(/*! ../utils/isPolyline */ "./node_modules/@react-pdf/render/lib/utils/isPolyline.js"));

var _parsePoints = _interopRequireDefault(__webpack_require__(/*! ./parsePoints */ "./node_modules/@react-pdf/render/lib/svg/parsePoints.js"));

// From https://github.com/dy/svg-path-bounds/blob/master/index.js
var getPathBoundingBox = function getPathBoundingBox(node) {
  var path = R.compose(_normalizeSvgPath.default, _absSvgPath.default, _parseSvgPath.default, R.pathOr('', ['props', 'd']))(node);
  if (!path.length) return [0, 0, 0, 0];
  var bounds = [Infinity, Infinity, -Infinity, -Infinity];

  for (var i = 0, l = path.length; i < l; i += 1) {
    var points = path[i].slice(1);

    for (var j = 0; j < points.length; j += 2) {
      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];
      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];
      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];
      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];
    }
  }

  return bounds;
};

var getCircleBoundingBox = function getCircleBoundingBox(node) {
  var r = R.pathOr(0, ['props', 'r'], node);
  var cx = R.pathOr(0, ['props', 'cx'], node);
  var cy = R.pathOr(0, ['props', 'cy'], node);
  return [cx - r, cy - r, cx + r, cy + r];
};

var getEllipseBoundingBox = function getEllipseBoundingBox(node) {
  var cx = R.pathOr(0, ['props', 'cx'], node);
  var cy = R.pathOr(0, ['props', 'cy'], node);
  var rx = R.pathOr(0, ['props', 'rx'], node);
  var ry = R.pathOr(0, ['props', 'ry'], node);
  return [cx - rx, cy - ry, cx + rx, cy + ry];
};

var getLineBoundingBox = function getLineBoundingBox(node) {
  var x1 = R.pathOr(0, ['props', 'x1'], node);
  var y1 = R.pathOr(0, ['props', 'y1'], node);
  var x2 = R.pathOr(0, ['props', 'x2'], node);
  var y2 = R.pathOr(0, ['props', 'y2'], node);
  return [R.min(x1, x2), R.min(y1, y2), R.max(x1, x2), R.max(y1, y2)];
};

var getRectBoundingBox = function getRectBoundingBox(node) {
  var x = R.pathOr(0, ['props', 'x'], node);
  var y = R.pathOr(0, ['props', 'y'], node);
  var width = R.pathOr(0, ['props', 'width'], node);
  var height = R.pathOr(0, ['props', 'height'], node);
  return [x, y, x + width, y + height];
};

var max = R.reduce(R.max, -Infinity);
var min = R.reduce(R.min, Infinity);

var getPolylineBoundingBox = function getPolylineBoundingBox(node) {
  var points = R.compose(_parsePoints.default, R.pathOr([], ['props', 'points']))(node);
  var xValues = R.pluck(0, points);
  var yValues = R.pluck(1, points);
  return [min(xValues), min(yValues), max(xValues), max(yValues)];
};

var getBoundingBox = R.cond([[_isRect.default, getRectBoundingBox], [_isLine.default, getLineBoundingBox], [_isPath.default, getPathBoundingBox], [_isCircle.default, getCircleBoundingBox], [_isEllipse.default, getEllipseBoundingBox], [_isPolygon.default, getPolylineBoundingBox], [_isPolyline.default, getPolylineBoundingBox], [R.T, R.always([0, 0, 0, 0])]]);
var _default = getBoundingBox;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/svg/parsePoints.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/svg/parsePoints.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var isOdd = function isOdd(x) {
  return x % 2 !== 0;
};

var lengthIsOdd = R.o(isOdd, R.prop('length'));
/**
 * Parse svg-like points into number arrays
 *
 * @param {String} points string ex. "20,30 50,60"
 * @return {Array} points array ex. [[20, 30], [50, 60]]
 */

var parsePoints = R.compose(R.splitEvery(2), R.map(parseFloat), R.when(lengthIsOdd, R.slice(0, -1)), R.split(/\s+/), R.replace(/(\d)-(\d)/g, '$1 -$2'), R.replace(/,/g, ' '), R.trim, R.defaultTo(''));
var _default = parsePoints;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isCanvas.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isCanvas.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isCanvas = R.propEq('type', P.Canvas);
var _default = isCanvas;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isCircle.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isCircle.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isCircle = R.propEq('type', P.Circle);
var _default = isCircle;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isEllipse.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isEllipse.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isEllipse = R.propEq('type', P.Ellipse);
var _default = isEllipse;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isGroup.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isGroup.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isGroup = R.propEq('type', P.G);
var _default = isGroup;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isImage.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isImage.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isImage = R.propEq('type', P.Image);
var _default = isImage;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isLine.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isLine.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isLine = R.propEq('type', P.Line);
var _default = isLine;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isLink.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isLink.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isLink = R.propEq('type', P.Link);
var _default = isLink;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isNote.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isNote.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isNote = R.propEq('type', P.Note);
var _default = isNote;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isPage.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isPage.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isPage = R.propEq('type', P.Page);
var _default = isPage;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isPath.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isPath.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isPath = R.propEq('type', P.Path);
var _default = isPath;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isPolygon.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isPolygon.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isPolygon = R.propEq('type', P.Polygon);
var _default = isPolygon;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isPolyline.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isPolyline.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isPolyline = R.propEq('type', P.Polyline);
var _default = isPolyline;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isRect.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isRect.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isRect = R.propEq('type', P.Rect);
var _default = isRect;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isSvg.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isSvg.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isSvg = R.propEq('type', P.Svg);
var _default = isSvg;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isText.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isText.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isText = R.propEq('type', P.Text);
var _default = isText;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isTextInstance.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isTextInstance.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isTextInstance = R.propEq('type', P.TextInstance);
var _default = isTextInstance;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/isTspan.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/isTspan.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var P = _interopRequireWildcard(__webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js"));

var isTspan = R.propEq('type', P.Tspan);
var _default = isTspan;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/matchPercent.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/matchPercent.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var isPercent = function isPercent(value) {
  return /((-)?\d+\.?\d*)%/g.exec(value);
};
/**
 * Get percentage value of input
 *
 * @param {String} value
 * @returns {Object} percent value (if matches)
 */


var matchPercent = function matchPercent(value) {
  var match = isPercent(value);

  if (match) {
    var f = parseFloat(match[1], 10);
    var percent = f / 100;
    return {
      percent: percent,
      value: f
    };
  }

  return null;
};

var _default = matchPercent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/parseColor.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/parseColor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _colorString = _interopRequireDefault(__webpack_require__(/*! color-string */ "./node_modules/color-string/index.js"));

var parseColor = function parseColor(hex) {
  var parsed = _colorString.default.get(hex);

  var value = _colorString.default.to.hex(parsed.value.slice(0, 3));

  var opacity = parsed.value[3];
  return {
    value: value,
    opacity: opacity
  };
};

var _default = parseColor;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/lib/utils/resolveObjectFit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/utils/resolveObjectFit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _matchPercent = _interopRequireDefault(__webpack_require__(/*! ./matchPercent */ "./node_modules/@react-pdf/render/lib/utils/matchPercent.js"));

var isNumeric = function isNumeric(n) {
  return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);
};

var applyContainObjectFit = function applyContainObjectFit(cw, ch, iw, ih, px, py) {
  var cr = cw / ch;
  var ir = iw / ih;
  var pxp = (0, _matchPercent.default)(px);
  var pyp = (0, _matchPercent.default)(py);
  var pxv = pxp ? pxp.percent : 0.5;
  var pyv = pyp ? pyp.percent : 0.5;

  if (cr > ir) {
    var _height = ch;

    var _width = _height * ir;

    var _yOffset = isNumeric(py) ? py : 0;

    var _xOffset = isNumeric(px) ? px : (cw - _width) * pxv;

    return {
      width: _width,
      height: _height,
      xOffset: _xOffset,
      yOffset: _yOffset
    };
  }

  var width = cw;
  var height = width / ir;
  var xOffset = isNumeric(px) ? px : 0;
  var yOffset = isNumeric(py) ? py : (ch - height) * pyv;
  return {
    width: width,
    height: height,
    yOffset: yOffset,
    xOffset: xOffset
  };
};

var applyNoneObjectFit = function applyNoneObjectFit(cw, ch, iw, ih, px, py) {
  var width = iw;
  var height = ih;
  var pxp = (0, _matchPercent.default)(px);
  var pyp = (0, _matchPercent.default)(py);
  var pxv = pxp ? pxp.percent : 0.5;
  var pyv = pyp ? pyp.percent : 0.5;
  var xOffset = isNumeric(px) ? px : (cw - width) * pxv;
  var yOffset = isNumeric(py) ? py : (ch - height) * pyv;
  return {
    width: width,
    height: height,
    xOffset: xOffset,
    yOffset: yOffset
  };
};

var applyCoverObjectFit = function applyCoverObjectFit(cw, ch, iw, ih, px, py) {
  var ir = iw / ih;
  var cr = cw / ch;
  var pxp = (0, _matchPercent.default)(px);
  var pyp = (0, _matchPercent.default)(py);
  var pxv = pxp ? pxp.percent : 0.5;
  var pyv = pyp ? pyp.percent : 0.5;

  if (cr > ir) {
    var _width2 = cw;

    var _height2 = _width2 / ir;

    var _xOffset2 = isNumeric(px) ? px : 0;

    var _yOffset2 = isNumeric(py) ? py : (ch - _height2) * pyv;

    return {
      width: _width2,
      height: _height2,
      yOffset: _yOffset2,
      xOffset: _xOffset2
    };
  }

  var height = ch;
  var width = height * ir;
  var xOffset = isNumeric(px) ? px : (cw - width) * pxv;
  var yOffset = isNumeric(py) ? py : 0;
  return {
    width: width,
    height: height,
    xOffset: xOffset,
    yOffset: yOffset
  };
};

var applyScaleDownObjectFit = function applyScaleDownObjectFit(cw, ch, iw, ih, px, py) {
  var containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);
  var noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);
  return containDimension.width < noneDimension.width ? containDimension : noneDimension;
};

var applyFillObjectFit = function applyFillObjectFit(cw, ch, px, py) {
  return {
    width: cw,
    height: ch,
    xOffset: (0, _matchPercent.default)(px) ? 0 : px || 0,
    yOffset: (0, _matchPercent.default)(py) ? 0 : py || 0
  };
};

var resolveObjectFit = function resolveObjectFit(type, cw, ch, iw, ih, px, py) {
  if (type === void 0) {
    type = 'fill';
  }

  switch (type) {
    case 'contain':
      return applyContainObjectFit(cw, ch, iw, ih, px, py);

    case 'cover':
      return applyCoverObjectFit(cw, ch, iw, ih, px, py);

    case 'none':
      return applyNoneObjectFit(cw, ch, iw, ih, px, py);

    case 'scale-down':
      return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);

    default:
      return applyFillObjectFit(cw, ch, px, py);
  }
};

var _default = resolveObjectFit;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/extends.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/extends.js ***!
  \***************************************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}

module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*****************************************************************************************************/
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/typeof.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@react-pdf/render/node_modules/@babel/runtime/helpers/typeof.js ***!
  \**************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/renderer/lib/react-pdf.browser.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/lib/react-pdf.browser.es.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlobProvider": () => (/* binding */ BlobProvider),
/* harmony export */   "Canvas": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Canvas),
/* harmony export */   "Circle": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Circle),
/* harmony export */   "ClipPath": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.ClipPath),
/* harmony export */   "Defs": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Defs),
/* harmony export */   "Document": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Document),
/* harmony export */   "Ellipse": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Ellipse),
/* harmony export */   "Font": () => (/* binding */ Font),
/* harmony export */   "G": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.G),
/* harmony export */   "Image": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Image),
/* harmony export */   "Line": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Line),
/* harmony export */   "LinearGradient": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.LinearGradient),
/* harmony export */   "Link": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Link),
/* harmony export */   "Note": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Note),
/* harmony export */   "PDFDownloadLink": () => (/* binding */ PDFDownloadLink),
/* harmony export */   "PDFViewer": () => (/* binding */ PDFViewer),
/* harmony export */   "Page": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Page),
/* harmony export */   "Path": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Path),
/* harmony export */   "Polygon": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Polygon),
/* harmony export */   "Polyline": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Polyline),
/* harmony export */   "RadialGradient": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.RadialGradient),
/* harmony export */   "Rect": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Rect),
/* harmony export */   "Stop": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Stop),
/* harmony export */   "StyleSheet": () => (/* binding */ StyleSheet),
/* harmony export */   "Svg": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Svg),
/* harmony export */   "Text": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Text),
/* harmony export */   "TextInstance": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.TextInstance),
/* harmony export */   "Tspan": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.Tspan),
/* harmony export */   "View": () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__.View),
/* harmony export */   "createRenderer": () => (/* binding */ createRenderer),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "pdf": () => (/* binding */ pdf),
/* harmony export */   "render": () => (/* binding */ render),
/* harmony export */   "renderToFile": () => (/* binding */ renderToFile),
/* harmony export */   "renderToStream": () => (/* binding */ renderToStream),
/* harmony export */   "renderToString": () => (/* binding */ renderToString),
/* harmony export */   "usePDF": () => (/* binding */ usePDF),
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-pdf/primitives */ "./node_modules/@react-pdf/primitives/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?a005");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var queue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! queue */ "./node_modules/queue/index.js");
/* harmony import */ var queue__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(queue__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var blob_stream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! blob-stream */ "./node_modules/blob-stream/index.js");
/* harmony import */ var blob_stream__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(blob_stream__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _react_pdf_font__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @react-pdf/font */ "./node_modules/@react-pdf/font/lib/index.browser.js");
/* harmony import */ var _react_pdf_render__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @react-pdf/render */ "./node_modules/@react-pdf/render/lib/index.js");
/* harmony import */ var _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @react-pdf/pdfkit */ "./node_modules/@react-pdf/pdfkit/lib/pdfkit.browser.es.js");
/* harmony import */ var _react_pdf_layout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @react-pdf/layout */ "./node_modules/@react-pdf/layout/lib/index.js");
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-reconciler */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/index.js");
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(scheduler__WEBPACK_IMPORTED_MODULE_13__);
















/* eslint-disable no-continue */

/**
 * Checks if two sets of props are equal (recursively)
 *
 * @param {Object} props A
 * @param {Object} props B
 * @returns {Boolean} props equals?
 *
 */
var propsEqual = function propsEqual(a, b) {
  var oldPropsKeys = Object.keys(a);
  var newPropsKeys = Object.keys(b);

  if (oldPropsKeys.length !== newPropsKeys.length) {
    return false;
  }

  for (var i = 0; i < oldPropsKeys.length; i += 1) {
    var propName = oldPropsKeys[i];

    if (propName === 'render' && !a[propName] !== !b[propName]) {
      return false;
    }

    if (propName !== 'children' && a[propName] !== b[propName]) {
      if (typeof a[propName] === 'object' && typeof b[propName] === 'object' && propsEqual(a[propName], b[propName])) {
        continue;
      }

      return false;
    }

    if (propName === 'children' && (typeof a[propName] === 'string' || typeof b[propName] === 'string')) {
      return a[propName] === b[propName];
    }
  }

  return true;
};

var emptyObject = {};

var createRenderer = function createRenderer(_ref) {
  var _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;
  return react_reconciler__WEBPACK_IMPORTED_MODULE_12___default()({
    schedulePassiveEffects: scheduler__WEBPACK_IMPORTED_MODULE_13__.unstable_scheduleCallback,
    cancelPassiveEffects: scheduler__WEBPACK_IMPORTED_MODULE_13__.unstable_cancelCallback,
    supportsMutation: true,
    isPrimaryRenderer: false,
    warnsIfNotActing: false,
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance.children.push(child);
    },
    createInstance: function createInstance(type, _ref2) {
      var style = _ref2.style;
          _ref2.children;
          var props = (0,_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref2, ["style", "children"]);

      return {
        type: type,
        box: {},
        style: style || {},
        props: props || {},
        children: []
      };
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance) {
      return {
        type: 'TEXT_INSTANCE',
        value: text
      };
    },
    finalizeInitialChildren: function finalizeInitialChildren(element, type, props) {
      return false;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    prepareForCommit: function prepareForCommit() {// Noop
    },
    clearContainer: function clearContainer() {// Noop
    },
    prepareUpdate: function prepareUpdate(element, type, oldProps, newProps) {
      return !propsEqual(oldProps, newProps);
    },
    resetAfterCommit: onChange,
    resetTextContent: function resetTextContent(element) {// Noop
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    shouldSetTextContent: function shouldSetTextContent(type, props) {
      return false;
    },
    now: Date.now,
    useSyncScheduling: true,
    appendChild: function appendChild(parentInstance, child) {
      parentInstance.children.push(child);
    },
    appendChildToContainer: function appendChildToContainer(parentInstance, child) {
      if (parentInstance.type === 'ROOT') {
        parentInstance.document = child;
      } else {
        parentInstance.children.push(child);
      }
    },
    insertBefore: function insertBefore(parentInstance, child, beforeChild) {
      var _parentInstance$child;

      var index = (_parentInstance$child = parentInstance.children) === null || _parentInstance$child === void 0 ? void 0 : _parentInstance$child.indexOf(beforeChild);
      if (index === undefined) return;
      if (index !== -1 && child) parentInstance.children.splice(index, 0, child);
    },
    removeChild: function removeChild(parentInstance, child) {
      var _parentInstance$child2;

      var index = (_parentInstance$child2 = parentInstance.children) === null || _parentInstance$child2 === void 0 ? void 0 : _parentInstance$child2.indexOf(child);
      if (index === undefined) return;
      if (index !== -1) parentInstance.children.splice(index, 1);
    },
    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
      var _parentInstance$child3;

      var index = (_parentInstance$child3 = parentInstance.children) === null || _parentInstance$child3 === void 0 ? void 0 : _parentInstance$child3.indexOf(child);
      if (index === undefined) return;
      if (index !== -1) parentInstance.children.splice(index, 1);
    },
    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.value = newText;
    },
    commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {
      var style = newProps.style,
          props = (0,_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(newProps, ["style"]);

      instance.props = props;
      instance.style = style;
    }
  });
};

var version = "2.0.19";

var fontStore = new _react_pdf_font__WEBPACK_IMPORTED_MODULE_8__["default"](); // We must keep a single renderer instance, otherwise React will complain

var renderer; // The pdf instance acts as an event emitter for DOM usage.
// We only want to trigger an update when PDF content changes

var events = {};

var pdf = function pdf(initialValue) {
  var onChange = function onChange() {
    var _events$change;

    var listeners = ((_events$change = events.change) === null || _events$change === void 0 ? void 0 : _events$change.slice()) || [];

    for (var i = 0; i < listeners.length; i += 1) {
      listeners[i]();
    }
  };

  var container = {
    type: 'ROOT',
    document: null
  };
  renderer = renderer || createRenderer({
    onChange: onChange
  });
  var mountNode = renderer.createContainer(container);

  var updateContainer = function updateContainer(doc) {
    renderer.updateContainer(doc, mountNode, null);
  };

  if (initialValue) updateContainer(initialValue);

  var render = /*#__PURE__*/function () {
    var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee(compress) {
      var props, pdfVersion, language, ctx, layout;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (compress === void 0) {
                compress = true;
              }

              props = container.document.props || {};
              pdfVersion = props.pdfVersion, language = props.language;
              ctx = new _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_10__["default"]({
                compress: compress,
                pdfVersion: pdfVersion,
                lang: language,
                displayTitle: true,
                autoFirstPage: false
              });
              _context.next = 6;
              return (0,_react_pdf_layout__WEBPACK_IMPORTED_MODULE_11__["default"])(container.document, fontStore);

            case 6:
              layout = _context.sent;
              return _context.abrupt("return", (0,_react_pdf_render__WEBPACK_IMPORTED_MODULE_9__["default"])(ctx, layout));

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function render(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var callOnRender = function callOnRender(params) {
    if (params === void 0) {
      params = {};
    }

    if (container.document.props.onRender) {
      container.document.props.onRender(params);
    }
  };

  var toBlob = /*#__PURE__*/function () {
    var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee2() {
      var instance, stream;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return render();

            case 2:
              instance = _context2.sent;
              stream = instance.pipe(blob_stream__WEBPACK_IMPORTED_MODULE_7___default()());
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                stream.on('finish', function () {
                  try {
                    var blob = stream.toBlob('application/pdf');
                    callOnRender({
                      blob: blob
                    });
                    resolve(blob);
                  } catch (error) {
                    reject(error);
                  }
                });
                stream.on('error', reject);
              }));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function toBlob() {
      return _ref2.apply(this, arguments);
    };
  }();

  var toBuffer = /*#__PURE__*/function () {
    var _ref3 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee3() {
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              callOnRender();
              return _context3.abrupt("return", render());

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function toBuffer() {
      return _ref3.apply(this, arguments);
    };
  }();

  var toString = /*#__PURE__*/function () {
    var _ref4 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().mark(function _callee4() {
      var result, instance;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_6___default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              result = '';
              _context4.next = 3;
              return render(false);

            case 3:
              instance = _context4.sent;
              return _context4.abrupt("return", new Promise(function (resolve, reject) {
                try {
                  instance.on('data', function (buffer) {
                    result += buffer;
                  });
                  instance.on('end', function () {
                    callOnRender();
                    resolve(result);
                  });
                } catch (error) {
                  reject(error);
                }
              }));

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function toString() {
      return _ref4.apply(this, arguments);
    };
  }();

  var on = function on(event, listener) {
    if (!events[event]) events[event] = [];
    events[event].push(listener);
  };

  var removeListener = function removeListener(event, listener) {
    if (!events[event]) return;
    var idx = events[event].indexOf(listener);
    if (idx > -1) events[event].splice(idx, 1);
  };

  return {
    on: on,
    container: container,
    toBlob: toBlob,
    toBuffer: toBuffer,
    toString: toString,
    removeListener: removeListener,
    updateContainer: updateContainer
  };
};

var Font = fontStore;
var StyleSheet = {
  create: function create(s) {
    return s;
  }
};

var usePDF = function usePDF(_ref) {
  var document = _ref.document;
  var pdfInstance = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);

  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({
    url: null,
    blob: null,
    error: null,
    loading: false
  }),
      state = _useState[0],
      setState = _useState[1]; // Setup rendering queue


  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function () {
    var renderQueue = queue__WEBPACK_IMPORTED_MODULE_4___default()({
      autostart: true,
      concurrency: 1
    });

    var queueDocumentRender = function queueDocumentRender() {
      setState(function (prev) {
        return (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, prev, {
          loading: true
        });
      });
      renderQueue.splice(0, renderQueue.length, function () {
        return state.error ? Promise.resolve() : pdfInstance.current.toBlob();
      });
    };

    var onRenderFailed = function onRenderFailed(error) {
      console.error(error);
      setState(function (prev) {
        return (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, prev, {
          error: error
        });
      });
    };

    var onRenderSuccessful = function onRenderSuccessful(blob) {
      setState({
        blob: blob,
        error: null,
        loading: false,
        url: URL.createObjectURL(blob)
      });
    };

    pdfInstance.current = pdf();
    pdfInstance.current.on('change', queueDocumentRender);
    pdfInstance.current.updateContainer(document);
    renderQueue.on('error', onRenderFailed);
    renderQueue.on('success', onRenderSuccessful);
    return function () {
      renderQueue.end();
      pdfInstance.current.removeListener('change', queueDocumentRender);
    };
  }, []); // Revoke old unused url instances

  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function () {
    return function () {
      if (state.url) {
        URL.revokeObjectURL(state.url);
      }
    };
  }, [state.url]);

  var update = function update() {
    pdfInstance.current.updateContainer(document);
  };

  return [state, update];
};
var BlobProvider = function BlobProvider(_ref2) {
  var doc = _ref2.document,
      children = _ref2.children;

  var _usePDF = usePDF({
    document: doc
  }),
      instance = _usePDF[0],
      updateInstance = _usePDF[1];

  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(updateInstance, [doc]);

  if (!doc) {
    console.warn('You should pass a valid document to BlobProvider');
    return null;
  }

  return children(instance);
};
var PDFViewer = function PDFViewer(_ref3) {
  var title = _ref3.title,
      style = _ref3.style,
      className = _ref3.className,
      children = _ref3.children,
      innerRef = _ref3.innerRef,
      _ref3$showToolbar = _ref3.showToolbar,
      showToolbar = _ref3$showToolbar === void 0 ? true : _ref3$showToolbar,
      props = (0,_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref3, ["title", "style", "className", "children", "innerRef", "showToolbar"]);

  var _usePDF2 = usePDF({
    document: children
  }),
      instance = _usePDF2[0],
      updateInstance = _usePDF2[1];

  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(updateInstance, [children]);
  var src = instance.url ? instance.url + "#toolbar=" + (showToolbar ? 1 : 0) : null;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement("iframe", (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
    src: src,
    title: title,
    ref: innerRef,
    style: style,
    className: className
  }, props));
};
var PDFDownloadLink = function PDFDownloadLink(_ref4) {
  var style = _ref4.style,
      children = _ref4.children,
      className = _ref4.className,
      doc = _ref4.document,
      _ref4$fileName = _ref4.fileName,
      fileName = _ref4$fileName === void 0 ? 'document.pdf' : _ref4$fileName;

  var _usePDF3 = usePDF({
    document: doc
  }),
      instance = _usePDF3[0],
      updateInstance = _usePDF3[1];

  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(updateInstance, [children]);

  if (!doc) {
    console.warn('You should pass a valid document to PDFDownloadLink');
    return null;
  }

  var handleDownloadIE = function handleDownloadIE() {
    if (window.navigator.msSaveBlob) {
      // IE
      window.navigator.msSaveBlob(instance.blob, fileName);
    }
  };

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement("a", {
    style: style,
    href: instance.url,
    download: fileName,
    className: className,
    onClick: handleDownloadIE
  }, typeof children === 'function' ? children(instance) : children);
};

var throwEnvironmentError = function throwEnvironmentError(name) {
  throw new Error(name + " is a Node specific API. You're either using this method in a browser, or your bundler is not loading react-pdf from the appropriate web build.");
};

var renderToStream = function renderToStream() {
  throwEnvironmentError('renderToStream');
};
var renderToString = function renderToString() {
  throwEnvironmentError('renderToString');
};
var renderToFile = function renderToFile() {
  throwEnvironmentError('renderToFile');
};
var render = function render() {
  throwEnvironmentError('render');
};
var dom = (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
  pdf: pdf,
  usePDF: usePDF,
  Font: Font,
  version: version,
  StyleSheet: StyleSheet,
  PDFViewer: PDFViewer,
  BlobProvider: BlobProvider,
  PDFDownloadLink: PDFDownloadLink,
  renderToStream: renderToStream,
  renderToString: renderToString,
  renderToFile: renderToFile,
  render: render
}, /*#__PURE__*/ (_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__, 2))));

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dom);

//# sourceMappingURL=react-pdf.browser.es.js.map


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/** @license React v0.23.0
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  module.exports = function $$$reconciler($$$hostConfig) {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var React = __webpack_require__(/*! react */ "webpack/sharing/consume/default/react/react?a005");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/index.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/tracing.js");

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }

    if (condition) {
      return;
    }

    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610

      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */

function get(key) {
  return key._reactInternalFiber;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?


var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var enableUserTimingAPI = true; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:

var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

var warnAboutDeprecatedLifecycles = true; // Gather advanced timing metrics for Profiler subtrees.

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments

var enableSuspenseServerRenderer = false;
 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


 // Experimental React Flare event system and event components support.

var enableFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.

var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

var warnAboutUnmockedScheduler = false; // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

var flushSuspenseFallbacksInTests = true; // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

var enableSuspenseCallback = false; // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var warnAboutDefaultPropsOnFunctionComponents = false;
var warnAboutStringRefs = false;
var disableLegacyContext = false;
var disableSchedulerTimeoutBasedOnReactExpirationTime = false;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}


function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error("Unable to find node on an unmounted component.");
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

// This is a host config that's used for the `react-reconciler` package on npm.
// It is only used by third-party renderers.
//
// Its API lets you pass the host config as an argument.
// However, inside the `react-reconciler` we treat host config as a module.
// This file is a shim between two worlds.
//
// It works because the `react-reconciler` bundle is wrapped in something like:
//
// module.exports = function ($$$config) {
//   /* reconciler code */
// }
//
// So `$$$config` looks like a global variable, but it's
// really an argument to a top-level wrapping function.
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
var getPublicInstance = $$$hostConfig.getPublicInstance;
var getRootHostContext = $$$hostConfig.getRootHostContext;
var getChildHostContext = $$$hostConfig.getChildHostContext;
var prepareForCommit = $$$hostConfig.prepareForCommit;
var resetAfterCommit = $$$hostConfig.resetAfterCommit;
var createInstance = $$$hostConfig.createInstance;
var appendInitialChild = $$$hostConfig.appendInitialChild;
var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
var prepareUpdate = $$$hostConfig.prepareUpdate;
var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
var shouldDeprioritizeSubtree = $$$hostConfig.shouldDeprioritizeSubtree;
var createTextInstance = $$$hostConfig.createTextInstance;
var scheduleTimeout = $$$hostConfig.setTimeout;
var cancelTimeout = $$$hostConfig.clearTimeout;
var noTimeout = $$$hostConfig.noTimeout;
var now = $$$hostConfig.now;
var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
var supportsMutation = $$$hostConfig.supportsMutation;
var supportsPersistence = $$$hostConfig.supportsPersistence;
var supportsHydration = $$$hostConfig.supportsHydration;
var mountResponderInstance = $$$hostConfig.mountResponderInstance;
var unmountResponderInstance = $$$hostConfig.unmountResponderInstance;
var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
var getInstanceFromNode = $$$hostConfig.getInstanceFromNode; // -------------------
//      Mutation
//     (optional)
// -------------------

var appendChild = $$$hostConfig.appendChild;
var appendChildToContainer = $$$hostConfig.appendChildToContainer;
var commitTextUpdate = $$$hostConfig.commitTextUpdate;
var commitMount = $$$hostConfig.commitMount;
var commitUpdate = $$$hostConfig.commitUpdate;
var insertBefore = $$$hostConfig.insertBefore;
var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
var removeChild = $$$hostConfig.removeChild;
var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
var resetTextContent = $$$hostConfig.resetTextContent;
var hideInstance = $$$hostConfig.hideInstance;
var hideTextInstance = $$$hostConfig.hideTextInstance;
var unhideInstance = $$$hostConfig.unhideInstance;
var unhideTextInstance = $$$hostConfig.unhideTextInstance;
var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent; // -------------------
//     Persistence
//     (optional)
// -------------------

var cloneInstance = $$$hostConfig.cloneInstance;
var createContainerChildSet = $$$hostConfig.createContainerChildSet;
var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
var cloneFundamentalInstance = $$$hostConfig.cloneInstance; // -------------------
//     Hydration
//     (optional)
// -------------------

var canHydrateInstance = $$$hostConfig.canHydrateInstance;
var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
var hydrateInstance = $$$hostConfig.hydrateInstance;
var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var phase = null;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }

  return '';
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}
function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}


function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  if (disableLegacyContext) {
    return false;
  } else {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  if (disableLegacyContext) {
    return false;
  } else {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  if (disableLegacyContext) {
    return parentContext;
  } else {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;
          warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;

    {
      setCurrentPhase('getChildContext');
    }

    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    {
      setCurrentPhase(null);
    }

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  if (disableLegacyContext) {
    return false;
  } else {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

var BatchedRoot = 1;
var ConcurrentRoot = 2;

// Intentionally not named imports because Rollup would use dynamic dispatch for
// CommonJS interop named imports.
var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
var Scheduler_now = Scheduler.unstable_now;
var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now$1 = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function runWithPriority(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BatchedMode and ConcurrentMode by reading from the root
// tag instead

var BatchedMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is a moving priority. It is slightly higher than Idle
// and is used to increase priority of hover targets. It is increasing with
// each usage so that last always wins.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function computeContinuousHydrationExpiration(currentTime) {
  // Each time we ask for a new one of these we increase the priority.
  // This ensures that the last one always wins since we can't deprioritize
  // once we've scheduled work already.
  return ContinuousHydration++;
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var is$1 = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (is$1(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
      warningWithoutStack$1(false, 'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, strictRootComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;

    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (is$1(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense bounudary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (!(parentSuspense !== null)) {
        {
          throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        }
      }

      if (parentSuspense.expirationTime < renderExpirationTime) {
        parentSuspense.expirationTime = renderExpirationTime;
      }

      var _alternate = parentSuspense.alternate;

      if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
        _alternate.expirationTime = renderExpirationTime;
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childExpirationTime on
      // this fiber to indicate that a context has changed.


      scheduleWorkOnParentPath(parentSuspense, renderExpirationTime);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
  }

  if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
  } else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which can be
// mutated and processed asynchronously before it is committed — a form of
// double buffering. If a work-in-progress render is discarded before finishing,
// we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;


{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;

  
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,
    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null,
    nextEffect: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1;
  var queue2;

  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;

    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;

    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {// Both owners have an update queue.
      }
    }
  }

  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

      queue2.lastUpdate = update;
    }
  }

  {
    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;

  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  } // Append the update to the end of the list.


  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }

  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;
  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  } // These values may change as we process the queue.


  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

  var update = queue.firstUpdate;
  var resultState = newBaseState;

  while (update !== null) {
    var updateExpirationTime = update.expirationTime;

    if (updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update; // Since this is the first update that was skipped, the current result
        // is the new base state.

        newBaseState = resultState;
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority.
      // Mark the event time of this update as relevant to this render pass.
      // TODO: This should ideally use the true event time of this update rather than
      // its priority which is a derived and not reverseable value.
      // TODO: We should skip this update if it was already committed but currently
      // we have no way of detecting the difference between a committed and suspended
      // update here.
      markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process it and compute a new result.

      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var callback = update.callback;

      if (callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    } // Continue to the next update.


    update = update.next;
  } // Separately, iterate though the list of captured updates.


  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;

  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;

    if (_updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
        // the new base state.

        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;

      if (_callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }

    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }

  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }

  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.

  markUnprocessedUpdateTime(newExpirationTime);
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    } // Clear the list of captured updates.


    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  } // Commit the effects


  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var callback = effect.callback;

    if (callback !== null) {
      effect.callback = null;
      callCallback(callback, instance);
    }

    effect = effect.nextEffect;
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextType = !instance.contextType;
    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;

    if (disableLegacyContext) {
      if (ctor.childContextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy childContextTypes API which is no longer supported. ' + 'Use React.createContext() instead.', name);
      }

      if (ctor.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with static contextType instead.', name);
      }
    } else {
      var noInstanceContextTypes = !instance.contextTypes;
      !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);
        warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else if (!disableLegacyContext) {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else if (disableLegacyContext) {
    instance.context = emptyContextObject;
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    updateQueue = workInProgress.updateQueue;

    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          if (warnAboutStringRefs) {
            warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
          } else {
            warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
        }
      }

      if (!element._owner) {
        {
          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
      }
    }
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current$$1 = newFiber.alternate;

    if (current$$1 !== null) {
      var oldIndex = current$$1.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && (current$$1.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
    isCompatibleFamilyForHotReloading(current$$1, element)))) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;

      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }

      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;

        default:
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error("An iterable object provided no iterator.");
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
        isCompatibleFamilyForHotReloading(child, element))) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;

          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }

          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current$$1, workInProgress) {
  if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
    {
      throw Error("Resuming work not yet implemented.");
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var emptyObject = {};
var isArray$2 = Array.isArray;
function createResponderInstance(responder, responderProps, responderState, fiber) {
  return {
    fiber: fiber,
    props: responderProps,
    responder: responder,
    rootEventTypes: null,
    state: responderState
  };
}

function mountEventResponder(responder, responderProps, fiber, respondersMap, rootContainerInstance) {
  var responderState = emptyObject;
  var getInitialState = responder.getInitialState;

  if (getInitialState !== null) {
    responderState = getInitialState(responderProps);
  }

  var responderInstance = createResponderInstance(responder, responderProps, responderState, fiber);

  if (!rootContainerInstance) {
    var node = fiber;

    while (node !== null) {
      var tag = node.tag;

      if (tag === HostComponent) {
        rootContainerInstance = node.stateNode;
        break;
      } else if (tag === HostRoot) {
        rootContainerInstance = node.stateNode.containerInfo;
        break;
      }

      node = node.return;
    }
  }

  mountResponderInstance(responder, responderInstance, responderProps, responderState, rootContainerInstance);
  respondersMap.set(responder, responderInstance);
}

function updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance) {
  var responder;
  var props;

  if (listener) {
    responder = listener.responder;
    props = listener.props;
  }

  if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
    {
      throw Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().");
    }
  }

  var listenerProps = props;

  if (visistedResponders.has(responder)) {
    // show warning
    {
      warning$1(false, 'Duplicate event responder "%s" found in event listeners. ' + 'Event listeners passed to elements cannot use the same event responder more than once.', responder.displayName);
    }

    return;
  }

  visistedResponders.add(responder);
  var responderInstance = respondersMap.get(responder);

  if (responderInstance === undefined) {
    // Mount (happens in either complete or commit phase)
    mountEventResponder(responder, listenerProps, fiber, respondersMap, rootContainerInstance);
  } else {
    // Update (happens during commit phase only)
    responderInstance.props = listenerProps;
    responderInstance.fiber = fiber;
  }
}

function updateEventListeners(listeners, fiber, rootContainerInstance) {
  var visistedResponders = new Set();
  var dependencies = fiber.dependencies;

  if (listeners != null) {
    if (dependencies === null) {
      dependencies = fiber.dependencies = {
        expirationTime: NoWork,
        firstContext: null,
        responders: new Map()
      };
    }

    var respondersMap = dependencies.responders;

    if (respondersMap === null) {
      respondersMap = new Map();
    }

    if (isArray$2(listeners)) {
      for (var i = 0, length = listeners.length; i < length; i++) {
        var listener = listeners[i];
        updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance);
      }
    } else {
      updateEventListener(listeners, fiber, visistedResponders, respondersMap, rootContainerInstance);
    }
  }

  if (dependencies !== null) {
    var _respondersMap = dependencies.responders;

    if (_respondersMap !== null) {
      // Unmount
      var mountedResponders = Array.from(_respondersMap.keys());

      for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
        var mountedResponder = mountedResponders[_i];

        if (!visistedResponders.has(mountedResponder)) {
          var responderInstance = _respondersMap.get(mountedResponder);

          unmountResponderInstance(responderInstance);

          _respondersMap.delete(mountedResponder);
        }
      }
    }
  }
}
function createResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var NoEffect$1 =
/*             */
0;
var UnmountSnapshot =
/*      */
2;
var UnmountMutation =
/*      */
4;
var MountMutation =
/*        */
8;
var UnmountLayout =
/*        */
16;
var MountLayout =
/*          */
32;
var MountPassive =
/*         */
64;
var UnmountPassive =
/*       */
128;

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime$1 = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var nextCurrentHook = null;
var firstWorkInProgressHook = null;
var workInProgressHook = null;
var nextWorkInProgressHook = null;
var remainingExpirationTime = NoWork;
var componentUpdateQueue = null;
var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
// end of the current pass. We can't store these updates on the normal queue,
// because if the work is aborted, they should be discarded. Because this is
// a relatively rare case, we also don't want to add an additional field to
// either the hook or queue object types. So we store them in a lazily create
// map of queue -> render-phase updates, which are discarded once the component
// completes without re-rendering.
// Whether an update was scheduled during the currently executing render pass.

var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

var renderPhaseUpdates = null; // Counter to prevent infinite loops.

var numberOfReRenders = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      warning$1(false, '%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (is$1(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
  renderExpirationTime$1 = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;
  nextCurrentHook = current !== null ? current.memoizedState : null;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  } // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // remainingExpirationTime = NoWork;
  // componentUpdateQueue = null;
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;
  // sideEffectTag = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because nextCurrentHook === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so nextCurrentHook would be null during updates and mounts.


  {
    if (nextCurrentHook !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, refOrContext);

  if (didScheduleRenderPhaseUpdate) {
    do {
      didScheduleRenderPhaseUpdate = false;
      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      nextCurrentHook = current !== null ? current.memoizedState : null;
      nextWorkInProgressHook = firstWorkInProgressHook;
      currentHook = null;
      workInProgressHook = null;
      componentUpdateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
      children = Component(props, refOrContext);
    } while (didScheduleRenderPhaseUpdate);

    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
  var renderedWork = currentlyRenderingFiber$1;
  renderedWork.memoizedState = firstWorkInProgressHook;
  renderedWork.expirationTime = remainingExpirationTime;
  renderedWork.updateQueue = componentUpdateQueue;
  renderedWork.effectTag |= sideEffectTag;

  {
    renderedWork._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0; // These were reset above
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;

  if (!!didRenderTooFewHooks) {
    {
      throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooks() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
  // It's also called inside mountIndeterminateComponent if we determine the
  // component is a module-style component.

  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0;
  didScheduleRenderPhaseUpdate = false;
  renderPhaseUpdates = null;
  numberOfReRenders = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    queue: null,
    baseUpdate: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    firstWorkInProgressHook = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
    nextCurrentHook = currentHook !== null ? currentHook.next : null;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error("Rendered more hooks than during the previous render.");
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      queue: currentHook.queue,
      baseUpdate: currentHook.baseUpdate,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      workInProgressHook = firstWorkInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }

    nextCurrentHook = currentHook.next;
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    }
  }

  queue.lastRenderedReducer = reducer;

  if (numberOfReRenders > 0) {
    // This is a re-render. Apply the new render phase updates to the previous
    // work-in-progress hook.
    var _dispatch = queue.dispatch;

    if (renderPhaseUpdates !== null) {
      // Render phase updates are stored in a map of queue -> linked list
      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

      if (firstRenderPhaseUpdate !== undefined) {
        renderPhaseUpdates.delete(queue);
        var newState = hook.memoizedState;
        var update = firstRenderPhaseUpdate;

        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== null); // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is$1(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.

        if (hook.baseUpdate === queue.last) {
          hook.baseState = newState;
        }

        queue.lastRenderedState = newState;
        return [newState, _dispatch];
      }
    }

    return [hook.memoizedState, _dispatch];
  } // The last update in the entire queue


  var last = queue.last; // The last update that is part of the base state.

  var baseUpdate = hook.baseUpdate;
  var baseState = hook.baseState; // Find the first unprocessed update.

  var first;

  if (baseUpdate !== null) {
    if (last !== null) {
      // For the first update, the queue is a circular linked list where
      // `queue.last.next = queue.first`. Once the first update commits, and
      // the `baseUpdate` is no longer empty, we can unravel the list.
      last.next = null;
    }

    first = baseUpdate.next;
  } else {
    first = last !== null ? last.next : null;
  }

  if (first !== null) {
    var _newState = baseState;
    var newBaseState = null;
    var newBaseUpdate = null;
    var prevUpdate = baseUpdate;
    var _update = first;
    var didSkip = false;

    do {
      var updateExpirationTime = _update.expirationTime;

      if (updateExpirationTime < renderExpirationTime$1) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        if (!didSkip) {
          didSkip = true;
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > remainingExpirationTime) {
          remainingExpirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(remainingExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.
        markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig); // Process this update.

        if (_update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          _newState = _update.eagerState;
        } else {
          var _action = _update.action;
          _newState = reducer(_newState, _action);
        }
      }

      prevUpdate = _update;
      _update = _update.next;
    } while (_update !== null && _update !== first);

    if (!didSkip) {
      newBaseUpdate = prevUpdate;
      newBaseState = _newState;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!is$1(_newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = _newState;
    hook.baseUpdate = newBaseUpdate;
    hook.baseState = newBaseState;
    queue.lastRenderedState = _newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer, initialState);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(NoEffect$1, create, destroy, nextDeps);
        return;
      }
    }
  }

  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(value),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var startTransition = mountCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(false),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var startTransition = updateCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function dispatchAction(fiber, queue, action) {
  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
    {
      throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
    }
  }

  {
    !(typeof arguments[3] !== 'function') ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
  }

  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime$1,
      suspenseConfig: null,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      update.priority = getCurrentPriorityLevel();
    }

    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }

    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }

      lastRenderPhaseUpdate.next = update;
    }
  } else {
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var _update2 = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      _update2.priority = getCurrentPriorityLevel();
    } // Append the update to the end of the list.


    var last = queue.last;

    if (last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = last.next;

      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }

      last.next = _update2;
    }

    queue.last = _update2;

    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          _update2.eagerReducer = lastRenderedReducer;
          _update2.eagerState = eagerState;

          if (is$1(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

{
  var warnInvalidContextAccess = function () {
    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
}

// CommonJS interop named imports.

var now$2 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }

  commitTime = now$2();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = now$2();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$2();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = now$2() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function warnIfHydrating() {
  {
    !!isHydrating ? warning$1(false, 'We should not be hydrating here. This is a bug in React. Please file a bug.') : void 0;
  }
}

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance) {
  if (!supportsHydration) {
    return false;
  }

  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
  popToNextHostParent(fiber);
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;

            case SuspenseComponent:
              didNotFindHydratableContainerSuspenseInstance(parentContainer);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              retryTime: Never
            };
            fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
            // This simplifies the code for getHostSibling and deleting nodes,
            // since it doesn't have to consider all Suspense boundaries and
            // check if they're dehydrated ones or not.

            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            return true;
          }
        }

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutMaxDuration;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;
var didWarnAboutDefaultPropsOnFunctionComponent;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutMaxDuration = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
  didWarnAboutDefaultPropsOnFunctionComponent = {};
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their their
  // identity matches.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$2.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current$$1 === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current$$1, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current$$1.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current$$1 !== null) {
    var prevProps = current$$1.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload:
    workInProgress.type === current$$1.type)) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;

  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$2.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current$$1 !== null) {
      // An class component without an instance only mounts if it suspended
      // inside a non- concurrent tree, in an inconsistent state. We want to
      // tree it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current$$1.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current$$1 === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$2.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();

      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }

      setCurrentPhase(null);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(updateQueue !== null)) {
    {
      throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // An lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        break;
      }

    default:
      {
        var hint = '';

        {
          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = ' Did you wrap a component in React.lazy() more than once?';
          }
        } // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.


        {
          {
            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
          }
        }
      }
  }

  return child;
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$2.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        warningWithoutStack$1(false, 'The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    resetHooks(); // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {
      if (disableLegacyContext && Component.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with React.useContext() instead.', getComponentName(Component) || 'Unknown');
      }

      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  if (Component) {
    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
  }

  if (workInProgress.ref !== null) {
    var info = '';
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

    if (ownerName) {
      info += '\n\nCheck the render method of `' + ownerName + '`.';
    }

    var warningKey = ownerName || workInProgress._debugID || '';
    var debugSource = workInProgress._debugSource;

    if (debugSource) {
      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
    }

    if (!didWarnAboutFunctionRefs[warningKey]) {
      didWarnAboutFunctionRefs[warningKey] = true;
      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
    }
  }

  if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== undefined) {
    var componentName = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
      warningWithoutStack$1(false, '%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);
      didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
    }
  }

  if (typeof Component.getDerivedStateFromProps === 'function') {
    var _componentName2 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName2);
      didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
    }
  }

  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
    var _componentName3 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName3);
      didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
}

function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current$$1 === null || current$$1.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext);

  {
    if ('maxDuration' in nextProps) {
      if (!didWarnAboutMaxDuration) {
        didWarnAboutMaxDuration = true;
        warning$1(false, 'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
      }
    }
  } // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.


  if (current$$1 === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

      if (enableSuspenseServerRenderer) {
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;

          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress, dehydrated, renderExpirationTime);
          }
        }
      }
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BatchedMode) === NoMode) {
        // Outside of batched mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current$$1.memoizedState;

    if (prevState !== null) {
      if (enableSuspenseServerRenderer) {
        var _dehydrated = prevState.dehydrated;

        if (_dehydrated !== null) {
          if (!didSuspend) {
            return updateDehydratedSuspenseComponent(current$$1, workInProgress, _dehydrated, prevState, renderExpirationTime);
          } else if (workInProgress.memoizedState !== null) {
            // Something suspended and we should still be in dehydrated mode.
            // Leave the existing child in place.
            workInProgress.child = current$$1.child; // The dehydrated completion pass expects this flag to be there
            // but the normal suspense pass doesn't.

            workInProgress.effectTag |= DidCapture;
            return null;
          } else {
            // Suspended but we should no longer be in dehydrated mode.
            // Therefore we now have to render the fallback. Wrap the children
            // in a fragment fiber to keep them separate from the fallback
            // children.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment.return = workInProgress; // This is always null since we never want the previous child
            // that we're not going to hydrate.

            _primaryChildFragment.child = null;

            if ((workInProgress.mode & BatchedMode) === NoMode) {
              // Outside of batched mode, we commit the effects from the
              // partially completed, timed-out tree, too.
              var _progressedChild = _primaryChildFragment.child = workInProgress.child;

              while (_progressedChild !== null) {
                _progressedChild.return = _primaryChildFragment;
                _progressedChild = _progressedChild.sibling;
              }
            } else {
              // We will have dropped the effect list which contains the deletion.
              // We need to reconcile to delete the current child.
              reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment = createFiberFromFragment(_nextFallbackChildren, mode, renderExpirationTime, null);

            _fallbackChildFragment.return = workInProgress;
            _primaryChildFragment.sibling = _fallbackChildFragment;
            _fallbackChildFragment.effectTag |= Placement;
            _primaryChildFragment.childExpirationTime = NoWork;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = _primaryChildFragment; // Skip the primary children, and continue working on the
            // fallback children.

            return _fallbackChildFragment;
          }
        }
      } // The current tree already timed out. That means each child set is
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current$$1.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BatchedMode) === NoMode) {
          // Outside of batched mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current$$1.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BatchedMode) === NoMode) {
          // Outside of batched mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out.  Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime) {
  // We're now not suspended nor dehydrated.
  workInProgress.memoizedState = null; // Retry with the full children.

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children; // This will ensure that the children get Placement effects and
  // that the old child gets a Deletion effect.
  // We could also call forceUnmountCurrentAndReconcile.

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderExpirationTime) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & BatchedMode) === NoMode) {
    {
      warning$1(false, 'Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOM.createSyncRoot(container, { hydrate: true })' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.expirationTime = Sync;
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    var serverDisplayTime = requestCurrentTimeForUpdate(); // Schedule a normal pri update to render this content.

    var newExpirationTime = computeAsyncExpiration(serverDisplayTime);

    if (enableSchedulerTracing) {
      markSpawnedWork(newExpirationTime);
    }

    workInProgress.expirationTime = newExpirationTime;
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.expirationTime = Never;

    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    }
  }

  return null;
}

function updateDehydratedSuspenseComponent(current$$1, workInProgress, suspenseInstance, suspenseState, renderExpirationTime) {
  // We should never be hydrating at this point because it is the first pass,
  // but after we've already committed once.
  warnIfHydrating();

  if ((workInProgress.mode & BatchedMode) === NoMode) {
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  }

  if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This boundary is in a permanent fallback state. In this case, we'll never
    // get an update and we'll never be able to hydrate the final content. Let's just try the
    // client side render instead.
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } // We use childExpirationTime to indicate that a child might depend on context, so if
  // any context has changed, we need to treat is as if the input might have changed.


  var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

  if (didReceiveUpdate || hasContextChanged$$1) {
    // This boundary has changed since the first render. This means that we are now unable to
    // hydrate it. We might still be able to hydrate it using an earlier expiration time, if
    // we are rendering at lower expiration than sync.
    if (renderExpirationTime < Sync) {
      if (suspenseState.retryTime <= renderExpirationTime) {
        // This render is even higher pri than we've seen before, let's try again
        // at even higher pri.
        var attemptHydrationAtExpirationTime = renderExpirationTime + 1;
        suspenseState.retryTime = attemptHydrationAtExpirationTime;
        scheduleWork(current$$1, attemptHydrationAtExpirationTime); // TODO: Early abort this render.
      } else {// We have already tried to ping at a higher priority than we're rendering with
          // so if we got here, we must have failed to hydrate at those levels. We must
          // now give up. Instead, we're going to delete the whole subtree and instead inject
          // a new real Suspense boundary to take its place, which may render content
          // or fallback. This might suspend for a while and if it does we might still have
          // an opportunity to hydrate before this pass commits.
        }
    } // If we have scheduled higher pri work above, this will probably just abort the render
    // since we now have higher priority work, but in case it doesn't, we need to prepare to
    // render something, if we time out. Even if that requires us to delete everything and
    // skip hydration.
    // Delay having to do this as long as the suspense timeout allows us.


    renderDidSuspendDelayIfPossible();
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } else if (isSuspenseInstancePending(suspenseInstance)) {
    // This component is still pending more data from the server, so we can't hydrate its
    // content. We treat it as if this component suspended itself. It might seem as if
    // we could just try to render it client-side instead. However, this will perform a
    // lot of unnecessary work and is unlikely to complete since it often will suspend
    // on missing data anyway. Additionally, the server might be able to render more
    // than we can on the client yet. In that case we'd end up with more fallback states
    // on the client than if we just leave it alone. If the server times out or errors
    // these should update this boundary to the permanent Fallback state instead.
    // Mark it as having captured (i.e. suspended).
    workInProgress.effectTag |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

    workInProgress.child = current$$1.child; // Register a callback to retry this boundary once the server has sent the result.

    registerSuspenseInstanceRetry(suspenseInstance, retryDehydratedSuspenseBoundary.bind(null, current$$1));
    return null;
  } else {
    // This is the first attempt.
    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance);
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag |= Hydrating;
      node = node.sibling;
    }

    workInProgress.child = child;
    return workInProgress.child;
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          case 'forward':
          case 'backward':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          default:
            warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            break;
        }
      } else {
        warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';
      warning$1(false, 'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BatchedMode) === NoMode) {
    // Outside of batched mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;
          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$2.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime) {
  var fundamentalImpl = workInProgress.type.impl;

  if (fundamentalImpl.reconcileChildren === false) {
    return null;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateScopeComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current$$1.dependencies;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current$$1.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current$$1;
      returnFiber.lastEffect = current$$1;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
    }

    current$$1.nextEffect = null;
    current$$1.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current$$1 !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current$$1, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current$$1 !== null) {
    var oldProps = current$$1.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
    workInProgress.type !== current$$1.type)) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            if (enableSchedulerTracing) {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          if (enableProfilerTimer) {
            workInProgress.effectTag |= Update;
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              if (enableSuspenseServerRenderer) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a resolved Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.

                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              } // If this boundary is currently timed out, we need to decide
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear the expiration time.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current$$1, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current$$1, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          return updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          return updateScopeComponent(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }
  }

  {
    {
      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function createFundamentalStateInstance(currentFiber, props, impl, state) {
  return {
    currentFiber: currentFiber,
    impl: impl,
    instance: null,
    prevProps: null,
    props: props,
    state: state
  };
}

function isFiberSuspenseAndTimedOut(fiber) {
  return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
}

function getSuspenseFallbackChild(fiber) {
  return fiber.child.sibling.child;
}

function collectScopedNodes(node, fn, scopedNodes) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type = node.type,
          memoizedProps = node.memoizedProps;

      if (fn(_type, memoizedProps) === true) {
        scopedNodes.push(getPublicInstance(node.stateNode));
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectScopedNodesFromChildren(child, fn, scopedNodes);
    }
  }
}

function collectFirstScopedNode(node, fn) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type2 = node.type,
          memoizedProps = node.memoizedProps;

      if (fn(_type2, memoizedProps) === true) {
        return getPublicInstance(node.stateNode);
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      return collectFirstScopedNodeFromChildren(child, fn);
    }
  }

  return null;
}

function collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {
  var child = startingChild;

  while (child !== null) {
    collectScopedNodes(child, fn, scopedNodes);
    child = child.sibling;
  }
}

function collectFirstScopedNodeFromChildren(startingChild, fn) {
  var child = startingChild;

  while (child !== null) {
    var scopedNode = collectFirstScopedNode(child, fn);

    if (scopedNode !== null) {
      return scopedNode;
    }

    child = child.sibling;
  }

  return null;
}

function collectNearestScopeMethods(node, scope, childrenScopes) {
  if (isValidScopeNode(node, scope)) {
    childrenScopes.push(node.stateNode.methods);
  } else {
    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectNearestChildScopeMethods(child, scope, childrenScopes);
    }
  }
}

function collectNearestChildScopeMethods(startingChild, scope, childrenScopes) {
  var child = startingChild;

  while (child !== null) {
    collectNearestScopeMethods(child, scope, childrenScopes);
    child = child.sibling;
  }
}

function isValidScopeNode(node, scope) {
  return node.tag === ScopeComponent && node.type === scope && node.stateNode !== null;
}

function createScopeMethods(scope, instance) {
  return {
    getChildren: function () {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var childrenScopes = [];

      if (child !== null) {
        collectNearestChildScopeMethods(child, scope, childrenScopes);
      }

      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getChildrenFromRoot: function () {
      var currentFiber = instance.fiber;
      var node = currentFiber;

      while (node !== null) {
        var parent = node.return;

        if (parent === null) {
          break;
        }

        node = parent;

        if (node.tag === ScopeComponent && node.type === scope) {
          break;
        }
      }

      var childrenScopes = [];
      collectNearestChildScopeMethods(node.child, scope, childrenScopes);
      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getParent: function () {
      var node = instance.fiber.return;

      while (node !== null) {
        if (node.tag === ScopeComponent && node.type === scope) {
          return node.stateNode.methods;
        }

        node = node.return;
      }

      return null;
    },
    getProps: function () {
      var currentFiber = instance.fiber;
      return currentFiber.memoizedProps;
    },
    queryAllNodes: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var scopedNodes = [];

      if (child !== null) {
        collectScopedNodesFromChildren(child, fn, scopedNodes);
      }

      return scopedNodes.length === 0 ? null : scopedNodes;
    },
    queryFirstNode: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;

      if (child !== null) {
        return collectFirstScopedNodeFromChildren(child, fn);
      }

      return null;
    },
    containsNode: function (node) {
      var fiber = getInstanceFromNode(node);

      while (fiber !== null) {
        if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance) {
          return true;
        }

        fiber = fiber.return;
      }

      return false;
    }
  };
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

if (supportsMutation) {
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        appendInitialChild(parent, node.stateNode.instance);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendInitialChild(parent, instance);
      } else if (node.tag === HostText) {
        var _instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance = cloneHiddenTextInstance(_instance, text, node);
        }

        appendInitialChild(parent, _instance);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance2 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props = node.memoizedProps;
          var _type = node.type;
          _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
        }

        appendInitialChild(parent, _instance2);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendChildToContainerChildSet(containerChildSet, instance);
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance3 = cloneHiddenTextInstance(_instance3, text, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance3);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance4 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props2 = node.memoizedProps;
          var _type2 = node.type;
          _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance4);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged) {// No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.

    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;

    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }

    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }

    workInProgress.stateNode = newInstance;

    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress, false, false);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.

      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      break;

    case LazyComponent:
      break;

    case SimpleMemoComponent:
    case FunctionComponent:
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        break;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (enableFlareAPI) {
            var prevListeners = current.memoizedProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              markUpdate(workInProgress);
            }
          }

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.


            break;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }

            if (enableFlareAPI) {
              var listeners = newProps.listeners;

              if (listeners != null) {
                updateEventListeners(listeners, workInProgress, rootContainerInstance);
              }
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;

            if (enableFlareAPI) {
              var _listeners = newProps.listeners;

              if (_listeners != null) {
                updateEventListeners(_listeners, workInProgress, rootContainerInstance);
              }
            } // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        break;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        break;
      }

    case ForwardRef:
      break;

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if (enableSuspenseServerRenderer) {
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current === null) {
              var _wasHydrated3 = popHydrationState(workInProgress);

              if (!_wasHydrated3) {
                {
                  throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
              }

              prepareToHydrateHostSuspenseInstance(workInProgress);

              if (enableSchedulerTracing) {
                markSpawnedWork(Never);
              }

              return null;
            } else {
              // We should never have been in a hydration state if we didn't have a current.
              // However, in some of those paths, we might have reentered a hydration state
              // and then we might be inside a hydration state. In that case, we'll need to
              // exit out of it.
              resetHydrationState();

              if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
              } // If nothing suspended, we need to schedule an effect to mark this boundary
              // as having hydrated so events know that they're free be invoked.
              // It's also a signal to replay events and the suspense callback.
              // If something suspended, schedule an effect to attach retry listeners.
              // So we might as well always mark this.


              workInProgress.effectTag |= Update;
              return null;
            }
          }
        }

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in batched mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BatchedMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        if (supportsPersistence) {
          // TODO: Only schedule updates if not prevDidTimeout.
          if (nextDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children.
            workInProgress.effectTag |= Update;
          }
        }

        if (supportsMutation) {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if the
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        if (enableSuspenseCallback && workInProgress.updateQueue !== null && workInProgress.memoizedProps.suspenseCallback != null) {
          // Always notify the callback
          workInProgress.effectTag |= Update;
        }

        break;
      }

    case Fragment:
      break;

    case Mode:
      break;

    case Profiler:
      break;

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;

    case ContextConsumer:
      break;

    case MemoComponent:
      break;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode. We don't do anything
          // in this mode.
          break;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden') {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it w as before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if (now$1() > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              if (enableSchedulerTracing) {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now$1() + TAIL_EXPIRATION_TIMEOUT_MS;
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        break;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalImpl = workInProgress.type.impl;
          var fundamentalInstance = workInProgress.stateNode;

          if (fundamentalInstance === null) {
            var getInitialState = fundamentalImpl.getInitialState;
            var fundamentalState;

            if (getInitialState !== undefined) {
              fundamentalState = getInitialState(newProps);
            }

            fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(workInProgress, newProps, fundamentalImpl, fundamentalState || {});

            var _instance5 = getFundamentalComponentInstance(fundamentalInstance);

            fundamentalInstance.instance = _instance5;

            if (fundamentalImpl.reconcileChildren === false) {
              return null;
            }

            appendAllChildren(_instance5, workInProgress, false, false);
            mountFundamentalComponent(fundamentalInstance);
          } else {
            // We fire update in commit phase
            var prevProps = fundamentalInstance.props;
            fundamentalInstance.prevProps = prevProps;
            fundamentalInstance.props = newProps;
            fundamentalInstance.currentFiber = workInProgress;

            if (supportsPersistence) {
              var _instance6 = cloneFundamentalInstance(fundamentalInstance);

              fundamentalInstance.instance = _instance6;
              appendAllChildren(_instance6, workInProgress, false, false);
            }

            var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);

            if (shouldUpdate) {
              markUpdate(workInProgress);
            }
          }
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          if (current === null) {
            var _type3 = workInProgress.type;
            var scopeInstance = {
              fiber: workInProgress,
              methods: null
            };
            workInProgress.stateNode = scopeInstance;
            scopeInstance.methods = createScopeMethods(_type3, scopeInstance);

            if (enableFlareAPI) {
              var _listeners2 = newProps.listeners;

              if (_listeners2 != null) {
                var _rootContainerInstance2 = getRootHostContainer();

                updateEventListeners(_listeners2, workInProgress, _rootContainerInstance2);
              }
            }

            if (workInProgress.ref !== null) {
              markRef$1(workInProgress);
              markUpdate(workInProgress);
            }
          } else {
            if (enableFlareAPI) {
              var _prevListeners = current.memoizedProps.listeners;
              var _nextListeners = newProps.listeners;

              if (_prevListeners !== _nextListeners || workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            } else {
              if (workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            }

            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          }
        }

        break;
      }

    default:
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  return null;
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        if (enableSuspenseServerRenderer) {
          var suspenseState = workInProgress.memoizedState;

          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (!(workInProgress.alternate !== null)) {
              {
                throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
            }

            resetHydrationState();
          }
        }

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;

    default:
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */


/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */


function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.

  if (logError === false) {
    return;
  }

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console.error(error); // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console.error(combinedMessage);
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current$$1, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current$$1, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitHookEffectList(unmountTag, mountTag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & unmountTag) !== NoEffect$1) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      if ((effect.tag & mountTag) !== NoEffect$1) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var _destroy = effect.destroy;

          if (_destroy !== undefined && typeof _destroy !== 'function') {
            var addendum = void 0;

            if (_destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof _destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + _destroy;
            }

            warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
          commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
          break;
        }

      default:
        break;
    }
  }
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
        break;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            if (enableSchedulerTracing) {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            } else {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  if (supportsMutation) {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag


    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
      instanceToUse = instance.methods;
    }

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        var updateQueue = current$$1.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next; // When the owner fiber is deleted, the destroy function of a passive
            // effect hook is called during the synchronous commit phase. This is
            // a concession to implementation complexity. Calling it in the
            // passive effect phase (like they usually are, when dependencies
            // change during an update) would require either traversing the
            // children of the deleted fiber again, or including unmount effects
            // as part of the fiber effect list.
            //
            // Because this is during the sync commit phase, we need to change
            // the priority.
            //
            // TODO: Reconsider this implementation trade off.

            var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
            runWithPriority(priorityLevel, function () {
              var effect = firstEffect;

              do {
                var destroy = effect.destroy;

                if (destroy !== undefined) {
                  safelyCallDestroy(current$$1, destroy);
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            });
          }
        }

        break;
      }

    case ClassComponent:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }

        return;
      }

    case HostComponent:
      {
        if (enableFlareAPI) {
          var dependencies = current$$1.dependencies;

          if (dependencies !== null) {
            var respondersMap = dependencies.responders;

            if (respondersMap !== null) {
              var responderInstances = Array.from(respondersMap.values());

              for (var i = 0, length = responderInstances.length; i < length; i++) {
                var responderInstance = responderInstances[i];
                unmountResponderInstance(responderInstance);
              }

              dependencies.responders = null;
            }
          }
        }

        safelyDetachRef(current$$1);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }

        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = current$$1.stateNode;

          if (fundamentalInstance !== null) {
            unmountFundamentalComponent(fundamentalInstance);
            current$$1.stateNode = null;
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        if (enableSuspenseCallback) {
          var hydrationCallbacks = finishedRoot.hydrationCallbacks;

          if (hydrationCallbacks !== null) {
            var onDeleted = hydrationCallbacks.onDeleted;

            if (onDeleted) {
              onDeleted(current$$1.stateNode);
            }
          }
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          safelyDetachRef(current$$1);
        }
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  var alternate = current$$1.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current$$1.return = null;
  current$$1.child = null;
  current$$1.memoizedState = null;
  current$$1.updateQueue = null;
  current$$1.dependencies = null;
  current$$1.alternate = null;
  current$$1.firstEffect = null;
  current$$1.lastEffect = null;
  current$$1.pendingProps = null;
  current$$1.memoizedProps = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;
  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case HostComponent:
    case HostText:
    case FundamentalComponent:
      {
        return;
      }

    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            pendingChildren = portalOrRoot.pendingChildren;
        replaceContainerChildren(containerInfo, pendingChildren);
        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  } // Recursively insert all host nodes into the parent.


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:
      if (enableFundamentalAPI) {
        parent = parentStateNode.instance;
        isContainer = false;
      }

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  var node = finishedWork;

  while (true) {
    var isHost = node.tag === HostComponent || node.tag === HostText;

    if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          insertBefore(parent, stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, stateNode);
        } else {
          appendChild(parent, stateNode);
        }
      }
    } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === finishedWork) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case FundamentalComponent:
            if (enableFundamentalAPI) {
              currentParent = parentStateNode.instance;
              currentParentIsContainer = false;
            }

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
      var fundamentalNode = node.stateNode.instance;
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, fundamentalNode);
      } else {
        removeChild(currentParent, fundamentalNode);
      }
    } else if (enableSuspenseServerRenderer && node.tag === DehydratedFragment) {
      if (enableSuspenseCallback) {
        var hydrationCallbacks = finishedRoot.hydrationCallbacks;

        if (hydrationCallbacks !== null) {
          var onDeleted = hydrationCallbacks.onDeleted;

          if (onDeleted) {
            onDeleted(node.stateNode);
          }
        }
      } // Delete the dehydrated suspense boundary and all of its content.


      if (currentParentIsContainer) {
        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
      } else {
        clearSuspenseBoundary(currentParent, node.stateNode);
      }
    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current$$1) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(finishedRoot, current$$1, renderPriorityLevel);
  }

  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          // Note: We currently never use MountMutation, but useLayout uses
          // UnmountMutation.
          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
          return;
        }

      case Profiler:
        {
          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case HostRoot:
        {
          if (supportsHydration) {
            var root = finishedWork.stateNode;

            if (root.hydrate) {
              // We've just hydrated. No need to hydrate again.
              root.hydrate = false;
              commitHydratedContainer(root.containerInfo);
            }
          }

          break;
        }
    }

    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        // Note: We currently never use MountMutation, but useLayout uses
        // UnmountMutation.
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }

          if (enableFlareAPI) {
            var prevListeners = oldProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              updateEventListeners(nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        if (supportsHydration) {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = finishedWork.stateNode;
          updateFundamentalComponent(fundamentalInstance);
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          var scopeInstance = finishedWork.stateNode;
          scopeInstance.fiber = finishedWork;

          if (enableFlareAPI) {
            var _newProps = finishedWork.memoizedProps;

            var _oldProps = current$$1 !== null ? current$$1.memoizedProps : _newProps;

            var _prevListeners = _oldProps.listeners;
            var _nextListeners = _newProps.listeners;

            if (_prevListeners !== _nextListeners) {
              updateEventListeners(_nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if (supportsMutation && primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }

  if (enableSuspenseCallback && newState !== null) {
    var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;

    if (typeof suspenseCallback === 'function') {
      var thenables = finishedWork.updateQueue;

      if (thenables !== null) {
        suspenseCallback(new Set(thenables));
      }
    } else {
      if (suspenseCallback !== undefined) {
        warning$1(false, 'Unexpected type for suspenseCallback.');
      }
    }
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (!supportsHydration) {
    return;
  }

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current$$1 = finishedWork.alternate;

    if (current$$1 !== null) {
      var prevState = current$$1.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);

          if (enableSuspenseCallback) {
            var hydrationCallbacks = finishedRoot.hydrationCallbacks;

            if (hydrationCallbacks !== null) {
              var onHydrated = hydrationCallbacks.onHydrated;

              if (onHydrated) {
                onHydrated(suspenseInstance);
              }
            }
          }
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        if (enableSchedulerTracing) {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }

  resetTextContent(current$$1.stateNode);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;
    checkForWrongSuspensePriorityInDEV(sourceFiber);
    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of batched mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a batched mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BatchedMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;

      default:
        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now$1());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now$1());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now$1());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BatchedMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error("Expected a valid priority level");
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of sync mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else if (disableSchedulerTimeoutBasedOnReactExpirationTime) {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now$1()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error("Root did not complete. This is a bug in React.");
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV(); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.

        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV();

        if ( // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now$1();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now$1();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error("Unknown root exit status.");
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (root.finishedExpirationTime === expirationTime) {
    // There's already a pending commit at this expiration time.
    // TODO: This is poorly factored. This case only exists for the
    // batch.commit() API.
    commitRoot(root);
  } else {
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // This is a sync render, so we should have finished the whole tree.
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      } else {
        // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        stopFinishedWorkLoopTimer();
        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
      } // Before exiting, make sure there's a callback scheduled for the next
      // pending level.


      ensureRootIsScheduled(root);
    }
  }

  return null;
}

function finishSyncRender(root, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  {
    if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
      flushSuspensePriorityWarningInDEV();
    }
  }

  commitRoot(root);
}

function flushRoot(root, expirationTime) {
  markRootExpiredAtTime(root, expirationTime);
  ensureRootIsScheduled(root);

  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushSyncCallbackQueue();
  }
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    if ( true && (executionContext & RenderContext) !== NoContext) {
      warning$1(false, 'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function deferredUpdates(fn) {
  // TODO: Remove in favor of Scheduler.next
  return runWithPriority(NormalPriority, fn);
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates(fn, a, b, c) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority(UserBlockingPriority, fn.bind(null, a, b, c));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}
function flushControlled(fn) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    runWithPriority(ImmediatePriority, fn);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null, expirationTime);
  renderExpirationTime = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  if (enableSchedulerTracing) {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    componentsThatTriggeredHighPriSuspend = null;
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooks();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher.current;
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher.current = prevDispatcher;
}

function pushInteractions(root) {
  if (enableSchedulerTracing) {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }

  return null;
}

function popInteractions(prevInteractions) {
  if (enableSchedulerTracing) {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now$1();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current$$1 = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$1.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current$$1 = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current$$1, workInProgress, renderExpirationTime);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current$$1, workInProgress, renderExpirationTime); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, renderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.


      if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  flushPassiveEffects();
  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Should not already be working.");
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime = NoWork;
  } else {} // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$1.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    if (enableSchedulerTracing) {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    if (enableSchedulerTracing) {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  if (enableSchedulerTracing) {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;

      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Cannot flush passive effects while already rendering.");
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root); // Note: This currently assumes there are no passive effects on the root
  // fiber, because the root is not part of its own effect list. This could
  // change in the future.

  var effect = root.current.firstEffect;

  while (effect !== null) {
    {
      setCurrentFiber(effect);
      invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

      if (hasCaughtError()) {
        if (!(effect !== null)) {
          {
            throw Error("Should be working on an effect.");
          }
        }

        var error = clearCaughtError();
        captureCommitPhaseError(effect, error);
      }

      resetCurrentFiber();
    }

    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

    effect.nextEffect = null;
    effect = nextNextEffect;
  }

  if (enableSchedulerTracing) {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  if (root.finishedExpirationTime === suspendedTime) {
    // If there's a pending fallback waiting to commit, throw it away.
    root.finishedExpirationTime = NoWork;
    root.finishedWork = null;
  }

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryTime = NoWork;

  if (suspenseState !== null) {
    retryTime = suspenseState.retryTime;
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  if (enableSuspenseServerRenderer) {
    switch (boundaryFiber.tag) {
      case SuspenseComponent:
        retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;

        if (suspenseState !== null) {
          retryTime = suspenseState.retryTime;
        }

        break;

      case SuspenseListComponent:
        retryCache = boundaryFiber.stateNode;
        break;

      default:
        {
          {
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
        }

    }
  } else {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now$1();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      warning$1(false, 'Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$$1;

if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  var dummyFiber = null;

  beginWork$$1 = function (current$$1, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork$1(current$$1, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooks(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
} else {
  beginWork$$1 = beginWork$1;
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInGetChildContext = false;

function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
  {
    if (fiber.tag === ClassComponent) {
      switch (phase) {
        case 'getChildContext':
          if (didWarnAboutUpdateInGetChildContext) {
            return;
          }

          warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
          didWarnAboutUpdateInGetChildContext = true;
          break;

        case 'render':
          if (didWarnAboutUpdateInRender) {
            return;
          }

          warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure function of ' + 'props and state.');
          didWarnAboutUpdateInRender = true;
          break;
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BatchedMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      } else if (warnAboutUnmockedScheduler === true) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'Starting from React v17, the "scheduler" module will need to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}
var componentsThatTriggeredHighPriSuspend = null;
function checkForWrongSuspensePriorityInDEV(sourceFiber) {
  {
    var currentPriorityLevel = getCurrentPriorityLevel();

    if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority || currentPriorityLevel === ImmediatePriority)) {
      var workInProgressNode = sourceFiber;

      while (workInProgressNode !== null) {
        // Add the component that triggered the suspense
        var current$$1 = workInProgressNode.alternate;

        if (current$$1 !== null) {
          // TODO: warn component that triggers the high priority
          // suspend is the HostRoot
          switch (workInProgressNode.tag) {
            case ClassComponent:
              // Loop through the component's update queue and see whether the component
              // has triggered any high priority updates
              var updateQueue = current$$1.updateQueue;

              if (updateQueue !== null) {
                var update = updateQueue.firstUpdate;

                while (update !== null) {
                  var priorityLevel = update.priority;

                  if (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  update = update.next;
                }
              }

              break;

            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                var _update = workInProgressNode.memoizedState.baseUpdate; // Loop through the functional component's memoized state to see whether
                // the component has triggered any high pri updates

                while (_update !== null) {
                  var priority = _update.priority;

                  if (priority === UserBlockingPriority || priority === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                    break;
                  }

                  _update = _update.next;
                }
              }

              break;

            default:
              break;
          }
        }

        workInProgressNode = workInProgressNode.return;
      }
    }
  }
}

function flushSuspensePriorityWarningInDEV() {
  {
    if (componentsThatTriggeredHighPriSuspend !== null) {
      var componentNames = [];
      componentsThatTriggeredHighPriSuspend.forEach(function (name) {
        return componentNames.push(name);
      });
      componentsThatTriggeredHighPriSuspend = null;

      if (componentNames.length > 0) {
        warningWithoutStack$1(false, '%s triggered a user-blocking update that suspended.' + '\n\n' + 'The fix is to split the update into multiple parts: a user-blocking ' + 'update to provide immediate feedback, and another update that ' + 'triggers the bulk of the changes.' + '\n\n' + 'Refer to the documentation for useTransition to learn how ' + 'to implement this pattern.', // TODO: Add link to React docs with more information, once it exists
        componentNames.sort().join(', '));
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {
  // This is called when work is scheduled on a root.
  // It associates the current interactions with the newly-scheduled expiration.
  // They will be restored when that expiration is later committed.
  if (!enableSchedulerTracing) {
    return;
  }

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // This is called when new work is started on a root.
  if (!enableSchedulerTracing) {
    return;
  } // Determine which interactions this batch of work currently includes, So that
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if ( true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if ( true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  if (enableProfilerTimer) {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  if (enableUserTimingAPI) {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;

      default:
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BatchedMode | StrictMode;
  } else if (tag === BatchedRoot) {
    mode = BatchedMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BatchedMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_FUNDAMENTAL_TYPE:
                if (enableFundamentalAPI) {
                  return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                }

                break;

              case REACT_SCOPE_TYPE:
                if (enableScopeAPI) {
                  return createFiberFromScope(type, pendingProps, mode, expirationTime, key);
                }

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
  fiber.elementType = fundamentalComponent;
  fiber.type = fundamentalComponent;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(ScopeComponent, pendingProps, key, mode);
  fiber.type = scope;
  fiber.elementType = scope;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  if (enableSchedulerTracing) {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }

  if (enableSuspenseCallback) {
    this.hydrationCallbacks = null;
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);

  if (enableSuspenseCallback) {
    root.hydrationCallbacks = hydrationCallbacks;
  } // Cyclic construction. This cheats the type system right now because
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};
var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstance(component) {
  var fiber = get(component);

  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    } else {
      {
        {
          throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
      }
    }
  }

  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      } else {
        {
          {
            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }

  return findHostInstance(component);
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);
}
function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$$1);
      warnIfNotScopedWithMatchingAct(current$$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }

  enqueueUpdate(current$$1, update);
  scheduleWork(current$$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      var root = fiber.stateNode;

      if (root.hydrate) {
        // Flush the first scheduled "update".
        flushRoot(root, root.firstPendingTime);
      }

      break;

    case SuspenseComponent:
      flushSync(function () {
        return scheduleWork(fiber, Sync);
      }); // If we're still blocked after this, we need to increase
      // the priority of any promises resolving within this
      // boundary so that they next attempt also has higher pri.

      var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
      markRetryTimeIfNotHydrated(fiber, retryExpTime);
      break;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptHydrationAtCurrentPriority(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh: findHostInstancesForRefresh,
    scheduleRefresh: scheduleRefresh,
    scheduleRoot: scheduleRoot,
    setRefreshHandler: setRefreshHandler,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber: function () {
      return current;
    }
  }));
}

var ReactFiberReconciler = Object.freeze({
	createContainer: createContainer,
	updateContainer: updateContainer,
	batchedEventUpdates: batchedEventUpdates,
	batchedUpdates: batchedUpdates,
	unbatchedUpdates: unbatchedUpdates,
	deferredUpdates: deferredUpdates,
	syncUpdates: syncUpdates,
	discreteUpdates: discreteUpdates,
	flushDiscreteUpdates: flushDiscreteUpdates,
	flushControlled: flushControlled,
	flushSync: flushSync,
	flushPassiveEffects: flushPassiveEffects,
	IsThisRendererActing: IsThisRendererActing,
	getPublicRootInstance: getPublicRootInstance,
	attemptSynchronousHydration: attemptSynchronousHydration,
	attemptUserBlockingHydration: attemptUserBlockingHydration,
	attemptContinuousHydration: attemptContinuousHydration,
	attemptHydrationAtCurrentPriority: attemptHydrationAtCurrentPriority,
	findHostInstance: findHostInstance,
	findHostInstanceWithWarning: findHostInstanceWithWarning,
	findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,
	shouldSuspend: shouldSuspend,
	injectIntoDevTools: injectIntoDevTools
});

// This entry point is intentionally not typed. It exists only for third-party
// renderers. The renderers we ship (such as React DOM) instead import a named
// "inline" entry point (for example, `react-reconciler/inline.dom`). It uses
// the same code, but the Flow configuration redirects the host config to its
// real implementation so we can check it against exact intended host types.
//
// Only one renderer (the one you passed to `yarn flow <renderer>`) is fully
// type-checked at any given time. The Flow config maps the
// `react-reconciler/inline.<renderer>` import (which is *not* Flow typed) to
// `react-reconciler/inline-typed` (which *is*) for the current renderer.
// On CI, we run Flow checks for each renderer separately.


 // TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var reactReconciler = ReactFiberReconciler.default || ReactFiberReconciler;

module.exports = reactReconciler;
    var $$$renderer = module.exports;
    module.exports = $$$reconciler;
    return $$$renderer;
  };
}


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/index.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/cjs/react-reconciler.development.js");
}


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.17.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, "__esModule", ({ value: true }));

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

 // In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


 // Experimental React Flare event system and event components support.

 // Experimental Host Component support.

 // Experimental Scope support.

 // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

if (enableSchedulerTracing) {
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_trace = unstable_trace;
exports.unstable_wrap = unstable_wrap;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.17.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, "__esModule", ({ value: true }));

var enableSchedulerDebugging = false;
var enableIsInputPending = false;
var enableMessageLoopImplementation = true;
var enableProfiling = true;

// works by scheduling a requestAnimationFrame, storing the time for the start
// of the frame, then scheduling a postMessage which gets scheduled after paint.
// Within the postMessage handler do as much work as possible until time + frame
// rate. By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

var requestHostCallback;

var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;



if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;
  var requestAnimationFrame = window.requestAnimationFrame;
  var cancelAnimationFrame = window.cancelAnimationFrame;

  if (typeof console !== 'undefined') {
    // TODO: Remove fb.me link
    if (typeof requestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isRAFLoopRunning = false;
  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var rAFTimeoutID = -1;
  var taskTimeoutID = -1;
  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple
  // times per frame, often enough to keep it responsive even at really
  // high frame rates > 120.
  5 : // Use a heuristic to measure the frame rate and yield at the end of the
  // frame. We start out assuming that we run at 30fps but then the
  // heuristic tracking will adjust this value to a faster fps if we get
  // more frequent animation frames.
  33.33;
  var prevRAFTime = -1;
  var prevRAFInterval = -1;
  var frameDeadline = 0;
  var fpsLocked = false; // TODO: Make this configurable
  // TODO: Adjust this based on priority?

  var maxFrameLength = 300;
  var needsPaint = false;

  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {
    var scheduling = navigator.scheduling;

    shouldYieldToHost = function () {
      var currentTime = exports.unstable_now();

      if (currentTime >= frameDeadline) {
        // There's no time left in the frame. We may want to yield control of
        // the main thread, so the browser can perform high priority tasks. The
        // main ones are painting and user input. If there's a pending paint or
        // a pending input, then we should yield. But if there's neither, then
        // we can yield less often while remaining responsive. We'll eventually
        // yield regardless, since there could be a pending paint that wasn't
        // accompanied by a call to `requestPaint`, or other main thread tasks
        // like network events.
        if (needsPaint || scheduling.isInputPending()) {
          // There is either a pending paint or a pending input.
          return true;
        } // There's no pending input. Only yield if we've reached the max
        // frame length.


        return currentTime >= frameDeadline + maxFrameLength;
      } else {
        // There's still time left in the frame.
        return false;
      }
    };

    requestPaint = function () {
      needsPaint = true;
    };
  } else {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= frameDeadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      frameLength = Math.floor(1000 / fps);
      fpsLocked = true;
    } else {
      // reset the framerate
      frameLength = 33.33;
      fpsLocked = false;
    }
  };

  var performWorkUntilDeadline = function () {
    if (enableMessageLoopImplementation) {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync
        // cycle. This means there's always time remaining at the beginning of
        // the message event.

        frameDeadline = currentTime + frameLength;
        var hasTimeRemaining = true;

        try {
          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

          if (!hasMoreWork) {
            isMessageLoopRunning = false;
            scheduledHostCallback = null;
          } else {
            // If there's more work, schedule the next message event at the end
            // of the preceding one.
            port.postMessage(null);
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed.
          port.postMessage(null);
          throw error;
        }
      } else {
        isMessageLoopRunning = false;
      } // Yielding to the browser will give it a chance to paint, so we can
      // reset this.


      needsPaint = false;
    } else {
      if (scheduledHostCallback !== null) {
        var _currentTime = exports.unstable_now();

        var _hasTimeRemaining = frameDeadline - _currentTime > 0;

        try {
          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);

          if (!_hasMoreWork) {
            scheduledHostCallback = null;
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed, and post a new task as soon as possible
          // so we can continue where we left off.
          port.postMessage(null);
          throw error;
        }
      } // Yielding to the browser will give it a chance to paint, so we can
      // reset this.


      needsPaint = false;
    }
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  var onAnimationFrame = function (rAFTime) {
    if (scheduledHostCallback === null) {
      // No scheduled work. Exit.
      prevRAFTime = -1;
      prevRAFInterval = -1;
      isRAFLoopRunning = false;
      return;
    } // Eagerly schedule the next animation callback at the beginning of the
    // frame. If the scheduler queue is not empty at the end of the frame, it
    // will continue flushing inside that callback. If the queue *is* empty,
    // then it will exit immediately. Posting the callback at the start of the
    // frame ensures it's fired within the earliest possible frame. If we
    // waited until the end of the frame to post the callback, we risk the
    // browser skipping a frame and not firing the callback until the frame
    // after that.


    isRAFLoopRunning = true;
    requestAnimationFrame(function (nextRAFTime) {
      _clearTimeout(rAFTimeoutID);

      onAnimationFrame(nextRAFTime);
    }); // requestAnimationFrame is throttled when the tab is backgrounded. We
    // don't want to stop working entirely. So we'll fallback to a timeout loop.
    // TODO: Need a better heuristic for backgrounded work.

    var onTimeout = function () {
      frameDeadline = exports.unstable_now() + frameLength / 2;
      performWorkUntilDeadline();
      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);
    };

    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);

    if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check
    // could fail if two rAFs fire in the same frame.
    rAFTime - prevRAFTime > 0.1) {
      var rAFInterval = rAFTime - prevRAFTime;

      if (!fpsLocked && prevRAFInterval !== -1) {
        // We've observed two consecutive frame intervals. We'll use this to
        // dynamically adjust the frame rate.
        //
        // If one frame goes long, then the next one can be short to catch up.
        // If two frames are short in a row, then that's an indication that we
        // actually have a higher frame rate than what we're currently
        // optimizing. For example, if we're running on 120hz display or 90hz VR
        // display. Take the max of the two in case one of them was an anomaly
        // due to missed frame deadlines.
        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {
          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;

          if (frameLength < 8.33) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame length gets lower than 8, it is probably
            // a bug.
            frameLength = 8.33;
          }
        }
      }

      prevRAFInterval = rAFInterval;
    }

    prevRAFTime = rAFTime;
    frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.

    port.postMessage(null);
  };

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (enableMessageLoopImplementation) {
      if (!isMessageLoopRunning) {
        isMessageLoopRunning = true;
        port.postMessage(null);
      }
    } else {
      if (!isRAFLoopRunning) {
        // Start a rAF loop.
        isRAFLoopRunning = true;
        requestAnimationFrame(function (rAFTime) {
          onAnimationFrame(rAFTime);
        });
      }
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = Math.floor((index - 1) / 2);
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
: null;
var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

if (enableProfiling) {
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  if (enableProfiling) {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  if (enableProfiling) {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  if (enableProfiling) {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

var isSchedulerPaused = false;
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      if (enableProfiling) {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  if (enableProfiling) {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    if (enableProfiling) {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        if (enableProfiling) {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (enableProfiling) {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    if (enableProfiling) {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
  isSchedulerPaused = true;
}

function unstable_continueExecution() {
  isSchedulerPaused = false;

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  if (enableProfiling) {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling = enableProfiling ? {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} : null;

exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_IdlePriority = IdlePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_next = unstable_next;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_Profiling = unstable_Profiling;
  })();
}


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/index.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/index.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/tracing.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/tracing.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/@react-pdf/renderer/node_modules/react-reconciler/node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/borders.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/borders.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var BORDER_SHORTHAND_REGEX = /(-?\d+(\.\d+)?(px|in|mm|cm|pt|vw|vh|px)?)\s(\S+)\s(.+)/;
var matchBorderShorthand = R.match(BORDER_SHORTHAND_REGEX);

var expandBorders = function expandBorders(key, value) {
  var match = matchBorderShorthand("" + value);

  if (match) {
    var color = match[5] || value;
    var style = match[4] || value;
    var width = match[1] || value;

    if (key.match(/(Top|Right|Bottom|Left)$/)) {
      var _ref;

      return _ref = {}, _ref[key + "Color"] = color, _ref[key + "Style"] = style, _ref[key + "Width"] = width, _ref;
    }

    if (key.match(/Color$/)) {
      return {
        borderTopColor: color,
        borderRightColor: color,
        borderBottomColor: color,
        borderLeftColor: color
      };
    }

    if (key.match(/Style$/)) {
      return {
        borderTopStyle: style,
        borderRightStyle: style,
        borderBottomStyle: style,
        borderLeftStyle: style
      };
    }

    if (key.match(/Width$/)) {
      return {
        borderTopWidth: width,
        borderRightWidth: width,
        borderBottomWidth: width,
        borderLeftWidth: width
      };
    }

    if (key.match(/Radius$/)) {
      return {
        borderTopLeftRadius: value,
        borderTopRightRadius: value,
        borderBottomRightRadius: value,
        borderBottomLeftRadius: value
      };
    }

    return {
      borderTopColor: color,
      borderTopStyle: style,
      borderTopWidth: width,
      borderRightColor: color,
      borderRightStyle: style,
      borderRightWidth: width,
      borderBottomColor: color,
      borderBottomStyle: style,
      borderBottomWidth: width,
      borderLeftColor: color,
      borderLeftStyle: style,
      borderLeftWidth: width
    };
  }

  return value;
};

var _default = expandBorders;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/boxModel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/boxModel.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _parse = _interopRequireDefault(__webpack_require__(/*! postcss-value-parser/lib/parse */ "./node_modules/postcss-value-parser/lib/parse.js"));

var _unit = _interopRequireDefault(__webpack_require__(/*! postcss-value-parser/lib/unit */ "./node_modules/postcss-value-parser/lib/unit.js"));

/* eslint-disable no-plusplus */
var BOX_MODEL_UNITS = 'px,in,mm,cm,pt,%,vw,vh';

var logError = function logError(style, value) {
  console.error("\n    @react-pdf/stylesheet parsing error:\n\n    " + style + ": " + value + ",\n    " + ' '.repeat(style.length + 2) + "^\n    Unsupported " + style + " value format\n  ");
};

var expandBoxModel = function expandBoxModel(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      expandsTo = _ref.expandsTo,
      _ref$maxValues = _ref.maxValues,
      maxValues = _ref$maxValues === void 0 ? 1 : _ref$maxValues,
      _ref$autoSupported = _ref.autoSupported,
      autoSupported = _ref$autoSupported === void 0 ? false : _ref$autoSupported;

  return function (model, value) {
    var _ref2;

    var nodes = (0, _parse.default)("" + value);
    var parts = [];

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i]; // value contains `calc`, `url` or other css function
      // `,`, `/` or strings that unsupported by margin and padding

      if (node.type === 'function' || node.type === 'string' || node.type === 'div') {
        logError(model, value);
        return {};
      }

      if (node.type === 'word') {
        if (node.value === 'auto' && autoSupported) {
          parts.push(node.value);
        } else {
          var result = (0, _unit.default)(node.value); // when unit isn't specified this condition is true

          if (result && BOX_MODEL_UNITS.includes(result.unit)) {
            parts.push(node.value);
          } else {
            logError(model, value);
            return {};
          }
        }
      }
    } // checks that we have enough parsed values


    if (parts.length > maxValues) {
      logError(model, value);
      return {};
    }

    var first = parts[0];

    if (expandsTo) {
      var second = parts[1] || parts[0];
      var third = parts[2] || parts[0];
      var fourth = parts[3] || parts[1] || parts[0];
      return expandsTo({
        first: first,
        second: second,
        third: third,
        fourth: fourth
      });
    }

    return _ref2 = {}, _ref2[model] = first, _ref2;
  };
};

var _default = expandBoxModel;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/flex.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/flex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var flexDefaults = [1, 1, 0];

var expandFlex = function expandFlex(key, value) {
  var matches = ("" + value).split(' ');
  var flexGrow = matches[0] || flexDefaults[0];
  var flexShrink = matches[1] || flexDefaults[1];
  var flexBasis = matches[2] || flexDefaults[2];
  return {
    flexGrow: flexGrow,
    flexShrink: flexShrink,
    flexBasis: flexBasis
  };
};

var _default = expandFlex;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _flex = _interopRequireDefault(__webpack_require__(/*! ./flex */ "./node_modules/@react-pdf/stylesheet/lib/expand/flex.js"));

var _margins = __webpack_require__(/*! ./margins */ "./node_modules/@react-pdf/stylesheet/lib/expand/margins.js");

var _borders = _interopRequireDefault(__webpack_require__(/*! ./borders */ "./node_modules/@react-pdf/stylesheet/lib/expand/borders.js"));

var _paddings = __webpack_require__(/*! ./paddings */ "./node_modules/@react-pdf/stylesheet/lib/expand/paddings.js");

var _objectPosition = _interopRequireDefault(__webpack_require__(/*! ./objectPosition */ "./node_modules/@react-pdf/stylesheet/lib/expand/objectPosition.js"));

var _transformOrigin = _interopRequireDefault(__webpack_require__(/*! ./transformOrigin */ "./node_modules/@react-pdf/stylesheet/lib/expand/transformOrigin.js"));

var shorthands = {
  flex: _flex.default,
  margin: _margins.processMargin,
  marginHorizontal: _margins.processMarginHorizontal,
  marginVertical: _margins.processMarginVertical,
  marginTop: _margins.processMarginSingle,
  marginRight: _margins.processMarginSingle,
  marginBottom: _margins.processMarginSingle,
  marginLeft: _margins.processMarginSingle,
  padding: _paddings.processPadding,
  paddingHorizontal: _paddings.processPaddingHorizontal,
  paddingVertical: _paddings.processPaddingVertical,
  paddingTop: _paddings.processPaddingSingle,
  paddingRight: _paddings.processPaddingSingle,
  paddingBottom: _paddings.processPaddingSingle,
  paddingLeft: _paddings.processPaddingSingle,
  border: _borders.default,
  borderTop: _borders.default,
  borderRight: _borders.default,
  borderBottom: _borders.default,
  borderLeft: _borders.default,
  borderColor: _borders.default,
  borderRadius: _borders.default,
  borderStyle: _borders.default,
  borderWidth: _borders.default,
  objectPosition: _objectPosition.default,
  transformOrigin: _transformOrigin.default
};
/**
 * Transforms style key-value
 *
 * @param {String} key style key
 * @param {String} value style value
 * @returns {String | Number} transformed style values
 */

var expandStyle = function expandStyle(key, value) {
  var _ref;

  return shorthands[key] ? shorthands[key](key, value) : (_ref = {}, _ref[key] = value, _ref);
};
/**
 * Expand the shorthand properties.
 *
 * @param { Object } style object
 * @returns { Object } expanded style object
 */


var expand = function expand(style) {
  if (!style) return style;
  var propsArray = Object.keys(style);
  var resolvedStyle = {};

  for (var i = 0; i < propsArray.length; i += 1) {
    var key = propsArray[i];
    var value = style[key];
    var extended = expandStyle(key, value);
    var keys = Object.keys(extended);

    for (var j = 0; j < keys.length; j += 1) {
      var propName = keys[j];
      var propValue = extended[propName];
      resolvedStyle[propName] = propValue;
    }
  }

  return resolvedStyle;
};

var _default = expand;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/margins.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/margins.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.processMarginVertical = exports.processMarginSingle = exports.processMarginHorizontal = exports.processMargin = void 0;

var _boxModel = _interopRequireDefault(__webpack_require__(/*! ./boxModel */ "./node_modules/@react-pdf/stylesheet/lib/expand/boxModel.js"));

var processMargin = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref) {
    var first = _ref.first,
        second = _ref.second,
        third = _ref.third,
        fourth = _ref.fourth;
    return {
      marginTop: first,
      marginRight: second,
      marginBottom: third,
      marginLeft: fourth
    };
  },
  maxValues: 4,
  autoSupported: true
});
exports.processMargin = processMargin;
var processMarginVertical = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref2) {
    var first = _ref2.first,
        second = _ref2.second;
    return {
      marginTop: first,
      marginBottom: second
    };
  },
  maxValues: 2,
  autoSupported: true
});
exports.processMarginVertical = processMarginVertical;
var processMarginHorizontal = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref3) {
    var first = _ref3.first,
        second = _ref3.second;
    return {
      marginRight: first,
      marginLeft: second
    };
  },
  maxValues: 2,
  autoSupported: true
});
exports.processMarginHorizontal = processMarginHorizontal;
var processMarginSingle = (0, _boxModel.default)({
  autoSupported: true
});
exports.processMarginSingle = processMarginSingle;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/objectPosition.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/objectPosition.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var expandObjectPosition = function expandObjectPosition(key, value) {
  var match = ("" + value).split(' ');
  return {
    objectPositionX: (match === null || match === void 0 ? void 0 : match[0]) || value,
    objectPositionY: (match === null || match === void 0 ? void 0 : match[1]) || value
  };
};

var _default = expandObjectPosition;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/paddings.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/paddings.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports.processPaddingVertical = exports.processPaddingSingle = exports.processPaddingHorizontal = exports.processPadding = void 0;

var _boxModel = _interopRequireDefault(__webpack_require__(/*! ./boxModel */ "./node_modules/@react-pdf/stylesheet/lib/expand/boxModel.js"));

var processPadding = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref) {
    var first = _ref.first,
        second = _ref.second,
        third = _ref.third,
        fourth = _ref.fourth;
    return {
      paddingTop: first,
      paddingRight: second,
      paddingBottom: third,
      paddingLeft: fourth
    };
  },
  maxValues: 4
});
exports.processPadding = processPadding;
var processPaddingVertical = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref2) {
    var first = _ref2.first,
        second = _ref2.second;
    return {
      paddingTop: first,
      paddingBottom: second
    };
  },
  maxValues: 2
});
exports.processPaddingVertical = processPaddingVertical;
var processPaddingHorizontal = (0, _boxModel.default)({
  expandsTo: function expandsTo(_ref3) {
    var first = _ref3.first,
        second = _ref3.second;
    return {
      paddingRight: first,
      paddingLeft: second
    };
  },
  maxValues: 2
});
exports.processPaddingHorizontal = processPaddingHorizontal;
var processPaddingSingle = (0, _boxModel.default)();
exports.processPaddingSingle = processPaddingSingle;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/expand/transformOrigin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/expand/transformOrigin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var Y_AXIS_SHORTHANDS = {
  top: true,
  bottom: true
};

var sortTransformOriginPair = function sortTransformOriginPair(a, b) {
  if (Y_AXIS_SHORTHANDS[a]) return 1;
  if (Y_AXIS_SHORTHANDS[b]) return -1;
  return 0;
};

var getTransformOriginPair = function getTransformOriginPair(values) {
  if (!values || values.length === 0) return ['center', 'center'];
  var pair = values.length === 1 ? [values[0], 'center'] : values;
  return pair.sort(sortTransformOriginPair);
}; // Transforms shorthand transformOrigin values


var expandTransformOrigin = function expandTransformOrigin(key, value) {
  var match = ("" + value).split(' ');
  var pair = getTransformOriginPair(match);
  return {
    transformOriginX: pair[0],
    transformOriginY: pair[1]
  };
};

var _default = expandTransformOrigin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/flatten/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/flatten/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var isNotArray = R.complement(R.is(Array));
var castArray = R.when(isNotArray, function (v) {
  return [v];
});
/**
 * Remove nil values from array
 *
 * @param {Array} array
 * @returns {Array} array without nils
 */

var compact = R.filter(Boolean);
/**
 * Checks if value is array
 *
 * @param {any} value
 * @returns {Boolean} is value an array
 */

var isArray = R.is(Array);
/**
 * Merges style objects array
 *
 * @param {Array} style objects array
 * @returns {Object} merged style object
 */

var mergeStyles = function mergeStyles(styles) {
  return styles.reduce(function (acc, style) {
    var s = isArray(style) ? flatten(style) : style;
    Object.keys(s).forEach(function (key) {
      if (s[key] !== null && s[key] !== undefined) {
        acc[key] = s[key];
      }
    });
    return acc;
  }, {});
};
/**
 * Flattens an array of style objects, into one aggregated style object.
 *
 * @param {Array} style objects array
 * @returns {Object} flatted style object
 */


var flatten = R.compose(mergeStyles, compact, castArray);
var _default = flatten;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports.transformColor = exports.processTransform = exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _expand = _interopRequireDefault(__webpack_require__(/*! ./expand */ "./node_modules/@react-pdf/stylesheet/lib/expand/index.js"));

var _flatten = _interopRequireDefault(__webpack_require__(/*! ./flatten */ "./node_modules/@react-pdf/stylesheet/lib/flatten/index.js"));

var _transform = _interopRequireDefault(__webpack_require__(/*! ./transform */ "./node_modules/@react-pdf/stylesheet/lib/transform/index.js"));

var _mediaQueries = _interopRequireDefault(__webpack_require__(/*! ./mediaQueries */ "./node_modules/@react-pdf/stylesheet/lib/mediaQueries/index.js"));

var _colors = _interopRequireDefault(__webpack_require__(/*! ./transform/colors */ "./node_modules/@react-pdf/stylesheet/lib/transform/colors.js"));

exports.transformColor = _colors.default;

var _transform2 = _interopRequireDefault(__webpack_require__(/*! ./transform/transform */ "./node_modules/@react-pdf/stylesheet/lib/transform/transform.js"));

exports.processTransform = _transform2.default;

/**
 * Resolves styles
 *
 * @param {Object} container
 * @param {Object} style object
 * @returns {Object} resolved style object
 */
var resolveStyles = function resolveStyles(container, style) {
  return R.compose((0, _transform.default)(container), _expand.default, (0, _mediaQueries.default)(container), _flatten.default)(style);
}; // Utils exported for SVG processing


var _default = R.curryN(2, resolveStyles);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/mediaQueries/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/mediaQueries/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends3 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _mediaEngine = _interopRequireDefault(__webpack_require__(/*! media-engine */ "./node_modules/media-engine/src/index.js"));

/**
 * Resolves media queries in styles object
 *
 * @param {Object} container
 * @param {Object} styles object
 */
var resolveMediaQueries = function resolveMediaQueries(container, styles) {
  return Object.keys(styles).reduce(function (acc, key) {
    var _extends2;

    if (/@media/.test(key)) {
      var _matchMedia;

      return (0, _extends3.default)({}, acc, (0, _mediaEngine.default)((_matchMedia = {}, _matchMedia[key] = styles[key], _matchMedia), container));
    }

    return (0, _extends3.default)({}, acc, (_extends2 = {}, _extends2[key] = styles[key], _extends2));
  }, {});
};

var _default = R.curryN(2, resolveMediaQueries);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/colors.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/colors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _hslToHex = _interopRequireDefault(__webpack_require__(/*! hsl-to-hex */ "./node_modules/hsl-to-hex/index.js"));

var _colorString = _interopRequireDefault(__webpack_require__(/*! color-string */ "./node_modules/color-string/index.js"));

var isRgb = R.test(/rgb/g);
var isRgba = R.test(/rgba/g);
var isHsl = R.test(/hsl/g);
var isHsla = R.test(/hsla/g);
/**
 * Transform rgb color to hexa
 *
 * @param {String} styles value
 * @returns {Object} transformed value
 */

var parseRgb = R.compose(_colorString.default.to.hex, _colorString.default.get.rgb);
/**
 * Transform Hsl color to hexa
 *
 * @param {String} styles value
 * @returns {Object} transformed value
 */

var parseHsl = R.compose(R.toUpper, R.apply(_hslToHex.default), R.map(Math.round), _colorString.default.get.hsl);
/**
 * Transform given color to hexa
 *
 * @param {String} styles value
 * @returns {Object} transformed value
 */

var transformColor = function transformColor(value) {
  return R.cond([[isRgba, parseRgb], [isRgb, parseRgb], [isHsla, parseHsl], [isHsl, parseHsl], [R.T, R.always(value)]])(value);
};

var _default = transformColor;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/fontWeight.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/fontWeight.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var FONT_WEIGHTS = {
  thin: 100,
  hairline: 100,
  ultralight: 200,
  extralight: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  demibold: 600,
  bold: 700,
  ultrabold: 800,
  extrabold: 800,
  heavy: 900,
  black: 900
};

var processFontWeight = function processFontWeight(value) {
  if (!value) return FONT_WEIGHTS.normal;
  if (typeof value === 'number') return value;
  var lv = value.toLowerCase();
  if (FONT_WEIGHTS[lv]) return FONT_WEIGHTS[lv];
  return value;
};

var _default = processFontWeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _units = _interopRequireDefault(__webpack_require__(/*! ./units */ "./node_modules/@react-pdf/stylesheet/lib/transform/units.js"));

var _colors = _interopRequireDefault(__webpack_require__(/*! ./colors */ "./node_modules/@react-pdf/stylesheet/lib/transform/colors.js"));

var _transform = _interopRequireDefault(__webpack_require__(/*! ./transform */ "./node_modules/@react-pdf/stylesheet/lib/transform/transform.js"));

var _fontWeight = _interopRequireDefault(__webpack_require__(/*! ./fontWeight */ "./node_modules/@react-pdf/stylesheet/lib/transform/fontWeight.js"));

var _objectPosition = _interopRequireDefault(__webpack_require__(/*! ./objectPosition */ "./node_modules/@react-pdf/stylesheet/lib/transform/objectPosition.js"));

var _transformOrigin = _interopRequireDefault(__webpack_require__(/*! ./transformOrigin */ "./node_modules/@react-pdf/stylesheet/lib/transform/transformOrigin.js"));

var _castFloat = _interopRequireDefault(__webpack_require__(/*! ../utils/castFloat */ "./node_modules/@react-pdf/stylesheet/lib/utils/castFloat.js"));

var handlers = {
  transform: _transform.default,
  fontWeight: _fontWeight.default,
  objectPositionX: _objectPosition.default,
  objectPositionY: _objectPosition.default,
  transformOriginX: _transformOrigin.default,
  transformOriginY: _transformOrigin.default
};

var transformStyle = function transformStyle(key, value, container) {
  var result = handlers[key] ? handlers[key](value) : value;
  return (0, _colors.default)((0, _units.default)(container, (0, _castFloat.default)(result)));
};
/**
 * Transform styles values
 *
 * @param {Object} styles object
 * @returns {Object} transformed styles
 */


var transform = function transform(container) {
  return function (style) {
    if (!style) return style;
    var propsArray = Object.keys(style);
    var resolvedStyle = {};

    for (var i = 0; i < propsArray.length; i += 1) {
      var key = propsArray[i];
      var value = style[key];
      var transformed = transformStyle(key, value, container);
      resolvedStyle[key] = transformed;
    }

    return resolvedStyle;
  };
};

var _default = transform;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/objectPosition.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/objectPosition.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _castFloat = _interopRequireDefault(__webpack_require__(/*! ../utils/castFloat */ "./node_modules/@react-pdf/stylesheet/lib/utils/castFloat.js"));

var _offsetKeyword = _interopRequireDefault(__webpack_require__(/*! ../utils/offsetKeyword */ "./node_modules/@react-pdf/stylesheet/lib/utils/offsetKeyword.js"));

var transformObjectPosition = function transformObjectPosition(value) {
  return (0, _offsetKeyword.default)(value) || (0, _castFloat.default)(value);
};

var _default = transformObjectPosition;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/transform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/transform.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var parse = function parse(transformString) {
  var transforms = transformString.trim().split(/\) |\)/); // Handle "initial", "inherit", "unset".

  if (transforms.length === 1) {
    return [[transforms[0], true]];
  }

  var parsed = [];

  for (var i = 0; i < transforms.length; i += 1) {
    var transform = transforms[i];

    if (transform) {
      var _transform$split = transform.split('('),
          name = _transform$split[0],
          rawValue = _transform$split[1];

      var splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';
      var value = rawValue.split(splitChar).map(function (val) {
        return val.trim();
      });
      parsed.push({
        operation: name,
        value: value
      });
    }
  }

  return parsed;
};

var normalizeTransformOperation = function normalizeTransformOperation(_ref) {
  var operation = _ref.operation,
      value = _ref.value;

  switch (operation) {
    case 'scale':
      {
        var _value$map = value.map(function (num) {
          return Number.parseFloat(num);
        }),
            scaleX = _value$map[0],
            _value$map$ = _value$map[1],
            scaleY = _value$map$ === void 0 ? scaleX : _value$map$;

        return {
          operation: 'scale',
          value: [scaleX, scaleY]
        };
      }

    case 'scaleX':
      {
        return {
          operation: 'scale',
          value: [Number.parseFloat(value), 1]
        };
      }

    case 'scaleY':
      {
        return {
          operation: 'scale',
          value: [1, Number.parseFloat(value)]
        };
      }

    case 'rotate':
      {
        var unitsRegexp = /(-?\d*\.?\d*)(\w*)?/i;

        var _unitsRegexp$exec = unitsRegexp.exec(value),
            angle = _unitsRegexp$exec[1],
            unit = _unitsRegexp$exec[2];

        var number = Number.parseFloat(angle);
        return {
          operation: 'rotate',
          value: [unit === 'rad' ? number * 180 / Math.PI : number]
        };
      }

    case 'translate':
      {
        return {
          operation: 'translate',
          value: value.map(function (num) {
            return Number.parseFloat(num);
          })
        };
      }

    case 'translateX':
      {
        return {
          operation: 'translate',
          value: [Number.parseFloat(value), 0]
        };
      }

    case 'translateY':
      {
        return {
          operation: 'translate',
          value: [0, Number.parseFloat(value)]
        };
      }

    default:
      {
        return {
          operation: operation,
          value: value.map(function (num) {
            return Number.parseFloat(num);
          })
        };
      }
  }
};

var normalize = function normalize(operations) {
  return operations.map(function (operation) {
    return normalizeTransformOperation(operation);
  });
};

var processTransform = function processTransform(value) {
  if (typeof value !== 'string') return value;
  return normalize(parse(value));
};

var _default = processTransform;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/transformOrigin.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/transformOrigin.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _castFloat = _interopRequireDefault(__webpack_require__(/*! ../utils/castFloat */ "./node_modules/@react-pdf/stylesheet/lib/utils/castFloat.js"));

var _offsetKeyword = _interopRequireDefault(__webpack_require__(/*! ../utils/offsetKeyword */ "./node_modules/@react-pdf/stylesheet/lib/utils/offsetKeyword.js"));

var transformTransformOrigin = function transformTransformOrigin(value) {
  return (0, _offsetKeyword.default)(value) || (0, _castFloat.default)(value);
};

var _default = transformTransformOrigin;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/transform/units.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/transform/units.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var DPI = 72; // 72pt per inch.

var MM_FACTOR = 1 / 25.4 * DPI;
var CM_FACTOR = 1 / 2.54 * DPI;
/**
 * Parses scalar value in value and unit pairs
 *
 * @param {String} scalar value
 * @returns {Object} parsed value
 */

var parseValue = function parseValue(value) {
  var match = /^(-?\d*\.?\d+)(in|mm|cm|pt|vh|vw|px)?$/g.exec(value);
  return match ? {
    value: parseFloat(match[1], 10),
    unit: match[2] || 'pt'
  } : {
    value: value,
    unit: undefined
  };
};
/**
 * Transform given scalar value
 *
 * @param {Object} container
 * @param {String} styles value
 * @returns {Object} transformed value
 */


var transformUnit = function transformUnit(container, value) {
  var scalar = parseValue(value);

  switch (scalar.unit) {
    case 'in':
      return scalar.value * DPI;

    case 'mm':
      return scalar.value * MM_FACTOR;

    case 'cm':
      return scalar.value * CM_FACTOR;

    case 'vh':
      return scalar.value * (container.height / 100);

    case 'vw':
      return scalar.value * (container.width / 100);

    default:
      return scalar.value;
  }
};

var _default = transformUnit;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/utils/castFloat.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/utils/castFloat.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/* eslint-disable import/prefer-default-export */
var matchNumber = R.when(R.is(String), R.test(/^-?\d*\.?\d*$/));

var castFloat = function castFloat(value) {
  if (typeof value !== 'string') return value;
  if (matchNumber(value)) return parseFloat(value, 10);
  return value;
};

var _default = castFloat;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/lib/utils/offsetKeyword.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/utils/offsetKeyword.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var offsetKeyword = function offsetKeyword(value) {
  switch (value) {
    case 'top':
    case 'left':
      return '0%';

    case 'right':
    case 'bottom':
      return '100%';

    case 'center':
      return '50%';

    default:
      return null;
  }
};

var _default = offsetKeyword;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/extends.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/extends.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}

module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*********************************************************************************************************/
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/typeof.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/node_modules/@babel/runtime/helpers/typeof.js ***!
  \******************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _reduce = _interopRequireDefault(__webpack_require__(/*! ./reduce */ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ../run/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js"));

/**
 * Returns attributed string advancewidth
 *
 * @param {Object} attributed string
 * @return {number} advance width
 */
var advanceWidth = (0, _reduce.default)(R.add, _advanceWidth.default);
var _default = advanceWidth;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidthBetween.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidthBetween.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _filter = _interopRequireDefault(__webpack_require__(/*! ../run/filter */ "./node_modules/@react-pdf/textkit/lib/run/filter.js"));

var _advanceWidthBetween = _interopRequireDefault(__webpack_require__(/*! ../run/advanceWidthBetween */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidthBetween.js"));

/**
 * Advance width between start and end
 * Does not consider ligature splitting for the moment.
 * Check performance impact on supporting this
 *
 * @param  {number}  start offset
 * @param  {number}  end offset
 * @param  {Object}  attributedString
 * @return {number} advance width
 */
var advanceWidthBetween = function advanceWidthBetween(start, end, string) {
  return R.compose(R.sum, R.map((0, _advanceWidthBetween.default)(start, end)), (0, _filter.default)(start, end), R.propOr([], 'runs'))(string);
};

var _default = R.curryN(3, advanceWidthBetween);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/append.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/append.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _empty = _interopRequireDefault(__webpack_require__(/*! ../run/empty */ "./node_modules/@react-pdf/textkit/lib/run/empty.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ../run/append */ "./node_modules/@react-pdf/textkit/lib/run/append.js"));

var _stringFromCodePoints = _interopRequireDefault(__webpack_require__(/*! ../utils/stringFromCodePoints */ "./node_modules/@react-pdf/textkit/lib/utils/stringFromCodePoints.js"));

/**
 * Append glyph into last run of attributed string
 *
 * @param {Object} glyph
 * @param {Object} attributed string
 * @return {Object} attributed string with new glyph
 */
var append = function append(glyph, string) {
  var codePoints = R.propOr([], 'codePoints')(glyph);
  return R.evolve({
    string: R.concat(R.__, (0, _stringFromCodePoints.default)(codePoints)),
    runs: R.converge(R.concat, [R.init, R.compose(R.unapply(R.identity), (0, _append.default)(glyph), R.either(R.last, _empty.default))])
  })(string);
};

var _default = R.curryN(2, append);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/ascent.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/ascent.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _reduce = _interopRequireDefault(__webpack_require__(/*! ./reduce */ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js"));

var _ascent = _interopRequireDefault(__webpack_require__(/*! ../run/ascent */ "./node_modules/@react-pdf/textkit/lib/run/ascent.js"));

/**
 * Returns attributed string ascent
 *
 * @param {Object} attributed string
 * @return {number} ascent
 */
var ascent = (0, _reduce.default)(R.max, _ascent.default);
var _default = ascent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/copy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/copy.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ../run/copy */ "./node_modules/@react-pdf/textkit/lib/run/copy.js"));

/**
 * Deep clone attributed string
 *
 * @param  {Object}  attributed string
 * @return {Object} cloned attributed string
 */
var copy = R.evolve({
  string: R.identity,
  syllables: R.identity,
  runs: R.map(_copy.default)
});
var _default = copy;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/descent.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/descent.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _reduce = _interopRequireDefault(__webpack_require__(/*! ./reduce */ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js"));

var _descent = _interopRequireDefault(__webpack_require__(/*! ../run/descent */ "./node_modules/@react-pdf/textkit/lib/run/descent.js"));

/**
 * Returns attributed string descent
 *
 * @param {Object} attributed string
 * @return {number} descent
 */
var descent = (0, _reduce.default)(R.min, _descent.default);
var _default = descent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/dropLast.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/dropLast.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _dropLast = _interopRequireDefault(__webpack_require__(/*! ../run/dropLast */ "./node_modules/@react-pdf/textkit/lib/run/dropLast.js"));

/**
 * Drop last glyph
 *
 * @param {Object} attributed string
 * @return {Object} attributed string with new glyph
 */
var dropLast = function dropLast(string) {
  return R.evolve({
    string: R.dropLast(1),
    runs: R.adjust(-1, _dropLast.default)
  })(string);
};

var _default = dropLast;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/empty.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/empty.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Returns empty attributed string
 *
 * @return {Object} empty attributed string
 */
var empty = R.always({
  string: '',
  runs: []
});
var _default = empty;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/end.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/end.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get attributed string end value
 *
 * @param  {Object}  glyph string
 * @return {number} end
 */
var end = R.ifElse(R.pathEq(['runs', 'length'], 0), R.always(0), R.compose(R.prop('end'), R.last, R.prop('runs')));
var _default = end;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/fromFragments.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/fromFragments.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Create attributed string from text fragments
 *
 * @param  {Array}  fragments
 * @return {Object} attributed string
 */
var fromFragments = function fromFragments(fragments) {
  var offset = 0;
  var getRuns = R.map(function (fragment) {
    var run = {
      start: offset,
      end: offset + fragment.string.length,
      attributes: fragment.attributes || {}
    };
    offset += fragment.string.length;
    return run;
  });
  return R.applySpec({
    runs: getRuns,
    string: R.o(R.join(''), R.pluck('string'))
  })(fragments);
};

var _default = fromFragments;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/glyphWidthAt.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/glyphWidthAt.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _runAt = _interopRequireDefault(__webpack_require__(/*! ./runAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/runAt.js"));

var _glyphIndexAt = _interopRequireDefault(__webpack_require__(/*! ../run/glyphIndexAt */ "./node_modules/@react-pdf/textkit/lib/run/glyphIndexAt.js"));

/**
 * Get glyph width at string index
 *
 * @param {number} string index
 * @param {Object} attributed string
 * @return {number} glyph width
 */
var glyphWidthAt = function glyphWidthAt(index, string) {
  var run = (0, _runAt.default)(index, string);
  var glyphIndex = (0, _glyphIndexAt.default)(index, run);
  return run.positions[glyphIndex].xAdvance;
};

var _default = glyphWidthAt;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/height.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/height.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _reduce = _interopRequireDefault(__webpack_require__(/*! ./reduce */ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js"));

var _height = _interopRequireDefault(__webpack_require__(/*! ../run/height */ "./node_modules/@react-pdf/textkit/lib/run/height.js"));

/**
 * Returns attributed string height
 *
 * @param {Object} attributed string
 * @return {number} height
 */
var height = (0, _reduce.default)(R.max, _height.default);
var _default = height;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ./advanceWidth */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js"));

var _advanceWidthBetween = _interopRequireDefault(__webpack_require__(/*! ./advanceWidthBetween */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidthBetween.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ./append */ "./node_modules/@react-pdf/textkit/lib/attributedString/append.js"));

var _ascent = _interopRequireDefault(__webpack_require__(/*! ./ascent */ "./node_modules/@react-pdf/textkit/lib/attributedString/ascent.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ./copy */ "./node_modules/@react-pdf/textkit/lib/attributedString/copy.js"));

var _descent = _interopRequireDefault(__webpack_require__(/*! ./descent */ "./node_modules/@react-pdf/textkit/lib/attributedString/descent.js"));

var _dropLast = _interopRequireDefault(__webpack_require__(/*! ./dropLast */ "./node_modules/@react-pdf/textkit/lib/attributedString/dropLast.js"));

var _empty = _interopRequireDefault(__webpack_require__(/*! ./empty */ "./node_modules/@react-pdf/textkit/lib/attributedString/empty.js"));

var _end = _interopRequireDefault(__webpack_require__(/*! ./end */ "./node_modules/@react-pdf/textkit/lib/attributedString/end.js"));

var _fromFragments = _interopRequireDefault(__webpack_require__(/*! ./fromFragments */ "./node_modules/@react-pdf/textkit/lib/attributedString/fromFragments.js"));

var _glyphWidthAt = _interopRequireDefault(__webpack_require__(/*! ./glyphWidthAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/glyphWidthAt.js"));

var _height = _interopRequireDefault(__webpack_require__(/*! ./height */ "./node_modules/@react-pdf/textkit/lib/attributedString/height.js"));

var _indexAtOffset = _interopRequireDefault(__webpack_require__(/*! ./indexAtOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/indexAtOffset.js"));

var _insertGlyph = _interopRequireDefault(__webpack_require__(/*! ./insertGlyph */ "./node_modules/@react-pdf/textkit/lib/attributedString/insertGlyph.js"));

var _leadingOffset = _interopRequireDefault(__webpack_require__(/*! ./leadingOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/leadingOffset.js"));

var _length = _interopRequireDefault(__webpack_require__(/*! ./length */ "./node_modules/@react-pdf/textkit/lib/attributedString/length.js"));

var _prepend = _interopRequireDefault(__webpack_require__(/*! ./prepend */ "./node_modules/@react-pdf/textkit/lib/attributedString/prepend.js"));

var _reduce = _interopRequireDefault(__webpack_require__(/*! ./reduce */ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js"));

var _runAt = _interopRequireDefault(__webpack_require__(/*! ./runAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/runAt.js"));

var _runIndexAt = _interopRequireDefault(__webpack_require__(/*! ./runIndexAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/runIndexAt.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ./slice */ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js"));

var _sliceAtOffset = _interopRequireDefault(__webpack_require__(/*! ./sliceAtOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/sliceAtOffset.js"));

var _start = _interopRequireDefault(__webpack_require__(/*! ./start */ "./node_modules/@react-pdf/textkit/lib/attributedString/start.js"));

var _trailingOffset = _interopRequireDefault(__webpack_require__(/*! ./trailingOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/trailingOffset.js"));

var _trim = _interopRequireDefault(__webpack_require__(/*! ./trim */ "./node_modules/@react-pdf/textkit/lib/attributedString/trim.js"));

var _default = {
  advanceWidth: _advanceWidth.default,
  advanceWidthBetween: _advanceWidthBetween.default,
  append: _append.default,
  ascent: _ascent.default,
  copy: _copy.default,
  descent: _descent.default,
  dropLast: _dropLast.default,
  empty: _empty.default,
  end: _end.default,
  fromFragments: _fromFragments.default,
  glyphWidthAt: _glyphWidthAt.default,
  height: _height.default,
  indexAtOffset: _indexAtOffset.default,
  insertGlyph: _insertGlyph.default,
  leadingOffset: _leadingOffset.default,
  length: _length.default,
  prepend: _prepend.default,
  reduce: _reduce.default,
  runAt: _runAt.default,
  runIndexAt: _runIndexAt.default,
  slice: _slice.default,
  sliceAtOffset: _sliceAtOffset.default,
  start: _start.default,
  trailingOffset: _trailingOffset.default,
  trim: _trim.default
};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/indexAtOffset.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/indexAtOffset.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _length = _interopRequireDefault(__webpack_require__(/*! ../run/length */ "./node_modules/@react-pdf/textkit/lib/run/length.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ../run/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js"));

var _indexAtOffset = _interopRequireDefault(__webpack_require__(/*! ../run/indexAtOffset */ "./node_modules/@react-pdf/textkit/lib/run/indexAtOffset.js"));

/**
 * Get string index at offset
 *
 * @param  {Object}  attributed string
 * @param  {number}  offset
 * @return {number} string index at offset N
 */
var indexAtOffset = function indexAtOffset(offset, string) {
  var index = 0;
  var counter = 0;
  var runs = R.propOr([], 'runs', string);

  for (var i = 0; i < runs.length; i += 1) {
    var run = runs[i];
    var advanceWidth = (0, _advanceWidth.default)(run);

    if (counter + advanceWidth > offset) {
      return index + (0, _indexAtOffset.default)(offset - counter, run);
    }

    counter += advanceWidth;
    index += (0, _length.default)(run);
  }

  return index;
};

var _default = R.curryN(2, indexAtOffset);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/insertGlyph.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/insertGlyph.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ./append */ "./node_modules/@react-pdf/textkit/lib/attributedString/append.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ../run/copy */ "./node_modules/@react-pdf/textkit/lib/run/copy.js"));

var _insert = _interopRequireDefault(__webpack_require__(/*! ../run/insert */ "./node_modules/@react-pdf/textkit/lib/run/insert.js"));

var _runIndexAt = _interopRequireDefault(__webpack_require__(/*! ./runIndexAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/runIndexAt.js"));

var _stringFromCodePoints = _interopRequireDefault(__webpack_require__(/*! ../utils/stringFromCodePoints */ "./node_modules/@react-pdf/textkit/lib/utils/stringFromCodePoints.js"));

var mapCond = function mapCond(conds) {
  return R.addIndex(R.map)(R.cond(conds));
};

var idxEquals = function idxEquals(idx) {
  return R.compose(R.equals(idx), R.nthArg(1));
};

var idxGt = function idxGt(idx) {
  return R.compose(R.gt(R.__, idx), R.nthArg(1));
};
/**
 * Insert glyph into attributed string
 *
 * @param {number} index
 * @param {Object} glyph
 * @param {Object} attributed string
 * @return {Object} attributed string with new glyph
 */


var insertGlyph = function insertGlyph(index, glyph, string) {
  var runIndex = (0, _runIndexAt.default)(index, string); // Add glyph to the end if run index invalid

  if (runIndex === -1) {
    return (0, _append.default)(glyph, string);
  }

  var codePoints = R.propOr([], 'codePoints')(glyph);
  var incRange = R.add(R.length(codePoints));
  return R.evolve({
    string: R.compose(R.join(''), R.insert(index, (0, _stringFromCodePoints.default)(codePoints))),
    runs: mapCond([[idxEquals(runIndex), function (run) {
      return (0, _insert.default)(index - run.start, glyph, run);
    }], [idxGt(runIndex), R.evolve({
      start: incRange,
      end: incRange
    })], [R.T, _copy.default]])
  })(string);
};

var _default = R.curryN(3, insertGlyph);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/leadingOffset.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/leadingOffset.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _leadingOffset = _interopRequireDefault(__webpack_require__(/*! ../run/leadingOffset */ "./node_modules/@react-pdf/textkit/lib/run/leadingOffset.js"));

/**
 * Get attributed string leading white space offset
 *
 * @param  {Object}  attributed string
 * @return {number} leading white space offset
 */
var leadingOffset = R.compose(_leadingOffset.default, R.head, R.propOr([], 'runs'));
var _default = leadingOffset;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/length.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/length.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _start = _interopRequireDefault(__webpack_require__(/*! ./start */ "./node_modules/@react-pdf/textkit/lib/attributedString/start.js"));

var _end = _interopRequireDefault(__webpack_require__(/*! ./end */ "./node_modules/@react-pdf/textkit/lib/attributedString/end.js"));

/**
 * Get attributed string length
 *
 * @param  {Object}  glyph string
 * @return {number} end
 */
var length = R.converge(R.subtract, [_end.default, _start.default]);
var _default = length;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/prepend.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/prepend.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _add = _interopRequireDefault(__webpack_require__(/*! ../run/add */ "./node_modules/@react-pdf/textkit/lib/run/add.js"));

var _empty = _interopRequireDefault(__webpack_require__(/*! ../run/empty */ "./node_modules/@react-pdf/textkit/lib/run/empty.js"));

var _prepend = _interopRequireDefault(__webpack_require__(/*! ../run/prepend */ "./node_modules/@react-pdf/textkit/lib/run/prepend.js"));

var _stringFromCodePoints = _interopRequireDefault(__webpack_require__(/*! ../utils/stringFromCodePoints */ "./node_modules/@react-pdf/textkit/lib/utils/stringFromCodePoints.js"));

/**
 * prepend glyph into last run of attributed string
 *
 * @param {Object} glyph
 * @param {Object} attributed string
 * @return {Object} attributed string with new glyph
 */
var prepend = function prepend(glyph, string) {
  var codePoints = R.propOr([], 'codePoints')(glyph);
  return R.evolve({
    string: R.concat((0, _stringFromCodePoints.default)(codePoints)),
    runs: R.converge(R.concat, [R.compose(R.unapply(R.identity), (0, _prepend.default)(glyph), R.either(R.head, _empty.default)), R.compose(R.map((0, _add.default)(codePoints.length)), R.tail)])
  })(string);
};

var _default = R.curryN(2, prepend);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/reduce.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Sum run function results
 *
 * @param {function} accum fn
 * @param {function} function run (run) -> Number
 * @param {number} initial value
 * @return {number} sum
 */
var sumRuns = function sumRuns(accum, fn, init) {
  if (init === void 0) {
    init = 0;
  }

  return R.compose(R.reduce(R.useWith(accum, [R.identity, fn]), init), R.prop('runs'));
};

var _default = sumRuns;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/runAt.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/runAt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _runIndexAt = _interopRequireDefault(__webpack_require__(/*! ./runIndexAt */ "./node_modules/@react-pdf/textkit/lib/attributedString/runIndexAt.js"));

/**
 * Get run at char index
 *
 * @param  {number}  char index
 * @param  {Object}  attributedString
 * @return {Object} run
 */
var runAt = function runAt(n, attributedString) {
  var runIndex = (0, _runIndexAt.default)(n)(attributedString);
  return R.path(['runs', runIndex])(attributedString);
};

var _default = R.curryN(2, runAt);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/runIndexAt.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/runIndexAt.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _runIndexAt = _interopRequireDefault(__webpack_require__(/*! ../run/runIndexAt */ "./node_modules/@react-pdf/textkit/lib/run/runIndexAt.js"));

/**
 * Get run index at char index
 *
 * @param  {number}  char index
 * @param  {Object}  attributedString
 * @return {number} run index
 */
var runIndexAt = function runIndexAt(n, string) {
  return R.compose((0, _runIndexAt.default)(n), R.prop('runs'))(string);
};

var _default = R.curryN(2, runIndexAt);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/slice.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ../run/slice */ "./node_modules/@react-pdf/textkit/lib/run/slice.js"));

var _filter = _interopRequireDefault(__webpack_require__(/*! ../run/filter */ "./node_modules/@react-pdf/textkit/lib/run/filter.js"));

var _subtract = _interopRequireDefault(__webpack_require__(/*! ../run/subtract */ "./node_modules/@react-pdf/textkit/lib/run/subtract.js"));

var _mapIndexed = _interopRequireDefault(__webpack_require__(/*! ../utils/mapIndexed */ "./node_modules/@react-pdf/textkit/lib/utils/mapIndexed.js"));

/**
 * Slice array of runs
 *
 * @param  {number}  start offset
 * @param  {number}  end offset
 * @param  {Array}  runs
 * @return {Array} sliced runs
 */
var sliceRuns = function sliceRuns(start, end) {
  return function (runs) {
    var firstRun = function firstRun(a) {
      return (0, _slice.default)(start - a.start, end - a.start, a);
    };

    var lastRun = function lastRun(a) {
      return (0, _slice.default)(0, end - a.start, a);
    };

    var intermediateRun = R.identity;
    var res = (0, _mapIndexed.default)([R.o((0, _subtract.default)(start), firstRun), // Slice first run
    R.o((0, _subtract.default)(start), intermediateRun), // Slice intermediate runs
    R.o((0, _subtract.default)(start), lastRun) // Slice last run
    ])(runs);
    return res;
  };
};
/**
 * Slice attributed string between two indices
 *
 * @param  {number}  start offset
 * @param  {number}  end offset
 * @param  {Object}  attributedString
 * @return {Object} attributedString
 */


var slice = function slice(start, end, string) {
  return R.ifElse(R.pathEq(['string', 'length'], 0), R.identity, R.evolve({
    string: R.slice(start, end),
    runs: R.compose(sliceRuns(start, end), (0, _filter.default)(start, end))
  }))(string);
};

var _default = R.curryN(3, slice);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/sliceAtOffset.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/sliceAtOffset.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ./slice */ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js"));

var _indexAtOffset = _interopRequireDefault(__webpack_require__(/*! ./indexAtOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/indexAtOffset.js"));

/**
 * Slice attributed string at given offset
 *
 * @param  {number}  offset
 * @param  {Object}  attributedString
 * @return {Object} attributedString
 */
var sliceAtOffset = function sliceAtOffset(offset, string) {
  var index = (0, _indexAtOffset.default)(offset, string);
  return (0, _slice.default)(0, index, string);
};

var _default = R.curryN(2, sliceAtOffset);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/start.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/start.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get attributed string start value
 *
 * @param  {Object}  glyph string
 * @return {number} start
 */
var start = R.ifElse(R.pathEq(['runs', 'length'], 0), R.always(0), R.path(['runs', 0, 'start']));
var _default = start;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/trailingOffset.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/trailingOffset.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _trailingOffset = _interopRequireDefault(__webpack_require__(/*! ../run/trailingOffset */ "./node_modules/@react-pdf/textkit/lib/run/trailingOffset.js"));

/**
 * Get attributed string trailing white space offset
 *
 * @param  {Object}  attributed string
 * @return {number} trailing white space offset
 */
var trailingOffset = R.compose(_trailingOffset.default, R.last, R.propOr([], 'runs'));
var _default = trailingOffset;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/attributedString/trim.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/attributedString/trim.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ./slice */ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js"));

var testChar = R.test(/\S/g);
var findCharIndex = R.findIndex(testChar);
var findLastCharIndex = R.o(R.inc, R.findLastIndex(testChar));
/**
 * Removes (strips) whitespace from both ends of the attributted string.
 *
 * @param  {Object}  attributedString
 * @return {Object} attributedString
 */

var trim = R.chain(R.apply(_slice.default), R.compose(R.juxt([findCharIndex, findLastCharIndex]), R.prop('string')));
var _default = trim;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/block/height.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/block/height.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get paragrpah block height
 *
 * @param  {Object}  paragraph block
 * @return {number} paragraph block height
 */
var height = R.compose(R.sum, R.map(R.prop('height')), R.pluck('box'));
var _default = height;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/block/slice.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/block/slice.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Slice block lines
 *
 * @param  {number}  lines quantity
 * @param  {Object}  paragraph block
 * @return {Object} sliced paragraph block
 */
var sliceBlock = function sliceBlock(lines, block) {
  return R.slice(0, lines, block);
};

var _default = sliceBlock;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/block/sliceAtHeight.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/block/sliceAtHeight.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Slice block at given height
 *
 * @param  {number}  height
 * @param  {Object}  paragraph block
 * @return {number} sliced paragraph block
 */
var sliceAtHeight = function sliceAtHeight(height) {
  return function (block) {
    var newBlock = [];
    var counter = 0;

    for (var i = 0; i < block.length; i += 1) {
      var line = block[i];
      counter += line.box.height;

      if (counter < height) {
        newBlock.push(line);
      } else {
        break;
      }
    }

    return newBlock;
  };
};

var _default = sliceAtHeight;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/block/truncate.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/block/truncate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ../attributedString/append */ "./node_modules/@react-pdf/textkit/lib/attributedString/append.js"));

var _trim = _interopRequireDefault(__webpack_require__(/*! ../attributedString/trim */ "./node_modules/@react-pdf/textkit/lib/attributedString/trim.js"));

var ELLIPSIS_UNICODE = 8230;
var ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);
/**
 * Get ellipsis codepoint. This may be different in standard and embedded fonts
 *
 * @param  {number}  font
 * @return {Object} ellipsis codepoint
 */

var getEllipsisCodePoint = function getEllipsisCodePoint(font) {
  if (!font.encode) return ELLIPSIS_UNICODE;

  var _font$encode = font.encode(ELLIPSIS_STRING),
      codePoints = _font$encode[0];

  return parseInt(codePoints[0], 16);
};
/**
 * Trucante block with ellipsis
 *
 * @param  {number}  lines quantity
 * @param  {Object}  paragraph block
 * @return {Object} sliced paragraph block
 */


var truncate = function truncate(block) {
  var runs = R.propOr([], 'runs', R.last(block));
  var font = R.path(['attributes', 'font'], R.last(runs));

  if (font) {
    var codePoint = getEllipsisCodePoint(font);
    var glyph = font.glyphForCodePoint(codePoint);
    return R.adjust(-1, R.compose((0, _append.default)(glyph), _trim.default))(block);
  }

  return block;
};

var _default = truncate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/justification/getDistances.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/justification/getDistances.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/* eslint-disable no-multi-assign */
var KASHIDA_PRIORITY = 0;
var NULL_PRIORITY = 3;

var getDistances = function getDistances(gap, factors) {
  var total = 0;
  var priorities = [];
  var unconstrained = [];

  for (var _priority = KASHIDA_PRIORITY; _priority <= NULL_PRIORITY; _priority += 1) {
    priorities[_priority] = unconstrained[_priority] = 0;
  } // sum the factors at each priority


  for (var j = 0; j < factors.length; j += 1) {
    var f = factors[j];
    var sum = f.before + f.after;
    total += sum;
    priorities[f.priority] += sum;

    if (f.unconstrained) {
      unconstrained[f.priority] += sum;
    }
  } // choose the priorities that need to be applied


  var highestPriority = -1;
  var highestPrioritySum = 0;
  var remainingGap = gap;
  var priority;

  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {
    var prioritySum = priorities[priority];

    if (prioritySum !== 0) {
      if (highestPriority === -1) {
        highestPriority = priority;
        highestPrioritySum = prioritySum;
      } // if this priority covers the remaining gap, we're done


      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {
        priorities[priority] = remainingGap / prioritySum;
        unconstrained[priority] = 0;
        remainingGap = 0;
        break;
      } // mark that we need to use 100% of the adjustment from
      // this priority, and subtract the space that it consumes


      priorities[priority] = 1;
      remainingGap -= prioritySum; // if this priority has unconstrained glyphs, let them consume the remaining space

      if (unconstrained[priority] !== 0) {
        unconstrained[priority] = remainingGap / unconstrained[priority];
        remainingGap = 0;
        break;
      }
    }
  } // zero out remaining priorities (if any)


  for (var p = priority + 1; p <= NULL_PRIORITY; p += 1) {
    priorities[p] = 0;
    unconstrained[p] = 0;
  } // if there is still space left over, assign it to the highest priority that we saw.
  // this violates their factors, but it only happens in extreme cases


  if (remainingGap > 0 && highestPriority > -1) {
    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;
  } // create and return an array of distances to add to each glyph's advance


  var distances = [];

  for (var index = 0; index < factors.length; index += 1) {
    // the distance to add to this glyph is the sum of the space to add
    // after this glyph, and the space to add before the next glyph
    var _f = factors[index];
    var next = factors[index + 1];
    var dist = _f.after * priorities[_f.priority];

    if (next) {
      dist += next.before * priorities[next.priority];
    } // if this glyph is unconstrained, add the unconstrained distance as well


    if (_f.unconstrained) {
      dist += _f.after * unconstrained[_f.priority];

      if (next) {
        dist += next.before * unconstrained[next.priority];
      }
    }

    distances.push(dist);
  }

  return distances;
};

var _default = getDistances;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/justification/getFactors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/justification/getFactors.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _isWhiteSpace = _interopRequireDefault(__webpack_require__(/*! ../../glyph/isWhiteSpace */ "./node_modules/@react-pdf/textkit/lib/glyph/isWhiteSpace.js"));

var WHITESPACE_PRIORITY = 1;
var LETTER_PRIORITY = 2;
var EXPAND_WHITESPACE_FACTOR = {
  before: 0.5,
  after: 0.5,
  priority: WHITESPACE_PRIORITY,
  unconstrained: false
};
var EXPAND_CHAR_FACTOR = {
  before: 0.14453125,
  // 37/256
  after: 0.14453125,
  priority: LETTER_PRIORITY,
  unconstrained: false
};
var SHRINK_WHITESPACE_FACTOR = {
  before: -0.04296875,
  // -11/256
  after: -0.04296875,
  priority: WHITESPACE_PRIORITY,
  unconstrained: false
};
var SHRINK_CHAR_FACTOR = {
  before: -0.04296875,
  after: -0.04296875,
  priority: LETTER_PRIORITY,
  unconstrained: false
};

var getCharFactor = function getCharFactor(direction, options) {
  var expandCharFactor = R.propOr({}, 'expandCharFactor', options);
  var shrinkCharFactor = R.propOr({}, 'shrinkCharFactor', options);
  return direction === 'GROW' ? R.merge(EXPAND_CHAR_FACTOR, expandCharFactor) : R.merge(SHRINK_CHAR_FACTOR, shrinkCharFactor);
};

var getWhitespaceFactor = function getWhitespaceFactor(direction, options) {
  var expandWhitespaceFactor = R.propOr({}, 'expandWhitespaceFactor', options);
  var shrinkWhitespaceFactor = R.propOr({}, 'shrinkWhitespaceFactor', options);
  return direction === 'GROW' ? R.merge(EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : R.merge(SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);
};

var factor = function factor(direction, options) {
  return function (glyphs) {
    var charFactor = getCharFactor(direction, options);
    var whitespaceFactor = getWhitespaceFactor(direction, options);
    var factors = [];

    for (var index = 0; index < glyphs.length; index += 1) {
      var f = void 0;
      var glyph = glyphs[index];

      if ((0, _isWhiteSpace.default)(glyph)) {
        f = R.clone(whitespaceFactor);

        if (index === glyphs.length - 1) {
          f.before = 0;

          if (index > 0) {
            factors[index - 1].after = 0;
          }
        }
      } else if (glyph.isMark && index > 0) {
        f = R.clone(factors[index - 1]);
        f.before = 0;
        factors[index - 1].after = 0;
      } else {
        f = R.clone(charFactor);
      }

      factors.push(f);
    }

    return factors;
  };
};

var getFactors = function getFactors(gap, line, options) {
  var direction = gap > 0 ? 'GROW' : 'SHRINK';
  var getFactor = factor(direction, options);
  var concatFactors = R.useWith(R.concat, [R.identity, R.compose(getFactor, R.prop('glyphs'))]);
  return R.compose(R.adjust(-1, R.assoc('after', 0)), R.adjust(0, R.assoc('before', 0)), R.reduce(concatFactors, []), R.prop('runs'))(line);
};

var _default = getFactors;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/justification/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/justification/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _createForOfIteratorHelperLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelperLoose */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/createForOfIteratorHelperLoose.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _getFactors = _interopRequireDefault(__webpack_require__(/*! ./getFactors */ "./node_modules/@react-pdf/textkit/lib/engines/justification/getFactors.js"));

var _getDistances = _interopRequireDefault(__webpack_require__(/*! ./getDistances */ "./node_modules/@react-pdf/textkit/lib/engines/justification/getDistances.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js"));

/* eslint-disable consistent-return */

/* eslint-disable no-plusplus */

/* eslint-disable no-restricted-syntax */

/**
 * Adjust run positions by given distances
 *
 * @param {Array} distances
 * @param {Object} line
 * @returns {Object} line
 */
var justifyLine = function justifyLine(distances, line) {
  var index = 0;

  for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(line.runs), _step; !(_step = _iterator()).done;) {
    var run = _step.value;

    for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(run.positions), _step2; !(_step2 = _iterator2()).done;) {
      var position = _step2.value;
      position.xAdvance += distances[index++];
    }
  }

  return line;
};
/**
 * A JustificationEngine is used by a Typesetter to perform line fragment
 * justification. This implementation is based on a description of Apple's
 * justification algorithm from a PDF in the Apple Font Tools package.
 *
 * //TODO: Make it immutable
 *
 * @param {Object} layout options
 * @param {Object} line
 * @returns {Object} line
 */


var justification = function justification(options, line) {
  var gap = line.box.width - (0, _advanceWidth.default)(line);
  if (gap === 0) return; // Exact fit

  var factors = (0, _getFactors.default)(gap, line, options);
  var distances = (0, _getDistances.default)(gap, factors);
  return justifyLine(distances, line);
};

var _default = R.curryN(2, justification);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/bestFit.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/linebreaker/bestFit.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/* eslint-disable no-plusplus */
var INFINITY = 10000;

var getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {
  var position = null;
  var minimumBadness = Infinity;
  var sum = {
    width: 0,
    stretch: 0,
    shrink: 0
  };
  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];

  var calculateRatio = function calculateRatio(node) {
    if (sum.width < lineLength) {
      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;
    }

    if (sum.width > lineLength) {
      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;
    }

    return 0;
  };

  for (var i = 0; i < subnodes.length; i += 1) {
    var node = subnodes[i];

    if (node.type === 'box') {
      sum.width += node.width;
    } else if (node.type === 'glue') {
      sum.width += node.width;
      sum.stretch += node.stretch;
      sum.shrink += node.shrink;
    }

    if (sum.width - sum.shrink > lineLength) {
      if (position === null) {
        var j = i === 0 ? i + 1 : i;

        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {
          j++;
        }

        position = j - 1;
      }

      break;
    }

    if (node.type === 'penalty' || node.type === 'glue') {
      var ratio = calculateRatio(node);
      var penalty = node.type === 'penalty' ? node.penalty : 0;
      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;

      if (minimumBadness >= badness) {
        position = i;
        minimumBadness = badness;
      }
    }
  }

  return sum.width - sum.shrink > lineLength ? position : null;
};

var applyBestFit = function applyBestFit(nodes, widths) {
  var count = 0;
  var lineNumber = 0;
  var subnodes = nodes;
  var breakpoints = [{
    position: 0
  }];

  while (subnodes.length > 0) {
    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);

    if (breakpoint !== null) {
      count += breakpoint;
      breakpoints.push({
        position: count
      });
      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);
      count++;
      lineNumber++;
    } else {
      subnodes = [];
    }
  }

  return breakpoints;
};

var _default = applyBestFit;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/linebreaker/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _bestFit = _interopRequireDefault(__webpack_require__(/*! ./bestFit */ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/bestFit.js"));

var _linebreak = _interopRequireDefault(__webpack_require__(/*! ./linebreak */ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linebreak.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/slice */ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js"));

var _insertGlyph = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/insertGlyph */ "./node_modules/@react-pdf/textkit/lib/attributedString/insertGlyph.js"));

var _advanceWidthBetween = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/advanceWidthBetween */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidthBetween.js"));

var HYPHEN = 0x002d;
var TOLERANCE_STEPS = 5;
var TOLERANCE_LIMIT = 50;
var opts = {
  width: 3,
  stretch: 6,
  shrink: 9
};
/**
 * Slice attributed string to many lines
 *
 * @param {Object} attributed string
 * @param  {Array}  nodes
 * @param  {Array}  breaks
 * @return {Array} attributed strings
 */

var breakLines = function breakLines(string, nodes, breaks) {
  var start = 0;
  var end = null;
  var lines = breaks.reduce(function (acc, breakPoint) {
    var node = nodes[breakPoint.position];
    var prevNode = nodes[breakPoint.position - 1]; // Last breakpoint corresponds to K&P mandatory final glue

    if (breakPoint.position === nodes.length - 1) return acc;
    var line;

    if (node.type === 'penalty') {
      end = prevNode.value.end;
      line = (0, _slice.default)(start, end, string);
      line = (0, _insertGlyph.default)(line.length, HYPHEN, line);
    } else {
      end = node.value.end;
      line = (0, _slice.default)(start, end, string);
    }

    start = end;
    return [].concat(acc, [line]);
  }, []); // Last line

  lines.push((0, _slice.default)(start, string.string.length, string));
  return lines;
};
/**
 * Return Knuth & Plass nodes based on line and previously calculated syllables
 *
 * @param {Object} attributed string
 * @param  {Object}  attributed string
 * @param  {Object}  layout options
 * @return {Array} attributed strings
 */


var getNodes = function getNodes(attributedString, _ref, options) {
  var align = _ref.align;
  var start = 0;
  var hyphenWidth = 5;
  var syllables = attributedString.syllables;
  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);
  var result = syllables.reduce(function (acc, s, index) {
    var width = (0, _advanceWidthBetween.default)(start, start + s.length, attributedString);

    if (s.trim() === '') {
      var stretch = width * opts.width / opts.stretch;
      var shrink = width * opts.width / opts.shrink;
      var value = {
        start: start,
        end: start + s.length
      };
      acc.push(_linebreak.default.glue(width, value, stretch, shrink));
    } else {
      var hyphenated = syllables[index + 1] !== ' ';
      var _value = {
        start: start,
        end: start + s.length
      };
      acc.push(_linebreak.default.box(width, _value, hyphenated));

      if (syllables[index + 1] && hyphenated) {
        acc.push(_linebreak.default.penalty(hyphenWidth, hyphenPenalty, 1));
      }
    }

    start += s.length;
    return acc;
  }, []);
  result.push(_linebreak.default.glue(0, null, _linebreak.default.infinity, 0));
  result.push(_linebreak.default.penalty(0, -_linebreak.default.infinity, 1));
  return result;
};

var getStyles = R.pathOr({}, ['attributedString', 'runs', 0, 'attributes']);
/**
 * Performs Knuth & Plass line breaking algorithm
 * Fallbacks to best fit algorithm if latter not successful
 *
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @param {Object} attributed string
 * @return {Array} attributed strings
 */

var lineBreaker = function lineBreaker(options, attributedString, availableWidths) {
  var tolerance = options.tolerance || 4;
  var style = getStyles(attributedString);
  var nodes = getNodes(attributedString, style, options);
  var breaks = (0, _linebreak.default)(nodes, availableWidths, {
    tolerance: tolerance
  }); // Try again with a higher tolerance if the line breaking failed.

  while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {
    tolerance += TOLERANCE_STEPS;
    breaks = (0, _linebreak.default)(nodes, availableWidths, {
      tolerance: tolerance
    });
  }

  if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {
    breaks = (0, _bestFit.default)(nodes, availableWidths);
  }

  return breakLines(attributedString, nodes, breaks.slice(1));
};

var _default = R.curryN(3, lineBreaker);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linebreak.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linebreak.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _linkedList = _interopRequireDefault(__webpack_require__(/*! ./linkedList */ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linkedList.js"));

/* eslint-disable no-restricted-properties */

/**
 * @preserve Knuth and Plass line breaking algorithm in JavaScript
 *
 * Licensed under the new BSD License.
 * Copyright 2009-2010, Bram Stein
 * All rights reserved.
 */
var linebreak = function linebreak(nodes, lines, settings) {
  var options = {
    demerits: {
      line: settings && settings.demerits && settings.demerits.line || 10,
      flagged: settings && settings.demerits && settings.demerits.flagged || 100,
      fitness: settings && settings.demerits && settings.demerits.fitness || 3000
    },
    tolerance: settings && settings.tolerance || 3
  };
  var activeNodes = new _linkedList.default();
  var sum = {
    width: 0,
    stretch: 0,
    shrink: 0
  };
  var lineLengths = lines;
  var breaks = [];
  var tmp = {
    data: {
      demerits: Infinity
    }
  };

  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {
    return {
      position: position,
      demerits: demerits,
      ratio: ratio,
      line: line,
      fitnessClass: fitnessClass,
      totals: totals || {
        width: 0,
        stretch: 0,
        shrink: 0
      },
      previous: previous
    };
  }

  function computeCost(start, end, active, currentLine) {
    var width = sum.width - active.totals.width;
    var stretch = 0;
    var shrink = 0; // If the current line index is within the list of linelengths, use it, otherwise use
    // the last line length of the list.

    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];

    if (nodes[end].type === 'penalty') {
      width += nodes[end].width;
    }

    if (width < lineLength) {
      // Calculate the stretch ratio
      stretch = sum.stretch - active.totals.stretch;

      if (stretch > 0) {
        return (lineLength - width) / stretch;
      }

      return linebreak.infinity;
    }

    if (width > lineLength) {
      // Calculate the shrink ratio
      shrink = sum.shrink - active.totals.shrink;

      if (shrink > 0) {
        return (lineLength - width) / shrink;
      }

      return linebreak.infinity;
    } // perfect match


    return 0;
  } // Add width, stretch and shrink values from the current
  // break point up to the next box or forced penalty.


  function computeSum(breakPointIndex) {
    var result = {
      width: sum.width,
      stretch: sum.stretch,
      shrink: sum.shrink
    };

    for (var i = breakPointIndex; i < nodes.length; i += 1) {
      if (nodes[i].type === 'glue') {
        result.width += nodes[i].width;
        result.stretch += nodes[i].stretch;
        result.shrink += nodes[i].shrink;
      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {
        break;
      }
    }

    return result;
  } // The main loop of the algorithm
  // eslint-disable-next-line no-shadow


  function mainLoop(node, index, nodes) {
    var active = activeNodes.first();
    var next = null;
    var ratio = 0;
    var demerits = 0;
    var candidates = [];
    var badness;
    var currentLine = 0;
    var tmpSum;
    var currentClass = 0;
    var fitnessClass;
    var candidate;
    var newNode; // The inner loop iterates through all the active nodes with line < currentLine and then
    // breaks out to insert the new active node candidates before looking at the next active
    // nodes for the next lines. The result of this is that the active node list is always
    // sorted by line number.

    while (active !== null) {
      candidates = [{
        demerits: Infinity
      }, {
        demerits: Infinity
      }, {
        demerits: Infinity
      }, {
        demerits: Infinity
      }]; // Iterate through the linked list of active nodes to find new potential active nodes
      // and deactivate current active nodes.

      while (active !== null) {
        next = active.next;
        currentLine = active.data.line + 1;
        ratio = computeCost(active.data.position, index, active.data, currentLine); // Deactive nodes when the distance between the current active node and the
        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch
        // ratio becomes negative) or when the current node is a forced break (i.e. the end
        // of the paragraph when we want to remove all active nodes, but possibly have a final
        // candidate active node---if the paragraph can be set using the given tolerance value.)

        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {
          activeNodes.remove(active);
        } // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the
        // total demerits and record a candidate active node.


        if (ratio >= -1 && ratio <= options.tolerance) {
          badness = 100 * Math.pow(Math.abs(ratio), 3); // Positive penalty

          if (node.type === 'penalty' && node.penalty >= 0) {
            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2); // Negative penalty but not a forced break
          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {
            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2); // All other cases
          } else {
            demerits = Math.pow(options.demerits.line + badness, 2);
          }

          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {
            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;
          } // Calculate the fitness class for this candidate active node.


          if (ratio < -0.5) {
            currentClass = 0;
          } else if (ratio <= 0.5) {
            currentClass = 1;
          } else if (ratio <= 1) {
            currentClass = 2;
          } else {
            currentClass = 3;
          } // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines
          // differ too much.


          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {
            demerits += options.demerits.fitness;
          } // Add the total demerits of the active node to get the total demerits of this candidate node.


          demerits += active.data.demerits; // Only store the best candidate for each fitness class

          if (demerits < candidates[currentClass].demerits) {
            candidates[currentClass] = {
              active: active,
              demerits: demerits,
              ratio: ratio
            };
          }
        }

        active = next; // Stop iterating through active nodes to insert new candidate active nodes in the active list
        // before moving on to the active nodes for the next line.
        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs
        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.
        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node
        // list sorted has a higher priority.

        if (active !== null && active.data.line >= currentLine) {
          break;
        }
      }

      tmpSum = computeSum(index);

      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {
        candidate = candidates[fitnessClass];

        if (candidate.demerits < Infinity) {
          newNode = new _linkedList.default.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));

          if (active !== null) {
            activeNodes.insertBefore(active, newNode);
          } else {
            activeNodes.push(newNode);
          }
        }
      }
    }
  } // Add an active node for the start of the paragraph.


  activeNodes.push(new _linkedList.default.Node(breakpoint(0, 0, 0, 0, 0, undefined, null))); // eslint-disable-next-line no-shadow

  nodes.forEach(function (node, index, nodes) {
    if (node.type === 'box') {
      sum.width += node.width;
    } else if (node.type === 'glue') {
      if (index > 0 && nodes[index - 1].type === 'box') {
        mainLoop(node, index, nodes);
      }

      sum.width += node.width;
      sum.stretch += node.stretch;
      sum.shrink += node.shrink;
    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {
      mainLoop(node, index, nodes);
    }
  });

  if (activeNodes.size() !== 0) {
    // Find the best active node (the one with the least total demerits.)
    activeNodes.forEach(function (node) {
      if (node.data.demerits < tmp.data.demerits) {
        tmp = node;
      }
    });

    while (tmp !== null) {
      breaks.push({
        position: tmp.data.position,
        ratio: tmp.data.ratio
      });
      tmp = tmp.data.previous;
    }

    return breaks.reverse();
  }

  return [];
};

linebreak.infinity = 10000;

linebreak.glue = function (width, value, stretch, shrink) {
  return {
    type: 'glue',
    value: value,
    width: width,
    stretch: stretch,
    shrink: shrink
  };
};

linebreak.box = function (width, value, hyphenated) {
  if (hyphenated === void 0) {
    hyphenated = false;
  }

  return {
    type: 'box',
    width: width,
    value: value,
    hyphenated: hyphenated
  };
};

linebreak.penalty = function (width, penalty, flagged) {
  return {
    type: 'penalty',
    width: width,
    penalty: penalty,
    flagged: flagged
  };
};

var _default = linebreak;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linkedList.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/linebreaker/linkedList.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/* eslint-disable no-param-reassign */

/* eslint-disable max-classes-per-file */
var Node = /*#__PURE__*/function () {
  function Node(data) {
    this.prev = null;
    this.next = null;
    this.data = data;
  }

  var _proto = Node.prototype;

  _proto.toString = function toString() {
    return this.data.toString();
  };

  return Node;
}();

var LinkedList = /*#__PURE__*/function () {
  function LinkedList() {
    this.head = null;
    this.tail = null;
    this.listSize = 0;
  }

  var _proto2 = LinkedList.prototype;

  _proto2.isLinked = function isLinked(node) {
    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());
  };

  _proto2.size = function size() {
    return this.listSize;
  };

  _proto2.isEmpty = function isEmpty() {
    return this.listSize === 0;
  };

  _proto2.first = function first() {
    return this.head;
  };

  _proto2.last = function last() {
    return this.last;
  };

  _proto2.toString = function toString() {
    return this.toArray().toString();
  };

  _proto2.toArray = function toArray() {
    var node = this.head;
    var result = [];

    while (node !== null) {
      result.push(node);
      node = node.next;
    }

    return result;
  };

  _proto2.forEach = function forEach(fun) {
    var node = this.head;

    while (node !== null) {
      fun(node);
      node = node.next;
    }
  };

  _proto2.contains = function contains(n) {
    var node = this.head;

    if (!this.isLinked(n)) {
      return false;
    }

    while (node !== null) {
      if (node === n) {
        return true;
      }

      node = node.next;
    }

    return false;
  };

  _proto2.at = function at(i) {
    var node = this.head;
    var index = 0;

    if (i >= this.listLength || i < 0) {
      return null;
    }

    while (node !== null) {
      if (i === index) {
        return node;
      }

      node = node.next;
      index += 1;
    }

    return null;
  };

  _proto2.insertAfter = function insertAfter(node, newNode) {
    if (!this.isLinked(node)) {
      return this;
    }

    newNode.prev = node;
    newNode.next = node.next;

    if (node.next === null) {
      this.tail = newNode;
    } else {
      node.next.prev = newNode;
    }

    node.next = newNode;
    this.listSize += 1;
    return this;
  };

  _proto2.insertBefore = function insertBefore(node, newNode) {
    if (!this.isLinked(node)) {
      return this;
    }

    newNode.prev = node.prev;
    newNode.next = node;

    if (node.prev === null) {
      this.head = newNode;
    } else {
      node.prev.next = newNode;
    }

    node.prev = newNode;
    this.listSize += 1;
    return this;
  };

  _proto2.push = function push(node) {
    if (this.head === null) {
      this.unshift(node);
    } else {
      this.insertAfter(this.tail, node);
    }

    return this;
  };

  _proto2.unshift = function unshift(node) {
    if (this.head === null) {
      this.head = node;
      this.tail = node;
      node.prev = null;
      node.next = null;
      this.listSize += 1;
    } else {
      this.insertBefore(this.head, node);
    }

    return this;
  };

  _proto2.remove = function remove(node) {
    if (!this.isLinked(node)) {
      return this;
    }

    if (node.prev === null) {
      this.head = node.next;
    } else {
      node.prev.next = node.next;
    }

    if (node.next === null) {
      this.tail = node.prev;
    } else {
      node.next.prev = node.prev;
    }

    this.listSize -= 1;
    return this;
  };

  _proto2.pop = function pop() {
    var node = this.tail;
    this.tail.prev.next = null;
    this.tail = this.tail.prev;
    this.listSize -= 1;
    node.prev = null;
    node.next = null;
    return node;
  };

  _proto2.shift = function shift() {
    var node = this.head;
    this.head.next.prev = null;
    this.head = this.head.next;
    this.listSize -= 1;
    node.prev = null;
    node.next = null;
    return node;
  };

  return LinkedList;
}();

LinkedList.Node = Node;
var _default = LinkedList;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/scriptItemizer/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/scriptItemizer/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _unicodeProperties = _interopRequireDefault(__webpack_require__(/*! @react-pdf/unicode-properties */ "./node_modules/@react-pdf/unicode-properties/lib/unicode-properties.es.js"));

var _empty = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/empty */ "./node_modules/@react-pdf/textkit/lib/attributedString/empty.js"));

var ignoredScripts = ['Common', 'Inherited', 'Unknown'];
/**
 * Resolves unicode script in runs, grouping equal runs together
 *
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Object} attributed string
 */

var scriptItemizer = function scriptItemizer(options, attributedString) {
  var string = attributedString.string;
  var lastScript = 'Unknown';
  var lastIndex = 0;
  var index = 0;
  var res = [];
  if (!string) return (0, _empty.default)();

  for (var i = 0; i < string.length; i += 1) {
    var char = string[i];
    var codePoint = char.codePointAt();

    var script = _unicodeProperties.default.getScript(codePoint);

    if (script !== lastScript && !ignoredScripts.includes(script)) {
      if (lastScript !== 'Unknown') {
        res.push({
          start: lastIndex,
          end: index,
          attributes: {
            script: lastScript
          }
        });
      }

      lastIndex = index;
      lastScript = script;
    }

    index += char.length;
  }

  if (lastIndex < string.length) {
    res.push({
      start: lastIndex,
      end: string.length,
      attributes: {
        script: lastScript
      }
    });
  }

  return {
    string: string,
    runs: res
  };
};

var _default = R.curryN(2, scriptItemizer);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/textDecoration/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/textDecoration/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _ascent = _interopRequireDefault(__webpack_require__(/*! ../../run/ascent */ "./node_modules/@react-pdf/textkit/lib/run/ascent.js"));

var _ascent2 = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/ascent */ "./node_modules/@react-pdf/textkit/lib/attributedString/ascent.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ../../run/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js"));

var _advanceWidth2 = _interopRequireDefault(__webpack_require__(/*! ../../attributedString/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js"));

/* eslint-disable no-param-reassign */
// The base font size used for calculating underline thickness.
var BASE_FONT_SIZE = 12;
/**
 * Computes the intersections between an underline and the glyphs in
 * a line fragment. Returns an array of DecorationLines omitting the
 * intersections.
 */
// const intersectWithGlyphs = (line, lineFragment) => {
//   // Find intersection ranges between underline and glyphs
//   let x = 0;
//   let y = lineFragment.ascent;
//   const ranges = [];
//   for (const run of lineFragment.runs) {
//     if (!run.attributes.underline) {
//       x += run.advanceWidth;
//       continue;
//     }
//     for (let i = 0; i < run.glyphs.length; i++) {
//       const position = run.positions[i];
//       if (x >= line.rect.x && x <= line.rect.maxX) {
//         const gx = x + position.xOffset;
//         const gy = y + position.yOffset;
//         // Standard fonts may not have a path to intersect with
//         if (run.glyphs[i].path) {
//           const path = run.glyphs[i].path.scale(run.scale, -run.scale).translate(gx, gy);
//           const range = findPathIntersections(path, line.rect);
//           if (range) {
//             ranges.push(range);
//           }
//         }
//       }
//       x += position.xAdvance;
//       y += position.yAdvance;
//     }
//   }
//   if (ranges.length === 0) {
//     // No intersections. Return the original line.
//     return [line];
//   }
//   const merged = Range.merge(ranges);
//   // Generate underline segments omitting the intersections,
//   // but only if the space warrents an underline.
//   const lines = [];
//   x = line.rect.x;
//   for (const { start, end } of merged) {
//     if (start - x > line.rect.height) {
//       lines.push(line.slice(x, start));
//     }
//     x = end;
//   }
//   if (line.rect.maxX - x > line.rect.height) {
//     lines.push(line.slice(x, line.rect.maxX));
//   }
//   return lines;
// };
// const findIntersectionPoint = (y, x1, y1, x2, y2, range) => {
//   if ((y1 < y && y2 > y) || (y1 > y && y2 < y)) {
//     const x = x1 + ((y - y1) * (x2 - x1)) / (y2 - y1);
//     range.extend(x);
//   }
// };

/**
 * Finds the intersections between a glyph path and an underline rectangle.
 * It models each contour of the path a straight line, and returns a range
 * containing the leftmost and rightmost intersection points, if any.
 */
// const findPathIntersections = (path, rect) => {
//   let sx = 0;
//   let sy = 0;
//   let cx = 0;
//   let cy = 0;
//   let px = 0;
//   let py = 0;
//   const range = new Range(Infinity, -Infinity);
//   const y1 = rect.y;
//   const y2 = rect.maxY;
//   const dialation = Math.ceil(rect.height);
//   for (const { command, args } of path.commands) {
//     switch (command) {
//       case 'moveTo':
//         sx = cx = args[0];
//         sy = cy = args[1];
//         continue;
//       case 'lineTo':
//         px = args[0];
//         py = args[1];
//         break;
//       case 'quadraticCurveTo':
//         px = args[2];
//         py = args[3];
//         break;
//       case 'bezierCurveTo':
//         px = args[4];
//         py = args[5];
//         break;
//       case 'closePath':
//         px = sx;
//         py = sy;
//         break;
//       default:
//         break;
//     }
//     findIntersectionPoint(y1, cx, cy, px, py, range);
//     findIntersectionPoint(y2, cx, cy, px, py, range);
//     if ((cy >= y1 && cy <= y2) || (cy <= y1 && cy >= y2)) {
//       range.extend(cx);
//     }
//     cx = px;
//     cy = py;
//   }
//   if (range.start < range.end) {
//     range.start -= dialation;
//     range.end += dialation;
//     return range;
//   }
//   return null;
// };

/**
 * A TextDecorationEngine is used by a Typesetter to generate
 * DecorationLines for a line fragment, including underlines
 * and strikes.
 */

var textDecoration = function textDecoration() {
  return function (lineFragment) {
    var x = R.propOr(0, 'overflowLeft', lineFragment);
    var overflowRight = R.propOr(0, 'overflowRight', lineFragment);
    var maxX = (0, _advanceWidth2.default)(lineFragment) - overflowRight;
    lineFragment.decorationLines = [];

    for (var i = 0; i < lineFragment.runs.length; i += 1) {
      var run = lineFragment.runs[i];
      var width = Math.min(maxX - x, (0, _advanceWidth.default)(run));
      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));

      if (run.attributes.underline) {
        var rect = {
          x: x,
          y: (0, _ascent2.default)(lineFragment) + thickness * 2,
          width: width,
          height: thickness
        };
        var line = {
          rect: rect,
          opacity: run.attributes.opacity,
          color: run.attributes.underlineColor || 'black',
          style: run.attributes.underlineStyle || 'solid'
        };
        lineFragment.decorationLines.push(line);
      }

      if (run.attributes.strike) {
        var y = (0, _ascent2.default)(lineFragment) - (0, _ascent.default)(run) / 3;
        var _rect = {
          x: x,
          y: y,
          width: width,
          height: thickness
        };
        var _line = {
          rect: _rect,
          opacity: run.attributes.opacity,
          color: run.attributes.strikeColor || 'black',
          style: run.attributes.strikeStyle || 'solid'
        };
        lineFragment.decorationLines.push(_line);
      }

      x += width;
    } // Adjust underline y positions, and intersect with glyph descenders.
    // for (const line of underlines) {
    //   lineFragment.decorationLines.push(...intersectWithGlyphs(line, lineFragment));
    // }


    return lineFragment;
  };
};

var _default = textDecoration;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _hyphen = _interopRequireDefault(__webpack_require__(/*! hyphen */ "./node_modules/hyphen/index.js"));

var _enUs = _interopRequireDefault(__webpack_require__(/*! hyphen/patterns/en-us */ "./node_modules/hyphen/patterns/en-us.js"));

var SOFT_HYPHEN = "\xAD";
var hyphenator = (0, _hyphen.default)(_enUs.default);
var splitHyphen = R.split(SOFT_HYPHEN);
var cache = {};
var getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));

var wordHyphenation = function wordHyphenation(options, word) {
  var cacheKey = "_" + word;
  if (R.isNil(word)) return [];
  if (cache[cacheKey]) return cache[cacheKey];
  cache[cacheKey] = getParts(word);
  return cache[cacheKey];
};

var _default = R.curryN(2, wordHyphenation);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/glyph/fromCodePoint.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/glyph/fromCodePoint.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get glyph for a given code point
 *
 * @param  {number}  codePoint
 * @param  {Object}  font
 * @return {Object}  glyph
 * */
var fromCodePoint = function fromCodePoint(value, font) {
  return font && value ? font.glyphForCodePoint(value) : null;
};

var _default = fromCodePoint;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/glyph/isWhiteSpace.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/glyph/isWhiteSpace.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var WHITE_SPACES_CODES = [32];
/**
 * Check if glyph is white space
 *
 * @param  {Object}  glyph
 * @return {Boolean}  is white space
 * */

var isWhiteSpace = R.compose(R.not, R.isEmpty, R.intersection(WHITE_SPACES_CODES), R.propOr([], 'codePoints'));
var _default = isWhiteSpace;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/glyph/slice.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/glyph/slice.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Slice glyph between codePoints range
 * Util for breaking ligatures
 *
 * @param  {number}  start code point index
 * @param  {number}  end code point index
 * @param  {Object}  font to generate new glyph
 * @param  {Object} glyph to be sliced
 * @return {Array} sliced glyph parts
 */
var slice = function slice(start, end, font, glyph) {
  if (!glyph) return [];
  if (start === end) return [];
  if (start === 0 && end === glyph.codePoints.length) return [glyph];
  var codePoints = R.slice(start, end, glyph.codePoints);
  var string = String.fromCodePoint.apply(String, codePoints);
  return font ? font.layout(string).glyphs : [glyph];
};

var _default = R.curryN(4, slice);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/indices/append.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/indices/append.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Append glyph indices with given length
 *
 * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]
 *
 * @param  {number}  length
 * @param  {Array}  glyph indices
 * @return {Array}  extended glyph indices
 */
var appendIndices = function appendIndices(length, indices) {
  return R.converge(R.concat, [R.identity, R.converge(R.repeat, [R.either(R.o(R.inc, R.last), // Value should be last plus 1
  R.always(0) // Or zero if inserting at beggining
  ), R.always(length)])])(indices);
};

var _default = R.curryN(2, appendIndices);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/indices/normalize.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/indices/normalize.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Returns new array starting with zero, and keeping same relation between consecutive values
 *
 * @param  {Array[number]}  list
 * @return {boolean} normalized array
 */
var normalize = function normalize(array) {
  return R.map(R.subtract(R.__, R.head(array)))(array);
};

var _default = normalize;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/indices/prepend.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/indices/prepend.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Prepend glyph indices with given length
 *
 * Ex. prepend(3, [0, 1, 2, 2]) => [0, 0, 0, 1, 2, 3, 3]
 *
 * @param  {number}  length
 * @param  {Array}  glyph indices
 * @return {Array}  extended glyph indices
 */
var prepend = function prepend(length, indices) {
  if (length === 0) return indices;
  return R.converge(R.concat, [R.converge(R.repeat, [R.always(0), R.always(length)]), R.map(R.inc)])(indices);
};

var _default = R.curryN(2, prepend);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/indices/resolve.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/indices/resolve.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;
var DUMMY_CODEPOINT = 123;
/**
 * Resolve string indices based on glyphs code points
 *
 * @param  {Array}  glyphs
 * @return {Array} glyph indices
 */

var resolve = function resolve(glyphs) {
  if (glyphs === void 0) {
    glyphs = [];
  }

  return glyphs.reduce(function (acc, glyph) {
    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];
    if (acc.length === 0) return codePoints.map(function () {
      return 0;
    });
    var last = acc[acc.length - 1];
    var next = codePoints.map(function () {
      return last + 1;
    });
    return [].concat(acc, next);
  }, []);
};

var _default = resolve;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/applyDefaultStyles.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/applyDefaultStyles.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Apply default style to run
 *
 * @param  {Object}  run
 * @return {Object} run with styles
 */
var applyRunStyles = R.evolve({
  attributes: function attributes(a) {
    return {
      align: a.align || 'left',
      alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),
      attachment: a.attachment || null,
      backgroundColor: a.backgroundColor || null,
      bidiLevel: a.bidiLevel || null,
      bullet: a.bullet || null,
      characterSpacing: a.characterSpacing || 0,
      color: a.color || 'black',
      features: a.features || [],
      fill: a.fill !== false,
      font: a.font || null,
      fontSize: a.fontSize || 12,
      hangingPunctuation: a.hangingPunctuation || false,
      hyphenationFactor: a.hyphenationFactor || 0,
      indent: a.indent || 0,
      justificationFactor: a.justificationFactor || 1,
      lineHeight: a.lineHeight || null,
      lineSpacing: a.lineSpacing || 0,
      link: a.link || null,
      marginLeft: a.marginLeft || a.margin || 0,
      marginRight: a.marginRight || a.margin || 0,
      opacity: a.opacity,
      paddingTop: a.paddingTop || a.padding || 0,
      paragraphSpacing: a.paragraphSpacing || 0,
      underline: a.underline || false,
      underlineColor: a.underlineColor || a.color || 'black',
      underlineStyle: a.underlineStyle || 'solid',
      script: a.script || null,
      shrinkFactor: a.shrinkFactor || 0,
      strike: a.strike || false,
      strikeColor: a.strikeColor || a.color || 'black',
      strikeStyle: a.strikeStyle || 'solid',
      stroke: a.stroke || false,
      wordSpacing: a.wordSpacing || 0,
      yOffset: a.yOffset || 0
    };
  }
});
/**
 * Apply default attributes for an attributed string
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Object} attributed string
 */

var applyDefaultStyles = function applyDefaultStyles() {
  return R.applySpec({
    string: R.propOr('', 'string'),
    runs: R.compose(R.map(applyRunStyles), R.defaultTo([]), R.prop('runs'))
  });
};

var _default = applyDefaultStyles;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/finalizeFragments.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/finalizeFragments.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _advanceWidth = _interopRequireDefault(__webpack_require__(/*! ../attributedString/advanceWidth */ "./node_modules/@react-pdf/textkit/lib/attributedString/advanceWidth.js"));

var _leadingOffset = _interopRequireDefault(__webpack_require__(/*! ../attributedString/leadingOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/leadingOffset.js"));

var _trailingOffset = _interopRequireDefault(__webpack_require__(/*! ../attributedString/trailingOffset */ "./node_modules/@react-pdf/textkit/lib/attributedString/trailingOffset.js"));

var _dropLast = _interopRequireDefault(__webpack_require__(/*! ../attributedString/dropLast */ "./node_modules/@react-pdf/textkit/lib/attributedString/dropLast.js"));

var ALIGNMENT_FACTORS = {
  center: 0.5,
  right: 1
};
/**
 * Remove new line char at the end of line if present
 *
 * @param  {Object}  line
 * @return {Object} line
 */

var removeNewLine = R.when(R.compose(R.equals('\n'), R.last, R.prop('string')), _dropLast.default);
var getOverflowLeft = R.converge(R.add, [R.propOr(0, 'overflowLeft'), _leadingOffset.default]);
var getOverflowRight = R.converge(R.add, [R.propOr(0, 'overflowRight'), _trailingOffset.default]);
/**
 * Ignore whitespace at the start and end of a line for alignment
 *
 * @param  {Object}  line
 * @return {Object} line
 */

var adjustOverflow = function adjustOverflow(line) {
  var overflowLeft = getOverflowLeft(line);
  var overflowRight = getOverflowRight(line);
  return R.compose(R.assoc('overflowLeft', overflowLeft), R.assoc('overflowRight', overflowRight), R.evolve({
    box: R.evolve({
      x: R.subtract(R.__, overflowLeft),
      width: R.add(overflowLeft + overflowRight)
    })
  }))(line);
};
/**
 * Performs line justification by calling appropiate engine
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {string}  text align
 * @param  {Object}  line
 * @return {Object} line
 */


var justifyLine = function justifyLine(engines, options, align) {
  return function (line) {
    var lineWidth = (0, _advanceWidth.default)(line);
    var alignFactor = ALIGNMENT_FACTORS[align] || 0;
    var remainingWidth = Math.max(0, line.box.width - lineWidth);
    var shouldJustify = align === 'justify' || lineWidth > line.box.width;
    return R.compose(R.when(R.always(shouldJustify), engines.justification(options)), R.evolve({
      box: R.evolve({
        x: R.add(remainingWidth * alignFactor)
      })
    }))(line);
  };
};
/**
 * Finalize line by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  line
 * @param  {number}  line index
 * @param  {Array}  total lines
 * @return {Object} line
 */


var finalizeBlock = function finalizeBlock(engines, options) {
  if (engines === void 0) {
    engines = {};
  }

  return function (line, i, lines) {
    var isLastFragment = i === lines.length - 1;
    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);
    var align = isLastFragment ? style.alignLastLine : style.align;
    return R.compose(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);
  };
};
/**
 * Finalize line block by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Array}  line blocks
 * @return {Array} line blocks
 */


var finalizeFragments = function finalizeFragments(engines, options, blocks) {
  var blockFinalizer = finalizeBlock(engines, options);
  return blocks.map(function (block) {
    return block.map(blockFinalizer);
  });
};

var _default = R.curryN(3, finalizeFragments);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/generateGlyphs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/generateGlyphs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ../run/scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var _resolve = _interopRequireDefault(__webpack_require__(/*! ../indices/resolve */ "./node_modules/@react-pdf/textkit/lib/indices/resolve.js"));

var getCharacterSpacing = R.pathOr(0, ['attributes', 'characterSpacing']);
/**
 * Scale run positions
 *
 * @param  {Object}  run
 * @param  {Array}  positions
 * @return {Array} scaled positions
 */

var scalePositions = function scalePositions(run, positions) {
  var multScale = R.multiply((0, _scale.default)(run));
  var characterSpacing = getCharacterSpacing(run);
  var scalePosition = R.evolve({
    xAdvance: R.o(R.add(characterSpacing), multScale),
    yAdvance: multScale,
    xOffset: multScale,
    yOffset: multScale
  });
  var subCharacterSpacing = R.evolve({
    xAdvance: R.subtract(R.__, characterSpacing)
  });
  return R.compose(R.adjust(-1, subCharacterSpacing), R.map(scalePosition))(positions);
};
/**
 * Create glyph run
 *
 * @param  {String}  string
 * @param  {Object}  run
 * @return {Object}  glyph run
 */


var layoutRun = function layoutRun(string) {
  return function (run) {
    var start = run.start,
        end = run.end,
        _run$attributes = run.attributes,
        attributes = _run$attributes === void 0 ? {} : _run$attributes;
    var font = attributes.font;
    if (!font) return (0, _extends2.default)({}, run, {
      glyphs: [],
      glyphIndices: [],
      positions: []
    });
    var runString = string.slice(start, end);
    var glyphRun = font.layout(runString);
    var positions = scalePositions(run, glyphRun.positions);
    var glyphIndices = (0, _resolve.default)(glyphRun.glyphs);
    return (0, _extends2.default)({}, run, {
      positions: positions,
      glyphIndices: glyphIndices,
      glyphs: glyphRun.glyphs
    });
  };
};
/**
 * Generate glyphs for single attributed string
 *
 * @param  {Object}  layout engines
 * @param  {Object}  layout options
 * @param  {Array}  attributed strings
 * @return {Array} attributed string with glyphs
 */


var generateGlyphs = function generateGlyphs() {
  return function (attributedString) {
    return R.evolve({
      runs: R.map(layoutRun(attributedString.string))
    })(attributedString);
  };
};

var _default = generateGlyphs;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _wrapWords = _interopRequireDefault(__webpack_require__(/*! ./wrapWords */ "./node_modules/@react-pdf/textkit/lib/layout/wrapWords.js"));

var _typesetter = _interopRequireDefault(__webpack_require__(/*! ./typesetter */ "./node_modules/@react-pdf/textkit/lib/layout/typesetter.js"));

var _generateGlyphs = _interopRequireDefault(__webpack_require__(/*! ./generateGlyphs */ "./node_modules/@react-pdf/textkit/lib/layout/generateGlyphs.js"));

var _resolveYOffset = _interopRequireDefault(__webpack_require__(/*! ./resolveYOffset */ "./node_modules/@react-pdf/textkit/lib/layout/resolveYOffset.js"));

var _preprocessRuns = _interopRequireDefault(__webpack_require__(/*! ./preprocessRuns */ "./node_modules/@react-pdf/textkit/lib/layout/preprocessRuns.js"));

var _splitParagraphs = _interopRequireDefault(__webpack_require__(/*! ./splitParagraphs */ "./node_modules/@react-pdf/textkit/lib/layout/splitParagraphs.js"));

var _finalizeFragments = _interopRequireDefault(__webpack_require__(/*! ./finalizeFragments */ "./node_modules/@react-pdf/textkit/lib/layout/finalizeFragments.js"));

var _resolveAttachments = _interopRequireDefault(__webpack_require__(/*! ./resolveAttachments */ "./node_modules/@react-pdf/textkit/lib/layout/resolveAttachments.js"));

var _applyDefaultStyles = _interopRequireDefault(__webpack_require__(/*! ./applyDefaultStyles */ "./node_modules/@react-pdf/textkit/lib/layout/applyDefaultStyles.js"));

/**
 * A LayoutEngine is the main object that performs text layout.
 * It accepts an AttributedString and a Container object
 * to layout text into, and uses several helper objects to perform
 * various layout tasks. These objects can be overridden to customize
 * layout behavior.
 *
 * @param  {Object}  engines
 * @param  {Object}  attributed string
 * @param  {Object}  container rect
 * @param  {Object}  layout options
 * @return {Array} paragraph blocks
 */
var layoutEngine = function layoutEngine(engines, attributedString, container, options) {
  if (options === void 0) {
    options = {};
  }

  var processParagraphs = R.compose((0, _resolveYOffset.default)(engines, options), (0, _resolveAttachments.default)(engines, options), (0, _generateGlyphs.default)(engines, options), (0, _wrapWords.default)(engines, options));
  return R.compose((0, _finalizeFragments.default)(engines, options), (0, _typesetter.default)(engines, options, container), R.map(processParagraphs), (0, _splitParagraphs.default)(engines, options), (0, _preprocessRuns.default)(engines, options), (0, _applyDefaultStyles.default)(engines, options))(attributedString);
};

var _default = R.curryN(3, layoutEngine);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/layoutParagraph.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/layoutParagraph.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _omit = _interopRequireDefault(__webpack_require__(/*! ../run/omit */ "./node_modules/@react-pdf/textkit/lib/run/omit.js"));

var _height = _interopRequireDefault(__webpack_require__(/*! ../attributedString/height */ "./node_modules/@react-pdf/textkit/lib/attributedString/height.js"));

var ATTACHMENT_CODE = "\uFFFC"; // 65532

/**
 * Remove attachment attribute if no char present
 *
 * @param  {Object} attributed string
 * @return {Object} attributed string
 */

var purgeAttachments = R.when(R.compose(R.not, R.includes(ATTACHMENT_CODE), R.prop('string')), R.evolve({
  runs: R.map((0, _omit.default)('attachment'))
}));
/**
 * Layout paragraphs inside rectangle
 *
 * @param  {Object} rect
 * @param  {Array} attributed strings
 * @return {Object} layout blocks
 */

var layoutLines = function layoutLines(rect, lines, indent) {
  var currentY = rect.y;
  return R.addIndex(R.map)(R.compose(purgeAttachments, function (line, i) {
    var lineIndent = i === 0 ? indent : 0;
    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);
    var height = Math.max((0, _height.default)(line), style.lineHeight);
    var box = {
      x: rect.x + lineIndent,
      y: currentY,
      width: rect.width - lineIndent,
      height: height
    };
    currentY += height;
    return R.compose(R.assoc('box', box), R.omit(['syllables']))(line);
  }))(lines);
};
/**
 * Performs line breaking and layout
 *
 * @param  {Object} engines
 * @param  {Object}  layout options
 * @param  {Object} rect
 * @param  {Object} attributed string
 * @return {Object} layout block
 */


var layoutParagraph = function layoutParagraph(engines, options) {
  return function (rect, paragraph) {
    var indent = R.pathOr(0, ['runs', 0, 'attributes', 'indent'], paragraph);
    var lines = engines.linebreaker(options)(paragraph, [rect.width - indent, rect.width]);
    var lineFragments = layoutLines(rect, lines, indent);
    return lineFragments;
  };
};

var _default = layoutParagraph;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/preprocessRuns.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/preprocessRuns.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _omit = _interopRequireDefault(__webpack_require__(/*! ../run/omit */ "./node_modules/@react-pdf/textkit/lib/run/omit.js"));

var _flatten = _interopRequireDefault(__webpack_require__(/*! ../run/flatten */ "./node_modules/@react-pdf/textkit/lib/run/flatten.js"));

var _empty = _interopRequireDefault(__webpack_require__(/*! ../attributedString/empty */ "./node_modules/@react-pdf/textkit/lib/attributedString/empty.js"));

var omitFont = R.evolve({
  runs: R.map((0, _omit.default)('font'))
});
/**
 * Performs font substitution and script itemization on attributed string
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Object} processed attributed string
 */

var preprocessRuns = function preprocessRuns(engines, options) {
  return R.ifElse(R.isNil, _empty.default, R.applySpec({
    string: R.prop('string'),
    runs: R.compose(_flatten.default, R.flatten, R.pluck('runs'), R.juxt([engines.fontSubstitution(options), // font substitution
    engines.scriptItemizer(options), // script itemization
    omitFont]))
  }));
};

var _default = preprocessRuns;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/resolveAttachments.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/resolveAttachments.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var ATTACHMENT_CODE = 0xfffc; // 65532

var mapIndexed = R.addIndex(R.map);
var getGlyphs = R.propOr([], 'glyphs');
var getAttachment = R.pathOr({}, ['attributes', 'attachment']);
var isReplaceGlyph = R.o(R.includes(ATTACHMENT_CODE), R.propOr([], 'codePoints'));
/**
 * Resolve attachments of run
 *
 * @param  {Object}  run
 * @return {Object} run
 */

var resolveRunAttachments = function resolveRunAttachments(run) {
  var glyphs = getGlyphs(run);
  var attachment = getAttachment(run);
  var attachmentWidth = R.always(attachment.width);
  return R.evolve({
    positions: mapIndexed(function (position, i) {
      var glyph = glyphs[i];

      if (attachment && attachment.width && isReplaceGlyph(glyph)) {
        return R.evolve({
          xAdvance: attachmentWidth
        }, position);
      }

      return R.clone(position);
    })
  })(run);
};
/**
 * Resolve attachments for multiple paragraphs
 *
 * @param  {Object} layout engines
 * @param  {Object}  layout options
 * @param  {Array}  attributed strings (paragraphs)
 * @return {Array} attributed strings (paragraphs)
 */


var resolveAttachments = function resolveAttachments() {
  return R.evolve({
    runs: R.map(resolveRunAttachments)
  });
};

var _default = resolveAttachments;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/resolveYOffset.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/resolveYOffset.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var getYOffset = R.pathOr(0, ['attributes', 'yOffset']);
var getUnitsPerEm = R.pathOr(0, ['attributes', 'font', 'unitsPerEm']);
/**
 * Resolves yOffset for run
 *
 * @param  {Object}  run
 * @return {Object} run
 */

var resolveRunYOffset = function resolveRunYOffset(run) {
  var unitsPerEm = getUnitsPerEm(run);
  var yOffset = getYOffset(run);
  var mult = yOffset * unitsPerEm;
  return R.evolve({
    positions: R.map(R.assoc('yOffset', mult))
  })(run);
};
/**
 * Resolves yOffset for multiple paragraphs
 *
 * @param  {Object} layout engines
 * @param  {Object}  layout options
 * @param  {Array}  attributed strings (paragraphs)
 * @return {Array} attributed strings (paragraphs)
 */


var resolveYOffset = function resolveYOffset() {
  return R.evolve({
    runs: R.map(resolveRunYOffset)
  });
};

var _default = resolveYOffset;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/splitParagraphs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/splitParagraphs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _length = _interopRequireDefault(__webpack_require__(/*! ../attributedString/length */ "./node_modules/@react-pdf/textkit/lib/attributedString/length.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ../attributedString/slice */ "./node_modules/@react-pdf/textkit/lib/attributedString/slice.js"));

/**
 * Breaks attributed string into paragraphs
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Array} attributed string array
 */
var splitParagraphs = function splitParagraphs() {
  return function (attributedString) {
    var res = [];
    var start = 0;
    var breakPoint = attributedString.string.indexOf('\n') + 1;

    while (breakPoint > 0) {
      res.push((0, _slice.default)(start, breakPoint, attributedString));
      start = breakPoint;
      breakPoint = attributedString.string.indexOf('\n', breakPoint) + 1;
    }

    if (start === 0) {
      res.push(attributedString);
    } else if (start < attributedString.string.length) {
      res.push((0, _slice.default)(start, (0, _length.default)(attributedString), attributedString));
    }

    return res;
  };
};

var _default = splitParagraphs;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/typesetter.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/typesetter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ../rect/copy */ "./node_modules/@react-pdf/textkit/lib/rect/copy.js"));

var _crop = _interopRequireDefault(__webpack_require__(/*! ../rect/crop */ "./node_modules/@react-pdf/textkit/lib/rect/crop.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ../block/slice */ "./node_modules/@react-pdf/textkit/lib/block/slice.js"));

var _height = _interopRequireDefault(__webpack_require__(/*! ../block/height */ "./node_modules/@react-pdf/textkit/lib/block/height.js"));

var _truncate = _interopRequireDefault(__webpack_require__(/*! ../block/truncate */ "./node_modules/@react-pdf/textkit/lib/block/truncate.js"));

var _layoutParagraph = _interopRequireDefault(__webpack_require__(/*! ./layoutParagraph */ "./node_modules/@react-pdf/textkit/lib/layout/layoutParagraph.js"));

var _sliceAtHeight = _interopRequireDefault(__webpack_require__(/*! ../block/sliceAtHeight */ "./node_modules/@react-pdf/textkit/lib/block/sliceAtHeight.js"));

/**
 * Layout paragraphs inside container until it does not
 * fit anymore, performing line wrapping in the process.
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  container rect
 * @param  {Object}  attributed strings (paragraphs)
 * @return {Array} paragraph blocks
 */
var typesetter = function typesetter(engines, options, container, attributedStrings) {
  var blocks = [];
  var paragraphs = [].concat(attributedStrings);
  var layoutBlock = (0, _layoutParagraph.default)(engines, options);
  var maxLines = R.propOr(Infinity, 'maxLines', container);
  var truncateEllipsis = container.truncateMode === 'ellipsis';
  var linesCount = maxLines;
  var paragraphRect = (0, _copy.default)(container);
  var nextParagraph = paragraphs.shift();

  while (linesCount > 0 && nextParagraph) {
    var block = layoutBlock(paragraphRect, nextParagraph);
    var slicedBlock = (0, _slice.default)(linesCount, block);
    var linesHeight = (0, _height.default)(slicedBlock);
    var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;
    linesCount -= slicedBlock.length;

    if (paragraphRect.height >= linesHeight) {
      blocks.push(R.when(R.always(shouldTruncate), _truncate.default)(slicedBlock));
      paragraphRect = (0, _crop.default)(linesHeight, paragraphRect);
      nextParagraph = paragraphs.shift();
    } else {
      blocks.push(R.compose(_truncate.default, (0, _sliceAtHeight.default)(paragraphRect.height))(slicedBlock));
      break;
    }
  }

  return blocks;
};

var _default = R.curryN(4, typesetter);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/layout/wrapWords.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/layout/wrapWords.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/extends.js"));

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _fromFragments = _interopRequireDefault(__webpack_require__(/*! ../attributedString/fromFragments */ "./node_modules/@react-pdf/textkit/lib/attributedString/fromFragments.js"));

/**
 * Default word hyphenation engine used when no one provided.
 * Does not perform word hyphenation at all
 *
 * @param  {String} word
 * @return {Array} same word
 */
var defaultHyphenationEngine = function defaultHyphenationEngine(word) {
  return [word];
};
/**
 * Wrap words of attribute string
 *
 * @param  {Object} layout engines
 * @param  {Object}  layout options
 * @param  {Object}  attributed string
 * @return {Object} attributed string including syllables
 */


var wrapWords = function wrapWords(engines, options, attributedString) {
  if (engines === void 0) {
    engines = {};
  }

  if (options === void 0) {
    options = {};
  }

  var syllables = [];
  var fragments = [];
  var hyphenateWord = options.hyphenationCallback || engines.wordHyphenation && engines.wordHyphenation(options) || defaultHyphenationEngine;

  for (var i = 0; i < attributedString.runs.length; i += 1) {
    var string = '';
    var run = attributedString.runs[i];
    var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);

    for (var j = 0; j < words.length; j += 1) {
      var word = words[j];
      var parts = hyphenateWord(word);
      syllables.push.apply(syllables, parts);
      string += parts.join('');
    }

    fragments.push({
      string: string,
      attributes: run.attributes
    });
  }

  return (0, _extends2.default)({}, (0, _fromFragments.default)(fragments), {
    syllables: syllables
  });
};

var _default = R.curryN(3, wrapWords);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/rect/copy.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/rect/copy.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Clone rect
 *
 * @param  {Object}  rect
 * @return {Object} cloned rect
 */
var copy = R.clone;
var _default = copy;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/rect/crop.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/rect/crop.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Crop upper section of rect
 *
 * @param  {Object}  rect
 * @return {Object} cropped rect
 */
var crop = function crop(height, rect) {
  return R.evolve({
    y: R.add(height),
    height: R.subtract(R.__, height)
  })(rect);
};

var _default = R.curryN(2, crop);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/add.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/add.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Add scalar to run
 *
 * @param  {number}  scalar
 * @param  {Object}  run
 * @return {Object} added run
 */
var add = function add(n, run) {
  return R.evolve({
    start: R.add(n),
    end: R.add(n)
  })(run);
};

var _default = R.curryN(2, add);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/advanceWidth.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Return run advance width
 *
 * @param  {Object}  run
 * @return {number} advance width
 */
var advanceWidth = R.compose(R.reduce(R.useWith(R.add, [R.identity, R.propOr(0, 'xAdvance')]), 0), R.propOr([], 'positions'));
var _default = advanceWidth;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/advanceWidthBetween.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/advanceWidthBetween.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _glyphIndexAt = _interopRequireDefault(__webpack_require__(/*! ./glyphIndexAt */ "./node_modules/@react-pdf/textkit/lib/run/glyphIndexAt.js"));

/**
 * Advance width between two string indices
 *
 * @param  {number}  start glyph index
 * @param  {number}  end glyph index
 * @param  {Object}  run
 * @return {Object} advanced width run
 */
var advanceWidthBetween = function advanceWidthBetween(start, end, run) {
  var runStart = R.propOr(0, 'start', run);
  var glyphStartIndex = Math.max(0, (0, _glyphIndexAt.default)(start - runStart, run));
  var glyphEndIndex = Math.max(0, (0, _glyphIndexAt.default)(end - runStart, run));
  return R.compose(R.reduce(R.useWith(R.add, [R.identity, R.propOr(0, 'xAdvance')]), 0), R.slice(glyphStartIndex, glyphEndIndex), R.propOr([], 'positions'))(run);
};

var _default = R.curryN(3, advanceWidthBetween);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/append.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/append.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ./copy */ "./node_modules/@react-pdf/textkit/lib/run/copy.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var _getFont = _interopRequireDefault(__webpack_require__(/*! ./getFont */ "./node_modules/@react-pdf/textkit/lib/run/getFont.js"));

var _isNumber = _interopRequireDefault(__webpack_require__(/*! ../utils/isNumber */ "./node_modules/@react-pdf/textkit/lib/utils/isNumber.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ../indices/append */ "./node_modules/@react-pdf/textkit/lib/indices/append.js"));

var _fromCodePoint = _interopRequireDefault(__webpack_require__(/*! ../glyph/fromCodePoint */ "./node_modules/@react-pdf/textkit/lib/glyph/fromCodePoint.js"));

/**
 * Append glyph to run
 *
 * @param  {Object}  glyph
 * @param  {Object}  run
 * @return {Object} run with glyph
 */
var appendGlyph = function appendGlyph(glyph, run) {
  var runScale = (0, _scale.default)(run);
  var glyphLength = R.length(glyph.codePoints);
  return R.evolve({
    end: R.add(glyphLength),
    glyphs: R.append(glyph),
    glyphIndices: (0, _append.default)(glyphLength),
    positions: R.append({
      xAdvance: glyph.advanceWidth * runScale
    })
  })(run);
};
/**
 * Append glyph or code point to run
 *
 * @param  {Object | number}  glyph | codePoint
 * @param  {Object}  run
 * @return {Object} run with glyph
 */


var append = function append(value, run) {
  if (!value) return (0, _copy.default)(run);
  var font = (0, _getFont.default)(run);
  var glyph = (0, _isNumber.default)(value) ? (0, _fromCodePoint.default)(value, font) : value;
  return appendGlyph(glyph, run);
};

var _default = R.curryN(2, append);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/ascent.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/ascent.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var getFontAscent = R.ifElse(R.has('attributes'), R.pathOr(0, ['attributes', 'font', 'ascent']), R.always(0));
/**
 * Get run ascent
 *
 * @param  {Object}  run
 * @return {boolean} ascent
 */

var ascent = R.converge(R.max, [R.pathOr(0, ['attributes', 'attachment', 'height']), R.converge(R.multiply, [_scale.default, getFontAscent])]);
var _default = ascent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/concat.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/concat.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _length = _interopRequireDefault(__webpack_require__(/*! ./length */ "./node_modules/@react-pdf/textkit/lib/run/length.js"));

var _normalize = _interopRequireDefault(__webpack_require__(/*! ../indices/normalize */ "./node_modules/@react-pdf/textkit/lib/indices/normalize.js"));

var reverseMerge = R.flip(R.merge);
var reverseConcat = R.flip(R.concat);
/**
 * Concats two runs into one
 *
 * @param  {Object}  first run
 * @param  {Object}  second run
 * @return {Object}  concatenated run
 */

var concat = function concat(runA, runB) {
  return R.evolve({
    end: R.add((0, _length.default)(runB)),
    glyphs: reverseConcat(R.prop('glyphs', runB)),
    positions: reverseConcat(R.prop('positions', runB)),
    attributes: reverseMerge(R.prop('attributes', runB)),
    glyphIndices: R.compose(_normalize.default, reverseConcat(R.map(R.compose(R.inc, R.add(R.last(R.propOr([], 'glyphIndices', runA)) || 0)), R.propOr([], 'glyphIndices', runB))))
  })(runA);
};

var _default = R.curryN(2, concat);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/copy.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/copy.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Deep clone run
 *
 * @param  {Object}  run
 * @return {Object} cloned run
 */
var copy = R.evolve({
  glyphs: R.map(R.identity),
  positions: R.clone,
  glyphIndices: R.clone,
  attributes: R.evolve({
    font: R.identity
  })
});
var _default = copy;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/descent.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/descent.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var getFontDescent = R.ifElse(R.has('attributes'), R.pathOr(0, ['attributes', 'font', 'descent']), R.always(0));
/**
 * Get run descent
 *
 * @param  {Object}  run
 * @return {number} descent
 */

var descent = R.converge(R.multiply, [_scale.default, getFontDescent]);
var _default = descent;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/dropLast.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/dropLast.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var _slice = _interopRequireDefault(__webpack_require__(/*! ./slice */ "./node_modules/@react-pdf/textkit/lib/run/slice.js"));

/**
 * Drop last char of run
 *
 * @param  {Object}  run
 * @return {boolean} run without last char
 */
var dropLast = function dropLast(run) {
  return (0, _slice.default)(0, run.end - run.start - 1, run);
};

var _default = dropLast;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/empty.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/empty.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Returns empty run
 *
 * @return {Object} empty run
 */
var empty = R.always({
  start: 0,
  end: 0,
  glyphIndices: [],
  glyphs: [],
  positions: [],
  attributes: {}
});
var _default = empty;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/filter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _runIndexAt = _interopRequireDefault(__webpack_require__(/*! ./runIndexAt */ "./node_modules/@react-pdf/textkit/lib/run/runIndexAt.js"));

/**
 * Filter runs contained between start and end
 *
 * @param  {number}  start
 * @param  {number}  end
 * @param  {Array}  runs
 * @return {boolean} filtered runs
 */
var filter = function filter(start, end, runs) {
  var startIndex = (0, _runIndexAt.default)(start, runs);
  var endIndex = R.max((0, _runIndexAt.default)(end - 1, runs), startIndex);
  return R.slice(startIndex, endIndex + 1, runs);
};

var _default = R.curryN(3, filter);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/flatten.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/flatten.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _sort = _interopRequireDefault(__webpack_require__(/*! ./sort */ "./node_modules/@react-pdf/textkit/lib/run/sort.js"));

var _isEmpty = _interopRequireDefault(__webpack_require__(/*! ./isEmpty */ "./node_modules/@react-pdf/textkit/lib/run/isEmpty.js"));

var sortPoints = function sortPoints(a, b) {
  return a[1] - b[1] || a[3] - b[3];
};

var mergeAttributes = function mergeAttributes(key, left, right) {
  return key === 'attributes' ? R.merge(left, right) : right;
};

var generatePoints = R.o(R.sort(sortPoints), R.addIndex(R.chain)(function (run, i) {
  return [['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]];
}));
var flattenEmptyRuns = R.compose(R.map(R.reduce(R.mergeDeepWithKey(mergeAttributes), {})), R.groupWith(R.eqProps('start')));

var flattenRegularRuns = function flattenRegularRuns(runs) {
  var res = [];
  var points = generatePoints(runs);
  var start = -1;
  var attrs = {};
  var stack = [];

  for (var i = 0; i < points.length; i += 1) {
    var _points$i = points[i],
        type = _points$i[0],
        offset = _points$i[1],
        attributes = _points$i[2];

    if (start !== -1 && start < offset) {
      res.push({
        start: start,
        end: offset,
        attributes: attrs
      });
    }

    if (type === 'start') {
      stack.push(attributes);
      attrs = R.merge(attrs, attributes);
    } else {
      attrs = {};

      for (var j = 0; j < stack.length; j += 1) {
        if (stack[j] === attributes) {
          // eslint-disable-next-line no-plusplus
          stack.splice(j--, 1);
        } else {
          attrs = R.merge(attrs, stack[j]);
        }
      }
    }

    start = offset;
  }

  return res;
};
/**
 * Flatten many runs
 *
 * @param  {Array}  runs
 * @return {Array} flatten runs
 */


var flatten = function flatten(runs) {
  if (runs === void 0) {
    runs = [];
  }

  return R.compose(_sort.default, R.apply(R.useWith(R.concat, [flattenEmptyRuns, flattenRegularRuns])), R.partition(_isEmpty.default))(runs);
};

var _default = flatten;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/getFont.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/getFont.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get run font
 *
 * @param  {Object}  run
 * @return {Object} font
 */
var getFont = R.pathOr(null, ['attributes', 'font']);
var _default = getFont;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/glyphIndexAt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/glyphIndexAt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Return glyph index at string index, if glyph indices present.
 * Otherwise return string index
 *
 * @param  {number}  string index
 * @param  {Object}  run
 * @return {number}  glyph index
 */
var glyphIndexAt = function glyphIndexAt(index, run) {
  return R.pathOr(index, ['glyphIndices', index])(run);
};

var _default = R.curryN(2, glyphIndexAt);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/height.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/height.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _ascent = _interopRequireDefault(__webpack_require__(/*! ./ascent */ "./node_modules/@react-pdf/textkit/lib/run/ascent.js"));

var _descent = _interopRequireDefault(__webpack_require__(/*! ./descent */ "./node_modules/@react-pdf/textkit/lib/run/descent.js"));

var _lineGap = _interopRequireDefault(__webpack_require__(/*! ./lineGap */ "./node_modules/@react-pdf/textkit/lib/run/lineGap.js"));

/**
 * Get run height
 *
 * @param  {Object}  run
 * @return {number} height
 */
var height = R.either(R.path(['attributes', 'lineHeight']), R.compose(R.sum, R.juxt([_ascent.default, R.o(R.negate, _descent.default), _lineGap.default])));
var _default = height;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/indexAtOffset.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/indexAtOffset.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get string index at offset
 *
 * @param  {Object}  run
 * @param  {number}  offset
 * @return {number} string index at offset N
 */
var indexAtOffset = function indexAtOffset(offset, run) {
  var counter = 0;
  var index = 0;
  var glyphs = R.propOr([], 'glyphs', run);
  var positions = R.propOr([], 'positions', run);

  for (var i = 0; i < positions.length; i += 1) {
    var xAdvance = positions[i].xAdvance;
    if (counter + xAdvance > offset) return index;
    counter += xAdvance;
    index += R.pathOr(0, [i, 'codePoints', 'length'], glyphs);
  }

  return index;
};

var _default = R.curryN(2, indexAtOffset);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/insert.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/insert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ./copy */ "./node_modules/@react-pdf/textkit/lib/run/copy.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ./slice */ "./node_modules/@react-pdf/textkit/lib/run/slice.js"));

var _concat = _interopRequireDefault(__webpack_require__(/*! ./concat */ "./node_modules/@react-pdf/textkit/lib/run/concat.js"));

var _append = _interopRequireDefault(__webpack_require__(/*! ./append */ "./node_modules/@react-pdf/textkit/lib/run/append.js"));

var _getFont = _interopRequireDefault(__webpack_require__(/*! ./getFont */ "./node_modules/@react-pdf/textkit/lib/run/getFont.js"));

var _isNumber = _interopRequireDefault(__webpack_require__(/*! ../utils/isNumber */ "./node_modules/@react-pdf/textkit/lib/utils/isNumber.js"));

var _fromCodePoint = _interopRequireDefault(__webpack_require__(/*! ../glyph/fromCodePoint */ "./node_modules/@react-pdf/textkit/lib/glyph/fromCodePoint.js"));

/**
 * Insert glyph to run in the given index
 *
 * @param  {number}  string index
 * @param  {Object}  glyph
 * @param  {Object}  run
 * @return {Object}  run with glyph
 */
var insertGlyph = function insertGlyph(index, glyph, run) {
  if (!glyph) return (0, _copy.default)(run); // Split resolves ligature splitting in case new glyph breaks some

  var leadingRun = (0, _slice.default)(0, index, run);
  var trailingRun = (0, _slice.default)(index, Infinity, run);
  return (0, _concat.default)((0, _append.default)(glyph, leadingRun), trailingRun);
};
/**
 * Insert either glyph or code point to run in the given index
 *
 * @param  {number}  string index
 * @param  {Object | number}  glyph | codePoint
 * @param  {Object}  run
 * @return {Object}  run with glyph
 */


var insert = function insert(index, value, run) {
  var font = (0, _getFont.default)(run);
  var glyph = (0, _isNumber.default)(value) ? (0, _fromCodePoint.default)(value, font) : value;
  return insertGlyph(index, glyph, run);
};

var _default = R.curryN(3, insert);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/isEmpty.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/isEmpty.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Is run empty (start === end)
 *
 * @param  {Object}  run
 * @return {Object} is run empty
 */
var isEmpty = R.converge(R.equals, [R.prop('start'), R.prop('end')]);
var _default = isEmpty;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/leadingOffset.js":
/*!******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/leadingOffset.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _isWhiteSpace = _interopRequireDefault(__webpack_require__(/*! ../glyph/isWhiteSpace */ "./node_modules/@react-pdf/textkit/lib/glyph/isWhiteSpace.js"));

/**
 * Get white space leading positions
 *
 * @param  {Object}  run
 * @return {Array} white space leading positions
 */
var leadingPositions = R.converge(R.slice(0), [R.compose(R.length, R.takeWhile(_isWhiteSpace.default), R.propOr([], 'glyphs')), R.propOr([], 'positions')]);
/**
 * Get run leading white space offset
 *
 * @param  {Object}  run
 * @return {number} leading white space offset
 */

var leadingOffset = R.compose(R.ifElse(R.isEmpty, R.always(0), R.compose(R.sum, R.map(R.propOr(0, 'xAdvance')))), leadingPositions);
var _default = leadingOffset;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/length.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/length.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get run length
 *
 * @param  {Object}  run
 * @return {number} length
 */
var length = R.converge(R.subtract, [R.prop('end'), R.prop('start')]);
var _default = length;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/lineGap.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/lineGap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

/**
 * Get run lineGap
 *
 * @param  {Object}  run
 * @return {number} lineGap
 */
var lineGap = R.converge(R.multiply, [_scale.default, R.pathOr(0, ['attributes', 'font', 'lineGap'])]);
var _default = lineGap;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/offset.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/offset.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Get ligature offset by index
 *
 * Ex. ffi ligature
 *
 *   glyphs:         l  o  f  f  i  m
 *   glyphIndices:   0  1  2  2  2  3
 *   offset:         0  0  0  1  2  0
 *
 * @param  {number}  index
 * @param  {Object}  run
 * @return {number} ligature offset
 */
var offset = function offset(index, run) {
  var value = R.pathOr(null, ['glyphIndices', index], run);
  return R.compose(R.length, R.dropWhile(R.gt(value)), R.slice(0, index), R.propOr([], 'glyphIndices'))(run);
};

var _default = R.curryN(2, offset);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/omit.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/omit.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Omit attribute from run
 *
 * @param  {Object}  run
 * @return {Object} run without ommited attribute
 */
var omit = function omit(value, run) {
  return R.evolve({
    attributes: R.dissoc(value)
  })(run);
};

var _default = R.curryN(2, omit);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/prepend.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/prepend.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _copy = _interopRequireDefault(__webpack_require__(/*! ./copy */ "./node_modules/@react-pdf/textkit/lib/run/copy.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var _getFont = _interopRequireDefault(__webpack_require__(/*! ./getFont */ "./node_modules/@react-pdf/textkit/lib/run/getFont.js"));

var _isNumber = _interopRequireDefault(__webpack_require__(/*! ../utils/isNumber */ "./node_modules/@react-pdf/textkit/lib/utils/isNumber.js"));

var _prepend = _interopRequireDefault(__webpack_require__(/*! ../indices/prepend */ "./node_modules/@react-pdf/textkit/lib/indices/prepend.js"));

var _fromCodePoint = _interopRequireDefault(__webpack_require__(/*! ../glyph/fromCodePoint */ "./node_modules/@react-pdf/textkit/lib/glyph/fromCodePoint.js"));

/**
 * Prepend glyph to run
 *
 * @param  {Object}  glyph
 * @param  {Object}  run
 * @return {Object} run with glyph
 */
var prependGlyph = function prependGlyph(glyph, run) {
  var runScale = (0, _scale.default)(run);
  var glyphLength = R.length(glyph.codePoints);
  return R.evolve({
    end: R.add(glyphLength),
    glyphIndices: (0, _prepend.default)(glyphLength),
    glyphs: R.prepend(glyph),
    positions: R.prepend({
      xAdvance: glyph.advanceWidth * runScale
    })
  })(run);
};
/**
 * Prepend glyph or code point on run
 *
 * @param  {Object | number}  glyph | codePoint
 * @param  {Object}  run
 * @return {Object} run with glyph
 */


var prepend = function prepend(value, run) {
  if (!value) return (0, _copy.default)(run);
  var font = (0, _getFont.default)(run);
  var glyph = (0, _isNumber.default)(value) ? (0, _fromCodePoint.default)(value, font) : value;
  return prependGlyph(glyph, run);
};

var _default = R.curryN(2, prepend);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/runIndexAt.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/runIndexAt.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _isBetween = _interopRequireDefault(__webpack_require__(/*! ../utils/isBetween */ "./node_modules/@react-pdf/textkit/lib/utils/isBetween.js"));

/**
 * Get run index that contains passed index
 *
 * @param  {number}  char index
 * @param  {Array}  runs array
 * @return {Array} run index
 */
var runIndexAt = function runIndexAt(n, runs) {
  return R.findIndex((0, _isBetween.default)(R.prop('start'), R.prop('end'), n))(runs);
};

var _default = R.curryN(2, runIndexAt);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/scale.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/scale.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var unitsPerEm = ['font', 'unitsPerEm'];
/**
 * Calculate run scale
 *
 * @param  {Object}  run
 * @return {number} scale
 */

var calculateScale = R.compose(R.ifElse(R.compose(R.not, R.isNil, R.path(unitsPerEm)), R.converge(R.divide, [R.propOr(12, 'fontSize'), R.path(unitsPerEm)]), R.always(0)), R.propOr({}, 'attributes'));
/**
 * Get run scale
 *
 * @param  {Object}  run
 * @return {number} scale
 */

var scale = R.either(R.path(['attributes', 'scale']), calculateScale);
var _default = scale;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/slice.js":
/*!**********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/slice.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _scale = _interopRequireDefault(__webpack_require__(/*! ./scale */ "./node_modules/@react-pdf/textkit/lib/run/scale.js"));

var _offset = _interopRequireDefault(__webpack_require__(/*! ./offset */ "./node_modules/@react-pdf/textkit/lib/run/offset.js"));

var _getFont = _interopRequireDefault(__webpack_require__(/*! ./getFont */ "./node_modules/@react-pdf/textkit/lib/run/getFont.js"));

var _slice = _interopRequireDefault(__webpack_require__(/*! ../glyph/slice */ "./node_modules/@react-pdf/textkit/lib/glyph/slice.js"));

var _glyphIndexAt = _interopRequireDefault(__webpack_require__(/*! ./glyphIndexAt */ "./node_modules/@react-pdf/textkit/lib/run/glyphIndexAt.js"));

var _normalize = _interopRequireDefault(__webpack_require__(/*! ../indices/normalize */ "./node_modules/@react-pdf/textkit/lib/indices/normalize.js"));

/**
 * Slice run between glyph indices range
 *
 * @param  {number}  start glyph index
 * @param  {number}  end glyph index
 * @param  {Object}  run
 * @return {Object} sliced run
 */
var slice = function slice(start, end, run) {
  var runScale = (0, _scale.default)(run);
  var font = (0, _getFont.default)(run); // Get glyph start and end indices

  var glyphStartIndex = (0, _glyphIndexAt.default)(start, run);
  var glyphEndIndex = (0, _glyphIndexAt.default)(end, run); // Get start and end glyph

  var startGlyph = R.path(['glyphs', glyphStartIndex], run);
  var endGlyph = R.path(['glyphs', glyphEndIndex], run); // Get start ligature chunks (if any)

  var startOffset = (0, _offset.default)(start, run);
  var startGlyphs = startOffset > 0 ? (0, _slice.default)(startOffset, Infinity, font, startGlyph) : []; // Get end ligature chunks (if any)

  var endOffset = (0, _offset.default)(end, run);
  var endGlyphs = (0, _slice.default)(0, endOffset, font, endGlyph);
  var sliceOffset = Math.min(1, startOffset);
  return R.evolve({
    start: R.add(start),
    end: R.compose(R.apply(R.min), R.juxt([R.identity, // string.end
    R.o(R.add(end), R.always(run.start)) // end + string.start
    ])),
    glyphs: function glyphs(_glyphs) {
      return R.flatten([startGlyphs, _glyphs.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs]);
    },
    positions: function positions(_positions) {
      return R.flatten([startGlyphs.map(function (g) {
        return {
          xAdvance: g.advanceWidth * runScale
        };
      }), _positions.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs.map(function (g) {
        return {
          xAdvance: g.advanceWidth * runScale
        };
      })]);
    },
    glyphIndices: R.o(_normalize.default, R.slice(start, end)),
    attributes: R.identity
  })(run);
};

var _default = R.curryN(3, slice);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/sort.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Sort runs in ascending order
 *
 * @param  {Array}  runs
 * @return {Array} sorted runs
 */
var sort = function sort(a, b) {
  return a.start - b.start || a.end - b.end;
};

var _default = R.sort(sort);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/subtract.js":
/*!*************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/subtract.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Subtract scalar to run
 *
 * @param  {number}  scalar
 * @param  {Object}  run
 * @return {Object} subtracted run
 */
var subtract = function subtract(n, run) {
  return R.evolve({
    start: R.subtract(R.__, n),
    end: R.subtract(R.__, n)
  })(run);
};

var _default = R.curryN(2, subtract);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/run/trailingOffset.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/run/trailingOffset.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js")["default"]);

var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var _isWhiteSpace = _interopRequireDefault(__webpack_require__(/*! ../glyph/isWhiteSpace */ "./node_modules/@react-pdf/textkit/lib/glyph/isWhiteSpace.js"));

/**
 * Get white space trailing positions
 *
 * @param  {Object}  run
 * @return {Array} white space trailing positions
 */
var trailingPositions = R.converge(R.slice(0), [R.compose(R.length, R.takeWhile(_isWhiteSpace.default), R.reverse, R.propOr([], 'glyphs')), R.compose(R.reverse, R.propOr([], 'positions'))]);
/**
 * Get run trailing white space offset
 *
 * @param  {Object}  run
 * @return {number} trailing white space offset
 */

var trailingOffset = R.compose(R.ifElse(R.isEmpty, R.always(0), R.compose(R.sum, R.map(R.propOr(0, 'xAdvance')))), trailingPositions);
var _default = trailingOffset;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/utils/isBetween.js":
/*!****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/utils/isBetween.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Checks if number is between two values (upper non-inclusive)
 *
 * @param  {Function}  lower value
 * @param  {Function}  higher value
 * @param  {number}  predicate value
 * @return {Function} is between invoker
 */
var isBetween = function isBetween(a, b, c) {
  return R.both(R.o(R.gte(c), a), R.o(R.lt(c), b));
};

var _default = R.curryN(3, isBetween);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/utils/isNumber.js":
/*!***************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/utils/isNumber.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

var isNumber = R.is(Number);
var _default = isNumber;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/utils/mapIndexed.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/utils/mapIndexed.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js")["default"]);

exports.__esModule = true;
exports["default"] = void 0;

var R = _interopRequireWildcard(__webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js"));

/**
 * Map list by index
 * Accepts up to 3 functions:
 *   - Will apply first function to first value
 *   - Will apply last function to last value
 *   - Will apply the other function to the rest of values
 *
 * @param  {Array}  list
 * @param  {Array}  functions
 * @return {Array} mapped array
 */
var mapIndexed = function mapIndexed(fns, list) {
  if (fns === void 0) {
    fns = [];
  }

  if (list === void 0) {
    list = [];
  }

  var length = list.length - 1;
  return R.addIndex(R.map)(function (value, idx) {
    if (idx === 0) return R.head(fns)(value, idx);
    if (idx === length) return R.last(fns)(value, idx);
    return (fns[1] || fns[0])(value, idx);
  })(list);
};

var _default = R.curryN(2, mapIndexed);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/lib/utils/stringFromCodePoints.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/utils/stringFromCodePoints.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

/**
 * Get string from array of code points
 *
 * @param {Array} code points
 * @return {String} string
 */
var stringFromCodePoints = function stringFromCodePoints(codePoints) {
  return String.fromCodePoint.apply(String, codePoints);
};

var _default = stringFromCodePoints;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/createForOfIteratorHelperLoose.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/createForOfIteratorHelperLoose.js ***!
  \***************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _createForOfIteratorHelperLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/extends.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/extends.js ***!
  \****************************************************************************************/
/***/ ((module) => {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}

module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \******************************************************************************************************/
/***/ ((module) => {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/typeof.js")["default"]);

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/typeof.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/typeof.js ***!
  \***************************************************************************************/
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@react-pdf/textkit/node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@react-pdf/unicode-properties/lib/unicode-properties.es.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@react-pdf/unicode-properties/lib/unicode-properties.es.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "getCategory": () => (/* binding */ getCategory),
/* harmony export */   "getCombiningClass": () => (/* binding */ getCombiningClass),
/* harmony export */   "getEastAsianWidth": () => (/* binding */ getEastAsianWidth),
/* harmony export */   "getNumericValue": () => (/* binding */ getNumericValue),
/* harmony export */   "getScript": () => (/* binding */ getScript),
/* harmony export */   "isAlphabetic": () => (/* binding */ isAlphabetic),
/* harmony export */   "isBaseForm": () => (/* binding */ isBaseForm),
/* harmony export */   "isDigit": () => (/* binding */ isDigit),
/* harmony export */   "isLowerCase": () => (/* binding */ isLowerCase),
/* harmony export */   "isMark": () => (/* binding */ isMark),
/* harmony export */   "isPunctuation": () => (/* binding */ isPunctuation),
/* harmony export */   "isTitleCase": () => (/* binding */ isTitleCase),
/* harmony export */   "isUpperCase": () => (/* binding */ isUpperCase),
/* harmony export */   "isWhiteSpace": () => (/* binding */ isWhiteSpace)
/* harmony export */ });
/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unicode-trie */ "./node_modules/unicode-trie/index.js");
/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(unicode_trie__WEBPACK_IMPORTED_MODULE_0__);
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];


var categories = [
	"Cc",
	"Zs",
	"Po",
	"Sc",
	"Ps",
	"Pe",
	"Sm",
	"Pd",
	"Nd",
	"Lu",
	"Sk",
	"Pc",
	"Ll",
	"So",
	"Lo",
	"Pi",
	"Cf",
	"No",
	"Pf",
	"Lt",
	"Lm",
	"Mn",
	"Me",
	"Mc",
	"Nl",
	"Zl",
	"Zp",
	"Cs",
	"Co"
];
var combiningClasses = [
	"Not_Reordered",
	"Above",
	"Above_Right",
	"Below",
	"Attached_Above_Right",
	"Attached_Below",
	"Overlay",
	"Iota_Subscript",
	"Double_Below",
	"Double_Above",
	"Below_Right",
	"Above_Left",
	"CCC10",
	"CCC11",
	"CCC12",
	"CCC13",
	"CCC14",
	"CCC15",
	"CCC16",
	"CCC17",
	"CCC18",
	"CCC19",
	"CCC20",
	"CCC21",
	"CCC22",
	"CCC23",
	"CCC24",
	"CCC25",
	"CCC30",
	"CCC31",
	"CCC32",
	"CCC27",
	"CCC28",
	"CCC29",
	"CCC33",
	"CCC34",
	"CCC35",
	"CCC36",
	"Nukta",
	"Virama",
	"CCC84",
	"CCC91",
	"CCC103",
	"CCC107",
	"CCC118",
	"CCC122",
	"CCC129",
	"CCC130",
	"CCC132",
	"Attached_Above",
	"Below_Left",
	"Left",
	"Kana_Voicing",
	"CCC26",
	"Right"
];
var scripts = [
	"Common",
	"Latin",
	"Bopomofo",
	"Inherited",
	"Greek",
	"Coptic",
	"Cyrillic",
	"Armenian",
	"Hebrew",
	"Arabic",
	"Syriac",
	"Thaana",
	"Nko",
	"Samaritan",
	"Mandaic",
	"Devanagari",
	"Bengali",
	"Gurmukhi",
	"Gujarati",
	"Oriya",
	"Tamil",
	"Telugu",
	"Kannada",
	"Malayalam",
	"Sinhala",
	"Thai",
	"Lao",
	"Tibetan",
	"Myanmar",
	"Georgian",
	"Hangul",
	"Ethiopic",
	"Cherokee",
	"Canadian_Aboriginal",
	"Ogham",
	"Runic",
	"Tagalog",
	"Hanunoo",
	"Buhid",
	"Tagbanwa",
	"Khmer",
	"Mongolian",
	"Limbu",
	"Tai_Le",
	"New_Tai_Lue",
	"Buginese",
	"Tai_Tham",
	"Balinese",
	"Sundanese",
	"Batak",
	"Lepcha",
	"Ol_Chiki",
	"Braille",
	"Glagolitic",
	"Tifinagh",
	"Han",
	"Hiragana",
	"Katakana",
	"Yi",
	"Lisu",
	"Vai",
	"Bamum",
	"Syloti_Nagri",
	"Phags_Pa",
	"Saurashtra",
	"Kayah_Li",
	"Rejang",
	"Javanese",
	"Cham",
	"Tai_Viet",
	"Meetei_Mayek",
	"null",
	"Linear_B",
	"Lycian",
	"Carian",
	"Old_Italic",
	"Gothic",
	"Old_Permic",
	"Ugaritic",
	"Old_Persian",
	"Deseret",
	"Shavian",
	"Osmanya",
	"Osage",
	"Elbasan",
	"Caucasian_Albanian",
	"Linear_A",
	"Cypriot",
	"Imperial_Aramaic",
	"Palmyrene",
	"Nabataean",
	"Hatran",
	"Phoenician",
	"Lydian",
	"Meroitic_Hieroglyphs",
	"Meroitic_Cursive",
	"Kharoshthi",
	"Old_South_Arabian",
	"Old_North_Arabian",
	"Manichaean",
	"Avestan",
	"Inscriptional_Parthian",
	"Inscriptional_Pahlavi",
	"Psalter_Pahlavi",
	"Old_Turkic",
	"Old_Hungarian",
	"Hanifi_Rohingya",
	"Old_Sogdian",
	"Sogdian",
	"Elymaic",
	"Brahmi",
	"Kaithi",
	"Sora_Sompeng",
	"Chakma",
	"Mahajani",
	"Sharada",
	"Khojki",
	"Multani",
	"Khudawadi",
	"Grantha",
	"Newa",
	"Tirhuta",
	"Siddham",
	"Modi",
	"Takri",
	"Ahom",
	"Dogra",
	"Warang_Citi",
	"Nandinagari",
	"Zanabazar_Square",
	"Soyombo",
	"Pau_Cin_Hau",
	"Bhaiksuki",
	"Marchen",
	"Masaram_Gondi",
	"Gunjala_Gondi",
	"Makasar",
	"Cuneiform",
	"Egyptian_Hieroglyphs",
	"Anatolian_Hieroglyphs",
	"Mro",
	"Bassa_Vah",
	"Pahawh_Hmong",
	"Medefaidrin",
	"Miao",
	"Tangut",
	"Nushu",
	"Duployan",
	"SignWriting",
	"Nyiakeng_Puachue_Hmong",
	"Wancho",
	"Mende_Kikakui",
	"Adlam"
];
var eaw = [
	"N",
	"Na",
	"A",
	"W",
	"H",
	"F"
];
var data$1 = {
	categories: categories,
	combiningClasses: combiningClasses,
	scripts: scripts,
	eaw: eaw
};

var data = "";
var trieBuffer = {
	data: data
};

// we may be running in a browser so we make an Uint8Array

var trieData = new Uint8Array(Buffer.from(trieBuffer.data, 'base64'));
var trie = new (unicode_trie__WEBPACK_IMPORTED_MODULE_0___default())(trieData);

var log2 = Math.log2 || function (n) {
  return Math.log(n) / Math.LN2;
};

var bits = function bits(n) {
  return log2(n) + 1 | 0;
}; // compute the number of bits stored for each field


var CATEGORY_BITS = bits(data$1.categories.length - 1);
var COMBINING_BITS = bits(data$1.combiningClasses.length - 1);
var SCRIPT_BITS = bits(data$1.scripts.length - 1);
var EAW_BITS = bits(data$1.eaw.length - 1);
var NUMBER_BITS = 10; // compute shift and mask values for each field

var CATEGORY_SHIFT = COMBINING_BITS + SCRIPT_BITS + EAW_BITS + NUMBER_BITS;
var COMBINING_SHIFT = SCRIPT_BITS + EAW_BITS + NUMBER_BITS;
var SCRIPT_SHIFT = EAW_BITS + NUMBER_BITS;
var EAW_SHIFT = NUMBER_BITS;
var CATEGORY_MASK = (1 << CATEGORY_BITS) - 1;
var COMBINING_MASK = (1 << COMBINING_BITS) - 1;
var SCRIPT_MASK = (1 << SCRIPT_BITS) - 1;
var EAW_MASK = (1 << EAW_BITS) - 1;
var NUMBER_MASK = (1 << NUMBER_BITS) - 1;
var getCategory = function getCategory(codePoint) {
  var val = trie.get(codePoint);
  return data$1.categories[val >> CATEGORY_SHIFT & CATEGORY_MASK];
};
var getCombiningClass = function getCombiningClass(codePoint) {
  var val = trie.get(codePoint);
  return data$1.combiningClasses[val >> COMBINING_SHIFT & COMBINING_MASK];
};
var getScript = function getScript(codePoint) {
  var val = trie.get(codePoint);
  return data$1.scripts[val >> SCRIPT_SHIFT & SCRIPT_MASK];
};
var getEastAsianWidth = function getEastAsianWidth(codePoint) {
  var val = trie.get(codePoint);
  return data$1.eaw[val >> EAW_SHIFT & EAW_MASK];
};
var getNumericValue = function getNumericValue(codePoint) {
  var val = trie.get(codePoint);
  var num = val & NUMBER_MASK;

  if (num === 0) {
    return null;
  }

  if (num <= 50) {
    return num - 1;
  }

  if (num < 0x1e0) {
    var numerator = (num >> 4) - 12;
    var denominator = (num & 0xf) + 1;
    return numerator / denominator;
  }

  if (num < 0x300) {
    val = (num >> 5) - 14;

    var _exp = (num & 0x1f) + 2;

    while (_exp > 0) {
      val *= 10;
      _exp--;
    }

    return val;
  }

  val = (num >> 2) - 0xbf;
  var exp = (num & 3) + 1;

  while (exp > 0) {
    val *= 60;
    exp--;
  }

  return val;
};
var isAlphabetic = function isAlphabetic(codePoint) {
  var category = getCategory(codePoint);
  return category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Nl';
};
var isDigit = function isDigit(codePoint) {
  return getCategory(codePoint) === 'Nd';
};
var isPunctuation = function isPunctuation(codePoint) {
  var category = getCategory(codePoint);
  return category === 'Pc' || category === 'Pd' || category === 'Pe' || category === 'Pf' || category === 'Pi' || category === 'Po' || category === 'Ps';
};
var isLowerCase = function isLowerCase(codePoint) {
  return getCategory(codePoint) === 'Ll';
};
var isUpperCase = function isUpperCase(codePoint) {
  return getCategory(codePoint) === 'Lu';
};
var isTitleCase = function isTitleCase(codePoint) {
  return getCategory(codePoint) === 'Lt';
};
var isWhiteSpace = function isWhiteSpace(codePoint) {
  var category = getCategory(codePoint);
  return category === 'Zs' || category === 'Zl' || category === 'Zp';
};
var isBaseForm = function isBaseForm(codePoint) {
  var category = getCategory(codePoint);
  return category === 'Nd' || category === 'No' || category === 'Nl' || category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Me' || category === 'Mc';
};
var isMark = function isMark(codePoint) {
  var category = getCategory(codePoint);
  return category === 'Mn' || category === 'Me' || category === 'Mc';
};
var index = {
  getCategory: getCategory,
  getCombiningClass: getCombiningClass,
  getScript: getScript,
  getEastAsianWidth: getEastAsianWidth,
  getNumericValue: getNumericValue,
  isAlphabetic: isAlphabetic,
  isDigit: isDigit,
  isPunctuation: isPunctuation,
  isLowerCase: isLowerCase,
  isUpperCase: isUpperCase,
  isTitleCase: isTitleCase,
  isWhiteSpace: isWhiteSpace,
  isBaseForm: isBaseForm,
  isMark: isMark
};




/***/ }),

/***/ "./node_modules/abs-svg-path/index.js":
/*!********************************************!*\
  !*** ./node_modules/abs-svg-path/index.js ***!
  \********************************************/
/***/ ((module) => {


module.exports = absolutize

/**
 * redefine `path` with absolute coordinates
 *
 * @param {Array} path
 * @return {Array}
 */

function absolutize(path){
	var startX = 0
	var startY = 0
	var x = 0
	var y = 0

	return path.map(function(seg){
		seg = seg.slice()
		var type = seg[0]
		var command = type.toUpperCase()

		// is relative
		if (type != command) {
			seg[0] = command
			switch (type) {
				case 'a':
					seg[6] += x
					seg[7] += y
					break
				case 'v':
					seg[1] += y
					break
				case 'h':
					seg[1] += x
					break
				default:
					for (var i = 1; i < seg.length;) {
						seg[i++] += x
						seg[i++] += y
					}
			}
		}

		// update cursor state
		switch (command) {
			case 'Z':
				x = startX
				y = startY
				break
			case 'H':
				x = seg[1]
				break
			case 'V':
				y = seg[1]
				break
			case 'M':
				x = startX = seg[1]
				y = startY = seg[2]
				break
			default:
				x = seg[seg.length - 2]
				y = seg[seg.length - 1]
		}

		return seg
	})
}


/***/ }),

/***/ "./node_modules/color-name/index.js":
/*!******************************************!*\
  !*** ./node_modules/color-name/index.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "./node_modules/color-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/color-string/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
var colorNames = __webpack_require__(/*! color-name */ "./node_modules/color-name/index.js");
var swizzle = __webpack_require__(/*! simple-swizzle */ "./node_modules/simple-swizzle/index.js");
var hasOwnProperty = Object.hasOwnProperty;

var reverseNames = Object.create(null);

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ "./node_modules/crypto-js/core.js":
/*!****************************************!*\
  !*** ./node_modules/crypto-js/core.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/*globals window, global, require*/

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {

	    var crypto;

	    // Native crypto from window (Browser)
	    if (typeof window !== 'undefined' && window.crypto) {
	        crypto = window.crypto;
	    }

	    // Native crypto in web worker (Browser)
	    if (typeof self !== 'undefined' && self.crypto) {
	        crypto = self.crypto;
	    }

	    // Native crypto from worker
	    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
	        crypto = globalThis.crypto;
	    }

	    // Native (experimental IE 11) crypto from window (Browser)
	    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
	        crypto = window.msCrypto;
	    }

	    // Native crypto from global (NodeJS)
	    if (!crypto && typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.crypto) {
	        crypto = __webpack_require__.g.crypto;
	    }

	    // Native crypto import via require (NodeJS)
	    if (!crypto && "function" === 'function') {
	        try {
	            crypto = __webpack_require__(/*! crypto */ "?9157");
	        } catch (err) {}
	    }

	    /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */
	    var cryptoSecureRandomInt = function () {
	        if (crypto) {
	            // Use getRandomValues method (Browser)
	            if (typeof crypto.getRandomValues === 'function') {
	                try {
	                    return crypto.getRandomValues(new Uint32Array(1))[0];
	                } catch (err) {}
	            }

	            // Use randomBytes method (NodeJS)
	            if (typeof crypto.randomBytes === 'function') {
	                try {
	                    return crypto.randomBytes(4).readInt32LE();
	                } catch (err) {}
	            }
	        }

	        throw new Error('Native crypto module could not be used to get secure random number.');
	    };

	    /*
	     * Local polyfill of Object.create

	     */
	    var create = Object.create || (function () {
	        function F() {}

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }());

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var j = 0; j < thatSigBytes; j += 4) {
	                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            for (var i = 0; i < nBytes; i += 4) {
	                words.push(cryptoSecureRandomInt());
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            var processedWords;

	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),

/***/ "./node_modules/crypto-js/md5.js":
/*!***************************************!*\
  !*** ./node_modules/crypto-js/md5.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),

/***/ "./node_modules/hsl-to-hex/index.js":
/*!******************************************!*\
  !*** ./node_modules/hsl-to-hex/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// In our case, there's only one dependency

var toRgb = __webpack_require__(/*! hsl-to-rgb-for-reals */ "./node_modules/hsl-to-rgb-for-reals/converter.js")

// Typically all dependencies should be declared at the top of the file.

// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.
// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by "spinning" them around until they fall within the 0 to 359 range.
// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.
// Let's write some utility functions to handle this logic:

function max (val, n) {
  return (val > n) ? n : val
}

function min (val, n) {
  return (val < n) ? n : val
}

function cycle (val) {
  // for safety:
  val = max(val, 1e7)
  val = min(val, -1e7)
  // cycle value:
  while (val < 0) { val += 360 }
  while (val > 359) { val -= 360 }
  return val
}

// Now for the main piece, the `hsl` function:

function hsl (hue, saturation, luminosity) {
  // resolve degrees to 0 - 359 range
  hue = cycle(hue)

  // enforce constraints
  saturation = min(max(saturation, 100), 0)
  luminosity = min(max(luminosity, 100), 0)

  // convert to 0 to 1 range used by hsl-to-rgb-for-reals
  saturation /= 100
  luminosity /= 100

  // let hsl-to-rgb-for-reals do the hard work
  var rgb = toRgb(hue, saturation, luminosity)

  // convert each value in the returned RGB array
  // to a 2 character hex value, join the array into
  // a string, prefixed with a hash
  return '#' + rgb
    .map(function (n) {
      return (256 + n).toString(16).substr(-2)
    })
    .join('')
}

// In order to make our code into a bona fide module we have to export it:

module.exports = hsl


/***/ }),

/***/ "./node_modules/hsl-to-rgb-for-reals/converter.js":
/*!********************************************************!*\
  !*** ./node_modules/hsl-to-rgb-for-reals/converter.js ***!
  \********************************************************/
/***/ ((module) => {

// expected hue range: [0, 360)
// expected saturation range: [0, 1]
// expected lightness range: [0, 1]
var hslToRgb = function(hue, saturation, lightness){
  // based on algorithm from http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB
  if( hue == undefined ){
    return [0, 0, 0];
  }

  var chroma = (1 - Math.abs((2 * lightness) - 1)) * saturation;
  var huePrime = hue / 60;
  var secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));

  huePrime = Math.floor(huePrime);
  var red;
  var green;
  var blue;

  if( huePrime === 0 ){
    red = chroma;
    green = secondComponent;
    blue = 0;
  }else if( huePrime === 1 ){
    red = secondComponent;
    green = chroma;
    blue = 0;
  }else if( huePrime === 2 ){
    red = 0;
    green = chroma;
    blue = secondComponent;
  }else if( huePrime === 3 ){
    red = 0;
    green = secondComponent;
    blue = chroma;
  }else if( huePrime === 4 ){
    red = secondComponent;
    green = 0;
    blue = chroma;
  }else if( huePrime === 5 ){
    red = chroma;
    green = 0;
    blue = secondComponent;
  }

  var lightnessAdjustment = lightness - (chroma / 2);
  red += lightnessAdjustment;
  green += lightnessAdjustment;
  blue += lightnessAdjustment;

  return [
      Math.abs(Math.round(red * 255)),
      Math.abs(Math.round(green * 255)),
      Math.abs(Math.round(blue * 255))
  ];

};

module.exports = hslToRgb;


/***/ }),

/***/ "./node_modules/normalize-svg-path/index.js":
/*!**************************************************!*\
  !*** ./node_modules/normalize-svg-path/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = normalize

var arcToCurve = __webpack_require__(/*! svg-arc-to-cubic-bezier */ "./node_modules/svg-arc-to-cubic-bezier/modules/index.js")

function normalize(path){
  // init state
  var prev
  var result = []
  var bezierX = 0
  var bezierY = 0
  var startX = 0
  var startY = 0
  var quadX = null
  var quadY = null
  var x = 0
  var y = 0

  for (var i = 0, len = path.length; i < len; i++) {
    var seg = path[i]
    var command = seg[0]

    switch (command) {
      case 'M':
        startX = seg[1]
        startY = seg[2]
        break
      case 'A':
        var curves = arcToCurve({
          px: x,
          py: y,
          cx: seg[6],
          cy:  seg[7],
          rx: seg[1],
          ry: seg[2],
          xAxisRotation: seg[3],
          largeArcFlag: seg[4],
          sweepFlag: seg[5]
        })

        // null-curves
        if (!curves.length) continue

        for (var j = 0, c; j < curves.length; j++) {
          c = curves[j]
          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]
          if (j < curves.length - 1) result.push(seg)
        }

        break
      case 'S':
        // default control point
        var cx = x
        var cy = y
        if (prev == 'C' || prev == 'S') {
          cx += cx - bezierX // reflect the previous command's control
          cy += cy - bezierY // point relative to the current point
        }
        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]
        break
      case 'T':
        if (prev == 'Q' || prev == 'T') {
          quadX = x * 2 - quadX // as with 'S' reflect previous control point
          quadY = y * 2 - quadY
        } else {
          quadX = x
          quadY = y
        }
        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])
        break
      case 'Q':
        quadX = seg[1]
        quadY = seg[2]
        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])
        break
      case 'L':
        seg = line(x, y, seg[1], seg[2])
        break
      case 'H':
        seg = line(x, y, seg[1], y)
        break
      case 'V':
        seg = line(x, y, x, seg[1])
        break
      case 'Z':
        seg = line(x, y, startX, startY)
        break
    }

    // update state
    prev = command
    x = seg[seg.length - 2]
    y = seg[seg.length - 1]
    if (seg.length > 4) {
      bezierX = seg[seg.length - 4]
      bezierY = seg[seg.length - 3]
    } else {
      bezierX = x
      bezierY = y
    }
    result.push(seg)
  }

  return result
}

function line(x1, y1, x2, y2){
  return ['C', x1, y1, x2, y2, x2, y2]
}

function quadratic(x1, y1, cx, cy, x2, y2){
  return [
    'C',
    x1/3 + (2/3) * cx,
    y1/3 + (2/3) * cy,
    x2/3 + (2/3) * cx,
    y2/3 + (2/3) * cy,
    x2,
    y2
  ]
}


/***/ }),

/***/ "./node_modules/parse-svg-path/index.js":
/*!**********************************************!*\
  !*** ./node_modules/parse-svg-path/index.js ***!
  \**********************************************/
/***/ ((module) => {


module.exports = parse

/**
 * expected argument lengths
 * @type {Object}
 */

var length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}

/**
 * segment pattern
 * @type {RegExp}
 */

var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig

/**
 * parse an svg path data string. Generates an Array
 * of commands where each command is an Array of the
 * form `[command, arg1, arg2, ...]`
 *
 * @param {String} path
 * @return {Array}
 */

function parse(path) {
	var data = []
	path.replace(segment, function(_, command, args){
		var type = command.toLowerCase()
		args = parseValues(args)

		// overloaded moveTo
		if (type == 'm' && args.length > 2) {
			data.push([command].concat(args.splice(0, 2)))
			type = 'l'
			command = command == 'm' ? 'l' : 'L'
		}

		while (true) {
			if (args.length == length[type]) {
				args.unshift(command)
				return data.push(args)
			}
			if (args.length < length[type]) throw new Error('malformed path data')
			data.push([command].concat(args.splice(0, length[type])))
		}
	})
	return data
}

var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig

function parseValues(args) {
	var numbers = args.match(number)
	return numbers ? numbers.map(Number) : []
}


/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/parse.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/parse.js ***!
  \********************************************************/
/***/ ((module) => {

var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);
var uLower = "u".charCodeAt(0);
var uUpper = "U".charCodeAt(0);
var plus = "+".charCodeAt(0);
var isUnicodeRange = /^[a-f0-9?-]+$/i;

module.exports = function(input) {
  var tokens = [];
  var value = input;

  var next,
    quote,
    prev,
    token,
    escape,
    escapePos,
    whitespacePos,
    parenthesesOpenPos;
  var pos = 0;
  var code = value.charCodeAt(pos);
  var max = value.length;
  var stack = [{ nodes: tokens }];
  var balanced = 0;
  var parent;

  var name = "";
  var before = "";
  var after = "";

  while (pos < max) {
    // Whitespaces
    if (code <= 32) {
      next = pos;
      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);
      token = value.slice(pos, next);

      prev = tokens[tokens.length - 1];
      if (code === closeParentheses && balanced) {
        after = token;
      } else if (prev && prev.type === "div") {
        prev.after = token;
        prev.sourceEndIndex += token.length;
      } else if (
        code === comma ||
        code === colon ||
        (code === slash &&
          value.charCodeAt(next + 1) !== star &&
          (!parent ||
            (parent && parent.type === "function" && parent.value !== "calc")))
      ) {
        before = token;
      } else {
        tokens.push({
          type: "space",
          sourceIndex: pos,
          sourceEndIndex: next,
          value: token
        });
      }

      pos = next;

      // Quotes
    } else if (code === singleQuote || code === doubleQuote) {
      next = pos;
      quote = code === singleQuote ? "'" : '"';
      token = {
        type: "string",
        sourceIndex: pos,
        quote: quote
      };
      do {
        escape = false;
        next = value.indexOf(quote, next + 1);
        if (~next) {
          escapePos = next;
          while (value.charCodeAt(escapePos - 1) === backslash) {
            escapePos -= 1;
            escape = !escape;
          }
        } else {
          value += quote;
          next = value.length - 1;
          token.unclosed = true;
        }
      } while (escape);
      token.value = value.slice(pos + 1, next);
      token.sourceEndIndex = token.unclosed ? next : next + 1;
      tokens.push(token);
      pos = next + 1;
      code = value.charCodeAt(pos);

      // Comments
    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
      next = value.indexOf("*/", pos);

      token = {
        type: "comment",
        sourceIndex: pos,
        sourceEndIndex: next + 2
      };

      if (next === -1) {
        token.unclosed = true;
        next = value.length;
        token.sourceEndIndex = next;
      }

      token.value = value.slice(pos + 2, next);
      tokens.push(token);

      pos = next + 2;
      code = value.charCodeAt(pos);

      // Operation within calc
    } else if (
      (code === slash || code === star) &&
      parent &&
      parent.type === "function" &&
      parent.value === "calc"
    ) {
      token = value[pos];
      tokens.push({
        type: "word",
        sourceIndex: pos - before.length,
        sourceEndIndex: pos + token.length,
        value: token
      });
      pos += 1;
      code = value.charCodeAt(pos);

      // Dividers
    } else if (code === slash || code === comma || code === colon) {
      token = value[pos];

      tokens.push({
        type: "div",
        sourceIndex: pos - before.length,
        sourceEndIndex: pos + token.length,
        value: token,
        before: before,
        after: ""
      });
      before = "";

      pos += 1;
      code = value.charCodeAt(pos);

      // Open parentheses
    } else if (openParentheses === code) {
      // Whitespaces after open parentheses
      next = pos;
      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);
      parenthesesOpenPos = pos;
      token = {
        type: "function",
        sourceIndex: pos - name.length,
        value: name,
        before: value.slice(parenthesesOpenPos + 1, next)
      };
      pos = next;

      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
        next -= 1;
        do {
          escape = false;
          next = value.indexOf(")", next + 1);
          if (~next) {
            escapePos = next;
            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1;
              escape = !escape;
            }
          } else {
            value += ")";
            next = value.length - 1;
            token.unclosed = true;
          }
        } while (escape);
        // Whitespaces before closed
        whitespacePos = next;
        do {
          whitespacePos -= 1;
          code = value.charCodeAt(whitespacePos);
        } while (code <= 32);
        if (parenthesesOpenPos < whitespacePos) {
          if (pos !== whitespacePos + 1) {
            token.nodes = [
              {
                type: "word",
                sourceIndex: pos,
                sourceEndIndex: whitespacePos + 1,
                value: value.slice(pos, whitespacePos + 1)
              }
            ];
          } else {
            token.nodes = [];
          }
          if (token.unclosed && whitespacePos + 1 !== next) {
            token.after = "";
            token.nodes.push({
              type: "space",
              sourceIndex: whitespacePos + 1,
              sourceEndIndex: next,
              value: value.slice(whitespacePos + 1, next)
            });
          } else {
            token.after = value.slice(whitespacePos + 1, next);
            token.sourceEndIndex = next;
          }
        } else {
          token.after = "";
          token.nodes = [];
        }
        pos = next + 1;
        token.sourceEndIndex = token.unclosed ? next : pos;
        code = value.charCodeAt(pos);
        tokens.push(token);
      } else {
        balanced += 1;
        token.after = "";
        token.sourceEndIndex = pos + 1;
        tokens.push(token);
        stack.push(token);
        tokens = token.nodes = [];
        parent = token;
      }
      name = "";

      // Close parentheses
    } else if (closeParentheses === code && balanced) {
      pos += 1;
      code = value.charCodeAt(pos);

      parent.after = after;
      parent.sourceEndIndex += after.length;
      after = "";
      balanced -= 1;
      stack[stack.length - 1].sourceEndIndex = pos;
      stack.pop();
      parent = stack[balanced];
      tokens = parent.nodes;

      // Words
    } else {
      next = pos;
      do {
        if (code === backslash) {
          next += 1;
        }
        next += 1;
        code = value.charCodeAt(next);
      } while (
        next < max &&
        !(
          code <= 32 ||
          code === singleQuote ||
          code === doubleQuote ||
          code === comma ||
          code === colon ||
          code === slash ||
          code === openParentheses ||
          (code === star &&
            parent &&
            parent.type === "function" &&
            parent.value === "calc") ||
          (code === slash &&
            parent.type === "function" &&
            parent.value === "calc") ||
          (code === closeParentheses && balanced)
        )
      );
      token = value.slice(pos, next);

      if (openParentheses === code) {
        name = token;
      } else if (
        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
        plus === token.charCodeAt(1) &&
        isUnicodeRange.test(token.slice(2))
      ) {
        tokens.push({
          type: "unicode-range",
          sourceIndex: pos,
          sourceEndIndex: next,
          value: token
        });
      } else {
        tokens.push({
          type: "word",
          sourceIndex: pos,
          sourceEndIndex: next,
          value: token
        });
      }

      pos = next;
    }
  }

  for (pos = stack.length - 1; pos; pos -= 1) {
    stack[pos].unclosed = true;
    stack[pos].sourceEndIndex = value.length;
  }

  return stack[0].nodes;
};


/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/unit.js ***!
  \*******************************************************/
/***/ ((module) => {

var minus = "-".charCodeAt(0);
var plus = "+".charCodeAt(0);
var dot = ".".charCodeAt(0);
var exp = "e".charCodeAt(0);
var EXP = "E".charCodeAt(0);

// Check if three code points would start a number
// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
function likeNumber(value) {
  var code = value.charCodeAt(0);
  var nextCode;

  if (code === plus || code === minus) {
    nextCode = value.charCodeAt(1);

    if (nextCode >= 48 && nextCode <= 57) {
      return true;
    }

    var nextNextCode = value.charCodeAt(2);

    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
      return true;
    }

    return false;
  }

  if (code === dot) {
    nextCode = value.charCodeAt(1);

    if (nextCode >= 48 && nextCode <= 57) {
      return true;
    }

    return false;
  }

  if (code >= 48 && code <= 57) {
    return true;
  }

  return false;
}

// Consume a number
// https://www.w3.org/TR/css-syntax-3/#consume-number
module.exports = function(value) {
  var pos = 0;
  var length = value.length;
  var code;
  var nextCode;
  var nextNextCode;

  if (length === 0 || !likeNumber(value)) {
    return false;
  }

  code = value.charCodeAt(pos);

  if (code === plus || code === minus) {
    pos++;
  }

  while (pos < length) {
    code = value.charCodeAt(pos);

    if (code < 48 || code > 57) {
      break;
    }

    pos += 1;
  }

  code = value.charCodeAt(pos);
  nextCode = value.charCodeAt(pos + 1);

  if (code === dot && nextCode >= 48 && nextCode <= 57) {
    pos += 2;

    while (pos < length) {
      code = value.charCodeAt(pos);

      if (code < 48 || code > 57) {
        break;
      }

      pos += 1;
    }
  }

  code = value.charCodeAt(pos);
  nextCode = value.charCodeAt(pos + 1);
  nextNextCode = value.charCodeAt(pos + 2);

  if (
    (code === exp || code === EXP) &&
    ((nextCode >= 48 && nextCode <= 57) ||
      ((nextCode === plus || nextCode === minus) &&
        nextNextCode >= 48 &&
        nextNextCode <= 57))
  ) {
    pos += nextCode === plus || nextCode === minus ? 3 : 2;

    while (pos < length) {
      code = value.charCodeAt(pos);

      if (code < 48 || code > 57) {
        break;
      }

      pos += 1;
    }
  }

  return {
    number: value.slice(0, pos),
    unit: value.slice(pos)
  };
};


/***/ }),

/***/ "./node_modules/queue/index.js":
/*!*************************************!*\
  !*** ./node_modules/queue/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var EventEmitter = (__webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter)

module.exports = Queue
module.exports["default"] = Queue

function Queue (options) {
  if (!(this instanceof Queue)) {
    return new Queue(options)
  }

  EventEmitter.call(this)
  options = options || {}
  this.concurrency = options.concurrency || Infinity
  this.timeout = options.timeout || 0
  this.autostart = options.autostart || false
  this.results = options.results || null
  this.pending = 0
  this.session = 0
  this.running = false
  this.jobs = []
  this.timers = {}
}
inherits(Queue, EventEmitter)

var arrayMethods = [
  'pop',
  'shift',
  'indexOf',
  'lastIndexOf'
]

arrayMethods.forEach(function (method) {
  Queue.prototype[method] = function () {
    return Array.prototype[method].apply(this.jobs, arguments)
  }
})

Queue.prototype.slice = function (begin, end) {
  this.jobs = this.jobs.slice(begin, end)
  return this
}

Queue.prototype.reverse = function () {
  this.jobs.reverse()
  return this
}

var arrayAddMethods = [
  'push',
  'unshift',
  'splice'
]

arrayAddMethods.forEach(function (method) {
  Queue.prototype[method] = function () {
    var methodResult = Array.prototype[method].apply(this.jobs, arguments)
    if (this.autostart) {
      this.start()
    }
    return methodResult
  }
})

Object.defineProperty(Queue.prototype, 'length', {
  get: function () {
    return this.pending + this.jobs.length
  }
})

Queue.prototype.start = function (cb) {
  if (cb) {
    callOnErrorOrEnd.call(this, cb)
  }

  this.running = true

  if (this.pending >= this.concurrency) {
    return
  }

  if (this.jobs.length === 0) {
    if (this.pending === 0) {
      done.call(this)
    }
    return
  }

  var self = this
  var job = this.jobs.shift()
  var once = true
  var session = this.session
  var timeoutId = null
  var didTimeout = false
  var resultIndex = null
  var timeout = job.hasOwnProperty('timeout') ? job.timeout : this.timeout

  function next (err, result) {
    if (once && self.session === session) {
      once = false
      self.pending--
      if (timeoutId !== null) {
        delete self.timers[timeoutId]
        clearTimeout(timeoutId)
      }

      if (err) {
        self.emit('error', err, job)
      } else if (didTimeout === false) {
        if (resultIndex !== null) {
          self.results[resultIndex] = Array.prototype.slice.call(arguments, 1)
        }
        self.emit('success', result, job)
      }

      if (self.session === session) {
        if (self.pending === 0 && self.jobs.length === 0) {
          done.call(self)
        } else if (self.running) {
          self.start()
        }
      }
    }
  }

  if (timeout) {
    timeoutId = setTimeout(function () {
      didTimeout = true
      if (self.listeners('timeout').length > 0) {
        self.emit('timeout', next, job)
      } else {
        next()
      }
    }, timeout)
    this.timers[timeoutId] = timeoutId
  }

  if (this.results) {
    resultIndex = this.results.length
    this.results[resultIndex] = null
  }

  this.pending++
  self.emit('start', job)
  var promise = job(next)
  if (promise && promise.then && typeof promise.then === 'function') {
    promise.then(function (result) {
      return next(null, result)
    }).catch(function (err) {
      return next(err || true)
    })
  }

  if (this.running && this.jobs.length > 0) {
    this.start()
  }
}

Queue.prototype.stop = function () {
  this.running = false
}

Queue.prototype.end = function (err) {
  clearTimers.call(this)
  this.jobs.length = 0
  this.pending = 0
  done.call(this, err)
}

function clearTimers () {
  for (var key in this.timers) {
    var timeoutId = this.timers[key]
    delete this.timers[key]
    clearTimeout(timeoutId)
  }
}

function callOnErrorOrEnd (cb) {
  var self = this
  this.on('error', onerror)
  this.on('end', onend)

  function onerror (err) { self.end(err) }
  function onend (err) {
    self.removeListener('error', onerror)
    self.removeListener('end', onend)
    cb(err, this.results)
  }
}

function done (err) {
  this.session++
  this.running = false
  this.emit('end', err)
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.15.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, "__esModule", ({ value: true }));

var enableSchedulerDebugging = false;
var enableIsInputPending = false;
var requestIdleCallbackBeforeFirstFrame = false;
var requestTimerEventBeforeFirstFrame = false;
var enableMessageLoopImplementation = false;

// The DOM Scheduler implementation is similar to requestIdleCallback. It
// works by scheduling a requestAnimationFrame, storing the time for the start
// of the frame, then scheduling a postMessage which gets scheduled after paint.
// Within the postMessage handler do as much work as possible until time + frame
// rate. By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

var requestHostCallback = void 0;

var requestHostTimeout = void 0;
var cancelHostTimeout = void 0;
var shouldYieldToHost = void 0;
var requestPaint = void 0;
exports.unstable_now = void 0;
exports.unstable_forceFrameRate = void 0;

if (
// If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' ||
// Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;
  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;
        _callback(hasRemainingTime, currentTime);
        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };
  exports.unstable_now = function () {
    return Date.now();
  };
  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };
  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };
  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };
  shouldYieldToHost = function () {
    return false;
  };
  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;
  var requestAnimationFrame = window.requestAnimationFrame;
  var cancelAnimationFrame = window.cancelAnimationFrame;
  var requestIdleCallback = window.requestIdleCallback;

  if (typeof console !== 'undefined') {
    // TODO: Remove fb.me link
    if (typeof requestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
    if (typeof cancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  var requestIdleCallbackBeforeFirstFrame$1 = requestIdleCallbackBeforeFirstFrame && typeof requestIdleCallback === 'function' && typeof cancelIdleCallback === 'function';

  exports.unstable_now = typeof performance === 'object' && typeof performance.now === 'function' ? function () {
    return performance.now();
  } : function () {
    return _Date.now();
  };

  var isRAFLoopRunning = false;
  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var rAFTimeoutID = -1;
  var taskTimeoutID = -1;

  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple
  // times per frame, often enough to keep it responsive even at really
  // high frame rates > 120.
  5 : // Use a heuristic to measure the frame rate and yield at the end of the
  // frame. We start out assuming that we run at 30fps but then the
  // heuristic tracking will adjust this value to a faster fps if we get
  // more frequent animation frames.
  33.33;

  var prevRAFTime = -1;
  var prevRAFInterval = -1;
  var frameDeadline = 0;

  var fpsLocked = false;

  // TODO: Make this configurable
  // TODO: Adjust this based on priority?
  var maxFrameLength = 300;
  var needsPaint = false;

  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {
    var scheduling = navigator.scheduling;
    shouldYieldToHost = function () {
      var currentTime = exports.unstable_now();
      if (currentTime >= frameDeadline) {
        // There's no time left in the frame. We may want to yield control of
        // the main thread, so the browser can perform high priority tasks. The
        // main ones are painting and user input. If there's a pending paint or
        // a pending input, then we should yield. But if there's neither, then
        // we can yield less often while remaining responsive. We'll eventually
        // yield regardless, since there could be a pending paint that wasn't
        // accompanied by a call to `requestPaint`, or other main thread tasks
        // like network events.
        if (needsPaint || scheduling.isInputPending()) {
          // There is either a pending paint or a pending input.
          return true;
        }
        // There's no pending input. Only yield if we've reached the max
        // frame length.
        return currentTime >= frameDeadline + maxFrameLength;
      } else {
        // There's still time left in the frame.
        return false;
      }
    };

    requestPaint = function () {
      needsPaint = true;
    };
  } else {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= frameDeadline;
    };

    // Since we yield every frame regardless, `requestPaint` has no effect.
    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }
    if (fps > 0) {
      frameLength = Math.floor(1000 / fps);
      fpsLocked = true;
    } else {
      // reset the framerate
      frameLength = 33.33;
      fpsLocked = false;
    }
  };

  var performWorkUntilDeadline = function () {
    if (enableMessageLoopImplementation) {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now();
        // Yield after `frameLength` ms, regardless of where we are in the vsync
        // cycle. This means there's always time remaining at the beginning of
        // the message event.
        frameDeadline = currentTime + frameLength;
        var hasTimeRemaining = true;
        try {
          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          if (!hasMoreWork) {
            isMessageLoopRunning = false;
            scheduledHostCallback = null;
          } else {
            // If there's more work, schedule the next message event at the end
            // of the preceding one.
            port.postMessage(null);
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed.
          port.postMessage(null);
          throw error;
        }
      }
      // Yielding to the browser will give it a chance to paint, so we can
      // reset this.
      needsPaint = false;
    } else {
      if (scheduledHostCallback !== null) {
        var _currentTime = exports.unstable_now();
        var _hasTimeRemaining = frameDeadline - _currentTime > 0;
        try {
          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);
          if (!_hasMoreWork) {
            scheduledHostCallback = null;
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed, and post a new task as soon as possible
          // so we can continue where we left off.
          port.postMessage(null);
          throw error;
        }
      }
      // Yielding to the browser will give it a chance to paint, so we can
      // reset this.
      needsPaint = false;
    }
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  var onAnimationFrame = function (rAFTime) {
    if (scheduledHostCallback === null) {
      // No scheduled work. Exit.
      prevRAFTime = -1;
      prevRAFInterval = -1;
      isRAFLoopRunning = false;
      return;
    }

    // Eagerly schedule the next animation callback at the beginning of the
    // frame. If the scheduler queue is not empty at the end of the frame, it
    // will continue flushing inside that callback. If the queue *is* empty,
    // then it will exit immediately. Posting the callback at the start of the
    // frame ensures it's fired within the earliest possible frame. If we
    // waited until the end of the frame to post the callback, we risk the
    // browser skipping a frame and not firing the callback until the frame
    // after that.
    isRAFLoopRunning = true;
    requestAnimationFrame(function (nextRAFTime) {
      _clearTimeout(rAFTimeoutID);
      onAnimationFrame(nextRAFTime);
    });

    // requestAnimationFrame is throttled when the tab is backgrounded. We
    // don't want to stop working entirely. So we'll fallback to a timeout loop.
    // TODO: Need a better heuristic for backgrounded work.
    var onTimeout = function () {
      frameDeadline = exports.unstable_now() + frameLength / 2;
      performWorkUntilDeadline();
      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);
    };
    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);

    if (prevRAFTime !== -1 &&
    // Make sure this rAF time is different from the previous one. This check
    // could fail if two rAFs fire in the same frame.
    rAFTime - prevRAFTime > 0.1) {
      var rAFInterval = rAFTime - prevRAFTime;
      if (!fpsLocked && prevRAFInterval !== -1) {
        // We've observed two consecutive frame intervals. We'll use this to
        // dynamically adjust the frame rate.
        //
        // If one frame goes long, then the next one can be short to catch up.
        // If two frames are short in a row, then that's an indication that we
        // actually have a higher frame rate than what we're currently
        // optimizing. For example, if we're running on 120hz display or 90hz VR
        // display. Take the max of the two in case one of them was an anomaly
        // due to missed frame deadlines.
        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {
          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;
          if (frameLength < 8.33) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame length gets lower than 8, it is probably
            // a bug.
            frameLength = 8.33;
          }
        }
      }
      prevRAFInterval = rAFInterval;
    }
    prevRAFTime = rAFTime;
    frameDeadline = rAFTime + frameLength;

    // We use the postMessage trick to defer idle work until after the repaint.
    port.postMessage(null);
  };

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;
    if (enableMessageLoopImplementation) {
      if (!isMessageLoopRunning) {
        isMessageLoopRunning = true;
        port.postMessage(null);
      }
    } else {
      if (!isRAFLoopRunning) {
        // Start a rAF loop.
        isRAFLoopRunning = true;
        requestAnimationFrame(function (rAFTime) {
          if (requestIdleCallbackBeforeFirstFrame$1) {
            cancelIdleCallback(idleCallbackID);
          }
          if (requestTimerEventBeforeFirstFrame) {
            _clearTimeout(idleTimeoutID);
          }
          onAnimationFrame(rAFTime);
        });

        // If we just missed the last vsync, the next rAF might not happen for
        // another frame. To claim as much idle time as possible, post a
        // callback with `requestIdleCallback`, which should fire if there's
        // idle time left in the frame.
        //
        // This should only be an issue for the first rAF in the loop;
        // subsequent rAFs are scheduled at the beginning of the
        // preceding frame.
        var idleCallbackID = void 0;
        if (requestIdleCallbackBeforeFirstFrame$1) {
          idleCallbackID = requestIdleCallback(function onIdleCallbackBeforeFirstFrame() {
            if (requestTimerEventBeforeFirstFrame) {
              _clearTimeout(idleTimeoutID);
            }
            frameDeadline = exports.unstable_now() + frameLength;
            performWorkUntilDeadline();
          });
        }
        // Alternate strategy to address the same problem. Scheduler a timer
        // with no delay. If this fires before the rAF, that likely indicates
        // that there's idle time before the next vsync. This isn't always the
        // case, but we'll be aggressive and assume it is, as a trade off to
        // prevent idle periods.
        var idleTimeoutID = void 0;
        if (requestTimerEventBeforeFirstFrame) {
          idleTimeoutID = _setTimeout(function onTimerEventBeforeFirstFrame() {
            if (requestIdleCallbackBeforeFirstFrame$1) {
              cancelIdleCallback(idleCallbackID);
            }
            frameDeadline = exports.unstable_now() + frameLength;
            performWorkUntilDeadline();
          }, 0);
        }
      }
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);
    taskTimeoutID = -1;
  };
}

/* eslint-disable no-var */

// TODO: Use symbols?
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt = 1073741823;

// Times out immediately
var IMMEDIATE_PRIORITY_TIMEOUT = -1;
// Eventually times out
var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000;
// Never times out
var IDLE_PRIORITY = maxSigned31BitInt;

// Tasks are stored as a circular, doubly linked list.
var firstTask = null;
var firstDelayedTask = null;

// Pausing the scheduler is useful for debugging.
var isSchedulerPaused = false;

var currentTask = null;
var currentPriorityLevel = NormalPriority;

// This is set while performing work, to prevent re-entrancy.
var isPerformingWork = false;

var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function scheduler_flushTaskAtPriority_Immediate(callback, didTimeout) {
  return callback(didTimeout);
}
function scheduler_flushTaskAtPriority_UserBlocking(callback, didTimeout) {
  return callback(didTimeout);
}
function scheduler_flushTaskAtPriority_Normal(callback, didTimeout) {
  return callback(didTimeout);
}
function scheduler_flushTaskAtPriority_Low(callback, didTimeout) {
  return callback(didTimeout);
}
function scheduler_flushTaskAtPriority_Idle(callback, didTimeout) {
  return callback(didTimeout);
}

function flushTask(task, currentTime) {
  // Remove the task from the list before calling the callback. That way the
  // list is in a consistent state even if the callback throws.
  var next = task.next;
  if (next === task) {
    // This is the only scheduled task. Clear the list.
    firstTask = null;
  } else {
    // Remove the task from its position in the list.
    if (task === firstTask) {
      firstTask = next;
    }
    var previous = task.previous;
    previous.next = next;
    next.previous = previous;
  }
  task.next = task.previous = null;

  // Now it's safe to execute the task.
  var callback = task.callback;
  var previousPriorityLevel = currentPriorityLevel;
  var previousTask = currentTask;
  currentPriorityLevel = task.priorityLevel;
  currentTask = task;
  var continuationCallback;
  try {
    var didUserCallbackTimeout = task.expirationTime <= currentTime;
    // Add an extra function to the callstack. Profiling tools can use this
    // to infer the priority of work that appears higher in the stack.
    switch (currentPriorityLevel) {
      case ImmediatePriority:
        continuationCallback = scheduler_flushTaskAtPriority_Immediate(callback, didUserCallbackTimeout);
        break;
      case UserBlockingPriority:
        continuationCallback = scheduler_flushTaskAtPriority_UserBlocking(callback, didUserCallbackTimeout);
        break;
      case NormalPriority:
        continuationCallback = scheduler_flushTaskAtPriority_Normal(callback, didUserCallbackTimeout);
        break;
      case LowPriority:
        continuationCallback = scheduler_flushTaskAtPriority_Low(callback, didUserCallbackTimeout);
        break;
      case IdlePriority:
        continuationCallback = scheduler_flushTaskAtPriority_Idle(callback, didUserCallbackTimeout);
        break;
    }
  } catch (error) {
    throw error;
  } finally {
    currentPriorityLevel = previousPriorityLevel;
    currentTask = previousTask;
  }

  // A callback may return a continuation. The continuation should be scheduled
  // with the same priority and expiration as the just-finished callback.
  if (typeof continuationCallback === 'function') {
    var expirationTime = task.expirationTime;
    var continuationTask = task;
    continuationTask.callback = continuationCallback;

    // Insert the new callback into the list, sorted by its timeout. This is
    // almost the same as the code in `scheduleCallback`, except the callback
    // is inserted into the list *before* callbacks of equal timeout instead
    // of after.
    if (firstTask === null) {
      // This is the first callback in the list.
      firstTask = continuationTask.next = continuationTask.previous = continuationTask;
    } else {
      var nextAfterContinuation = null;
      var t = firstTask;
      do {
        if (expirationTime <= t.expirationTime) {
          // This task times out at or after the continuation. We will insert
          // the continuation *before* this task.
          nextAfterContinuation = t;
          break;
        }
        t = t.next;
      } while (t !== firstTask);
      if (nextAfterContinuation === null) {
        // No equal or lower priority task was found, which means the new task
        // is the lowest priority task in the list.
        nextAfterContinuation = firstTask;
      } else if (nextAfterContinuation === firstTask) {
        // The new task is the highest priority task in the list.
        firstTask = continuationTask;
      }

      var _previous = nextAfterContinuation.previous;
      _previous.next = nextAfterContinuation.previous = continuationTask;
      continuationTask.next = nextAfterContinuation;
      continuationTask.previous = _previous;
    }
  }
}

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  if (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime) {
    do {
      var task = firstDelayedTask;
      var next = task.next;
      if (task === next) {
        firstDelayedTask = null;
      } else {
        firstDelayedTask = next;
        var previous = task.previous;
        previous.next = next;
        next.previous = previous;
      }
      task.next = task.previous = null;
      insertScheduledTask(task, task.expirationTime);
    } while (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (firstTask !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else if (firstDelayedTask !== null) {
      requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  // Exit right away if we're currently paused
  if (enableSchedulerDebugging && isSchedulerPaused) {
    return;
  }

  // We'll need a host callback the next time work is scheduled.
  isHostCallbackScheduled = false;
  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  var currentTime = initialTime;
  advanceTimers(currentTime);

  isPerformingWork = true;
  try {
    if (!hasTimeRemaining) {
      // Flush all the expired callbacks without yielding.
      // TODO: Split flushWork into two separate functions instead of using
      // a boolean argument?
      while (firstTask !== null && firstTask.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused)) {
        flushTask(firstTask, currentTime);
        currentTime = exports.unstable_now();
        advanceTimers(currentTime);
      }
    } else {
      // Keep flushing callbacks until we run out of time in the frame.
      if (firstTask !== null) {
        do {
          flushTask(firstTask, currentTime);
          currentTime = exports.unstable_now();
          advanceTimers(currentTime);
        } while (firstTask !== null && !shouldYieldToHost() && !(enableSchedulerDebugging && isSchedulerPaused));
      }
    }
    // Return whether there's additional work
    if (firstTask !== null) {
      return true;
    } else {
      if (firstDelayedTask !== null) {
        requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);
      }
      return false;
    }
  } finally {
    isPerformingWork = false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;
    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;
  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;
    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;
    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;
    case IdlePriority:
      return IDLE_PRIORITY;
    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;
    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();

  var startTime;
  var timeout;
  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;
    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }
    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;

  var newTask = {
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    next: null,
    previous: null
  };

  if (startTime > currentTime) {
    // This is a delayed task.
    insertDelayedTask(newTask, startTime);
    if (firstTask === null && firstDelayedTask === newTask) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      }
      // Schedule a timeout.
      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    insertScheduledTask(newTask, expirationTime);
    // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.
    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function insertScheduledTask(newTask, expirationTime) {
  // Insert the new task into the list, ordered first by its timeout, then by
  // insertion. So the new task is inserted after any other task the
  // same timeout
  if (firstTask === null) {
    // This is the first task in the list.
    firstTask = newTask.next = newTask.previous = newTask;
  } else {
    var next = null;
    var task = firstTask;
    do {
      if (expirationTime < task.expirationTime) {
        // The new task times out before this one.
        next = task;
        break;
      }
      task = task.next;
    } while (task !== firstTask);

    if (next === null) {
      // No task with a later timeout was found, which means the new task has
      // the latest timeout in the list.
      next = firstTask;
    } else if (next === firstTask) {
      // The new task has the earliest expiration in the entire list.
      firstTask = newTask;
    }

    var previous = next.previous;
    previous.next = next.previous = newTask;
    newTask.next = next;
    newTask.previous = previous;
  }
}

function insertDelayedTask(newTask, startTime) {
  // Insert the new task into the list, ordered by its start time.
  if (firstDelayedTask === null) {
    // This is the first task in the list.
    firstDelayedTask = newTask.next = newTask.previous = newTask;
  } else {
    var next = null;
    var task = firstDelayedTask;
    do {
      if (startTime < task.startTime) {
        // The new task times out before this one.
        next = task;
        break;
      }
      task = task.next;
    } while (task !== firstDelayedTask);

    if (next === null) {
      // No task with a later timeout was found, which means the new task has
      // the latest timeout in the list.
      next = firstDelayedTask;
    } else if (next === firstDelayedTask) {
      // The new task has the earliest expiration in the entire list.
      firstDelayedTask = newTask;
    }

    var previous = next.previous;
    previous.next = next.previous = newTask;
    newTask.next = next;
    newTask.previous = previous;
  }
}

function unstable_pauseExecution() {
  isSchedulerPaused = true;
}

function unstable_continueExecution() {
  isSchedulerPaused = false;
  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return firstTask;
}

function unstable_cancelCallback(task) {
  var next = task.next;
  if (next === null) {
    // Already cancelled.
    return;
  }

  if (task === next) {
    if (task === firstTask) {
      firstTask = null;
    } else if (task === firstDelayedTask) {
      firstDelayedTask = null;
    }
  } else {
    if (task === firstTask) {
      firstTask = next;
    } else if (task === firstDelayedTask) {
      firstDelayedTask = next;
    }
    var previous = task.previous;
    previous.next = next;
    next.previous = previous;
  }

  task.next = task.previous = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  return currentTask !== null && firstTask !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;

exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_IdlePriority = IdlePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_next = unstable_next;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/simple-swizzle/index.js":
/*!**********************************************!*\
  !*** ./node_modules/simple-swizzle/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isArrayish = __webpack_require__(/*! is-arrayish */ "./node_modules/simple-swizzle/node_modules/is-arrayish/index.js");

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ "./node_modules/simple-swizzle/node_modules/is-arrayish/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/simple-swizzle/node_modules/is-arrayish/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ }),

/***/ "./node_modules/svg-arc-to-cubic-bezier/modules/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/svg-arc-to-cubic-bezier/modules/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var TAU = Math.PI * 2;

var mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
  var x = _ref.x,
      y = _ref.y;

  x *= rx;
  y *= ry;

  var xp = cosphi * x - sinphi * y;
  var yp = sinphi * x + cosphi * y;

  return {
    x: xp + centerx,
    y: yp + centery
  };
};

var approxUnitArc = function approxUnitArc(ang1, ang2) {
  // If 90 degree circular arc, use a constant
  // as derived from http://spencermortensen.com/articles/bezier-circle
  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);

  var x1 = Math.cos(ang1);
  var y1 = Math.sin(ang1);
  var x2 = Math.cos(ang1 + ang2);
  var y2 = Math.sin(ang1 + ang2);

  return [{
    x: x1 - y1 * a,
    y: y1 + x1 * a
  }, {
    x: x2 + y2 * a,
    y: y2 - x2 * a
  }, {
    x: x2,
    y: y2
  }];
};

var vectorAngle = function vectorAngle(ux, uy, vx, vy) {
  var sign = ux * vy - uy * vx < 0 ? -1 : 1;

  var dot = ux * vx + uy * vy;

  if (dot > 1) {
    dot = 1;
  }

  if (dot < -1) {
    dot = -1;
  }

  return sign * Math.acos(dot);
};

var getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
  var rxsq = Math.pow(rx, 2);
  var rysq = Math.pow(ry, 2);
  var pxpsq = Math.pow(pxp, 2);
  var pypsq = Math.pow(pyp, 2);

  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;

  if (radicant < 0) {
    radicant = 0;
  }

  radicant /= rxsq * pypsq + rysq * pxpsq;
  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);

  var centerxp = radicant * rx / ry * pyp;
  var centeryp = radicant * -ry / rx * pxp;

  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;

  var vx1 = (pxp - centerxp) / rx;
  var vy1 = (pyp - centeryp) / ry;
  var vx2 = (-pxp - centerxp) / rx;
  var vy2 = (-pyp - centeryp) / ry;

  var ang1 = vectorAngle(1, 0, vx1, vy1);
  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);

  if (sweepFlag === 0 && ang2 > 0) {
    ang2 -= TAU;
  }

  if (sweepFlag === 1 && ang2 < 0) {
    ang2 += TAU;
  }

  return [centerx, centery, ang1, ang2];
};

var arcToBezier = function arcToBezier(_ref2) {
  var px = _ref2.px,
      py = _ref2.py,
      cx = _ref2.cx,
      cy = _ref2.cy,
      rx = _ref2.rx,
      ry = _ref2.ry,
      _ref2$xAxisRotation = _ref2.xAxisRotation,
      xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,
      _ref2$largeArcFlag = _ref2.largeArcFlag,
      largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,
      _ref2$sweepFlag = _ref2.sweepFlag,
      sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;

  var curves = [];

  if (rx === 0 || ry === 0) {
    return [];
  }

  var sinphi = Math.sin(xAxisRotation * TAU / 360);
  var cosphi = Math.cos(xAxisRotation * TAU / 360);

  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;

  if (pxp === 0 && pyp === 0) {
    return [];
  }

  rx = Math.abs(rx);
  ry = Math.abs(ry);

  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);

  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }

  var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),
      _getArcCenter2 = _slicedToArray(_getArcCenter, 4),
      centerx = _getArcCenter2[0],
      centery = _getArcCenter2[1],
      ang1 = _getArcCenter2[2],
      ang2 = _getArcCenter2[3];

  // If 'ang2' == 90.0000000001, then `ratio` will evaluate to
  // 1.0000000001. This causes `segments` to be greater than one, which is an
  // unecessary split, and adds extra points to the bezier curve. To alleviate
  // this issue, we round to 1.0 when the ratio is close to 1.0.


  var ratio = Math.abs(ang2) / (TAU / 4);
  if (Math.abs(1.0 - ratio) < 0.0000001) {
    ratio = 1.0;
  }

  var segments = Math.max(Math.ceil(ratio), 1);

  ang2 /= segments;

  for (var i = 0; i < segments; i++) {
    curves.push(approxUnitArc(ang1, ang2));
    ang1 += ang2;
  }

  return curves.map(function (curve) {
    var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),
        x1 = _mapToEllipse.x,
        y1 = _mapToEllipse.y;

    var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),
        x2 = _mapToEllipse2.x,
        y2 = _mapToEllipse2.y;

    var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),
        x = _mapToEllipse3.x,
        y = _mapToEllipse3.y;

    return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arcToBezier);

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _applyDecoratedDescriptor)
/* harmony export */ });
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayLikeToArray)
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createForOfIteratorHelperLoose)
/* harmony export */ });
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inheritsLoose)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _unsupportedIterableToArray)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@react-pdf/fontkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayLikeToArray)
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _assertThisInitialized)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createForOfIteratorHelperLoose)
/* harmony export */ });
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/extends.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _extends)
/* harmony export */ });
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inheritsLoose)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _unsupportedIterableToArray)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@react-pdf/pdfkit/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
}

/***/ })

}]);