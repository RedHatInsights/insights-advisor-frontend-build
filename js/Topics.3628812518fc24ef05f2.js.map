{"version":3,"sources":["webpack://advisor-frontend/./src/SmartComponents/Topics/Topics.js"],"names":["List","asyncComponent","Details","Admin","reducer","state","type","payload","setLoaded","loaded","isInternal","ProtectedRoute","Component","component","props","useReducer","dispatch","useEffect","insights","chrome","auth","getUser","then","data","identity","user","is_internal","Route","render","Redirect","to","propTypes","PropTypes","Switch","exact","path","push"],"mappings":"q2BAMA,IAAMA,GAAOC,QAAe,kBAAM,4IAC5BC,GAAUD,QAAe,kBAAM,6LAC/BE,GAAQF,QAAe,kBAAM,0FAE7BG,EAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,QAAhB,MAA+B,CAAEC,UAAW,EAAF,KAAOH,GAAP,IAAcI,QAAQ,EAAMC,WAAYH,KAAYD,IAExGK,EAAiB,SAAC,GAAuC,IAA1BC,EAA0B,EAArCC,UAAyBC,EAAY,wBACjCC,gBAAWX,EAAS,CAAEM,YAAY,EAAOD,QAAQ,IADhB,WACpDJ,EADoD,KAC7CW,EAD6C,KAK3D,OAFAC,gBAAU,WAAQC,SAASC,OAAOC,KAAKC,UAAUC,MAAK,SAACC,GAAD,OAAUP,EAAS,CAAEV,KAAM,YAAaC,QAASgB,EAAKC,SAASC,KAAKC,mBAAoB,IAEvI,kBAAC,EAAAC,MAAD,OAAWb,EAAX,CAAkBc,OAAQ,SAAAd,GAAK,OAAIT,EAAMI,SAAWJ,EAAMK,WAAa,kBAACE,EAAcE,GAAY,kBAAC,EAAAe,SAAD,CAAUC,GAAG,kBAW1HnB,EAAeoB,UAAY,CAAElB,UAAWmB,SAExC,QAVe,kBAAM,kBAAC,EAAAC,OAAD,KACjB,kBAAC,EAAAN,MAAD,CAAOO,OAAK,EAACC,KAAK,UAAUtB,UAAWb,IACvC,kBAAC,EAAA2B,MAAD,CAAOO,OAAK,EAACC,KAAK,cAActB,UAAWX,IAC3C,kBAACS,EAAD,CAAgBuB,OAAK,EAACC,KAAK,uBAAuBtB,UAAWV,IAE7D,kBAAC,EAAA0B,SAAD,CAAUM,KAAK,IAAIL,GAAG,UAAUM,MAAI","file":"js/Topics.3628812518fc24ef05f2.js","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport asyncComponent from '../../Utilities/asyncComponent';\n\nconst List = asyncComponent(() => import(/* webpackChunkName: \"TopicsList\" */ './List'));\nconst Details = asyncComponent(() => import(/* webpackChunkName: \"TopicDetails\" */ './Details'));\nconst Admin = asyncComponent(() => import(/* webpackChunkName: \"TopicAdmin\" */ '../../PresentationalComponents/TopicsAdminTable/TopicsAdminTable'));\n\nconst reducer = (state, { type, payload }) => ({ setLoaded: { ...state, loaded: true, isInternal: payload } }[type]);\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n    const [state, dispatch] = useReducer(reducer, { isInternal: false, loaded: false });\n\n    useEffect(() => { insights.chrome.auth.getUser().then((data) => dispatch({ type: 'setLoaded', payload: data.identity.user.is_internal })); }, []);\n\n    return <Route {...props} render={props => state.loaded && (state.isInternal ? <Component {...props} /> : <Redirect to='/topics' />)} />;\n};\n\nconst Topics = () => <Switch>\n    <Route exact path='/topics' component={List} />\n    <Route exact path='/topics/:id' component={Details} />\n    <ProtectedRoute exact path='/topics/admin/manage' component={Admin} />\n\n    <Redirect path='*' to='/topics' push />\n</Switch>;\n\nProtectedRoute.propTypes = { component: PropTypes.any };\n\nexport default Topics;\n"],"sourceRoot":""}