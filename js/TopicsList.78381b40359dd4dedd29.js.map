{"version":3,"sources":["webpack:///./src/PresentationalComponents/Loading/Loading.js","webpack:///./src/PresentationalComponents/MessageState/MessageState.js","webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./node_modules/lodash/sortBy.js","webpack:///./src/PresentationalComponents/TopicsTable/TopicsTable.js","webpack:///./src/SmartComponents/Topics/List.js"],"names":["Loading","MessageState","className","children","icon","iconClass","iconStyle","text","title","variant","style","headingLevel","size","marginBottom","propTypes","PropTypes","any","string","defaultProps","CubesIcon","EmptyStateVariant","full","urlBuilder","filters","selectedTags","workloads","url","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","params","URLSearchParams","get","SAP","set","length","history","replaceState","origin","pathname","toString","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","encodeOptionsToURL","options","index","pruneFilters","localFilters","filterCategories","prunedFilters","arr","item","category","chips","selectedCategoryValue","values","find","String","name","label","toUpperCase","substring","urlParam","workloadQueryBuilder","SID","generateFilter","system_profile","isSelected","sap_system","sap_sids","undefined","arrayEnhancer","baseFlatten","baseOrderBy","baseRest","isIterateeCall","sortBy","collection","iteratees","module","exports","TopicsTable","topics","topicsFetchStatus","intl","useState","searchText","setSearchText","formatMessage","messages","transforms","sortable","featured","wrappable","affectedSystems","cols","rows","setRows","direction","sort","setSort","buildRows","list","flatMap","toLowerCase","includes","topic","cells","to","slug","props","colSpan","Label","color","impacted_systems_count","onSort","_event","sortedReports","0","result","2","3","sortedTopicsDirectional","SortByDirection","asc","reverse","activeFiltersConfig","onDelete","useEffect","asMutable","filterConfigItems","filterValues","onChange","event","Fragment","PrimaryToolbar","filterConfig","items","Table","aria-label","SearchIcon","noHitsTitle","noHitsBody","TimesCircleIcon","topicsListNotopicsTitle","topicsListNotopicsBody","array","injectIntl","routerParams","connect","state","AdvisorStore","List","fetchTopics","tags","PageHeader","insightsHeader","Main","displayName","func","object","ownProps","dispatch","AppActions"],"mappings":"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","file":"js/TopicsList.78381b40359dd4dedd29.js","sourcesContent":["import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { List } from 'react-content-loader';\nimport React from 'react';\nconst Loading = () => <>\n    <Card>\n        <CardBody>\n            <List />\n        </CardBody>\n    </Card></>;\n\nexport default Loading;\n","import { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\n\nimport  CubesIcon  from '@patternfly/react-icons/dist/js/icons/cubes-icon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) => (\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>\n);\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\n// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags, workloads) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n\n    //Removes invalid 'undefined' url param value\n    params.get('reports_shown') === 'undefined' && params.delete('reports_shown');\n\n    workloads?.SAP ? params.set('sap_system', true) : params.delete('sap_system');\n    selectedTags?.length ? params.set('tags', selectedTags) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// create url from options\nexport const encodeOptionsToURL = (options) => {\n    return Object.entries(options).reduce((acc, [key, value], index) => {\n        return acc += index === 0 ? `${key}=${value}` : `&${key}=${value}`;\n    }, '');\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.reduce((arr, item) => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return selectedCategoryValue ? { name: selectedCategoryValue.text || selectedCategoryValue.label, value } : { name: value, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return [...arr, { category: capitalize(category.title), chips, urlParam: category.urlParam }];\n        } else if (item[0] === 'text') {\n            return [...arr, { category: 'Name', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] }];\n        } else { return arr; }\n    }, []) : [];\n};\n\n// builds workload query filter\nexport const workloadQueryBuilder = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n}, undefined, { arrayEnhancer: 'contains' });\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","import React, { useEffect, useState } from 'react';\nimport { SortByDirection, Table, TableBody, TableHeader, sortable, wrappable } from '@patternfly/react-table';\n\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../PresentationalComponents/Loading/Loading';\nimport MessageState from '../../PresentationalComponents/MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/PrimaryToolbar';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport StarIcon from '@patternfly/react-icons/dist/js/icons/star-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { sortBy } from 'lodash';\n\nconst TopicsTable = ({ topics, topicsFetchStatus, intl }) => {\n    const [searchText, setSearchText] = useState('');\n    const [cols] = useState([\n        { title: intl.formatMessage(messages.name), transforms: [sortable] },\n        '',\n        { title: intl.formatMessage(messages.featured), transforms: [sortable, wrappable] },\n        { title: intl.formatMessage(messages.affectedSystems), transforms: [sortable, wrappable] }\n    ]);\n    const [rows, setRows] = useState([]);\n    const [sort, setSort] = useState({ index: 2, direction: 'desc' });\n\n    const buildRows = (list) => list.flatMap((value, key) => {\n        const isValidSearchText = searchText.length === 0 || value.name.toLowerCase().includes(searchText.toLowerCase());\n\n        return isValidSearchText ? [{\n            topic: value,\n            cells: [{\n                title: <span key={key}><Link key={key} to={`/topics/${value.slug}`}> {value.name} </Link></span>,\n                props: { colSpan: 2 }\n            }, {\n                title: <span key={key}> {value.featured &&\n                    <Label color=\"blue\" icon={<StarIcon />}>{intl.formatMessage(messages.featured)}</Label>\n                } </span>\n            }, {\n                title: <span className=\"pf-m-center\" key={key}> {value.impacted_systems_count}                </span>\n            }]\n        }] : [];\n    });\n\n    const onSort = (_event, index, direction) => {\n        const sortedReports = {\n            0: sortBy(topics, [result => result.name]),\n            2: sortBy(topics, [result => result.featured]),\n            3: sortBy(topics, [result => result.impacted_systems_count])\n        };\n        const sortedTopicsDirectional = direction === SortByDirection.asc ? sortedReports[index] : sortedReports[index].reverse();\n        setSort({ index, direction });\n        setRows(buildRows(sortedTopicsDirectional));\n    };\n\n    const activeFiltersConfig = {\n        filters: searchText.length ? [{ category: 'Description', chips: [{ name: searchText, value: searchText }] }] : [],\n        onDelete: () => { setSearchText(''); setSort({}); }\n    };\n\n    useEffect(() => {\n        sort.index ? onSort(null, sort.index, sort.direction) : setRows(buildRows(topics).asMutable());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [topics, searchText]);\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => { setSearchText(value); setSort({}); },\n            value: searchText\n        }\n    }];\n\n    return <React.Fragment>\n        {topicsFetchStatus === '' || topicsFetchStatus === 'pending' && <Loading />}\n        {topicsFetchStatus === 'fulfilled' && topics.length > 0 &&\n            <React.Fragment>\n                <PrimaryToolbar\n                    filterConfig={{ items: filterConfigItems }}\n                    activeFiltersConfig={activeFiltersConfig}\n                />\n                <Table aria-label={'topics-table'} sortBy={sort} onSort={onSort} cells={cols} rows={rows} >\n                    <TableHeader />\n                    <TableBody />\n                    {rows.length === 0 && topicsFetchStatus !== 'pending' && setRows([{\n                        cells: [{\n                            title: (\n                                <MessageState icon={SearchIcon}\n                                    title={intl.formatMessage(messages.noHitsTitle, { item: intl.formatMessage(messages.topics).toLowerCase() })}\n                                    text={intl.formatMessage(messages.noHitsBody, { item: intl.formatMessage(messages.topics).toLowerCase() })} />),\n                            props: { colSpan: 4 }\n                        }]\n                    }])\n                    }\n                </Table>\n            </React.Fragment>\n        }\n        {topicsFetchStatus === 'failed' || topicsFetchStatus === 'rejected' || (topicsFetchStatus === 'fulfilled' && topics.length === 0) &&\n            < MessageState icon={TimesCircleIcon}\n                title={intl.formatMessage(messages.topicsListNotopicsTitle)}\n                text={intl.formatMessage(messages.topicsListNotopicsBody)} />\n        }\n    </React.Fragment>;\n};\n\nTopicsTable.propTypes = {\n    topics: PropTypes.array,\n    topicsFetchStatus: PropTypes.string,\n    intl: PropTypes.any\n};\n\nexport default injectIntl(routerParams(connect((state) => ({\n    topics: state.AdvisorStore.topics,\n    topicsFetchStatus: state.AdvisorStore.topicsFetchStatus\n}), null)(TopicsTable)));\n\n","import * as AppActions from '../../AppActions';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/components/Main';\nimport PropTypes from 'prop-types';\nimport TopicsTable from '../../PresentationalComponents/TopicsTable/TopicsTable';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { workloadQueryBuilder } from '../../PresentationalComponents/Common/Tables';\n\nconst List = ({ fetchTopics, intl, selectedTags, workloads, SID }) => {\n    useEffect(() => {\n        let options = selectedTags !== null && selectedTags.length && ({ tags: selectedTags });\n        workloads && (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n        fetchTopics(options);\n    }, [fetchTopics, selectedTags, workloads, SID]);\n\n    return <React.Fragment>\n        <PageHeader>\n            <PageHeaderTitle title={`${intl.formatMessage(messages.insightsHeader)} ${intl.formatMessage(messages.topics).toLowerCase()}`} />\n        </PageHeader>\n        <Main>\n            <TopicsTable />\n        </Main>\n    </React.Fragment>;\n};\n\nList.displayName = 'list-topics';\nList.propTypes = {\n    fetchTopics: PropTypes.func, intl: PropTypes.any,\n    selectedTags: PropTypes.array, workloads: PropTypes.object, SID: PropTypes.object\n};\nconst mapStateToProps = ({ AdvisorStore, ownProps }) => ({\n    selectedTags: AdvisorStore.selectedTags,\n    workloads: AdvisorStore.workloads,\n    SID: AdvisorStore.SID,\n    ...ownProps\n});\nconst mapDispatchToProps = dispatch => ({ fetchTopics: (options) => dispatch(AppActions.fetchTopics(options)) });\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(List)));\n"],"sourceRoot":""}