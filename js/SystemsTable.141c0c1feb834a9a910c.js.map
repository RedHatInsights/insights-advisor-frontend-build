{"version":3,"sources":["webpack:///./src/PresentationalComponents/Common/Tables.js","webpack:///./src/PresentationalComponents/Common/DownloadHelper.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.scss","webpack:///./src/PresentationalComponents/Export/_Export.scss","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.scss?b38d","webpack:///./src/PresentationalComponents/Export/_Export.scss?3c1a","webpack:///./src/PresentationalComponents/Export/SystemsPdfBuild.js","webpack:///./src/PresentationalComponents/Export/SystemsPdf.js","webpack:///./src/PresentationalComponents/SystemsTable/SystemsTable.js"],"names":["urlBuilder","filters","selectedTags","workloads","url","URL","window","location","queryString","Object","keys","map","key","Array","isArray","join","params","URLSearchParams","get","SAP","set","length","history","replaceState","origin","pathname","toString","filterFetchBuilder","assign","entries","filterName","filterValue","paramParser","searchParams","search","from","reduce","acc","value","JSON","parse","split","encodeOptionsToURL","options","index","pruneFilters","localFilters","filterCategories","prunedFilters","arr","item","category","chips","selectedCategoryValue","values","find","String","name","text","label","string","title","toUpperCase","substring","urlParam","workloadQueryBuilder","SID","generateFilter","system_profile","isSelected","sap_system","sap_sids","fileName","exportTable","defaultParams","date","Date","toISOString","replace","downloadHelper","format","a","API","BASE_URL","payload","data","stringify","downloadFile","exports","___CSS_LOADER_API_IMPORT___","push","module","i","content","transform","undefined","update","locals","hot","accept","newContent","b","idx","Error","dispose","styles","StyleSheet","create","bold","fontWeight","global_FontWeight_bold","link","color","global_link_Color","marginTop","global_spacer_md","nameColumn","width","header","fontSize","chart_global_Fill_Color_700","paddingLeft","c_table_m_compact_cell_PaddingLeft","paddingBottom","c_table_m_compact_cell_PaddingBottom","paddingTop","c_table_m_compact_cell_PaddingTop","tablePage","page","systems","intl","formatMessage","messages","style","recommendations","textAlign","critical","important","moderate","low","lastSeen","marginLeft","hitColumns","rows","system","last_seen","toUTCString","month","year","time","sysDate","slice","system_uuid","src","display_name","Fragment","withHeader","propTypes","PropTypes","object","number","any","leadPage","systemsTotal","tags","offset","limit","insightsHeader","sysTableCount","execReportHeaderSystems","filtersApplied","tagsApplied","decodeURIComponent","noTags","array","SystemsPdf","systemsCount","useIntl","useState","loading","setLoading","dataFetch","Promise","SYSTEMS_FETCH_URL","all","firstPage","meta","count","otherPages","resultArray","chunkIndex","Math","floor","pageSystems","useMemo","allPagesHaveTitle","exportPdf","asyncFunction","buttonProps","variant","component","className","isDisabled","reportName","type","size","SystemsTable","sortIndex","sortDirection","systemsFetchStatus","fetchSystems","setFilters","inventory","useRef","InventoryTable","setInventory","store","useStore","results","searchText","setSearchText","debouncedSearchText","debounce","DEBOUNCE_DELAY","filterBuilding","setFilterBuilding","sortIndices","0","1","2","3","4","5","6","fetchSystemsFn","useCallback","removeFilterParam","param","filter","hits","filterConfigItems","filterValues","onChange","event","SFC","id","includes","shift","addFilterParam","items","activeFiltersConfig","sort","onDelete","itemsToRemove","isAll","newFilter","useEffect","transforms","pfReactTable","numberRuleHits","insights","loadInventory","ReactRedux","react","React","reactRouterDom","pfReact","reactCore","inventoryConnector","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","systemReducer","copyFilters","paramsObject","Number","ref","isFullView","sortBy","direction","onSort","orderParam","hasCheckbox","total","isLoaded","perPage","onRefresh","per_page","filterConfig","exportConfig","onSelect","_e","fileType","downloadReport","extraItems","role","Failed","message","systemTableFetchError","Loading","func","addNotification","injectIntl","routerParams","connect","AdvisorStore","filtersSystems","dispatch","AppActions"],"mappings":"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","file":"js/SystemsTable.141c0c1feb834a9a910c.js","sourcesContent":["import { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\n// Builds returns url params from table filters, pushes to url if history object is passed\nexport const urlBuilder = (filters, selectedTags, workloads) => {\n    const url = new URL(window.location);\n    const queryString = `${Object.keys(filters).map(key => `${key}=${Array.isArray(filters[key]) ? filters[key].join() : filters[key]}`).join('&')}`;\n    const params = new URLSearchParams(queryString);\n\n    //Removes invalid 'undefined' url param value\n    params.get('reports_shown') === 'undefined' && params.delete('reports_shown');\n\n    workloads?.SAP ? params.set('sap_system', true) : params.delete('sap_system');\n    selectedTags?.length ? params.set('tags', selectedTags) : params.delete('tags');\n    window.history.replaceState(null, null, `${url.origin}${url.pathname}?${params.toString()}`);\n    return `?${queryString}`;\n};\n\n// transforms array of strings -> comma seperated strings, required by advisor api\nexport const filterFetchBuilder = (filters) => Object.assign({},\n    ...Object.entries(filters).map(([filterName, filterValue]) => Array.isArray(filterValue) ?\n        ((filterValue[0] === 'true') || (filterValue[0] === 'false')) && filterValue.length > 1 ? null\n            : { [filterName]: filterValue.join() }\n        : { [filterName]: filterValue })\n);\n\n// parses url params for use in table/filter chips\nexport const paramParser = () => {\n    const searchParams = new URLSearchParams(window.location.search);\n    return Array.from(searchParams).reduce((acc, [key, value]) => ({\n        ...acc, [key]: (value === 'true' || value === 'false') ? JSON.parse(value) : value.split(',')\n    }), {});\n};\n\n// create url from options\nexport const encodeOptionsToURL = (options) => {\n    return Object.entries(options).reduce((acc, [key, value], index) => {\n        return acc += index === 0 ? `${key}=${value}` : `&${key}=${value}`;\n    }, '');\n};\n\n// capitalizes text string\nexport const capitalize = (string) => string[0].toUpperCase() + string.substring(1);\n\nexport const pruneFilters = (localFilters, filterCategories) => {\n    const prunedFilters = Object.entries(localFilters);\n    return prunedFilters.length > 0 ? prunedFilters.reduce((arr, item) => {\n        if (filterCategories[item[0]]) {\n            const category = filterCategories[item[0]];\n            const chips = Array.isArray(item[1]) ? item[1].map(value => {\n                const selectedCategoryValue = category.values.find(values => values.value === String(value));\n                return selectedCategoryValue ? { name: selectedCategoryValue.text || selectedCategoryValue.label, value } : { name: value, value };\n            })\n                : [{ name: category.values.find(values => values.value === String(item[1])).label, value: item[1] }];\n            return [...arr, { category: capitalize(category.title), chips, urlParam: category.urlParam }];\n        } else if (item[0] === 'text') {\n            return [...arr, { category: 'Name', chips: [{ name: item[1], value: item[1] }], urlParam: item[0] }];\n        } else { return arr; }\n    }, []) : [];\n};\n\n// builds workload query filter\nexport const workloadQueryBuilder = (workloads, SID) => generateFilter({\n    system_profile: {\n        ...workloads?.SAP?.isSelected && { sap_system: true },\n        ...SID?.length > 0 && { sap_sids: SID }\n    }\n});\n","import API from '../../Utilities/Api';\nimport { BASE_URL } from '../../AppConstants';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nconst fileName = (exportTable) => {\n    const defaultParams = {\n        date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n    };\n\n    return `Insights-Advisor_${exportTable}--${defaultParams.date}`;\n};\n\nconst downloadHelper = async (exportTable, format, params) => {\n    try {\n        const payload = await API.get(`${BASE_URL}/export/${exportTable}.${format === 'json' ? 'json' : 'csv'}${params}`);\n        let data = format === 'json' ? JSON.stringify(payload.data) : payload.data;\n        downloadFile(data, fileName(exportTable), format);\n    } catch (error) {\n        throw `${error}`;\n    }\n};\n\nexport default downloadHelper;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".pf-c-table__sort-indicator{margin-left:var(--pf-global--spacer--xs)}.pf-c-table th,td{padding-right:0px !important}.pf-c-table tr>:last-child{padding-left:var(--pf-global--spacer--xs)}.pf-c-table .pf-c-table__sort{min-width:initial}table.ins-c-entity-table.pf-c-table .ins-composed-col *{font-size:var(--pf-global--FontSize--md)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".systemsPdfOverride{text-align:left !important;border-radius:0 !important}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./SystemsTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_Export.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/* eslint-disable react/prop-types */\n\nimport { Column, Section, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Link, StyleSheet, Text } from '@react-pdf/renderer';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport c_table_m_compact_cell_PaddingBottom from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingBottom';\nimport c_table_m_compact_cell_PaddingLeft from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingLeft';\nimport c_table_m_compact_cell_PaddingTop from '@patternfly/react-tokens/dist/js/c_table_m_compact_cell_PaddingTop';\nimport chart_global_Fill_Color_700 from '@patternfly/react-tokens/dist/js/chart_global_Fill_Color_700';\nimport global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';\nimport global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport messages from '../../Messages';\n\nconst styles = StyleSheet.create({\n    bold: { fontWeight: global_FontWeight_bold.value },\n    link: { color: global_link_Color.value },\n    text: { marginTop: global_spacer_md.value },\n    nameColumn: { width: '220px' },\n    header: {\n        fontSize: 9,\n        color: chart_global_Fill_Color_700.value,\n        paddingLeft: c_table_m_compact_cell_PaddingLeft.value,\n        paddingBottom: c_table_m_compact_cell_PaddingBottom.value,\n        paddingTop: c_table_m_compact_cell_PaddingTop.value\n    }\n});\n\nexport const tablePage = ({ page, systems, intl }) => {\n    const header = [{ value: intl.formatMessage(messages.name), style: styles.nameColumn },\n        { value: intl.formatMessage(messages.recommendations), style: { width: '100px', textAlign: 'center' } },\n        { value: intl.formatMessage(messages.critical), style: { width: '70px', textAlign: 'center' } },\n        { value: intl.formatMessage(messages.important), style: { width: '70px', textAlign: 'center' } },\n        { value: intl.formatMessage(messages.moderate), style: { width: '60px', textAlign: 'center' } },\n        { value: intl.formatMessage(messages.low), style: { width: '90px', textAlign: 'center' } },\n        { value: intl.formatMessage(messages.lastSeen), style: { marginLeft: '20px' } }];\n    const hitColumns = ['hits', 'critical_hits', 'important_hits', 'moderate_hits', 'low_hits'];\n    const headerBuilder = ({ value, style }) => <Text style={{ ...style, ...styles.header, ...styles.bold }}>{value}</Text>;\n    const rowBuilder = ({ value, style }) => <Text style={style}>{value}</Text>;\n    const rows = [\n        ...systems.map(system => {\n            const [, date, month, year, time] = new Date(system.last_seen).toUTCString().split(' ');\n            const sysDate = `${date} ${month} ${year}, ${time.split(':').slice(0, 2).join(':')} UTC`;\n            return [\n                <Text key={system.system_uuid} style={styles.nameColumn}><Link style={styles.link}\n                    src={`https://cloud.redhat.com/insights/advisor/systems/${system.system_uuid}/`}>{system.display_name}</Link></Text>,\n                ...hitColumns.map(item => rowBuilder({ style: { width: '10px' }, value: system[item] })),\n                <Text key={system.last_seen} style={{ width: '100px' }}>{`${sysDate}`}</Text>\n            ];\n        })];\n\n    return <React.Fragment key={page}>\n        <Column>\n            <Table withHeader rows={[header.map(item => headerBuilder(item)), ...rows]} />\n        </Column>\n    </React.Fragment >;\n};\n\ntablePage.propTypes = {\n    systems: PropTypes.object,\n    page: PropTypes.number,\n    intl: PropTypes.any\n};\n\nexport const leadPage = ({ systemsTotal, systems, filters, tags, intl }) => {\n    delete filters.offset;\n    delete filters.limit;\n    return <React.Fragment key={`${intl.formatMessage(messages.insightsHeader)}: ${intl.formatMessage(messages.systems)}`}>\n        <Text key='sys-count' style={styles.text}>\n            {intl.formatMessage(messages.sysTableCount, {\n                systems: <Text key='sys-count-count' style={styles.bold}>\n                    {intl.formatMessage(messages.execReportHeaderSystems, { systems: systemsTotal })}\n                </Text>\n            })}\n        </Text>\n        <Text key='sys-filters' style={styles.text}>\n            {intl.formatMessage(messages.filtersApplied)}\n        </Text>\n        <Text key='sys-filters-values' style={styles.bold}>\n            {Object.entries(filters).map(value => <Text key={value}>{`${value[0]}: ${value[1]}     `}</Text>)}\n        </Text>\n        <Text key='sys-tags' style={styles.text}>\n            {intl.formatMessage(messages.tagsApplied)}\n        </Text>\n        <Text key='sys-tags-values' style={styles.bold}>{tags ? decodeURIComponent(tags) : intl.formatMessage(messages.noTags)}</Text>\n        <Section key='systems' title='Systems'>\n            {tablePage({ systems, intl })}\n        </Section>\n    </React.Fragment >;\n};\n\nleadPage.propTypes = {\n    systems: PropTypes.object,\n    systemsTotal: PropTypes.number,\n    filters: PropTypes.object,\n    tags: PropTypes.array,\n    intl: PropTypes.any\n};\n","import './_Export.scss';\n\nimport React, { useMemo, useState } from 'react';\nimport { leadPage, tablePage } from './SystemsPdfBuild';\n\nimport API from '../../Utilities/Api';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport PropTypes from 'prop-types';\nimport { SYSTEMS_FETCH_URL } from '../../AppConstants';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SystemsPdf = ({ filters, selectedTags, systemsCount }) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n\n    const dataFetch = async () => {\n        setLoading(true);\n        const options = selectedTags.length && ({ tags: selectedTags });\n        const [systems] = await Promise.all([(await API.get(SYSTEMS_FETCH_URL, {}, { ...filters, ...options, limit: systemsCount })).data]);\n        const firstPage = leadPage({ systemsTotal: systems.meta.count, systems: systems.data.slice(0, 18), filters, tags: selectedTags, intl });\n\n        const otherPages = systems.data.slice(18, systems.data.length).reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / 31);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((pageSystems, index) => tablePage({ page: index, systems: pageSystems, intl }))];\n    };\n\n    return useMemo(() => {\n        return <DownloadButton\n            allPagesHaveTitle={false}\n            label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.exportPdf)}\n            asyncFunction={dataFetch}\n            buttonProps={{\n                variant: '', component: 'button', className: 'pf-c-dropdown__menu-item systemsPdfOverride', ...(loading ? { isDisabled: true } : null)\n            }}\n            reportName={`${intl.formatMessage(messages.insightsHeader)}:`}\n            type={intl.formatMessage(messages.systems)}\n            fileName={`Advisor_systems--${(new Date()).toUTCString().replace(/ /g, '-')}.pdf`}\n            size={[841.89, 595.28]}\n        />;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [loading]);\n};\n\nSystemsPdf.propTypes = {\n    filters: PropTypes.object,\n    selectedTags: PropTypes.string,\n    systemsCount: PropTypes.number\n};\n\nexport default SystemsPdf;\n","import './SystemsTable.scss';\n\nimport * as AppActions from '../../AppActions';\nimport * as ReactRedux from 'react-redux';\nimport * as pfReactTable from '@patternfly/react-table';\nimport * as reactRouterDom from 'react-router-dom';\n\nimport { DEBOUNCE_DELAY, SYSTEM_FILTER_CATEGORIES as SFC } from '../../AppConstants';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { filterFetchBuilder, paramParser, pruneFilters, urlBuilder, workloadQueryBuilder } from '../Common/Tables';\n\nimport Failed from '../Loading/Failed';\nimport Loading from '../Loading/Loading';\nimport PropTypes from 'prop-types';\nimport SystemsPdf from '../Export/SystemsPdf';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport debounce from '../../Utilities/Debounce';\nimport downloadReport from '../Common/DownloadHelper';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { systemReducer } from '../../AppReducer';\n\nconst SystemsTable = ({ systemsFetchStatus, fetchSystems, systems, intl, filters, setFilters, selectedTags, workloads, SID }) => {\n    const inventory = useRef(null);\n    const [InventoryTable, setInventory] = useState();\n    const store = useStore();\n    const results = systems.meta ? systems.meta.count : 0;\n    const [searchText, setSearchText] = useState(filters.display_name || '');\n    const debouncedSearchText = debounce(searchText, DEBOUNCE_DELAY);\n    const [filterBuilding, setFilterBuilding] = useState(true);\n    const sortIndices = {\n        0: 'display_name',\n        1: 'hits',\n        2: 'critical_hits',\n        3: 'important_hits',\n        4: 'moderate_hits',\n        5: 'low_hits',\n        6: 'last_seen'\n    };\n\n    const onSort = ({ index, direction }) => {\n        const orderParam = `${direction === 'asc' ? '' : '-'}${sortIndices[index]}`;\n        setFilters({ ...filters, sort: orderParam, offset: 0 });\n    };\n\n    const fetchSystemsFn = useCallback(() => {\n        let options = selectedTags.length && ({ tags: selectedTags });\n        workloads && (options = { ...options, ...workloadQueryBuilder(workloads, SID) });\n        fetchSystems({ ...filterFetchBuilder(filters), ...options });\n    }, [fetchSystems, filters, selectedTags, workloads, SID]);\n\n    const removeFilterParam = (param) => {\n        const filter = { ...filters, offset: 0 };\n        param === 'text' && setSearchText('');\n        delete filter[param];\n        param === 'hits' && filter.hits === undefined && (filter.hits = ['yes']);\n        setFilters(filter);\n    };\n\n    const addFilterParam = (param, values) => {\n        // remove 'yes' from the hits filter if the user chooses any other filters (its always the first item)\n        param === 'hits' && values.length > 1 && values.includes('yes') && values.shift();\n        values.length > 0 ? setFilters({ ...filters, offset: 0, ...{ [param]: values } }) : removeFilterParam(param);\n    };\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (event, value) => setSearchText(value),\n            value: searchText\n        }\n    }, {\n        label: SFC.hits.title,\n        type: SFC.hits.type,\n        id: SFC.hits.urlParam,\n        value: `checkbox-${SFC.hits.urlParam}`,\n        filterValues: {\n            key: `${SFC.hits.urlParam}-filter`,\n            onChange: (event, values) => addFilterParam(SFC.hits.urlParam, values),\n            value: filters.hits,\n            items: SFC.hits.values\n        }\n    }];\n\n    const buildFilterChips = () => {\n        const localFilters = { ...filters };\n        localFilters.hits && localFilters.hits.includes('yes') && delete localFilters.hits;\n        delete localFilters.sort;\n        delete localFilters.offset;\n        delete localFilters.limit;\n\n        return pruneFilters(localFilters, SFC);\n    };\n\n    const activeFiltersConfig = {\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                setSearchText('');\n                setFilters({ sort: filters.sort, limit: filters.limit, offset: filters.offset, hits: ['yes'] });\n            } else {\n                itemsToRemove.map(item => {\n                    const newFilter = {\n                        [item.urlParam]: Array.isArray(filters[item.urlParam]) ?\n                            filters[item.urlParam].filter(value => String(value) !== String(item.chips[0].value))\n                            : ''\n                    };\n                    newFilter[item.urlParam].length > 0 ? setFilters({ ...filters, ...newFilter }) : removeFilterParam(item.urlParam);\n                });\n            }\n        }\n    };\n\n    const handleRefresh = (options) => {\n        if (systemsFetchStatus === 'fulfilled') {\n            const { offset, limit } = filters;\n            const newOffset = (options.page * options.per_page) - options.per_page;\n            if (newOffset !== offset || limit !== options.per_page) {\n                setFilters({\n                    ...filters,\n                    limit: options.per_page,\n                    offset: (options.page * options.per_page) - options.per_page\n                });\n            }\n        }\n    };\n\n    const calculateSort = () => {\n        const sortIndex = Number(Object.entries(sortIndices).find(item => item[1] === filters.sort || `-${item[1]}` === filters.sort)[0]);\n        const sortDirection = filters.sort[0] === '-' ? 'desc' : 'asc';\n        return {\n            index: sortIndex,\n            key: sortIndex !== 6 ? sortIndices[sortIndex] : 'updated',\n            direction: sortDirection\n        };\n    };\n\n    useEffect(() => {\n        (async () => {\n            const rows = [{\n                title: intl.formatMessage(messages.name), transforms: [pfReactTable.sortable, pfReactTable.cellWidth(80)], key: 'display_name'\n            },\n            { title: intl.formatMessage(messages.numberRuleHits), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'hits' },\n            { title: intl.formatMessage(messages.critical), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'critical_hits' },\n            { title: intl.formatMessage(messages.important), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'important_hits' },\n            { title: intl.formatMessage(messages.moderate), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'moderate_hits' },\n            { title: intl.formatMessage(messages.low), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'low_hits' },\n            { title: intl.formatMessage(messages.lastSeen), transforms: [pfReactTable.sortable, pfReactTable.wrappable], key: 'updated' }];\n            const { inventoryConnector, mergeWithEntities, INVENTORY_ACTION_TYPES\n            } = await insights.loadInventory({\n                ReactRedux,\n                react: React,\n                reactRouterDom,\n                pfReactTable,\n                pfReact: reactCore\n            });\n            getRegistry().register({\n                ...mergeWithEntities(\n                    systemReducer(\n                        [...rows],\n                        INVENTORY_ACTION_TYPES\n                    )\n                )\n            });\n\n            const { InventoryTable } = inventoryConnector(store);\n            setInventory(() => InventoryTable);\n        })();\n    }, [intl, store]);\n\n    useEffect(() => {\n        filters.display_name === undefined ? setSearchText('') : setSearchText(filters.display_name);\n    }, [filters.display_name]);\n\n    useEffect(() => {\n        if (!filterBuilding && systemsFetchStatus !== 'pending') {\n            const copyFilters = { ...filters };\n            delete copyFilters.display_name;\n            setFilters({\n                ...copyFilters, ...(searchText.length ? { display_name: searchText } : {}), offset: 0\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchText]);\n\n    useEffect(() => {\n        if (window.location.search) {\n            const paramsObject = paramParser();\n            delete paramsObject.tags;\n            paramsObject.sort !== undefined && (paramsObject.sort = paramsObject.sort[0]);\n            paramsObject.display_name !== undefined && (paramsObject.display_name = paramsObject.display_name[0]);\n            paramsObject.hits === undefined && (paramsObject.hits = ['all']);\n            paramsObject.offset === undefined ? paramsObject.offset = 0 : paramsObject.offset = Number(paramsObject.offset[0]);\n            paramsObject.limit === undefined ? paramsObject.limit = 10 : paramsObject.limit = Number(paramsObject.limit[0]);\n            setFilters({ ...filters, ...paramsObject });\n        } else if (filters.limit === undefined || filters.offset === undefined || filters.hits === undefined) {\n            setFilters({ ...filters, offset: 0, limit: 10, hits: ['all'] });\n        }\n\n        setFilterBuilding(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        urlBuilder(filters, selectedTags, workloads);\n    }, [filters, selectedTags, workloads]);\n\n    useEffect(() => {\n        !filterBuilding && systemsFetchStatus !== 'pending' && selectedTags !== null && fetchSystemsFn();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [fetchSystemsFn, filterBuilding, filters, selectedTags]);\n\n    return InventoryTable ?\n        systemsFetchStatus !== 'failed' ?\n            <InventoryTable\n                ref={inventory}\n                items={((systemsFetchStatus !== 'pending' && systems && systems.data) || []).map((system) => ({\n                    ...system,\n                    id: system.system_uuid\n                }))}\n                isFullView\n                sortBy={calculateSort()}\n                onSort={onSort}\n                hasCheckbox={false}\n                page={filters.offset / filters.limit + 1}\n                total={results}\n                isLoaded={systemsFetchStatus !== 'pending'}\n                perPage={Number(filters.limit)}\n                onRefresh={handleRefresh}\n                filterConfig={{ items: filterConfigItems }}\n                activeFiltersConfig={activeFiltersConfig}\n                exportConfig={{\n                    onSelect: (_e, fileType) => downloadReport('systems', fileType, urlBuilder(filters, selectedTags)),\n                    extraItems: [<li key='download-pd' role=\"menuitem\">\n                        <SystemsPdf filters={{ ...filterFetchBuilder(filters) }} selectedTags={selectedTags}\n                            systemsCount={systems && systems.meta && systems.meta.count} />\n                    </li>]\n                }}\n            />\n            : systemsFetchStatus === 'failed' && (<Failed message={intl.formatMessage(messages.systemTableFetchError)} />)\n        : <Loading />;\n};\n\nSystemsTable.propTypes = {\n    fetchSystems: PropTypes.func,\n    systemsFetchStatus: PropTypes.string,\n    systems: PropTypes.object,\n    addNotification: PropTypes.func,\n    intl: PropTypes.any,\n    filters: PropTypes.object,\n    setFilters: PropTypes.func,\n    selectedTags: PropTypes.array,\n    workloads: PropTypes.object,\n    SID: PropTypes.object\n};\n\nconst mapStateToProps = ({ AdvisorStore }) => ({\n    systems: AdvisorStore.systems,\n    systemsFetchStatus: AdvisorStore.systemsFetchStatus,\n    filters: AdvisorStore.filtersSystems,\n    selectedTags: AdvisorStore.selectedTags,\n    workloads: AdvisorStore.workloads,\n    SID: AdvisorStore.SID\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchSystems: (url) => dispatch(AppActions.fetchSystems(url)),\n    addNotification: data => dispatch(addNotification(data)),\n    setFilters: (filters) => dispatch(AppActions.setFiltersSystems(filters))\n});\n\nexport default injectIntl(routerParams(connect(mapStateToProps, mapDispatchToProps)(SystemsTable)));\n"],"sourceRoot":""}